
CUDoom_2.elf:     file format elf32-littlenios2
CUDoom_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0007ed64 memsz 0x0007ed64 flags r-x
    LOAD off    0x0007fd84 vaddr 0x0087ed84 paddr 0x008807b8 align 2**12
         filesz 0x00001a34 memsz 0x00001a34 flags rw-
    LOAD off    0x000821ec vaddr 0x008821ec paddr 0x008821ec align 2**12
         filesz 0x00000000 memsz 0x000116ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000068ac  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00078324  00806a60  00806a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a34  0087ed84  008807b8  0007fd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000116ac  008821ec  008821ec  000821ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000817b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000818  00000000  00000000  000817e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000bbd  00000000  00000000  00081ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d7f4  00000000  00000000  00082bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003f63  00000000  00000000  000903a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a671  00000000  00000000  0009430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d84  00000000  00000000  0009e980  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012de  00000000  00000000  0009f704  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003598  00000000  00000000  000a09e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000a3f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000290  00000000  00000000  000a3fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a62b6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a62b9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000a62be  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000a62bf  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000a62ca  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  000a62d5  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  000a62e0  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000022  00000000  00000000  000a62e8  2**0
                  CONTENTS, READONLY
 25 .jdi          000040c8  00000000  00000000  000a630a  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002f2fd  00000000  00000000  000aa3d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00806a60 l    d  .rodata	00000000 .rodata
0087ed84 l    d  .rwdata	00000000 .rwdata
008821ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0087eae0 l     O .rodata	00000108 two_over_pi
0087ea60 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0087ebe8 l     O .rodata	00000010 init_jk
0087ebf8 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
008033f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00804024 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0080481c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0087f184 l     O .rwdata	00001060 jtag_uart_0
0080496c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00804bac l     F .text	00000228 altera_avalon_jtag_uart_irq
00804dd4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008056a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080571c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008057fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805c20 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00805d5c l     F .text	000000dc alt_file_locked
00805fc0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0088038c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00806848 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008069fc l     F .text	00000040 alt_sim_halt
00804888 g     F .text	0000006c alt_main
00893608 g     O .bss	00000100 alt_irq
00802fb4 g     F .text	00000018 fabs
008807b8 g       *ABS*	00000000 __flash_rwdata_start
00803cbc g     F .text	00000088 __eqdf2
00882208 g     O .bss	00004000 dirsine
00800c58 g     F .text	000000f8 DrawTexture
00806a60 g     O .rodata	00078000 sky
00803d44 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00882204 g     O .bss	00000004 errno
00802fcc g     F .text	00000224 floor
008821f0 g     O .bss	00000004 alt_argv
0088878c g       *ABS*	00000000 _gp
0088020c g     O .rwdata	00000180 alt_fd_list
008010cc g     F .text	00000828 __ieee754_rem_pio2
00806244 g     F .text	00000094 alt_find_dev
00806600 g     F .text	000000a0 memcpy
0087ed84 g     O .rwdata	00000400 worldMap
00803e54 g     F .text	000000f8 __floatsidf
00805ce4 g     F .text	00000078 alt_io_redirect
00806a60 g       *ABS*	00000000 __DTOR_END__
00800bd4 g     F .text	00000028 intToDouble
00806224 g     F .text	00000020 altera_nios2_irq_init
00804fec g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804160 g     F .text	00000008 __udivsi3
008018f4 g     F .text	0000052c __kernel_cos
008064b0 g     F .text	00000090 alt_icache_flush
0088079c g     O .rwdata	00000004 alt_max_fd
0080459c g     F .text	00000138 __unpack_d
00802c9c g     F .text	00000318 __kernel_sin
00803884 g     F .text	00000074 __adddf3
008807b4 g     O .rwdata	00000004 _global_impure_ptr
00893898 g       *ABS*	00000000 __bss_end
00805b28 g     F .text	000000f8 alt_iic_isr_register
00806118 g     F .text	0000010c alt_tick
00805ae0 g     F .text	00000048 alt_ic_irq_enabled
00806080 g     F .text	00000098 alt_alarm_stop
008821f8 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
008801e4 g     O .rwdata	00000028 alt_dev_null
00801e20 g     F .text	00000e7c __kernel_rem_pio2
00805700 g     F .text	0000001c alt_dcache_flush_all
00803f4c g     F .text	000000d8 __fixdfsi
008807b8 g       *ABS*	00000000 __ram_rwdata_end
00886208 g     O .bss	00004000 sine
00880794 g     O .rwdata	00000008 alt_dev_list
0087ed84 g       *ABS*	00000000 __ram_rodata_end
00804168 g     F .text	00000008 __umodsi3
00893898 g       *ABS*	00000000 end
00804aec g     F .text	000000c0 altera_avalon_jtag_uart_init
00806a5c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804208 g     F .text	00000080 __clzsi2
00805210 g     F .text	00000240 altera_avalon_jtag_uart_write
00800df8 g     F .text	00000168 cos
0080684c g     F .text	000001b0 __call_exitprocs
008001b4 g     F .text	0000003c _start
008821fc g     O .bss	00000004 _alt_tick_rate
00800f60 g     F .text	0000016c sin
00882200 g     O .bss	00000004 _alt_nticks
00804928 g     F .text	00000044 alt_sys_init
00806714 g     F .text	00000134 __register_exitproc
00804e84 g     F .text	00000074 altera_avalon_jtag_uart_close
0088a208 g     O .bss	00004000 cosine
0087ed84 g       *ABS*	00000000 __ram_rwdata_start
00806a60 g       *ABS*	00000000 __ram_rodata_start
008049a4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008063f8 g     F .text	000000b8 alt_get_fd
008046d4 g     F .text	000000c8 __fpcmp_parts_d
0080658c g     F .text	00000074 memcmp
00804a54 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00893898 g       *ABS*	00000000 __alt_stack_base
00804a9c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008038f8 g     F .text	000003c4 __muldf3
008062d8 g     F .text	00000120 alt_find_file
00805748 g     F .text	000000b4 alt_dev_llist_insert
008821ec g       *ABS*	00000000 __bss_start
008001f0 g     F .text	000009a8 main
008821f4 g     O .bss	00000004 alt_envp
008049fc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00893708 g     O .bss	00000190 _atexit0
008807a0 g     O .rwdata	00000004 alt_errno
008040a0 g     F .text	00000060 __divsi3
0087ec38 g     O .rodata	00000014 __thenan_df
00806a60 g       *ABS*	00000000 __CTOR_END__
00806a60 g       *ABS*	00000000 __flash_rodata_start
00806a60 g       *ABS*	00000000 __DTOR_LIST__
008033d0 g     F .text	00000024 copysign
008048f4 g     F .text	00000034 alt_irq_init
00806020 g     F .text	00000060 alt_release_fd
0087ec4c g     O .rodata	00000100 __clz_tab
00806540 g     F .text	00000014 atexit
008807b0 g     O .rwdata	00000004 _impure_ptr
008821ec g     O .bss	00000004 alt_argc
008031f0 g     F .text	000001e0 scalbn
008058c0 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800b98 g     F .text	0000003c absVal
0088078c g     O .rwdata	00000008 alt_fs_list
00800bfc g     F .text	0000005c doubleToInt
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805954 g     F .text	00000050 alt_ic_isr_register
008807b8 g       *ABS*	00000000 _edata
00893898 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00804ef8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0088e208 g     O .bss	00000a00 stoparray
00805a40 g     F .text	000000a0 alt_ic_irq_disable
00806554 g     F .text	00000038 exit
00804100 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806a3c g     F .text	00000020 _exit
00805450 g     F .text	00000154 alt_alarm_start
00804170 g     F .text	00000098 __muldi3
008066a0 g     F .text	00000074 strlen
00805e38 g     F .text	00000188 open
00803dcc g     F .text	00000088 __gedf2
00805924 g     F .text	00000030 alt_icache_flush_all
008807a4 g     O .rwdata	00000004 alt_priority_mask
008059a4 g     F .text	0000009c alt_ic_irq_enable
00803804 g     F .text	00000080 __subdf3
00800d50 g     F .text	000000a8 DrawAccelerate
008807a8 g     O .rwdata	00000008 alt_alarm_list
0080585c g     F .text	00000064 _do_ctors
0088ec08 g     O .bss	00000a00 startarray
008055a4 g     F .text	000000fc close
0080479c g     F .text	00000080 alt_load
00804288 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0088f608 g     O .bss	00004000 dircosine



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00808014 	movui	r2,512
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02274 	movhi	r3,137
  800134:	18cd8204 	addi	r3,r3,13832
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02274 	movhi	r3,137
  80014c:	18cd8204 	addi	r3,r3,13832
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802234 	movhi	gp,136
    ori gp, gp, %lo(_gp)
  8001c0:	d6a1e314 	ori	gp,gp,34700
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802234 	movhi	r2,136
    ori r2, r2, %lo(__bss_start)
  8001c8:	10887b14 	ori	r2,r2,8684

    movhi r3, %hi(__bss_end)
  8001cc:	00c02274 	movhi	r3,137
    ori r3, r3, %lo(__bss_end)
  8001d0:	18ce2614 	ori	r3,r3,14488

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080479c0 	call	80479c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	08048880 	call	804888 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <main>:
int cosine[lookupLength];
//int inv_sine[lookupLength];
//int inv_cosine[lookupLength];

int main()
{
  8001f0:	deffe104 	addi	sp,sp,-124
  8001f4:	dfc01e15 	stw	ra,120(sp)
  8001f8:	df001d15 	stw	fp,116(sp)
  8001fc:	dc001c15 	stw	r16,112(sp)
  800200:	df001c04 	addi	fp,sp,112

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800204:	00804234 	movhi	r2,264
  800208:	10840004 	addi	r2,r2,4096
  80020c:	10000035 	stwio	zero,0(r2)
	int dir = 0;
  800210:	e03ffe15 	stw	zero,-8(fp)
	int posX = doubleToInt(21.5), posY = doubleToInt(11.5);  //x and y start position
  800214:	0009883a 	mov	r4,zero
  800218:	01500db4 	movhi	r5,16438
  80021c:	29600004 	addi	r5,r5,-32768
  800220:	0800bfc0 	call	800bfc <doubleToInt>
  800224:	e0bffd15 	stw	r2,-12(fp)
  800228:	0009883a 	mov	r4,zero
  80022c:	015009f4 	movhi	r5,16423
  800230:	0800bfc0 	call	800bfc <doubleToInt>
  800234:	e0bffc15 	stw	r2,-16(fp)
 // int posX = 22, posY = 11;  //x and y start position
  int x =0;
  800238:	e03ffb15 	stw	zero,-20(fp)

  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);
  80023c:	00804234 	movhi	r2,264
  800240:	10bfff84 	addi	r2,r2,-2
  800244:	1000002d 	sthio	zero,0(r2)

  for(p = 0; p < 480; p++){
  800248:	e03ffa15 	stw	zero,-24(fp)
  80024c:	00002d06 	br	800304 <main+0x114>
	  for(q = 0; q < 512; q++)
  800250:	e03ff915 	stw	zero,-28(fp)
  800254:	00002506 	br	8002ec <main+0xfc>
	  {

		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));
  800258:	e0bffa17 	ldw	r2,-24(fp)
  80025c:	1006927a 	slli	r3,r2,9
  800260:	e0bff917 	ldw	r2,-28(fp)
  800264:	1885883a 	add	r2,r3,r2
  800268:	1085883a 	add	r2,r2,r2
  80026c:	1007883a 	mov	r3,r2
  800270:	00804034 	movhi	r2,256
  800274:	1889883a 	add	r4,r3,r2
  800278:	e0bffa17 	ldw	r2,-24(fp)
  80027c:	1006927a 	slli	r3,r2,9
  800280:	e0bff917 	ldw	r2,-28(fp)
  800284:	1885883a 	add	r2,r3,r2
  800288:	1085883a 	add	r2,r2,r2
  80028c:	10c00044 	addi	r3,r2,1
  800290:	00802034 	movhi	r2,128
  800294:	109a9804 	addi	r2,r2,27232
  800298:	10c5883a 	add	r2,r2,r3
  80029c:	10800003 	ldbu	r2,0(r2)
  8002a0:	10803fcc 	andi	r2,r2,255
  8002a4:	100a923a 	slli	r5,r2,8
  8002a8:	e0bffa17 	ldw	r2,-24(fp)
  8002ac:	1006927a 	slli	r3,r2,9
  8002b0:	e0bff917 	ldw	r2,-28(fp)
  8002b4:	1885883a 	add	r2,r3,r2
  8002b8:	1085883a 	add	r2,r2,r2
  8002bc:	1007883a 	mov	r3,r2
  8002c0:	00802034 	movhi	r2,128
  8002c4:	109a9804 	addi	r2,r2,27232
  8002c8:	10c5883a 	add	r2,r2,r3
  8002cc:	10800003 	ldbu	r2,0(r2)
  8002d0:	10803fcc 	andi	r2,r2,255
  8002d4:	2887883a 	add	r3,r5,r2
  8002d8:	2005883a 	mov	r2,r4
  8002dc:	10c0002d 	sthio	r3,0(r2)


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
	  for(q = 0; q < 512; q++)
  8002e0:	e0bff917 	ldw	r2,-28(fp)
  8002e4:	10800044 	addi	r2,r2,1
  8002e8:	e0bff915 	stw	r2,-28(fp)
  8002ec:	e0bff917 	ldw	r2,-28(fp)
  8002f0:	10808010 	cmplti	r2,r2,512
  8002f4:	103fd81e 	bne	r2,zero,800258 <main+0x68>
  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
  8002f8:	e0bffa17 	ldw	r2,-24(fp)
  8002fc:	10800044 	addi	r2,r2,1
  800300:	e0bffa15 	stw	r2,-24(fp)
  800304:	e0bffa17 	ldw	r2,-24(fp)
  800308:	10807810 	cmplti	r2,r2,480
  80030c:	103fd01e 	bne	r2,zero,800250 <main+0x60>
		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));

	  }
  }

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  800310:	00c04234 	movhi	r3,264
  800314:	18ffff84 	addi	r3,r3,-2
  800318:	008003c4 	movi	r2,15
  80031c:	1880002d 	sthio	r2,0(r3)
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  800320:	e03ffb15 	stw	zero,-20(fp)
  800324:	00009906 	br	80058c <main+0x39c>
	{
			//calculate ray position and direction

		sine_temp = sin(x*RAD + HALF_RAD);
  800328:	e13ffb17 	ldw	r4,-20(fp)
  80032c:	0803e540 	call	803e54 <__floatsidf>
  800330:	100b883a 	mov	r5,r2
  800334:	180d883a 	mov	r6,r3
  800338:	2809883a 	mov	r4,r5
  80033c:	300b883a 	mov	r5,r6
  800340:	01951134 	movhi	r6,21572
  800344:	318b1684 	addi	r6,r6,11354
  800348:	01cfd674 	movhi	r7,16217
  80034c:	39c87ec4 	addi	r7,r7,8699
  800350:	08038f80 	call	8038f8 <__muldf3>
  800354:	1009883a 	mov	r4,r2
  800358:	180b883a 	mov	r5,r3
  80035c:	2005883a 	mov	r2,r4
  800360:	2807883a 	mov	r3,r5
  800364:	1009883a 	mov	r4,r2
  800368:	180b883a 	mov	r5,r3
  80036c:	01951134 	movhi	r6,21572
  800370:	318b1684 	addi	r6,r6,11354
  800374:	01cfd274 	movhi	r7,16201
  800378:	39c87ec4 	addi	r7,r7,8699
  80037c:	08038840 	call	803884 <__adddf3>
  800380:	1009883a 	mov	r4,r2
  800384:	180b883a 	mov	r5,r3
  800388:	2005883a 	mov	r2,r4
  80038c:	2807883a 	mov	r3,r5
  800390:	1009883a 	mov	r4,r2
  800394:	180b883a 	mov	r5,r3
  800398:	0800f600 	call	800f60 <sin>
  80039c:	1009883a 	mov	r4,r2
  8003a0:	180b883a 	mov	r5,r3
  8003a4:	e13ff715 	stw	r4,-36(fp)
  8003a8:	e17ff815 	stw	r5,-32(fp)
		cosine_temp = cos(x*RAD + HALF_RAD);
  8003ac:	e13ffb17 	ldw	r4,-20(fp)
  8003b0:	0803e540 	call	803e54 <__floatsidf>
  8003b4:	100b883a 	mov	r5,r2
  8003b8:	180d883a 	mov	r6,r3
  8003bc:	2809883a 	mov	r4,r5
  8003c0:	300b883a 	mov	r5,r6
  8003c4:	01951134 	movhi	r6,21572
  8003c8:	318b1684 	addi	r6,r6,11354
  8003cc:	01cfd674 	movhi	r7,16217
  8003d0:	39c87ec4 	addi	r7,r7,8699
  8003d4:	08038f80 	call	8038f8 <__muldf3>
  8003d8:	1009883a 	mov	r4,r2
  8003dc:	180b883a 	mov	r5,r3
  8003e0:	2005883a 	mov	r2,r4
  8003e4:	2807883a 	mov	r3,r5
  8003e8:	1009883a 	mov	r4,r2
  8003ec:	180b883a 	mov	r5,r3
  8003f0:	01951134 	movhi	r6,21572
  8003f4:	318b1684 	addi	r6,r6,11354
  8003f8:	01cfd274 	movhi	r7,16201
  8003fc:	39c87ec4 	addi	r7,r7,8699
  800400:	08038840 	call	803884 <__adddf3>
  800404:	1009883a 	mov	r4,r2
  800408:	180b883a 	mov	r5,r3
  80040c:	2005883a 	mov	r2,r4
  800410:	2807883a 	mov	r3,r5
  800414:	1009883a 	mov	r4,r2
  800418:	180b883a 	mov	r5,r3
  80041c:	0800df80 	call	800df8 <cos>
  800420:	1009883a 	mov	r4,r2
  800424:	180b883a 	mov	r5,r3
  800428:	e13ff515 	stw	r4,-44(fp)
  80042c:	e17ff615 	stw	r5,-40(fp)

		dirsine[x] = doubleToInt(sin(x*RAD));
  800430:	e43ffb17 	ldw	r16,-20(fp)
  800434:	e13ffb17 	ldw	r4,-20(fp)
  800438:	0803e540 	call	803e54 <__floatsidf>
  80043c:	100b883a 	mov	r5,r2
  800440:	180d883a 	mov	r6,r3
  800444:	2809883a 	mov	r4,r5
  800448:	300b883a 	mov	r5,r6
  80044c:	01951134 	movhi	r6,21572
  800450:	318b1684 	addi	r6,r6,11354
  800454:	01cfd674 	movhi	r7,16217
  800458:	39c87ec4 	addi	r7,r7,8699
  80045c:	08038f80 	call	8038f8 <__muldf3>
  800460:	1009883a 	mov	r4,r2
  800464:	180b883a 	mov	r5,r3
  800468:	2005883a 	mov	r2,r4
  80046c:	2807883a 	mov	r3,r5
  800470:	1009883a 	mov	r4,r2
  800474:	180b883a 	mov	r5,r3
  800478:	0800f600 	call	800f60 <sin>
  80047c:	100b883a 	mov	r5,r2
  800480:	180d883a 	mov	r6,r3
  800484:	2809883a 	mov	r4,r5
  800488:	300b883a 	mov	r5,r6
  80048c:	0800bfc0 	call	800bfc <doubleToInt>
  800490:	1009883a 	mov	r4,r2
  800494:	00c02234 	movhi	r3,136
  800498:	18c88204 	addi	r3,r3,8712
  80049c:	8405883a 	add	r2,r16,r16
  8004a0:	1085883a 	add	r2,r2,r2
  8004a4:	10c5883a 	add	r2,r2,r3
  8004a8:	11000015 	stw	r4,0(r2)
		dircosine[x] = doubleToInt(cos(x*RAD));
  8004ac:	e43ffb17 	ldw	r16,-20(fp)
  8004b0:	e13ffb17 	ldw	r4,-20(fp)
  8004b4:	0803e540 	call	803e54 <__floatsidf>
  8004b8:	100b883a 	mov	r5,r2
  8004bc:	180d883a 	mov	r6,r3
  8004c0:	2809883a 	mov	r4,r5
  8004c4:	300b883a 	mov	r5,r6
  8004c8:	01951134 	movhi	r6,21572
  8004cc:	318b1684 	addi	r6,r6,11354
  8004d0:	01cfd674 	movhi	r7,16217
  8004d4:	39c87ec4 	addi	r7,r7,8699
  8004d8:	08038f80 	call	8038f8 <__muldf3>
  8004dc:	1009883a 	mov	r4,r2
  8004e0:	180b883a 	mov	r5,r3
  8004e4:	2005883a 	mov	r2,r4
  8004e8:	2807883a 	mov	r3,r5
  8004ec:	1009883a 	mov	r4,r2
  8004f0:	180b883a 	mov	r5,r3
  8004f4:	0800df80 	call	800df8 <cos>
  8004f8:	100b883a 	mov	r5,r2
  8004fc:	180d883a 	mov	r6,r3
  800500:	2809883a 	mov	r4,r5
  800504:	300b883a 	mov	r5,r6
  800508:	0800bfc0 	call	800bfc <doubleToInt>
  80050c:	1009883a 	mov	r4,r2
  800510:	00c02274 	movhi	r3,137
  800514:	18fd8204 	addi	r3,r3,-2552
  800518:	8405883a 	add	r2,r16,r16
  80051c:	1085883a 	add	r2,r2,r2
  800520:	10c5883a 	add	r2,r2,r3
  800524:	11000015 	stw	r4,0(r2)
		sine[x] = doubleToInt(sine_temp);
  800528:	e43ffb17 	ldw	r16,-20(fp)
  80052c:	e13ff717 	ldw	r4,-36(fp)
  800530:	e17ff817 	ldw	r5,-32(fp)
  800534:	0800bfc0 	call	800bfc <doubleToInt>
  800538:	1009883a 	mov	r4,r2
  80053c:	00c02234 	movhi	r3,136
  800540:	18d88204 	addi	r3,r3,25096
  800544:	8405883a 	add	r2,r16,r16
  800548:	1085883a 	add	r2,r2,r2
  80054c:	10c5883a 	add	r2,r2,r3
  800550:	11000015 	stw	r4,0(r2)
		cosine[x] = doubleToInt(cosine_temp);
  800554:	e43ffb17 	ldw	r16,-20(fp)
  800558:	e13ff517 	ldw	r4,-44(fp)
  80055c:	e17ff617 	ldw	r5,-40(fp)
  800560:	0800bfc0 	call	800bfc <doubleToInt>
  800564:	1009883a 	mov	r4,r2
  800568:	00c02274 	movhi	r3,137
  80056c:	18e88204 	addi	r3,r3,-24056
  800570:	8405883a 	add	r2,r16,r16
  800574:	1085883a 	add	r2,r2,r2
  800578:	10c5883a 	add	r2,r2,r3
  80057c:	11000015 	stw	r4,0(r2)

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  800580:	e0bffb17 	ldw	r2,-20(fp)
  800584:	10800044 	addi	r2,r2,1
  800588:	e0bffb15 	stw	r2,-20(fp)
  80058c:	e0bffb17 	ldw	r2,-20(fp)
  800590:	10840010 	cmplti	r2,r2,4096
  800594:	103f641e 	bne	r2,zero,800328 <main+0x138>
  int rayDirY;
  int count_step;

  int k;
  int k2;
  int forward = 0;
  800598:	e03fec15 	stw	zero,-80(fp)
  int backward = 0;
  80059c:	e03feb15 	stw	zero,-84(fp)
  int left = 0;
  8005a0:	e03fea15 	stw	zero,-88(fp)
  int right = 0;
  8005a4:	e03fe915 	stw	zero,-92(fp)
  //char key[] = { 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d',
//		  'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d'};

  unsigned char code = 0;
  8005a8:	e03fe805 	stb	zero,-96(fp)
  //char key[] = {'d'};
  k2 = 0;
  8005ac:	e03fed15 	stw	zero,-76(fp)
  //start the main loop
  //for (k2 = 0; k2 < sizeof(key); k2++)

  int hardwareData = 0;
  8005b0:	e03fe715 	stw	zero,-100(fp)
  8005b4:	00000006 	br	8005b8 <main+0x3c8>

  while(1)
  {

	  code = 0;
  8005b8:	e03fe805 	stb	zero,-96(fp)
	  //code = 'k';

	  //hardwareData = IORD_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1);
	  //printf("%d\n", hardwareData >> 4);

	  code = IORD_8DIRECT(DE2_PS2_1_BASE, 1);
  8005bc:	00800044 	movi	r2,1
  8005c0:	10800023 	ldbuio	r2,0(r2)
  8005c4:	e0bfe805 	stb	r2,-96(fp)

	  switch(code)
  8005c8:	e0bfe803 	ldbu	r2,-96(fp)
  8005cc:	10bff5c4 	addi	r2,r2,-41
  8005d0:	e0bfff15 	stw	r2,-4(fp)
  8005d4:	e0ffff17 	ldw	r3,-4(fp)
  8005d8:	18801368 	cmpgeui	r2,r3,77
  8005dc:	1000721e 	bne	r2,zero,8007a8 <main+0x5b8>
  8005e0:	e13fff17 	ldw	r4,-4(fp)
  8005e4:	e13fff17 	ldw	r4,-4(fp)
  8005e8:	2105883a 	add	r2,r4,r4
  8005ec:	1087883a 	add	r3,r2,r2
  8005f0:	00802034 	movhi	r2,128
  8005f4:	10818104 	addi	r2,r2,1540
  8005f8:	1885883a 	add	r2,r3,r2
  8005fc:	10800017 	ldw	r2,0(r2)
  800600:	1000683a 	jmp	r2
  800604:	00800798 	cmpnei	r2,zero,30
  800608:	008007a8 	cmpgeui	r2,zero,30
  80060c:	008007a8 	cmpgeui	r2,zero,30
  800610:	008007a8 	cmpgeui	r2,zero,30
  800614:	008007a8 	cmpgeui	r2,zero,30
  800618:	008007a8 	cmpgeui	r2,zero,30
  80061c:	008007a8 	cmpgeui	r2,zero,30
  800620:	008007a8 	cmpgeui	r2,zero,30
  800624:	008007a8 	cmpgeui	r2,zero,30
  800628:	008007a8 	cmpgeui	r2,zero,30
  80062c:	008007a8 	cmpgeui	r2,zero,30
  800630:	008007a8 	cmpgeui	r2,zero,30
  800634:	008007a8 	cmpgeui	r2,zero,30
  800638:	008007a8 	cmpgeui	r2,zero,30
  80063c:	008007a8 	cmpgeui	r2,zero,30
  800640:	008007a8 	cmpgeui	r2,zero,30
  800644:	008007a8 	cmpgeui	r2,zero,30
  800648:	008007a8 	cmpgeui	r2,zero,30
  80064c:	008007a8 	cmpgeui	r2,zero,30
  800650:	008007a8 	cmpgeui	r2,zero,30
  800654:	008007a8 	cmpgeui	r2,zero,30
  800658:	008007a8 	cmpgeui	r2,zero,30
  80065c:	008007a8 	cmpgeui	r2,zero,30
  800660:	008007a8 	cmpgeui	r2,zero,30
  800664:	008007a8 	cmpgeui	r2,zero,30
  800668:	008007a8 	cmpgeui	r2,zero,30
  80066c:	008007a8 	cmpgeui	r2,zero,30
  800670:	008007a8 	cmpgeui	r2,zero,30
  800674:	008007a8 	cmpgeui	r2,zero,30
  800678:	008007a8 	cmpgeui	r2,zero,30
  80067c:	008007a8 	cmpgeui	r2,zero,30
  800680:	008007a8 	cmpgeui	r2,zero,30
  800684:	008007a8 	cmpgeui	r2,zero,30
  800688:	008007a8 	cmpgeui	r2,zero,30
  80068c:	00800790 	cmplti	r2,zero,30
  800690:	008007a8 	cmpgeui	r2,zero,30
  800694:	008007a8 	cmpgeui	r2,zero,30
  800698:	008007a8 	cmpgeui	r2,zero,30
  80069c:	008007a8 	cmpgeui	r2,zero,30
  8006a0:	008007a8 	cmpgeui	r2,zero,30
  8006a4:	008007a8 	cmpgeui	r2,zero,30
  8006a8:	00800780 	call	80078 <__alt_mem_sdram_0-0x77ff88>
  8006ac:	008007a8 	cmpgeui	r2,zero,30
  8006b0:	00800788 	cmpgei	r2,zero,30
  8006b4:	00800778 	rdprs	r2,zero,29
  8006b8:	008007a8 	cmpgeui	r2,zero,30
  8006bc:	008007a8 	cmpgeui	r2,zero,30
  8006c0:	008007a8 	cmpgeui	r2,zero,30
  8006c4:	008007a8 	cmpgeui	r2,zero,30
  8006c8:	008007a8 	cmpgeui	r2,zero,30
  8006cc:	008007a8 	cmpgeui	r2,zero,30
  8006d0:	008007a8 	cmpgeui	r2,zero,30
  8006d4:	008007a8 	cmpgeui	r2,zero,30
  8006d8:	008007a8 	cmpgeui	r2,zero,30
  8006dc:	008007a8 	cmpgeui	r2,zero,30
  8006e0:	008007a8 	cmpgeui	r2,zero,30
  8006e4:	008007a8 	cmpgeui	r2,zero,30
  8006e8:	008007a8 	cmpgeui	r2,zero,30
  8006ec:	008007a8 	cmpgeui	r2,zero,30
  8006f0:	008007a8 	cmpgeui	r2,zero,30
  8006f4:	008007a8 	cmpgeui	r2,zero,30
  8006f8:	008007a8 	cmpgeui	r2,zero,30
  8006fc:	008007a8 	cmpgeui	r2,zero,30
  800700:	008007a8 	cmpgeui	r2,zero,30
  800704:	008007a8 	cmpgeui	r2,zero,30
  800708:	008007a8 	cmpgeui	r2,zero,30
  80070c:	00800768 	cmpgeui	r2,zero,29
  800710:	008007a8 	cmpgeui	r2,zero,30
  800714:	008007a8 	cmpgeui	r2,zero,30
  800718:	008007a8 	cmpgeui	r2,zero,30
  80071c:	008007a8 	cmpgeui	r2,zero,30
  800720:	008007a8 	cmpgeui	r2,zero,30
  800724:	008007a8 	cmpgeui	r2,zero,30
  800728:	00800748 	cmpgei	r2,zero,29
  80072c:	008007a8 	cmpgeui	r2,zero,30
  800730:	00800758 	cmpnei	r2,zero,29
  800734:	00800738 	rdprs	r2,zero,28
	  {
	  	  case 'u':
	  		  forward = 1;
  800738:	00800044 	movi	r2,1
  80073c:	e0bfec15 	stw	r2,-80(fp)
	  		  backward = 0;
  800740:	e03feb15 	stw	zero,-84(fp)
	  		  break;
  800744:	00001806 	br	8007a8 <main+0x5b8>
	  	  case 'r':
	  		  forward = 0;
  800748:	e03fec15 	stw	zero,-80(fp)
	  		  backward = 1;
  80074c:	00800044 	movi	r2,1
  800750:	e0bfeb15 	stw	r2,-84(fp)
	  		  break;
  800754:	00001406 	br	8007a8 <main+0x5b8>
	  	  case 't':
	  		  right = 1;
  800758:	00800044 	movi	r2,1
  80075c:	e0bfe915 	stw	r2,-92(fp)
	  		  left = 0;
  800760:	e03fea15 	stw	zero,-88(fp)
	  		  break;
  800764:	00001006 	br	8007a8 <main+0x5b8>
	  	  case 'k':
	  		  left = 1;
  800768:	00800044 	movi	r2,1
  80076c:	e0bfea15 	stw	r2,-88(fp)
	  		  right = 0;
  800770:	e03fe915 	stw	zero,-92(fp)
	  		  break;
  800774:	00000c06 	br	8007a8 <main+0x5b8>
	  	  case 'U':
	  		  forward = 0;
  800778:	e03fec15 	stw	zero,-80(fp)
	  		  break;
  80077c:	00000a06 	br	8007a8 <main+0x5b8>
	  	  case 'R':
	  		  backward = 0;
  800780:	e03feb15 	stw	zero,-84(fp)
	  		  break;
  800784:	00000806 	br	8007a8 <main+0x5b8>
	  	  case 'T':
	  		  right = 0;
  800788:	e03fe915 	stw	zero,-92(fp)
	  		  break;
  80078c:	00000606 	br	8007a8 <main+0x5b8>
	  	  case 'K':
	  		  left = 0;
  800790:	e03fea15 	stw	zero,-88(fp)
	  		  break;
  800794:	00000406 	br	8007a8 <main+0x5b8>

	  	  case ')':
	  		forward = 0;
  800798:	e03fec15 	stw	zero,-80(fp)
	  		backward = 0;
  80079c:	e03feb15 	stw	zero,-84(fp)
	  		right = 0;
  8007a0:	e03fe915 	stw	zero,-92(fp)
	  		left = 0;
  8007a4:	e03fea15 	stw	zero,-88(fp)
	  		break;

	  }

     x = 0;
  8007a8:	e03ffb15 	stw	zero,-20(fp)
    for(k = -halfScreenWidth; k < halfScreenWidth; k++)
  8007ac:	00bfb004 	movi	r2,-320
  8007b0:	e0bfee15 	stw	r2,-72(fp)
  8007b4:	00005e06 	br	800930 <main+0x740>
    {
        angle = dir + k;
  8007b8:	e0fffe17 	ldw	r3,-8(fp)
  8007bc:	e0bfee17 	ldw	r2,-72(fp)
  8007c0:	1885883a 	add	r2,r3,r2
  8007c4:	e0bff415 	stw	r2,-48(fp)

        if ( angle < 0)
  8007c8:	e0bff417 	ldw	r2,-48(fp)
  8007cc:	1004403a 	cmpge	r2,r2,zero
  8007d0:	1000031e 	bne	r2,zero,8007e0 <main+0x5f0>
                angle += lookupLength;
  8007d4:	e0bff417 	ldw	r2,-48(fp)
  8007d8:	10840004 	addi	r2,r2,4096
  8007dc:	e0bff415 	stw	r2,-48(fp)

        if (angle >= lookupLength)
  8007e0:	e0bff417 	ldw	r2,-48(fp)
  8007e4:	10840010 	cmplti	r2,r2,4096
  8007e8:	1000031e 	bne	r2,zero,8007f8 <main+0x608>
                angle -= lookupLength;
  8007ec:	e0bff417 	ldw	r2,-48(fp)
  8007f0:	10bc0004 	addi	r2,r2,-4096
  8007f4:	e0bff415 	stw	r2,-48(fp)

        fish_angle = k;
  8007f8:	e0bfee17 	ldw	r2,-72(fp)
  8007fc:	e0bff315 	stw	r2,-52(fp)

        if ( fish_angle < 0)
  800800:	e0bff317 	ldw	r2,-52(fp)
  800804:	1004403a 	cmpge	r2,r2,zero
  800808:	1000031e 	bne	r2,zero,800818 <main+0x628>
            fish_angle += lookupLength;
  80080c:	e0bff317 	ldw	r2,-52(fp)
  800810:	10840004 	addi	r2,r2,4096
  800814:	e0bff315 	stw	r2,-52(fp)

        if (fish_angle >= lookupLength)
  800818:	e0bff317 	ldw	r2,-52(fp)
  80081c:	10840010 	cmplti	r2,r2,4096
  800820:	1000031e 	bne	r2,zero,800830 <main+0x640>
             fish_angle -= lookupLength;
  800824:	e0bff317 	ldw	r2,-52(fp)
  800828:	10bc0004 	addi	r2,r2,-4096
  80082c:	e0bff315 	stw	r2,-52(fp)


      //calculate ray position and direction
      //double cameraX = 2*x/double(w)-1; //x-coordinate in camera space
      rayDirX = cosine[angle]>>extensionFactor;
  800830:	e0bff417 	ldw	r2,-48(fp)
  800834:	00c02274 	movhi	r3,137
  800838:	18e88204 	addi	r3,r3,-24056
  80083c:	1085883a 	add	r2,r2,r2
  800840:	1085883a 	add	r2,r2,r2
  800844:	10c5883a 	add	r2,r2,r3
  800848:	10800017 	ldw	r2,0(r2)
  80084c:	1005d1ba 	srai	r2,r2,6
  800850:	e0bff115 	stw	r2,-60(fp)
      rayDirY = sine[angle]>>extensionFactor;
  800854:	e0bff417 	ldw	r2,-48(fp)
  800858:	00c02234 	movhi	r3,136
  80085c:	18d88204 	addi	r3,r3,25096
  800860:	1085883a 	add	r2,r2,r2
  800864:	1085883a 	add	r2,r2,r2
  800868:	10c5883a 	add	r2,r2,r3
  80086c:	10800017 	ldw	r2,0(r2)
  800870:	1005d1ba 	srai	r2,r2,6
  800874:	e0bff015 	stw	r2,-64(fp)
      count_step = cosine[fish_angle]>>extensionFactor;
  800878:	e0bff317 	ldw	r2,-52(fp)
  80087c:	00c02274 	movhi	r3,137
  800880:	18e88204 	addi	r3,r3,-24056
  800884:	1085883a 	add	r2,r2,r2
  800888:	1085883a 	add	r2,r2,r2
  80088c:	10c5883a 	add	r2,r2,r3
  800890:	10800017 	ldw	r2,0(r2)
  800894:	1005d1ba 	srai	r2,r2,6
  800898:	e0bfef15 	stw	r2,-68(fp)
//      count_step = (cosine[fish_angle]>>6) +(cosine[fish_angle]>>7);


 //     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
    //  printf("%d\n", hardwareData);
     DrawAccelerate(angle, posX, posY, count_step, rayDirX, rayDirY, x);
  80089c:	e0fffb17 	ldw	r3,-20(fp)
  8008a0:	e0bff117 	ldw	r2,-60(fp)
  8008a4:	d8800015 	stw	r2,0(sp)
  8008a8:	e0bff017 	ldw	r2,-64(fp)
  8008ac:	d8800115 	stw	r2,4(sp)
  8008b0:	d8c00215 	stw	r3,8(sp)
  8008b4:	e13ff417 	ldw	r4,-48(fp)
  8008b8:	e17ffd17 	ldw	r5,-12(fp)
  8008bc:	e1bffc17 	ldw	r6,-16(fp)
  8008c0:	e1ffef17 	ldw	r7,-68(fp)
  8008c4:	0800d500 	call	800d50 <DrawAccelerate>
     IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  8008c8:	00804234 	movhi	r2,264
  8008cc:	10840004 	addi	r2,r2,4096
  8008d0:	10000035 	stwio	zero,0(r2)

     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  8008d4:	00804234 	movhi	r2,264
  8008d8:	10840044 	addi	r2,r2,4097
  8008dc:	10800037 	ldwio	r2,0(r2)
  8008e0:	e0bfe715 	stw	r2,-100(fp)

	 while (!(hardwareData & 1)){
  8008e4:	00000406 	br	8008f8 <main+0x708>
		 hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  8008e8:	00804234 	movhi	r2,264
  8008ec:	10840044 	addi	r2,r2,4097
  8008f0:	10800037 	ldwio	r2,0(r2)
  8008f4:	e0bfe715 	stw	r2,-100(fp)
     DrawAccelerate(angle, posX, posY, count_step, rayDirX, rayDirY, x);
     IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);

     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);

	 while (!(hardwareData & 1)){
  8008f8:	e0bfe717 	ldw	r2,-100(fp)
  8008fc:	1080004c 	andi	r2,r2,1
  800900:	1005003a 	cmpeq	r2,r2,zero
  800904:	103ff81e 	bne	r2,zero,8008e8 <main+0x6f8>
	  }


      //IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);

      IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0xFFFFFFFF);
  800908:	00c04234 	movhi	r3,264
  80090c:	18c40004 	addi	r3,r3,4096
  800910:	00bfffc4 	movi	r2,-1
  800914:	18800035 	stwio	r2,0(r3)
      //draw the pixels of the stripe as a vertical line
      //DrawColumn(x, color, drawStart, drawEnd, side);
      //DrawColumn(x, color, lineHeight, side);
      //verLine(x, drawStart, drawEnd, color);

      x++;
  800918:	e0bffb17 	ldw	r2,-20(fp)
  80091c:	10800044 	addi	r2,r2,1
  800920:	e0bffb15 	stw	r2,-20(fp)
	  		break;

	  }

     x = 0;
    for(k = -halfScreenWidth; k < halfScreenWidth; k++)
  800924:	e0bfee17 	ldw	r2,-72(fp)
  800928:	10800044 	addi	r2,r2,1
  80092c:	e0bfee15 	stw	r2,-72(fp)
  800930:	e0bfee17 	ldw	r2,-72(fp)
  800934:	10805010 	cmplti	r2,r2,320
  800938:	103f9f1e 	bne	r2,zero,8007b8 <main+0x5c8>
    }



    //move forward if no wall in front of you
    if (forward == 1)
  80093c:	e0bfec17 	ldw	r2,-80(fp)
  800940:	10800058 	cmpnei	r2,r2,1
  800944:	10003c1e 	bne	r2,zero,800a38 <main+0x848>
    {
        move = dircosine[dir]>>4;
  800948:	e0bffe17 	ldw	r2,-8(fp)
  80094c:	00c02274 	movhi	r3,137
  800950:	18fd8204 	addi	r3,r3,-2552
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	10c5883a 	add	r2,r2,r3
  800960:	10800017 	ldw	r2,0(r2)
  800964:	1005d13a 	srai	r2,r2,4
  800968:	e0bff215 	stw	r2,-56(fp)
        if(worldMap[(posX + move)>>posShift][posY>>posShift] == 0)
  80096c:	e0fffd17 	ldw	r3,-12(fp)
  800970:	e0bff217 	ldw	r2,-56(fp)
  800974:	1885883a 	add	r2,r3,r2
  800978:	1009d5ba 	srai	r4,r2,22
  80097c:	e0bffc17 	ldw	r2,-16(fp)
  800980:	100bd5ba 	srai	r5,r2,22
  800984:	00c02234 	movhi	r3,136
  800988:	18fb6104 	addi	r3,r3,-4732
  80098c:	2004917a 	slli	r2,r4,5
  800990:	10c5883a 	add	r2,r2,r3
  800994:	1145883a 	add	r2,r2,r5
  800998:	10800003 	ldbu	r2,0(r2)
  80099c:	10803fcc 	andi	r2,r2,255
  8009a0:	1080201c 	xori	r2,r2,128
  8009a4:	10bfe004 	addi	r2,r2,-128
  8009a8:	1004c03a 	cmpne	r2,r2,zero
  8009ac:	1000041e 	bne	r2,zero,8009c0 <main+0x7d0>
                posX += move;
  8009b0:	e0bffd17 	ldw	r2,-12(fp)
  8009b4:	e0fff217 	ldw	r3,-56(fp)
  8009b8:	10c5883a 	add	r2,r2,r3
  8009bc:	e0bffd15 	stw	r2,-12(fp)

        move = dirsine[dir]>>4;
  8009c0:	e0bffe17 	ldw	r2,-8(fp)
  8009c4:	00c02234 	movhi	r3,136
  8009c8:	18c88204 	addi	r3,r3,8712
  8009cc:	1085883a 	add	r2,r2,r2
  8009d0:	1085883a 	add	r2,r2,r2
  8009d4:	10c5883a 	add	r2,r2,r3
  8009d8:	10800017 	ldw	r2,0(r2)
  8009dc:	1005d13a 	srai	r2,r2,4
  8009e0:	e0bff215 	stw	r2,-56(fp)
        if(worldMap[posX>>posShift][(posY+move)>>posShift] == 0)
  8009e4:	e0bffd17 	ldw	r2,-12(fp)
  8009e8:	100bd5ba 	srai	r5,r2,22
  8009ec:	e0fffc17 	ldw	r3,-16(fp)
  8009f0:	e0bff217 	ldw	r2,-56(fp)
  8009f4:	1885883a 	add	r2,r3,r2
  8009f8:	1009d5ba 	srai	r4,r2,22
  8009fc:	00c02234 	movhi	r3,136
  800a00:	18fb6104 	addi	r3,r3,-4732
  800a04:	2804917a 	slli	r2,r5,5
  800a08:	10c5883a 	add	r2,r2,r3
  800a0c:	1105883a 	add	r2,r2,r4
  800a10:	10800003 	ldbu	r2,0(r2)
  800a14:	10803fcc 	andi	r2,r2,255
  800a18:	1080201c 	xori	r2,r2,128
  800a1c:	10bfe004 	addi	r2,r2,-128
  800a20:	1004c03a 	cmpne	r2,r2,zero
  800a24:	1000041e 	bne	r2,zero,800a38 <main+0x848>
                posY += move;
  800a28:	e0bffc17 	ldw	r2,-16(fp)
  800a2c:	e0fff217 	ldw	r3,-56(fp)
  800a30:	10c5883a 	add	r2,r2,r3
  800a34:	e0bffc15 	stw	r2,-16(fp)
    }
    //move backwards if no wall behind you
    if (backward == 1)
  800a38:	e0bfeb17 	ldw	r2,-84(fp)
  800a3c:	10800058 	cmpnei	r2,r2,1
  800a40:	10003c1e 	bne	r2,zero,800b34 <main+0x944>
    {
        move = dircosine[dir]>>4;
  800a44:	e0bffe17 	ldw	r2,-8(fp)
  800a48:	00c02274 	movhi	r3,137
  800a4c:	18fd8204 	addi	r3,r3,-2552
  800a50:	1085883a 	add	r2,r2,r2
  800a54:	1085883a 	add	r2,r2,r2
  800a58:	10c5883a 	add	r2,r2,r3
  800a5c:	10800017 	ldw	r2,0(r2)
  800a60:	1005d13a 	srai	r2,r2,4
  800a64:	e0bff215 	stw	r2,-56(fp)
        if(worldMap[(posX - move)>>posShift][posY>>posShift] == 0)
  800a68:	e0fffd17 	ldw	r3,-12(fp)
  800a6c:	e0bff217 	ldw	r2,-56(fp)
  800a70:	1885c83a 	sub	r2,r3,r2
  800a74:	1009d5ba 	srai	r4,r2,22
  800a78:	e0bffc17 	ldw	r2,-16(fp)
  800a7c:	100bd5ba 	srai	r5,r2,22
  800a80:	00c02234 	movhi	r3,136
  800a84:	18fb6104 	addi	r3,r3,-4732
  800a88:	2004917a 	slli	r2,r4,5
  800a8c:	10c5883a 	add	r2,r2,r3
  800a90:	1145883a 	add	r2,r2,r5
  800a94:	10800003 	ldbu	r2,0(r2)
  800a98:	10803fcc 	andi	r2,r2,255
  800a9c:	1080201c 	xori	r2,r2,128
  800aa0:	10bfe004 	addi	r2,r2,-128
  800aa4:	1004c03a 	cmpne	r2,r2,zero
  800aa8:	1000041e 	bne	r2,zero,800abc <main+0x8cc>
                posX -= move;
  800aac:	e0bffd17 	ldw	r2,-12(fp)
  800ab0:	e0fff217 	ldw	r3,-56(fp)
  800ab4:	10c5c83a 	sub	r2,r2,r3
  800ab8:	e0bffd15 	stw	r2,-12(fp)

        move = dirsine[dir]>>4;
  800abc:	e0bffe17 	ldw	r2,-8(fp)
  800ac0:	00c02234 	movhi	r3,136
  800ac4:	18c88204 	addi	r3,r3,8712
  800ac8:	1085883a 	add	r2,r2,r2
  800acc:	1085883a 	add	r2,r2,r2
  800ad0:	10c5883a 	add	r2,r2,r3
  800ad4:	10800017 	ldw	r2,0(r2)
  800ad8:	1005d13a 	srai	r2,r2,4
  800adc:	e0bff215 	stw	r2,-56(fp)
        if(worldMap[posX>>posShift][(posY - move)>>posShift] == 0)
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	100bd5ba 	srai	r5,r2,22
  800ae8:	e0fffc17 	ldw	r3,-16(fp)
  800aec:	e0bff217 	ldw	r2,-56(fp)
  800af0:	1885c83a 	sub	r2,r3,r2
  800af4:	1009d5ba 	srai	r4,r2,22
  800af8:	00c02234 	movhi	r3,136
  800afc:	18fb6104 	addi	r3,r3,-4732
  800b00:	2804917a 	slli	r2,r5,5
  800b04:	10c5883a 	add	r2,r2,r3
  800b08:	1105883a 	add	r2,r2,r4
  800b0c:	10800003 	ldbu	r2,0(r2)
  800b10:	10803fcc 	andi	r2,r2,255
  800b14:	1080201c 	xori	r2,r2,128
  800b18:	10bfe004 	addi	r2,r2,-128
  800b1c:	1004c03a 	cmpne	r2,r2,zero
  800b20:	1000041e 	bne	r2,zero,800b34 <main+0x944>
                posY -= move;
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	e0fff217 	ldw	r3,-56(fp)
  800b2c:	10c5c83a 	sub	r2,r2,r3
  800b30:	e0bffc15 	stw	r2,-16(fp)
    }
    //rotate to the right
    if (right == 1)
  800b34:	e0bfe917 	ldw	r2,-92(fp)
  800b38:	10800058 	cmpnei	r2,r2,1
  800b3c:	1000091e 	bne	r2,zero,800b64 <main+0x974>
    {
      //both camera direction and camera plane must be rotated
       dir += 13;
  800b40:	e0bffe17 	ldw	r2,-8(fp)
  800b44:	10800344 	addi	r2,r2,13
  800b48:	e0bffe15 	stw	r2,-8(fp)

       if(dir >= lookupLength)
  800b4c:	e0bffe17 	ldw	r2,-8(fp)
  800b50:	10840010 	cmplti	r2,r2,4096
  800b54:	1000031e 	bne	r2,zero,800b64 <main+0x974>
           dir -= lookupLength;
  800b58:	e0bffe17 	ldw	r2,-8(fp)
  800b5c:	10bc0004 	addi	r2,r2,-4096
  800b60:	e0bffe15 	stw	r2,-8(fp)
    }
    //rotate to the left
    if (left == 1)
  800b64:	e0bfea17 	ldw	r2,-88(fp)
  800b68:	10800058 	cmpnei	r2,r2,1
  800b6c:	103e921e 	bne	r2,zero,8005b8 <main+0x3c8>
    {
      //both camera direction and camera plane must be rotated
        dir -= 13;
  800b70:	e0bffe17 	ldw	r2,-8(fp)
  800b74:	10bffcc4 	addi	r2,r2,-13
  800b78:	e0bffe15 	stw	r2,-8(fp)

        if (dir <0)
  800b7c:	e0bffe17 	ldw	r2,-8(fp)
  800b80:	1004403a 	cmpge	r2,r2,zero
  800b84:	103e8c1e 	bne	r2,zero,8005b8 <main+0x3c8>
            dir += lookupLength;
  800b88:	e0bffe17 	ldw	r2,-8(fp)
  800b8c:	10840004 	addi	r2,r2,4096
  800b90:	e0bffe15 	stw	r2,-8(fp)
    }


  }
  800b94:	003e8806 	br	8005b8 <main+0x3c8>

00800b98 <absVal>:

    return 0;
}

int absVal(int v)
{
  800b98:	defffe04 	addi	sp,sp,-8
  800b9c:	df000115 	stw	fp,4(sp)
  800ba0:	df000104 	addi	fp,sp,4
  800ba4:	e13fff15 	stw	r4,-4(fp)
  return v * ((v>0) - (v<0));
  800ba8:	e0bfff17 	ldw	r2,-4(fp)
  800bac:	10c00048 	cmpgei	r3,r2,1
  800bb0:	e0bfff17 	ldw	r2,-4(fp)
  800bb4:	1004d7fa 	srli	r2,r2,31
  800bb8:	1887c83a 	sub	r3,r3,r2
  800bbc:	e0bfff17 	ldw	r2,-4(fp)
  800bc0:	1885383a 	mul	r2,r3,r2
}
  800bc4:	e037883a 	mov	sp,fp
  800bc8:	df000017 	ldw	fp,0(sp)
  800bcc:	dec00104 	addi	sp,sp,4
  800bd0:	f800283a 	ret

00800bd4 <intToDouble>:

int intToDouble(int a)
{
  800bd4:	defffe04 	addi	sp,sp,-8
  800bd8:	df000115 	stw	fp,4(sp)
  800bdc:	df000104 	addi	fp,sp,4
  800be0:	e13fff15 	stw	r4,-4(fp)

    return a>>posShift;
  800be4:	e0bfff17 	ldw	r2,-4(fp)
  800be8:	1005d5ba 	srai	r2,r2,22

}
  800bec:	e037883a 	mov	sp,fp
  800bf0:	df000017 	ldw	fp,0(sp)
  800bf4:	dec00104 	addi	sp,sp,4
  800bf8:	f800283a 	ret

00800bfc <doubleToInt>:


int doubleToInt(double a)
{
  800bfc:	defffc04 	addi	sp,sp,-16
  800c00:	dfc00315 	stw	ra,12(sp)
  800c04:	df000215 	stw	fp,8(sp)
  800c08:	df000204 	addi	fp,sp,8
  800c0c:	e13ffe15 	stw	r4,-8(fp)
  800c10:	e17fff15 	stw	r5,-4(fp)
    return (int)(a*(1<<posShift));
  800c14:	e13ffe17 	ldw	r4,-8(fp)
  800c18:	e17fff17 	ldw	r5,-4(fp)
  800c1c:	000d883a 	mov	r6,zero
  800c20:	01d05434 	movhi	r7,16720
  800c24:	08038f80 	call	8038f8 <__muldf3>
  800c28:	1009883a 	mov	r4,r2
  800c2c:	180b883a 	mov	r5,r3
  800c30:	2005883a 	mov	r2,r4
  800c34:	2807883a 	mov	r3,r5
  800c38:	1009883a 	mov	r4,r2
  800c3c:	180b883a 	mov	r5,r3
  800c40:	0803f4c0 	call	803f4c <__fixdfsi>
}
  800c44:	e037883a 	mov	sp,fp
  800c48:	dfc00117 	ldw	ra,4(sp)
  800c4c:	df000017 	ldw	fp,0(sp)
  800c50:	dec00204 	addi	sp,sp,8
  800c54:	f800283a 	ret

00800c58 <DrawTexture>:


void DrawTexture(unsigned int columnIndex, unsigned int texX, unsigned int rowStart, unsigned int rowEnd, unsigned int side, unsigned int texNum, unsigned int invLineHeight , unsigned int line_minus_h)
{
  800c58:	defffb04 	addi	sp,sp,-20
  800c5c:	df000415 	stw	fp,16(sp)
  800c60:	df000404 	addi	fp,sp,16
  800c64:	e13ffc15 	stw	r4,-16(fp)
  800c68:	e17ffd15 	stw	r5,-12(fp)
  800c6c:	e1bffe15 	stw	r6,-8(fp)
  800c70:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex  << 22));
  800c74:	e0bffc17 	ldw	r2,-16(fp)
  800c78:	100495ba 	slli	r2,r2,22
  800c7c:	1007883a 	mov	r3,r2
  800c80:	00804234 	movhi	r2,264
  800c84:	10840804 	addi	r2,r2,4128
  800c88:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, ((texNum & 3) + (texX <<2) + (rowEnd<< 8) + (rowStart<<17)+ ((invLineHeight & 0x3F)<<26)));
  800c8c:	e0800217 	ldw	r2,8(fp)
  800c90:	10c000cc 	andi	r3,r2,3
  800c94:	e0bffd17 	ldw	r2,-12(fp)
  800c98:	1085883a 	add	r2,r2,r2
  800c9c:	1085883a 	add	r2,r2,r2
  800ca0:	1887883a 	add	r3,r3,r2
  800ca4:	e0bfff17 	ldw	r2,-4(fp)
  800ca8:	1004923a 	slli	r2,r2,8
  800cac:	1887883a 	add	r3,r3,r2
  800cb0:	e0bffe17 	ldw	r2,-8(fp)
  800cb4:	1004947a 	slli	r2,r2,17
  800cb8:	1887883a 	add	r3,r3,r2
  800cbc:	e0800317 	ldw	r2,12(fp)
  800cc0:	10800fcc 	andi	r2,r2,63
  800cc4:	100496ba 	slli	r2,r2,26
  800cc8:	1885883a 	add	r2,r3,r2
  800ccc:	1007883a 	mov	r3,r2
  800cd0:	00804234 	movhi	r2,264
  800cd4:	10840104 	addi	r2,r2,4100
  800cd8:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, ((invLineHeight & 0x3FFFF) >> 6) + ((line_minus_h & 0x3FFFF) << 12 ) + (side << 31));
  800cdc:	e0c00317 	ldw	r3,12(fp)
  800ce0:	00800134 	movhi	r2,4
  800ce4:	10bfffc4 	addi	r2,r2,-1
  800ce8:	1884703a 	and	r2,r3,r2
  800cec:	1008d1ba 	srli	r4,r2,6
  800cf0:	e0c00417 	ldw	r3,16(fp)
  800cf4:	00800134 	movhi	r2,4
  800cf8:	10bfffc4 	addi	r2,r2,-1
  800cfc:	1884703a 	and	r2,r3,r2
  800d00:	1004933a 	slli	r2,r2,12
  800d04:	2087883a 	add	r3,r4,r2
  800d08:	e0800117 	ldw	r2,4(fp)
  800d0c:	100497fa 	slli	r2,r2,31
  800d10:	1885883a 	add	r2,r3,r2
  800d14:	1007883a 	mov	r3,r2
  800d18:	00804234 	movhi	r2,264
  800d1c:	10840204 	addi	r2,r2,4104
  800d20:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 1);
  800d24:	00c04234 	movhi	r3,264
  800d28:	18c40004 	addi	r3,r3,4096
  800d2c:	00800044 	movi	r2,1
  800d30:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800d34:	00804234 	movhi	r2,264
  800d38:	10840004 	addi	r2,r2,4096
  800d3c:	10000035 	stwio	zero,0(r2)

	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800d40:	e037883a 	mov	sp,fp
  800d44:	df000017 	ldw	fp,0(sp)
  800d48:	dec00104 	addi	sp,sp,4
  800d4c:	f800283a 	ret

00800d50 <DrawAccelerate>:

void DrawAccelerate(int angle, int posX, int posY, int countstep, int rayDirX, int rayDirY, unsigned int columnIndex)
{
  800d50:	defffb04 	addi	sp,sp,-20
  800d54:	df000415 	stw	fp,16(sp)
  800d58:	df000404 	addi	fp,sp,16
  800d5c:	e13ffc15 	stw	r4,-16(fp)
  800d60:	e17ffd15 	stw	r5,-12(fp)
  800d64:	e1bffe15 	stw	r6,-8(fp)
  800d68:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex << 22));
  800d6c:	e0800317 	ldw	r2,12(fp)
  800d70:	100495ba 	slli	r2,r2,22
  800d74:	1007883a 	mov	r3,r2
  800d78:	00804234 	movhi	r2,264
  800d7c:	10840804 	addi	r2,r2,4128
  800d80:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, posX);
  800d84:	00c04234 	movhi	r3,264
  800d88:	18c40104 	addi	r3,r3,4100
  800d8c:	e0bffd17 	ldw	r2,-12(fp)
  800d90:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, posY );
  800d94:	00c04234 	movhi	r3,264
  800d98:	18c40204 	addi	r3,r3,4104
  800d9c:	e0bffe17 	ldw	r2,-8(fp)
  800da0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 3, countstep );
  800da4:	00c04234 	movhi	r3,264
  800da8:	18c40304 	addi	r3,r3,4108
  800dac:	e0bfff17 	ldw	r2,-4(fp)
  800db0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 4, rayDirX);
  800db4:	00c04234 	movhi	r3,264
  800db8:	18c40404 	addi	r3,r3,4112
  800dbc:	e0800117 	ldw	r2,4(fp)
  800dc0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 5, rayDirY );
  800dc4:	00c04234 	movhi	r3,264
  800dc8:	18c40504 	addi	r3,r3,4116
  800dcc:	e0800217 	ldw	r2,8(fp)
  800dd0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 6, angle & 0x03FF);
  800dd4:	e0bffc17 	ldw	r2,-16(fp)
  800dd8:	10c0ffcc 	andi	r3,r2,1023
  800ddc:	00804234 	movhi	r2,264
  800de0:	10840604 	addi	r2,r2,4120
  800de4:	10c00035 	stwio	r3,0(r2)



	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800de8:	e037883a 	mov	sp,fp
  800dec:	df000017 	ldw	fp,0(sp)
  800df0:	dec00104 	addi	sp,sp,4
  800df4:	f800283a 	ret

00800df8 <cos>:
  800df8:	00a00034 	movhi	r2,32768
  800dfc:	10bfffc4 	addi	r2,r2,-1
  800e00:	defffa04 	addi	sp,sp,-24
  800e04:	114c703a 	and	r6,r2,r5
  800e08:	008ffa74 	movhi	r2,16361
  800e0c:	10887ec4 	addi	r2,r2,8699
  800e10:	dfc00515 	stw	ra,20(sp)
  800e14:	2011883a 	mov	r8,r4
  800e18:	1180210e 	bge	r2,r6,800ea0 <cos+0xa8>
  800e1c:	009ffc34 	movhi	r2,32752
  800e20:	10bfffc4 	addi	r2,r2,-1
  800e24:	11800a0e 	bge	r2,r6,800e50 <cos+0x58>
  800e28:	280f883a 	mov	r7,r5
  800e2c:	400d883a 	mov	r6,r8
  800e30:	08038040 	call	803804 <__subdf3>
  800e34:	100d883a 	mov	r6,r2
  800e38:	180f883a 	mov	r7,r3
  800e3c:	3005883a 	mov	r2,r6
  800e40:	3807883a 	mov	r3,r7
  800e44:	dfc00517 	ldw	ra,20(sp)
  800e48:	dec00604 	addi	sp,sp,24
  800e4c:	f800283a 	ret
  800e50:	d9800104 	addi	r6,sp,4
  800e54:	08010cc0 	call	8010cc <__ieee754_rem_pio2>
  800e58:	10c000cc 	andi	r3,r2,3
  800e5c:	01000044 	movi	r4,1
  800e60:	19001926 	beq	r3,r4,800ec8 <cos+0xd0>
  800e64:	00800084 	movi	r2,2
  800e68:	18803126 	beq	r3,r2,800f30 <cos+0x138>
  800e6c:	1800231e 	bne	r3,zero,800efc <cos+0x104>
  800e70:	d8800117 	ldw	r2,4(sp)
  800e74:	da000317 	ldw	r8,12(sp)
  800e78:	d8c00217 	ldw	r3,8(sp)
  800e7c:	da400417 	ldw	r9,16(sp)
  800e80:	400d883a 	mov	r6,r8
  800e84:	180b883a 	mov	r5,r3
  800e88:	480f883a 	mov	r7,r9
  800e8c:	1009883a 	mov	r4,r2
  800e90:	08018f40 	call	8018f4 <__kernel_cos>
  800e94:	100d883a 	mov	r6,r2
  800e98:	180f883a 	mov	r7,r3
  800e9c:	003fe706 	br	800e3c <cos+0x44>
  800ea0:	000d883a 	mov	r6,zero
  800ea4:	000f883a 	mov	r7,zero
  800ea8:	08018f40 	call	8018f4 <__kernel_cos>
  800eac:	100d883a 	mov	r6,r2
  800eb0:	180f883a 	mov	r7,r3
  800eb4:	3005883a 	mov	r2,r6
  800eb8:	3807883a 	mov	r3,r7
  800ebc:	dfc00517 	ldw	ra,20(sp)
  800ec0:	dec00604 	addi	sp,sp,24
  800ec4:	f800283a 	ret
  800ec8:	d8800117 	ldw	r2,4(sp)
  800ecc:	da000317 	ldw	r8,12(sp)
  800ed0:	d8c00217 	ldw	r3,8(sp)
  800ed4:	da400417 	ldw	r9,16(sp)
  800ed8:	d9000015 	stw	r4,0(sp)
  800edc:	400d883a 	mov	r6,r8
  800ee0:	480f883a 	mov	r7,r9
  800ee4:	180b883a 	mov	r5,r3
  800ee8:	1009883a 	mov	r4,r2
  800eec:	0802c9c0 	call	802c9c <__kernel_sin>
  800ef0:	100d883a 	mov	r6,r2
  800ef4:	19e0003c 	xorhi	r7,r3,32768
  800ef8:	003fd006 	br	800e3c <cos+0x44>
  800efc:	d8800117 	ldw	r2,4(sp)
  800f00:	da000317 	ldw	r8,12(sp)
  800f04:	d8c00217 	ldw	r3,8(sp)
  800f08:	da400417 	ldw	r9,16(sp)
  800f0c:	d9000015 	stw	r4,0(sp)
  800f10:	400d883a 	mov	r6,r8
  800f14:	480f883a 	mov	r7,r9
  800f18:	180b883a 	mov	r5,r3
  800f1c:	1009883a 	mov	r4,r2
  800f20:	0802c9c0 	call	802c9c <__kernel_sin>
  800f24:	100d883a 	mov	r6,r2
  800f28:	180f883a 	mov	r7,r3
  800f2c:	003fc306 	br	800e3c <cos+0x44>
  800f30:	d8800117 	ldw	r2,4(sp)
  800f34:	da000317 	ldw	r8,12(sp)
  800f38:	d8c00217 	ldw	r3,8(sp)
  800f3c:	da400417 	ldw	r9,16(sp)
  800f40:	400d883a 	mov	r6,r8
  800f44:	180b883a 	mov	r5,r3
  800f48:	480f883a 	mov	r7,r9
  800f4c:	1009883a 	mov	r4,r2
  800f50:	08018f40 	call	8018f4 <__kernel_cos>
  800f54:	100d883a 	mov	r6,r2
  800f58:	19e0003c 	xorhi	r7,r3,32768
  800f5c:	003fb706 	br	800e3c <cos+0x44>

00800f60 <sin>:
  800f60:	00a00034 	movhi	r2,32768
  800f64:	10bfffc4 	addi	r2,r2,-1
  800f68:	defffa04 	addi	sp,sp,-24
  800f6c:	114c703a 	and	r6,r2,r5
  800f70:	008ffa74 	movhi	r2,16361
  800f74:	10887ec4 	addi	r2,r2,8699
  800f78:	dfc00515 	stw	ra,20(sp)
  800f7c:	2011883a 	mov	r8,r4
  800f80:	1180220e 	bge	r2,r6,80100c <sin+0xac>
  800f84:	009ffc34 	movhi	r2,32752
  800f88:	10bfffc4 	addi	r2,r2,-1
  800f8c:	11800a0e 	bge	r2,r6,800fb8 <sin+0x58>
  800f90:	280f883a 	mov	r7,r5
  800f94:	400d883a 	mov	r6,r8
  800f98:	08038040 	call	803804 <__subdf3>
  800f9c:	100d883a 	mov	r6,r2
  800fa0:	180f883a 	mov	r7,r3
  800fa4:	3005883a 	mov	r2,r6
  800fa8:	3807883a 	mov	r3,r7
  800fac:	dfc00517 	ldw	ra,20(sp)
  800fb0:	dec00604 	addi	sp,sp,24
  800fb4:	f800283a 	ret
  800fb8:	d9800104 	addi	r6,sp,4
  800fbc:	08010cc0 	call	8010cc <__ieee754_rem_pio2>
  800fc0:	10c000cc 	andi	r3,r2,3
  800fc4:	01000044 	movi	r4,1
  800fc8:	19001b26 	beq	r3,r4,801038 <sin+0xd8>
  800fcc:	00800084 	movi	r2,2
  800fd0:	18803126 	beq	r3,r2,801098 <sin+0x138>
  800fd4:	1800241e 	bne	r3,zero,801068 <sin+0x108>
  800fd8:	d8800117 	ldw	r2,4(sp)
  800fdc:	da000317 	ldw	r8,12(sp)
  800fe0:	d8c00217 	ldw	r3,8(sp)
  800fe4:	da400417 	ldw	r9,16(sp)
  800fe8:	d9000015 	stw	r4,0(sp)
  800fec:	400d883a 	mov	r6,r8
  800ff0:	480f883a 	mov	r7,r9
  800ff4:	180b883a 	mov	r5,r3
  800ff8:	1009883a 	mov	r4,r2
  800ffc:	0802c9c0 	call	802c9c <__kernel_sin>
  801000:	100d883a 	mov	r6,r2
  801004:	180f883a 	mov	r7,r3
  801008:	003fe606 	br	800fa4 <sin+0x44>
  80100c:	000d883a 	mov	r6,zero
  801010:	000f883a 	mov	r7,zero
  801014:	d8000015 	stw	zero,0(sp)
  801018:	0802c9c0 	call	802c9c <__kernel_sin>
  80101c:	100d883a 	mov	r6,r2
  801020:	180f883a 	mov	r7,r3
  801024:	3005883a 	mov	r2,r6
  801028:	3807883a 	mov	r3,r7
  80102c:	dfc00517 	ldw	ra,20(sp)
  801030:	dec00604 	addi	sp,sp,24
  801034:	f800283a 	ret
  801038:	d8800117 	ldw	r2,4(sp)
  80103c:	da000317 	ldw	r8,12(sp)
  801040:	d8c00217 	ldw	r3,8(sp)
  801044:	da400417 	ldw	r9,16(sp)
  801048:	400d883a 	mov	r6,r8
  80104c:	180b883a 	mov	r5,r3
  801050:	480f883a 	mov	r7,r9
  801054:	1009883a 	mov	r4,r2
  801058:	08018f40 	call	8018f4 <__kernel_cos>
  80105c:	100d883a 	mov	r6,r2
  801060:	180f883a 	mov	r7,r3
  801064:	003fcf06 	br	800fa4 <sin+0x44>
  801068:	d8800117 	ldw	r2,4(sp)
  80106c:	da000317 	ldw	r8,12(sp)
  801070:	d8c00217 	ldw	r3,8(sp)
  801074:	da400417 	ldw	r9,16(sp)
  801078:	400d883a 	mov	r6,r8
  80107c:	180b883a 	mov	r5,r3
  801080:	480f883a 	mov	r7,r9
  801084:	1009883a 	mov	r4,r2
  801088:	08018f40 	call	8018f4 <__kernel_cos>
  80108c:	100d883a 	mov	r6,r2
  801090:	19e0003c 	xorhi	r7,r3,32768
  801094:	003fc306 	br	800fa4 <sin+0x44>
  801098:	d8800117 	ldw	r2,4(sp)
  80109c:	da000317 	ldw	r8,12(sp)
  8010a0:	d8c00217 	ldw	r3,8(sp)
  8010a4:	da400417 	ldw	r9,16(sp)
  8010a8:	d9000015 	stw	r4,0(sp)
  8010ac:	400d883a 	mov	r6,r8
  8010b0:	480f883a 	mov	r7,r9
  8010b4:	180b883a 	mov	r5,r3
  8010b8:	1009883a 	mov	r4,r2
  8010bc:	0802c9c0 	call	802c9c <__kernel_sin>
  8010c0:	100d883a 	mov	r6,r2
  8010c4:	19e0003c 	xorhi	r7,r3,32768
  8010c8:	003fb606 	br	800fa4 <sin+0x44>

008010cc <__ieee754_rem_pio2>:
  8010cc:	deffe304 	addi	sp,sp,-116
  8010d0:	00a00034 	movhi	r2,32768
  8010d4:	10bfffc4 	addi	r2,r2,-1
  8010d8:	dd801915 	stw	r22,100(sp)
  8010dc:	28ac703a 	and	r22,r5,r2
  8010e0:	008ffa74 	movhi	r2,16361
  8010e4:	10887ec4 	addi	r2,r2,8699
  8010e8:	df001b15 	stw	fp,108(sp)
  8010ec:	dfc01c15 	stw	ra,112(sp)
  8010f0:	ddc01a15 	stw	r23,104(sp)
  8010f4:	dd401815 	stw	r21,96(sp)
  8010f8:	dd001715 	stw	r20,92(sp)
  8010fc:	dcc01615 	stw	r19,88(sp)
  801100:	dc801515 	stw	r18,84(sp)
  801104:	dc401415 	stw	r17,80(sp)
  801108:	dc001315 	stw	r16,76(sp)
  80110c:	2013883a 	mov	r9,r4
  801110:	d9400a15 	stw	r5,40(sp)
  801114:	3039883a 	mov	fp,r6
  801118:	15801216 	blt	r2,r22,801164 <__ieee754_rem_pio2+0x98>
  80111c:	e1400115 	stw	r5,4(fp)
  801120:	30000315 	stw	zero,12(r6)
  801124:	e1000015 	stw	r4,0(fp)
  801128:	d8000b15 	stw	zero,44(sp)
  80112c:	30000215 	stw	zero,8(r6)
  801130:	d8800b17 	ldw	r2,44(sp)
  801134:	dfc01c17 	ldw	ra,112(sp)
  801138:	df001b17 	ldw	fp,108(sp)
  80113c:	ddc01a17 	ldw	r23,104(sp)
  801140:	dd801917 	ldw	r22,100(sp)
  801144:	dd401817 	ldw	r21,96(sp)
  801148:	dd001717 	ldw	r20,92(sp)
  80114c:	dcc01617 	ldw	r19,88(sp)
  801150:	dc801517 	ldw	r18,84(sp)
  801154:	dc401417 	ldw	r17,80(sp)
  801158:	dc001317 	ldw	r16,76(sp)
  80115c:	dec01d04 	addi	sp,sp,116
  801160:	f800283a 	ret
  801164:	009000f4 	movhi	r2,16387
  801168:	10b65ec4 	addi	r2,r2,-9861
  80116c:	15800f0e 	bge	r2,r22,8011ac <__ieee754_rem_pio2+0xe0>
  801170:	00904e74 	movhi	r2,16697
  801174:	10887ec4 	addi	r2,r2,8699
  801178:	1580330e 	bge	r2,r22,801248 <__ieee754_rem_pio2+0x17c>
  80117c:	009ffc34 	movhi	r2,32752
  801180:	10bfffc4 	addi	r2,r2,-1
  801184:	1580fe0e 	bge	r2,r22,801580 <__ieee754_rem_pio2+0x4b4>
  801188:	280f883a 	mov	r7,r5
  80118c:	480d883a 	mov	r6,r9
  801190:	08038040 	call	803804 <__subdf3>
  801194:	e0c00115 	stw	r3,4(fp)
  801198:	d8000b15 	stw	zero,44(sp)
  80119c:	e0800015 	stw	r2,0(fp)
  8011a0:	e0800215 	stw	r2,8(fp)
  8011a4:	e0c00315 	stw	r3,12(fp)
  8011a8:	003fe106 	br	801130 <__ieee754_rem_pio2+0x64>
  8011ac:	d9000a17 	ldw	r4,40(sp)
  8011b0:	0100ce0e 	bge	zero,r4,8014ec <__ieee754_rem_pio2+0x420>
  8011b4:	04151034 	movhi	r16,21568
  8011b8:	044ffe74 	movhi	r17,16377
  8011bc:	8c487ec4 	addi	r17,r17,8699
  8011c0:	4809883a 	mov	r4,r9
  8011c4:	800d883a 	mov	r6,r16
  8011c8:	880f883a 	mov	r7,r17
  8011cc:	08038040 	call	803804 <__subdf3>
  8011d0:	1025883a 	mov	r18,r2
  8011d4:	1827883a 	mov	r19,r3
  8011d8:	b4413c26 	beq	r22,r17,8016cc <__ieee754_rem_pio2+0x600>
  8011dc:	040698b4 	movhi	r16,6754
  8011e0:	8418cc44 	addi	r16,r16,25393
  8011e4:	044f7474 	movhi	r17,15825
  8011e8:	8c6d1844 	addi	r17,r17,-19359
  8011ec:	1009883a 	mov	r4,r2
  8011f0:	180b883a 	mov	r5,r3
  8011f4:	800d883a 	mov	r6,r16
  8011f8:	880f883a 	mov	r7,r17
  8011fc:	08038040 	call	803804 <__subdf3>
  801200:	100d883a 	mov	r6,r2
  801204:	9009883a 	mov	r4,r18
  801208:	980b883a 	mov	r5,r19
  80120c:	180f883a 	mov	r7,r3
  801210:	e0800015 	stw	r2,0(fp)
  801214:	e0c00115 	stw	r3,4(fp)
  801218:	08038040 	call	803804 <__subdf3>
  80121c:	1009883a 	mov	r4,r2
  801220:	800d883a 	mov	r6,r16
  801224:	880f883a 	mov	r7,r17
  801228:	180b883a 	mov	r5,r3
  80122c:	08038040 	call	803804 <__subdf3>
  801230:	1009883a 	mov	r4,r2
  801234:	00800044 	movi	r2,1
  801238:	d8800b15 	stw	r2,44(sp)
  80123c:	e0c00315 	stw	r3,12(fp)
  801240:	e1000215 	stw	r4,8(fp)
  801244:	003fba06 	br	801130 <__ieee754_rem_pio2+0x64>
  801248:	0802fb40 	call	802fb4 <fabs>
  80124c:	021b72b4 	movhi	r8,28106
  801250:	423220c4 	addi	r8,r8,-14205
  801254:	024ff934 	movhi	r9,16356
  801258:	4a57cc04 	addi	r9,r9,24368
  80125c:	480f883a 	mov	r7,r9
  801260:	400d883a 	mov	r6,r8
  801264:	1009883a 	mov	r4,r2
  801268:	180b883a 	mov	r5,r3
  80126c:	1025883a 	mov	r18,r2
  801270:	1827883a 	mov	r19,r3
  801274:	08038f80 	call	8038f8 <__muldf3>
  801278:	0011883a 	mov	r8,zero
  80127c:	024ff834 	movhi	r9,16352
  801280:	480f883a 	mov	r7,r9
  801284:	400d883a 	mov	r6,r8
  801288:	180b883a 	mov	r5,r3
  80128c:	1009883a 	mov	r4,r2
  801290:	08038840 	call	803884 <__adddf3>
  801294:	180b883a 	mov	r5,r3
  801298:	1009883a 	mov	r4,r2
  80129c:	0803f4c0 	call	803f4c <__fixdfsi>
  8012a0:	1009883a 	mov	r4,r2
  8012a4:	d8800b15 	stw	r2,44(sp)
  8012a8:	0803e540 	call	803e54 <__floatsidf>
  8012ac:	1823883a 	mov	r17,r3
  8012b0:	1009883a 	mov	r4,r2
  8012b4:	d8800c15 	stw	r2,48(sp)
  8012b8:	00effe74 	movhi	r3,49145
  8012bc:	18c87ec4 	addi	r3,r3,8699
  8012c0:	00951034 	movhi	r2,21568
  8012c4:	880b883a 	mov	r5,r17
  8012c8:	180f883a 	mov	r7,r3
  8012cc:	100d883a 	mov	r6,r2
  8012d0:	dc400d15 	stw	r17,52(sp)
  8012d4:	08038f80 	call	8038f8 <__muldf3>
  8012d8:	180f883a 	mov	r7,r3
  8012dc:	980b883a 	mov	r5,r19
  8012e0:	9009883a 	mov	r4,r18
  8012e4:	100d883a 	mov	r6,r2
  8012e8:	08038840 	call	803884 <__adddf3>
  8012ec:	d9000c17 	ldw	r4,48(sp)
  8012f0:	020698b4 	movhi	r8,6754
  8012f4:	4218cc44 	addi	r8,r8,25393
  8012f8:	024f7474 	movhi	r9,15825
  8012fc:	4a6d1844 	addi	r9,r9,-19359
  801300:	880b883a 	mov	r5,r17
  801304:	480f883a 	mov	r7,r9
  801308:	400d883a 	mov	r6,r8
  80130c:	1025883a 	mov	r18,r2
  801310:	1827883a 	mov	r19,r3
  801314:	08038f80 	call	8038f8 <__muldf3>
  801318:	d9000b17 	ldw	r4,44(sp)
  80131c:	100f883a 	mov	r7,r2
  801320:	1811883a 	mov	r8,r3
  801324:	008007c4 	movi	r2,31
  801328:	dc800e15 	stw	r18,56(sp)
  80132c:	3821883a 	mov	r16,r7
  801330:	dcc00f15 	stw	r19,60(sp)
  801334:	4023883a 	mov	r17,r8
  801338:	11010a0e 	bge	r2,r4,801764 <__ieee754_rem_pio2+0x698>
  80133c:	d9000e17 	ldw	r4,56(sp)
  801340:	d9400f17 	ldw	r5,60(sp)
  801344:	800d883a 	mov	r6,r16
  801348:	880f883a 	mov	r7,r17
  80134c:	08038040 	call	803804 <__subdf3>
  801350:	1810d53a 	srli	r8,r3,20
  801354:	b02dd53a 	srai	r22,r22,20
  801358:	1009883a 	mov	r4,r2
  80135c:	4201ffcc 	andi	r8,r8,2047
  801360:	180b883a 	mov	r5,r3
  801364:	b211c83a 	sub	r8,r22,r8
  801368:	00800404 	movi	r2,16
  80136c:	dd801015 	stw	r22,64(sp)
  801370:	e1000015 	stw	r4,0(fp)
  801374:	e1400115 	stw	r5,4(fp)
  801378:	1200430e 	bge	r2,r8,801488 <__ieee754_rem_pio2+0x3bc>
  80137c:	d9000c17 	ldw	r4,48(sp)
  801380:	d9400d17 	ldw	r5,52(sp)
  801384:	00869834 	movhi	r2,6752
  801388:	00cf7474 	movhi	r3,15825
  80138c:	18ed1844 	addi	r3,r3,-19359
  801390:	180f883a 	mov	r7,r3
  801394:	100d883a 	mov	r6,r2
  801398:	08038f80 	call	8038f8 <__muldf3>
  80139c:	d9000e17 	ldw	r4,56(sp)
  8013a0:	d9400f17 	ldw	r5,60(sp)
  8013a4:	100d883a 	mov	r6,r2
  8013a8:	180f883a 	mov	r7,r3
  8013ac:	1025883a 	mov	r18,r2
  8013b0:	1827883a 	mov	r19,r3
  8013b4:	08038040 	call	803804 <__subdf3>
  8013b8:	d9000c17 	ldw	r4,48(sp)
  8013bc:	d9400d17 	ldw	r5,52(sp)
  8013c0:	058b80f4 	movhi	r22,11779
  8013c4:	b59c1cc4 	addi	r22,r22,28787
  8013c8:	05cee8f4 	movhi	r23,15267
  8013cc:	bdc66284 	addi	r23,r23,6538
  8013d0:	b00d883a 	mov	r6,r22
  8013d4:	b80f883a 	mov	r7,r23
  8013d8:	d8801115 	stw	r2,68(sp)
  8013dc:	d8c01215 	stw	r3,72(sp)
  8013e0:	d8800815 	stw	r2,32(sp)
  8013e4:	08038f80 	call	8038f8 <__muldf3>
  8013e8:	d9001217 	ldw	r4,72(sp)
  8013ec:	d9400f17 	ldw	r5,60(sp)
  8013f0:	d9800817 	ldw	r6,32(sp)
  8013f4:	d9000915 	stw	r4,36(sp)
  8013f8:	d9c01217 	ldw	r7,72(sp)
  8013fc:	d9000e17 	ldw	r4,56(sp)
  801400:	1021883a 	mov	r16,r2
  801404:	1823883a 	mov	r17,r3
  801408:	08038040 	call	803804 <__subdf3>
  80140c:	180b883a 	mov	r5,r3
  801410:	900d883a 	mov	r6,r18
  801414:	980f883a 	mov	r7,r19
  801418:	1009883a 	mov	r4,r2
  80141c:	08038040 	call	803804 <__subdf3>
  801420:	180f883a 	mov	r7,r3
  801424:	880b883a 	mov	r5,r17
  801428:	8009883a 	mov	r4,r16
  80142c:	100d883a 	mov	r6,r2
  801430:	08038040 	call	803804 <__subdf3>
  801434:	d9000817 	ldw	r4,32(sp)
  801438:	d9401217 	ldw	r5,72(sp)
  80143c:	180f883a 	mov	r7,r3
  801440:	100d883a 	mov	r6,r2
  801444:	1021883a 	mov	r16,r2
  801448:	1823883a 	mov	r17,r3
  80144c:	08038040 	call	803804 <__subdf3>
  801450:	1810d53a 	srli	r8,r3,20
  801454:	1009883a 	mov	r4,r2
  801458:	d8801017 	ldw	r2,64(sp)
  80145c:	4201ffcc 	andi	r8,r8,2047
  801460:	180b883a 	mov	r5,r3
  801464:	1211c83a 	sub	r8,r2,r8
  801468:	00800c44 	movi	r2,49
  80146c:	e1000015 	stw	r4,0(fp)
  801470:	e1400115 	stw	r5,4(fp)
  801474:	1200f016 	blt	r2,r8,801838 <__ieee754_rem_pio2+0x76c>
  801478:	d8c00817 	ldw	r3,32(sp)
  80147c:	d9001217 	ldw	r4,72(sp)
  801480:	d8c00e15 	stw	r3,56(sp)
  801484:	d9000f15 	stw	r4,60(sp)
  801488:	e1800017 	ldw	r6,0(fp)
  80148c:	e1c00117 	ldw	r7,4(fp)
  801490:	d9400f17 	ldw	r5,60(sp)
  801494:	d9000e17 	ldw	r4,56(sp)
  801498:	08038040 	call	803804 <__subdf3>
  80149c:	180b883a 	mov	r5,r3
  8014a0:	800d883a 	mov	r6,r16
  8014a4:	880f883a 	mov	r7,r17
  8014a8:	1009883a 	mov	r4,r2
  8014ac:	08038040 	call	803804 <__subdf3>
  8014b0:	d9400a17 	ldw	r5,40(sp)
  8014b4:	e0800215 	stw	r2,8(fp)
  8014b8:	e1800204 	addi	r6,fp,8
  8014bc:	30c00115 	stw	r3,4(r6)
  8014c0:	283f1b0e 	bge	r5,zero,801130 <__ieee754_rem_pio2+0x64>
  8014c4:	e0c00117 	ldw	r3,4(fp)
  8014c8:	d8800b17 	ldw	r2,44(sp)
  8014cc:	18e0003c 	xorhi	r3,r3,32768
  8014d0:	0085c83a 	sub	r2,zero,r2
  8014d4:	e0c00115 	stw	r3,4(fp)
  8014d8:	d8800b15 	stw	r2,44(sp)
  8014dc:	30800117 	ldw	r2,4(r6)
  8014e0:	10a0003c 	xorhi	r2,r2,32768
  8014e4:	30800115 	stw	r2,4(r6)
  8014e8:	003f1106 	br	801130 <__ieee754_rem_pio2+0x64>
  8014ec:	04151034 	movhi	r16,21568
  8014f0:	044ffe74 	movhi	r17,16377
  8014f4:	8c487ec4 	addi	r17,r17,8699
  8014f8:	4809883a 	mov	r4,r9
  8014fc:	800d883a 	mov	r6,r16
  801500:	880f883a 	mov	r7,r17
  801504:	08038840 	call	803884 <__adddf3>
  801508:	1025883a 	mov	r18,r2
  80150c:	1827883a 	mov	r19,r3
  801510:	b440a326 	beq	r22,r17,8017a0 <__ieee754_rem_pio2+0x6d4>
  801514:	040698b4 	movhi	r16,6754
  801518:	8418cc44 	addi	r16,r16,25393
  80151c:	044f7474 	movhi	r17,15825
  801520:	8c6d1844 	addi	r17,r17,-19359
  801524:	1009883a 	mov	r4,r2
  801528:	180b883a 	mov	r5,r3
  80152c:	800d883a 	mov	r6,r16
  801530:	880f883a 	mov	r7,r17
  801534:	08038840 	call	803884 <__adddf3>
  801538:	100d883a 	mov	r6,r2
  80153c:	9009883a 	mov	r4,r18
  801540:	980b883a 	mov	r5,r19
  801544:	180f883a 	mov	r7,r3
  801548:	e0800015 	stw	r2,0(fp)
  80154c:	e0c00115 	stw	r3,4(fp)
  801550:	08038040 	call	803804 <__subdf3>
  801554:	1009883a 	mov	r4,r2
  801558:	800d883a 	mov	r6,r16
  80155c:	880f883a 	mov	r7,r17
  801560:	180b883a 	mov	r5,r3
  801564:	08038840 	call	803884 <__adddf3>
  801568:	1009883a 	mov	r4,r2
  80156c:	00bfffc4 	movi	r2,-1
  801570:	d8800b15 	stw	r2,44(sp)
  801574:	e0c00315 	stw	r3,12(fp)
  801578:	e1000215 	stw	r4,8(fp)
  80157c:	003eec06 	br	801130 <__ieee754_rem_pio2+0x64>
  801580:	b005d53a 	srai	r2,r22,20
  801584:	4821883a 	mov	r16,r9
  801588:	05505c34 	movhi	r21,16752
  80158c:	15fefa84 	addi	r23,r2,-1046
  801590:	b826953a 	slli	r19,r23,20
  801594:	0029883a 	mov	r20,zero
  801598:	048000c4 	movi	r18,3
  80159c:	b4e7c83a 	sub	r19,r22,r19
  8015a0:	980b883a 	mov	r5,r19
  8015a4:	0803f4c0 	call	803f4c <__fixdfsi>
  8015a8:	1009883a 	mov	r4,r2
  8015ac:	0803e540 	call	803e54 <__floatsidf>
  8015b0:	980b883a 	mov	r5,r19
  8015b4:	8009883a 	mov	r4,r16
  8015b8:	180f883a 	mov	r7,r3
  8015bc:	100d883a 	mov	r6,r2
  8015c0:	d8800215 	stw	r2,8(sp)
  8015c4:	d8c00315 	stw	r3,12(sp)
  8015c8:	08038040 	call	803804 <__subdf3>
  8015cc:	180b883a 	mov	r5,r3
  8015d0:	a00d883a 	mov	r6,r20
  8015d4:	a80f883a 	mov	r7,r21
  8015d8:	1009883a 	mov	r4,r2
  8015dc:	08038f80 	call	8038f8 <__muldf3>
  8015e0:	180b883a 	mov	r5,r3
  8015e4:	1009883a 	mov	r4,r2
  8015e8:	1823883a 	mov	r17,r3
  8015ec:	1021883a 	mov	r16,r2
  8015f0:	0803f4c0 	call	803f4c <__fixdfsi>
  8015f4:	1009883a 	mov	r4,r2
  8015f8:	0803e540 	call	803e54 <__floatsidf>
  8015fc:	880b883a 	mov	r5,r17
  801600:	8009883a 	mov	r4,r16
  801604:	180f883a 	mov	r7,r3
  801608:	100d883a 	mov	r6,r2
  80160c:	d8800415 	stw	r2,16(sp)
  801610:	d8c00515 	stw	r3,20(sp)
  801614:	08038040 	call	803804 <__subdf3>
  801618:	180b883a 	mov	r5,r3
  80161c:	000d883a 	mov	r6,zero
  801620:	a80f883a 	mov	r7,r21
  801624:	1009883a 	mov	r4,r2
  801628:	08038f80 	call	8038f8 <__muldf3>
  80162c:	d8c00715 	stw	r3,28(sp)
  801630:	d8800615 	stw	r2,24(sp)
  801634:	00000106 	br	80163c <__ieee754_rem_pio2+0x570>
  801638:	8025883a 	mov	r18,r16
  80163c:	943fffc4 	addi	r16,r18,-1
  801640:	800890fa 	slli	r4,r16,3
  801644:	d9400204 	addi	r5,sp,8
  801648:	000d883a 	mov	r6,zero
  80164c:	2149883a 	add	r4,r4,r5
  801650:	20c00117 	ldw	r3,4(r4)
  801654:	20800017 	ldw	r2,0(r4)
  801658:	000f883a 	mov	r7,zero
  80165c:	180b883a 	mov	r5,r3
  801660:	1009883a 	mov	r4,r2
  801664:	0803cbc0 	call	803cbc <__eqdf2>
  801668:	103ff326 	beq	r2,zero,801638 <__ieee754_rem_pio2+0x56c>
  80166c:	00800084 	movi	r2,2
  801670:	00c02234 	movhi	r3,136
  801674:	18fab804 	addi	r3,r3,-5408
  801678:	b80d883a 	mov	r6,r23
  80167c:	900f883a 	mov	r7,r18
  801680:	d9000204 	addi	r4,sp,8
  801684:	e00b883a 	mov	r5,fp
  801688:	d8800015 	stw	r2,0(sp)
  80168c:	d8c00115 	stw	r3,4(sp)
  801690:	0801e200 	call	801e20 <__kernel_rem_pio2>
  801694:	d8800b15 	stw	r2,44(sp)
  801698:	d8800a17 	ldw	r2,40(sp)
  80169c:	103ea40e 	bge	r2,zero,801130 <__ieee754_rem_pio2+0x64>
  8016a0:	e0800117 	ldw	r2,4(fp)
  8016a4:	d8c00b17 	ldw	r3,44(sp)
  8016a8:	e1000204 	addi	r4,fp,8
  8016ac:	10a0003c 	xorhi	r2,r2,32768
  8016b0:	00c7c83a 	sub	r3,zero,r3
  8016b4:	e0800115 	stw	r2,4(fp)
  8016b8:	d8c00b15 	stw	r3,44(sp)
  8016bc:	20c00117 	ldw	r3,4(r4)
  8016c0:	18e0003c 	xorhi	r3,r3,32768
  8016c4:	20c00115 	stw	r3,4(r4)
  8016c8:	003e9906 	br	801130 <__ieee754_rem_pio2+0x64>
  8016cc:	00869834 	movhi	r2,6752
  8016d0:	00cf7474 	movhi	r3,15825
  8016d4:	18ed1844 	addi	r3,r3,-19359
  8016d8:	9009883a 	mov	r4,r18
  8016dc:	980b883a 	mov	r5,r19
  8016e0:	180f883a 	mov	r7,r3
  8016e4:	100d883a 	mov	r6,r2
  8016e8:	08038040 	call	803804 <__subdf3>
  8016ec:	048b80f4 	movhi	r18,11779
  8016f0:	949c1cc4 	addi	r18,r18,28787
  8016f4:	04cee8f4 	movhi	r19,15267
  8016f8:	9cc66284 	addi	r19,r19,6538
  8016fc:	1009883a 	mov	r4,r2
  801700:	180b883a 	mov	r5,r3
  801704:	900d883a 	mov	r6,r18
  801708:	980f883a 	mov	r7,r19
  80170c:	1021883a 	mov	r16,r2
  801710:	1823883a 	mov	r17,r3
  801714:	08038040 	call	803804 <__subdf3>
  801718:	100d883a 	mov	r6,r2
  80171c:	8009883a 	mov	r4,r16
  801720:	880b883a 	mov	r5,r17
  801724:	180f883a 	mov	r7,r3
  801728:	e0800015 	stw	r2,0(fp)
  80172c:	e0c00115 	stw	r3,4(fp)
  801730:	08038040 	call	803804 <__subdf3>
  801734:	180b883a 	mov	r5,r3
  801738:	1009883a 	mov	r4,r2
  80173c:	900d883a 	mov	r6,r18
  801740:	980f883a 	mov	r7,r19
  801744:	08038040 	call	803804 <__subdf3>
  801748:	180b883a 	mov	r5,r3
  80174c:	1009883a 	mov	r4,r2
  801750:	00c00044 	movi	r3,1
  801754:	d8c00b15 	stw	r3,44(sp)
  801758:	e1400315 	stw	r5,12(fp)
  80175c:	e1000215 	stw	r4,8(fp)
  801760:	003e7306 	br	801130 <__ieee754_rem_pio2+0x64>
  801764:	2105883a 	add	r2,r4,r4
  801768:	1085883a 	add	r2,r2,r2
  80176c:	00c02234 	movhi	r3,136
  801770:	18fa9804 	addi	r3,r3,-5536
  801774:	10c5883a 	add	r2,r2,r3
  801778:	113fff17 	ldw	r4,-4(r2)
  80177c:	b13eef26 	beq	r22,r4,80133c <__ieee754_rem_pio2+0x270>
  801780:	980b883a 	mov	r5,r19
  801784:	400f883a 	mov	r7,r8
  801788:	9009883a 	mov	r4,r18
  80178c:	800d883a 	mov	r6,r16
  801790:	08038040 	call	803804 <__subdf3>
  801794:	e0c00115 	stw	r3,4(fp)
  801798:	e0800015 	stw	r2,0(fp)
  80179c:	003f3a06 	br	801488 <__ieee754_rem_pio2+0x3bc>
  8017a0:	00869834 	movhi	r2,6752
  8017a4:	00cf7474 	movhi	r3,15825
  8017a8:	18ed1844 	addi	r3,r3,-19359
  8017ac:	9009883a 	mov	r4,r18
  8017b0:	980b883a 	mov	r5,r19
  8017b4:	180f883a 	mov	r7,r3
  8017b8:	100d883a 	mov	r6,r2
  8017bc:	08038840 	call	803884 <__adddf3>
  8017c0:	048b80f4 	movhi	r18,11779
  8017c4:	949c1cc4 	addi	r18,r18,28787
  8017c8:	04cee8f4 	movhi	r19,15267
  8017cc:	9cc66284 	addi	r19,r19,6538
  8017d0:	1009883a 	mov	r4,r2
  8017d4:	180b883a 	mov	r5,r3
  8017d8:	900d883a 	mov	r6,r18
  8017dc:	980f883a 	mov	r7,r19
  8017e0:	1021883a 	mov	r16,r2
  8017e4:	1823883a 	mov	r17,r3
  8017e8:	08038840 	call	803884 <__adddf3>
  8017ec:	100d883a 	mov	r6,r2
  8017f0:	8009883a 	mov	r4,r16
  8017f4:	880b883a 	mov	r5,r17
  8017f8:	180f883a 	mov	r7,r3
  8017fc:	e0800015 	stw	r2,0(fp)
  801800:	e0c00115 	stw	r3,4(fp)
  801804:	08038040 	call	803804 <__subdf3>
  801808:	180b883a 	mov	r5,r3
  80180c:	1009883a 	mov	r4,r2
  801810:	900d883a 	mov	r6,r18
  801814:	980f883a 	mov	r7,r19
  801818:	08038840 	call	803884 <__adddf3>
  80181c:	180b883a 	mov	r5,r3
  801820:	1009883a 	mov	r4,r2
  801824:	00ffffc4 	movi	r3,-1
  801828:	d8c00b15 	stw	r3,44(sp)
  80182c:	e1400315 	stw	r5,12(fp)
  801830:	e1000215 	stw	r4,8(fp)
  801834:	003e3e06 	br	801130 <__ieee754_rem_pio2+0x64>
  801838:	d9000c17 	ldw	r4,48(sp)
  80183c:	d9400d17 	ldw	r5,52(sp)
  801840:	018b8034 	movhi	r6,11776
  801844:	b80f883a 	mov	r7,r23
  801848:	08038f80 	call	8038f8 <__muldf3>
  80184c:	d9000817 	ldw	r4,32(sp)
  801850:	d9401217 	ldw	r5,72(sp)
  801854:	100d883a 	mov	r6,r2
  801858:	180f883a 	mov	r7,r3
  80185c:	1025883a 	mov	r18,r2
  801860:	1827883a 	mov	r19,r3
  801864:	08038040 	call	803804 <__subdf3>
  801868:	d9400d17 	ldw	r5,52(sp)
  80186c:	d9000c17 	ldw	r4,48(sp)
  801870:	02094834 	movhi	r8,9504
  801874:	42127044 	addi	r8,r8,18881
  801878:	024e5f34 	movhi	r9,14716
  80187c:	4a60e684 	addi	r9,r9,-31846
  801880:	480f883a 	mov	r7,r9
  801884:	400d883a 	mov	r6,r8
  801888:	182b883a 	mov	r21,r3
  80188c:	d8800e15 	stw	r2,56(sp)
  801890:	08038f80 	call	8038f8 <__muldf3>
  801894:	d9000817 	ldw	r4,32(sp)
  801898:	d9401217 	ldw	r5,72(sp)
  80189c:	d9800e17 	ldw	r6,56(sp)
  8018a0:	a80f883a 	mov	r7,r21
  8018a4:	1021883a 	mov	r16,r2
  8018a8:	1823883a 	mov	r17,r3
  8018ac:	dd400f15 	stw	r21,60(sp)
  8018b0:	08038040 	call	803804 <__subdf3>
  8018b4:	180b883a 	mov	r5,r3
  8018b8:	900d883a 	mov	r6,r18
  8018bc:	980f883a 	mov	r7,r19
  8018c0:	1009883a 	mov	r4,r2
  8018c4:	08038040 	call	803804 <__subdf3>
  8018c8:	180f883a 	mov	r7,r3
  8018cc:	880b883a 	mov	r5,r17
  8018d0:	8009883a 	mov	r4,r16
  8018d4:	100d883a 	mov	r6,r2
  8018d8:	08038040 	call	803804 <__subdf3>
  8018dc:	d9000e17 	ldw	r4,56(sp)
  8018e0:	1021883a 	mov	r16,r2
  8018e4:	1823883a 	mov	r17,r3
  8018e8:	a80b883a 	mov	r5,r21
  8018ec:	180f883a 	mov	r7,r3
  8018f0:	003fa606 	br	80178c <__ieee754_rem_pio2+0x6c0>

008018f4 <__kernel_cos>:
  8018f4:	defff104 	addi	sp,sp,-60
  8018f8:	00a00034 	movhi	r2,32768
  8018fc:	10bfffc4 	addi	r2,r2,-1
  801900:	dd800c15 	stw	r22,48(sp)
  801904:	116c703a 	and	r22,r2,r5
  801908:	0005883a 	mov	r2,zero
  80190c:	dd000a15 	stw	r20,40(sp)
  801910:	d8800215 	stw	r2,8(sp)
  801914:	2029883a 	mov	r20,r4
  801918:	008f9034 	movhi	r2,15936
  80191c:	10bfffc4 	addi	r2,r2,-1
  801920:	0009883a 	mov	r4,zero
  801924:	dd400b15 	stw	r21,44(sp)
  801928:	dfc00e15 	stw	ra,56(sp)
  80192c:	ddc00d15 	stw	r23,52(sp)
  801930:	dcc00915 	stw	r19,36(sp)
  801934:	dc800815 	stw	r18,32(sp)
  801938:	dc400715 	stw	r17,28(sp)
  80193c:	dc000615 	stw	r16,24(sp)
  801940:	282b883a 	mov	r21,r5
  801944:	d9800415 	stw	r6,16(sp)
  801948:	d9c00515 	stw	r7,20(sp)
  80194c:	d9000315 	stw	r4,12(sp)
  801950:	15809216 	blt	r2,r22,801b9c <__kernel_cos+0x2a8>
  801954:	a009883a 	mov	r4,r20
  801958:	0803f4c0 	call	803f4c <__fixdfsi>
  80195c:	10011c26 	beq	r2,zero,801dd0 <__kernel_cos+0x4dc>
  801960:	a009883a 	mov	r4,r20
  801964:	a80b883a 	mov	r5,r21
  801968:	a00d883a 	mov	r6,r20
  80196c:	a80f883a 	mov	r7,r21
  801970:	08038f80 	call	8038f8 <__muldf3>
  801974:	1021883a 	mov	r16,r2
  801978:	1823883a 	mov	r17,r3
  80197c:	1025883a 	mov	r18,r2
  801980:	1827883a 	mov	r19,r3
  801984:	00afa234 	movhi	r2,48776
  801988:	108e3504 	addi	r2,r2,14548
  80198c:	00ef6a74 	movhi	r3,48553
  801990:	18feba44 	addi	r3,r3,-1303
  801994:	8009883a 	mov	r4,r16
  801998:	880b883a 	mov	r5,r17
  80199c:	180f883a 	mov	r7,r3
  8019a0:	100d883a 	mov	r6,r2
  8019a4:	08038f80 	call	8038f8 <__muldf3>
  8019a8:	022f6d74 	movhi	r8,48565
  8019ac:	422c7104 	addi	r8,r8,-20028
  8019b0:	024f88b4 	movhi	r9,15906
  8019b4:	4a7ba784 	addi	r9,r9,-4450
  8019b8:	480f883a 	mov	r7,r9
  8019bc:	400d883a 	mov	r6,r8
  8019c0:	180b883a 	mov	r5,r3
  8019c4:	1009883a 	mov	r4,r2
  8019c8:	08038840 	call	803884 <__adddf3>
  8019cc:	180f883a 	mov	r7,r3
  8019d0:	8009883a 	mov	r4,r16
  8019d4:	880b883a 	mov	r5,r17
  8019d8:	100d883a 	mov	r6,r2
  8019dc:	08038f80 	call	8038f8 <__muldf3>
  8019e0:	02202734 	movhi	r8,32924
  8019e4:	4214ab44 	addi	r8,r8,21165
  8019e8:	024fa4b4 	movhi	r9,16018
  8019ec:	4a5f93c4 	addi	r9,r9,32335
  8019f0:	480f883a 	mov	r7,r9
  8019f4:	400d883a 	mov	r6,r8
  8019f8:	180b883a 	mov	r5,r3
  8019fc:	1009883a 	mov	r4,r2
  801a00:	08038040 	call	803804 <__subdf3>
  801a04:	180f883a 	mov	r7,r3
  801a08:	8009883a 	mov	r4,r16
  801a0c:	880b883a 	mov	r5,r17
  801a10:	100d883a 	mov	r6,r2
  801a14:	08038f80 	call	8038f8 <__muldf3>
  801a18:	020672f4 	movhi	r8,6603
  801a1c:	42056404 	addi	r8,r8,5520
  801a20:	024fbeb4 	movhi	r9,16122
  801a24:	4a406804 	addi	r9,r9,416
  801a28:	480f883a 	mov	r7,r9
  801a2c:	400d883a 	mov	r6,r8
  801a30:	180b883a 	mov	r5,r3
  801a34:	1009883a 	mov	r4,r2
  801a38:	08038840 	call	803884 <__adddf3>
  801a3c:	180f883a 	mov	r7,r3
  801a40:	8009883a 	mov	r4,r16
  801a44:	880b883a 	mov	r5,r17
  801a48:	100d883a 	mov	r6,r2
  801a4c:	08038f80 	call	8038f8 <__muldf3>
  801a50:	0205b074 	movhi	r8,5825
  801a54:	42145dc4 	addi	r8,r8,20855
  801a58:	024fd5f4 	movhi	r9,16215
  801a5c:	4a705b04 	addi	r9,r9,-16020
  801a60:	480f883a 	mov	r7,r9
  801a64:	400d883a 	mov	r6,r8
  801a68:	180b883a 	mov	r5,r3
  801a6c:	1009883a 	mov	r4,r2
  801a70:	08038040 	call	803804 <__subdf3>
  801a74:	180f883a 	mov	r7,r3
  801a78:	8009883a 	mov	r4,r16
  801a7c:	880b883a 	mov	r5,r17
  801a80:	100d883a 	mov	r6,r2
  801a84:	08038f80 	call	8038f8 <__muldf3>
  801a88:	02155574 	movhi	r8,21845
  801a8c:	42155304 	addi	r8,r8,21836
  801a90:	024fe974 	movhi	r9,16293
  801a94:	4a555544 	addi	r9,r9,21845
  801a98:	480f883a 	mov	r7,r9
  801a9c:	400d883a 	mov	r6,r8
  801aa0:	180b883a 	mov	r5,r3
  801aa4:	1009883a 	mov	r4,r2
  801aa8:	08038840 	call	803884 <__adddf3>
  801aac:	180f883a 	mov	r7,r3
  801ab0:	880b883a 	mov	r5,r17
  801ab4:	8009883a 	mov	r4,r16
  801ab8:	100d883a 	mov	r6,r2
  801abc:	08038f80 	call	8038f8 <__muldf3>
  801ac0:	1021883a 	mov	r16,r2
  801ac4:	1823883a 	mov	r17,r3
  801ac8:	0005883a 	mov	r2,zero
  801acc:	00cff834 	movhi	r3,16352
  801ad0:	9009883a 	mov	r4,r18
  801ad4:	980b883a 	mov	r5,r19
  801ad8:	180f883a 	mov	r7,r3
  801adc:	100d883a 	mov	r6,r2
  801ae0:	08038f80 	call	8038f8 <__muldf3>
  801ae4:	980b883a 	mov	r5,r19
  801ae8:	880f883a 	mov	r7,r17
  801aec:	9009883a 	mov	r4,r18
  801af0:	800d883a 	mov	r6,r16
  801af4:	1025883a 	mov	r18,r2
  801af8:	1827883a 	mov	r19,r3
  801afc:	08038f80 	call	8038f8 <__muldf3>
  801b00:	d9c00517 	ldw	r7,20(sp)
  801b04:	d9800417 	ldw	r6,16(sp)
  801b08:	a80b883a 	mov	r5,r21
  801b0c:	a009883a 	mov	r4,r20
  801b10:	1021883a 	mov	r16,r2
  801b14:	1823883a 	mov	r17,r3
  801b18:	08038f80 	call	8038f8 <__muldf3>
  801b1c:	180f883a 	mov	r7,r3
  801b20:	880b883a 	mov	r5,r17
  801b24:	8009883a 	mov	r4,r16
  801b28:	100d883a 	mov	r6,r2
  801b2c:	08038040 	call	803804 <__subdf3>
  801b30:	180f883a 	mov	r7,r3
  801b34:	980b883a 	mov	r5,r19
  801b38:	9009883a 	mov	r4,r18
  801b3c:	100d883a 	mov	r6,r2
  801b40:	08038040 	call	803804 <__subdf3>
  801b44:	0011883a 	mov	r8,zero
  801b48:	024ffc34 	movhi	r9,16368
  801b4c:	480b883a 	mov	r5,r9
  801b50:	180f883a 	mov	r7,r3
  801b54:	4009883a 	mov	r4,r8
  801b58:	100d883a 	mov	r6,r2
  801b5c:	08038040 	call	803804 <__subdf3>
  801b60:	100d883a 	mov	r6,r2
  801b64:	180f883a 	mov	r7,r3
  801b68:	3005883a 	mov	r2,r6
  801b6c:	3807883a 	mov	r3,r7
  801b70:	dfc00e17 	ldw	ra,56(sp)
  801b74:	ddc00d17 	ldw	r23,52(sp)
  801b78:	dd800c17 	ldw	r22,48(sp)
  801b7c:	dd400b17 	ldw	r21,44(sp)
  801b80:	dd000a17 	ldw	r20,40(sp)
  801b84:	dcc00917 	ldw	r19,36(sp)
  801b88:	dc800817 	ldw	r18,32(sp)
  801b8c:	dc400717 	ldw	r17,28(sp)
  801b90:	dc000617 	ldw	r16,24(sp)
  801b94:	dec00f04 	addi	sp,sp,60
  801b98:	f800283a 	ret
  801b9c:	280f883a 	mov	r7,r5
  801ba0:	a009883a 	mov	r4,r20
  801ba4:	a00d883a 	mov	r6,r20
  801ba8:	08038f80 	call	8038f8 <__muldf3>
  801bac:	1021883a 	mov	r16,r2
  801bb0:	1823883a 	mov	r17,r3
  801bb4:	1025883a 	mov	r18,r2
  801bb8:	1827883a 	mov	r19,r3
  801bbc:	00afa234 	movhi	r2,48776
  801bc0:	108e3504 	addi	r2,r2,14548
  801bc4:	00ef6a74 	movhi	r3,48553
  801bc8:	18feba44 	addi	r3,r3,-1303
  801bcc:	8009883a 	mov	r4,r16
  801bd0:	880b883a 	mov	r5,r17
  801bd4:	180f883a 	mov	r7,r3
  801bd8:	100d883a 	mov	r6,r2
  801bdc:	08038f80 	call	8038f8 <__muldf3>
  801be0:	022f6d74 	movhi	r8,48565
  801be4:	422c7104 	addi	r8,r8,-20028
  801be8:	024f88b4 	movhi	r9,15906
  801bec:	4a7ba784 	addi	r9,r9,-4450
  801bf0:	480f883a 	mov	r7,r9
  801bf4:	400d883a 	mov	r6,r8
  801bf8:	180b883a 	mov	r5,r3
  801bfc:	1009883a 	mov	r4,r2
  801c00:	08038840 	call	803884 <__adddf3>
  801c04:	180f883a 	mov	r7,r3
  801c08:	8009883a 	mov	r4,r16
  801c0c:	880b883a 	mov	r5,r17
  801c10:	100d883a 	mov	r6,r2
  801c14:	08038f80 	call	8038f8 <__muldf3>
  801c18:	02202734 	movhi	r8,32924
  801c1c:	4214ab44 	addi	r8,r8,21165
  801c20:	024fa4b4 	movhi	r9,16018
  801c24:	4a5f93c4 	addi	r9,r9,32335
  801c28:	480f883a 	mov	r7,r9
  801c2c:	400d883a 	mov	r6,r8
  801c30:	180b883a 	mov	r5,r3
  801c34:	1009883a 	mov	r4,r2
  801c38:	08038040 	call	803804 <__subdf3>
  801c3c:	180f883a 	mov	r7,r3
  801c40:	8009883a 	mov	r4,r16
  801c44:	880b883a 	mov	r5,r17
  801c48:	100d883a 	mov	r6,r2
  801c4c:	08038f80 	call	8038f8 <__muldf3>
  801c50:	020672f4 	movhi	r8,6603
  801c54:	42056404 	addi	r8,r8,5520
  801c58:	024fbeb4 	movhi	r9,16122
  801c5c:	4a406804 	addi	r9,r9,416
  801c60:	480f883a 	mov	r7,r9
  801c64:	400d883a 	mov	r6,r8
  801c68:	180b883a 	mov	r5,r3
  801c6c:	1009883a 	mov	r4,r2
  801c70:	08038840 	call	803884 <__adddf3>
  801c74:	180f883a 	mov	r7,r3
  801c78:	8009883a 	mov	r4,r16
  801c7c:	880b883a 	mov	r5,r17
  801c80:	100d883a 	mov	r6,r2
  801c84:	08038f80 	call	8038f8 <__muldf3>
  801c88:	0205b074 	movhi	r8,5825
  801c8c:	42145dc4 	addi	r8,r8,20855
  801c90:	024fd5f4 	movhi	r9,16215
  801c94:	4a705b04 	addi	r9,r9,-16020
  801c98:	480f883a 	mov	r7,r9
  801c9c:	400d883a 	mov	r6,r8
  801ca0:	180b883a 	mov	r5,r3
  801ca4:	1009883a 	mov	r4,r2
  801ca8:	08038040 	call	803804 <__subdf3>
  801cac:	180f883a 	mov	r7,r3
  801cb0:	8009883a 	mov	r4,r16
  801cb4:	880b883a 	mov	r5,r17
  801cb8:	100d883a 	mov	r6,r2
  801cbc:	08038f80 	call	8038f8 <__muldf3>
  801cc0:	02155574 	movhi	r8,21845
  801cc4:	42155304 	addi	r8,r8,21836
  801cc8:	024fe974 	movhi	r9,16293
  801ccc:	4a555544 	addi	r9,r9,21845
  801cd0:	480f883a 	mov	r7,r9
  801cd4:	400d883a 	mov	r6,r8
  801cd8:	180b883a 	mov	r5,r3
  801cdc:	1009883a 	mov	r4,r2
  801ce0:	08038840 	call	803884 <__adddf3>
  801ce4:	180f883a 	mov	r7,r3
  801ce8:	880b883a 	mov	r5,r17
  801cec:	8009883a 	mov	r4,r16
  801cf0:	100d883a 	mov	r6,r2
  801cf4:	08038f80 	call	8038f8 <__muldf3>
  801cf8:	1021883a 	mov	r16,r2
  801cfc:	008ff4f4 	movhi	r2,16339
  801d00:	108ccc84 	addi	r2,r2,13106
  801d04:	1823883a 	mov	r17,r3
  801d08:	15bf6f0e 	bge	r2,r22,801ac8 <__kernel_cos+0x1d4>
  801d0c:	008ffa74 	movhi	r2,16361
  801d10:	1580320e 	bge	r2,r22,801ddc <__kernel_cos+0x4e8>
  801d14:	0005883a 	mov	r2,zero
  801d18:	010ff9f4 	movhi	r4,16359
  801d1c:	002d883a 	mov	r22,zero
  801d20:	d8800015 	stw	r2,0(sp)
  801d24:	05cff4b4 	movhi	r23,16338
  801d28:	d9000115 	stw	r4,4(sp)
  801d2c:	0005883a 	mov	r2,zero
  801d30:	00cff834 	movhi	r3,16352
  801d34:	9009883a 	mov	r4,r18
  801d38:	980b883a 	mov	r5,r19
  801d3c:	180f883a 	mov	r7,r3
  801d40:	100d883a 	mov	r6,r2
  801d44:	08038f80 	call	8038f8 <__muldf3>
  801d48:	180b883a 	mov	r5,r3
  801d4c:	b80f883a 	mov	r7,r23
  801d50:	1009883a 	mov	r4,r2
  801d54:	b00d883a 	mov	r6,r22
  801d58:	08038040 	call	803804 <__subdf3>
  801d5c:	980b883a 	mov	r5,r19
  801d60:	880f883a 	mov	r7,r17
  801d64:	9009883a 	mov	r4,r18
  801d68:	800d883a 	mov	r6,r16
  801d6c:	1025883a 	mov	r18,r2
  801d70:	1827883a 	mov	r19,r3
  801d74:	08038f80 	call	8038f8 <__muldf3>
  801d78:	d9c00517 	ldw	r7,20(sp)
  801d7c:	d9800417 	ldw	r6,16(sp)
  801d80:	a80b883a 	mov	r5,r21
  801d84:	a009883a 	mov	r4,r20
  801d88:	1021883a 	mov	r16,r2
  801d8c:	1823883a 	mov	r17,r3
  801d90:	08038f80 	call	8038f8 <__muldf3>
  801d94:	180f883a 	mov	r7,r3
  801d98:	880b883a 	mov	r5,r17
  801d9c:	8009883a 	mov	r4,r16
  801da0:	100d883a 	mov	r6,r2
  801da4:	08038040 	call	803804 <__subdf3>
  801da8:	180f883a 	mov	r7,r3
  801dac:	980b883a 	mov	r5,r19
  801db0:	9009883a 	mov	r4,r18
  801db4:	100d883a 	mov	r6,r2
  801db8:	08038040 	call	803804 <__subdf3>
  801dbc:	d9400117 	ldw	r5,4(sp)
  801dc0:	d9000017 	ldw	r4,0(sp)
  801dc4:	180f883a 	mov	r7,r3
  801dc8:	100d883a 	mov	r6,r2
  801dcc:	003f6306 	br	801b5c <__kernel_cos+0x268>
  801dd0:	000d883a 	mov	r6,zero
  801dd4:	01cffc34 	movhi	r7,16368
  801dd8:	003f6306 	br	801b68 <__kernel_cos+0x274>
  801ddc:	00bff834 	movhi	r2,65504
  801de0:	b0ad883a 	add	r22,r22,r2
  801de4:	dd800315 	stw	r22,12(sp)
  801de8:	d9000317 	ldw	r4,12(sp)
  801dec:	0005883a 	mov	r2,zero
  801df0:	00cffc34 	movhi	r3,16368
  801df4:	002d883a 	mov	r22,zero
  801df8:	200f883a 	mov	r7,r4
  801dfc:	202f883a 	mov	r23,r4
  801e00:	180b883a 	mov	r5,r3
  801e04:	1009883a 	mov	r4,r2
  801e08:	b00d883a 	mov	r6,r22
  801e0c:	d8800215 	stw	r2,8(sp)
  801e10:	08038040 	call	803804 <__subdf3>
  801e14:	d8800015 	stw	r2,0(sp)
  801e18:	d8c00115 	stw	r3,4(sp)
  801e1c:	003fc306 	br	801d2c <__kernel_cos+0x438>

00801e20 <__kernel_rem_pio2>:
  801e20:	deff5304 	addi	sp,sp,-692
  801e24:	d880ad17 	ldw	r2,692(sp)
  801e28:	d9009615 	stw	r4,600(sp)
  801e2c:	d9409715 	stw	r5,604(sp)
  801e30:	1087883a 	add	r3,r2,r2
  801e34:	18c7883a 	add	r3,r3,r3
  801e38:	00802234 	movhi	r2,136
  801e3c:	10bafa04 	addi	r2,r2,-5144
  801e40:	1887883a 	add	r3,r3,r2
  801e44:	18c00017 	ldw	r3,0(r3)
  801e48:	313fff44 	addi	r4,r6,-3
  801e4c:	01400604 	movi	r5,24
  801e50:	df00ab15 	stw	fp,684(sp)
  801e54:	dc00a315 	stw	r16,652(sp)
  801e58:	d8c09515 	stw	r3,596(sp)
  801e5c:	dfc0ac15 	stw	ra,688(sp)
  801e60:	ddc0aa15 	stw	r23,680(sp)
  801e64:	dd80a915 	stw	r22,676(sp)
  801e68:	dd40a815 	stw	r21,672(sp)
  801e6c:	dd00a715 	stw	r20,668(sp)
  801e70:	dcc0a615 	stw	r19,664(sp)
  801e74:	dc80a515 	stw	r18,660(sp)
  801e78:	dc40a415 	stw	r17,656(sp)
  801e7c:	3021883a 	mov	r16,r6
  801e80:	d9c09815 	stw	r7,608(sp)
  801e84:	08040a00 	call	8040a0 <__divsi3>
  801e88:	d8c09817 	ldw	r3,608(sp)
  801e8c:	d8808c15 	stw	r2,560(sp)
  801e90:	1f3fffc4 	addi	fp,r3,-1
  801e94:	10031816 	blt	r2,zero,802af8 <__kernel_rem_pio2+0xcd8>
  801e98:	d9008c17 	ldw	r4,560(sp)
  801e9c:	d9409517 	ldw	r5,596(sp)
  801ea0:	20bffa24 	muli	r2,r4,-24
  801ea4:	2f07883a 	add	r3,r5,fp
  801ea8:	8085883a 	add	r2,r16,r2
  801eac:	10bffa04 	addi	r2,r2,-24
  801eb0:	d8809315 	stw	r2,588(sp)
  801eb4:	18001516 	blt	r3,zero,801f0c <__kernel_rem_pio2+0xec>
  801eb8:	2721c83a 	sub	r16,r4,fp
  801ebc:	d980ae17 	ldw	r6,696(sp)
  801ec0:	8405883a 	add	r2,r16,r16
  801ec4:	1085883a 	add	r2,r2,r2
  801ec8:	30a3883a 	add	r17,r6,r2
  801ecc:	80e7883a 	add	r19,r16,r3
  801ed0:	dc801404 	addi	r18,sp,80
  801ed4:	00000106 	br	801edc <__kernel_rem_pio2+0xbc>
  801ed8:	84000044 	addi	r16,r16,1
  801edc:	0009883a 	mov	r4,zero
  801ee0:	000b883a 	mov	r5,zero
  801ee4:	80000416 	blt	r16,zero,801ef8 <__kernel_rem_pio2+0xd8>
  801ee8:	89000017 	ldw	r4,0(r17)
  801eec:	0803e540 	call	803e54 <__floatsidf>
  801ef0:	1009883a 	mov	r4,r2
  801ef4:	180b883a 	mov	r5,r3
  801ef8:	91400115 	stw	r5,4(r18)
  801efc:	91000015 	stw	r4,0(r18)
  801f00:	8c400104 	addi	r17,r17,4
  801f04:	94800204 	addi	r18,r18,8
  801f08:	84fff31e 	bne	r16,r19,801ed8 <__kernel_rem_pio2+0xb8>
  801f0c:	d9c09517 	ldw	r7,596(sp)
  801f10:	38002416 	blt	r7,zero,801fa4 <__kernel_rem_pio2+0x184>
  801f14:	da809817 	ldw	r10,608(sp)
  801f18:	e029883a 	mov	r20,fp
  801f1c:	dd406404 	addi	r21,sp,400
  801f20:	3aaf883a 	add	r23,r7,r10
  801f24:	e02c403a 	cmpge	r22,fp,zero
  801f28:	b0023e26 	beq	r22,zero,802824 <__kernel_rem_pio2+0xa04>
  801f2c:	dcc09617 	ldw	r19,600(sp)
  801f30:	0021883a 	mov	r16,zero
  801f34:	0025883a 	mov	r18,zero
  801f38:	0023883a 	mov	r17,zero
  801f3c:	a489c83a 	sub	r4,r20,r18
  801f40:	200890fa 	slli	r4,r4,3
  801f44:	99800017 	ldw	r6,0(r19)
  801f48:	99c00117 	ldw	r7,4(r19)
  801f4c:	26c9883a 	add	r4,r4,sp
  801f50:	20c01517 	ldw	r3,84(r4)
  801f54:	20801417 	ldw	r2,80(r4)
  801f58:	94800044 	addi	r18,r18,1
  801f5c:	180b883a 	mov	r5,r3
  801f60:	1009883a 	mov	r4,r2
  801f64:	08038f80 	call	8038f8 <__muldf3>
  801f68:	180f883a 	mov	r7,r3
  801f6c:	880b883a 	mov	r5,r17
  801f70:	8009883a 	mov	r4,r16
  801f74:	100d883a 	mov	r6,r2
  801f78:	08038840 	call	803884 <__adddf3>
  801f7c:	1021883a 	mov	r16,r2
  801f80:	d8809817 	ldw	r2,608(sp)
  801f84:	9cc00204 	addi	r19,r19,8
  801f88:	1823883a 	mov	r17,r3
  801f8c:	14bfeb1e 	bne	r2,r18,801f3c <__kernel_rem_pio2+0x11c>
  801f90:	a5000044 	addi	r20,r20,1
  801f94:	ac400115 	stw	r17,4(r21)
  801f98:	ac000015 	stw	r16,0(r21)
  801f9c:	ad400204 	addi	r21,r21,8
  801fa0:	a5ffe11e 	bne	r20,r23,801f28 <__kernel_rem_pio2+0x108>
  801fa4:	d8c09517 	ldw	r3,596(sp)
  801fa8:	d9409317 	ldw	r5,588(sp)
  801fac:	e038403a 	cmpge	fp,fp,zero
  801fb0:	d8c08d15 	stw	r3,564(sp)
  801fb4:	d9008d17 	ldw	r4,564(sp)
  801fb8:	18c5883a 	add	r2,r3,r3
  801fbc:	10c7883a 	add	r3,r2,r3
  801fc0:	1907883a 	add	r3,r3,r4
  801fc4:	1085883a 	add	r2,r2,r2
  801fc8:	16c5883a 	add	r2,r2,sp
  801fcc:	1ec7883a 	add	r3,r3,sp
  801fd0:	29400050 	cmplti	r5,r5,1
  801fd4:	df00a215 	stw	fp,648(sp)
  801fd8:	d8809915 	stw	r2,612(sp)
  801fdc:	d8c0a115 	stw	r3,644(sp)
  801fe0:	d940a015 	stw	r5,640(sp)
  801fe4:	d9808d17 	ldw	r6,564(sp)
  801fe8:	300490fa 	slli	r2,r6,3
  801fec:	16c5883a 	add	r2,r2,sp
  801ff0:	15006417 	ldw	r20,400(r2)
  801ff4:	15406517 	ldw	r21,404(r2)
  801ff8:	01802e0e 	bge	zero,r6,8020b4 <__kernel_rem_pio2+0x294>
  801ffc:	102d883a 	mov	r22,r2
  802000:	302f883a 	mov	r23,r6
  802004:	d839883a 	mov	fp,sp
  802008:	0005883a 	mov	r2,zero
  80200c:	00cf9c34 	movhi	r3,15984
  802010:	180f883a 	mov	r7,r3
  802014:	100d883a 	mov	r6,r2
  802018:	a009883a 	mov	r4,r20
  80201c:	a80b883a 	mov	r5,r21
  802020:	08038f80 	call	8038f8 <__muldf3>
  802024:	180b883a 	mov	r5,r3
  802028:	1009883a 	mov	r4,r2
  80202c:	0803f4c0 	call	803f4c <__fixdfsi>
  802030:	1009883a 	mov	r4,r2
  802034:	0803e540 	call	803e54 <__floatsidf>
  802038:	1021883a 	mov	r16,r2
  80203c:	1823883a 	mov	r17,r3
  802040:	0005883a 	mov	r2,zero
  802044:	00f05c34 	movhi	r3,49520
  802048:	180f883a 	mov	r7,r3
  80204c:	8009883a 	mov	r4,r16
  802050:	880b883a 	mov	r5,r17
  802054:	100d883a 	mov	r6,r2
  802058:	08038f80 	call	8038f8 <__muldf3>
  80205c:	180b883a 	mov	r5,r3
  802060:	a80f883a 	mov	r7,r21
  802064:	a00d883a 	mov	r6,r20
  802068:	1009883a 	mov	r4,r2
  80206c:	08038840 	call	803884 <__adddf3>
  802070:	180b883a 	mov	r5,r3
  802074:	1009883a 	mov	r4,r2
  802078:	0803f4c0 	call	803f4c <__fixdfsi>
  80207c:	e0800015 	stw	r2,0(fp)
  802080:	b5bffe04 	addi	r22,r22,-8
  802084:	b0806417 	ldw	r2,400(r22)
  802088:	b0c06517 	ldw	r3,404(r22)
  80208c:	8009883a 	mov	r4,r16
  802090:	880b883a 	mov	r5,r17
  802094:	180f883a 	mov	r7,r3
  802098:	100d883a 	mov	r6,r2
  80209c:	08038840 	call	803884 <__adddf3>
  8020a0:	bdffffc4 	addi	r23,r23,-1
  8020a4:	e7000104 	addi	fp,fp,4
  8020a8:	1029883a 	mov	r20,r2
  8020ac:	182b883a 	mov	r21,r3
  8020b0:	b83fd51e 	bne	r23,zero,802008 <__kernel_rem_pio2+0x1e8>
  8020b4:	d9809317 	ldw	r6,588(sp)
  8020b8:	a80b883a 	mov	r5,r21
  8020bc:	a009883a 	mov	r4,r20
  8020c0:	08031f00 	call	8031f0 <scalbn>
  8020c4:	0009883a 	mov	r4,zero
  8020c8:	014ff034 	movhi	r5,16320
  8020cc:	280f883a 	mov	r7,r5
  8020d0:	200d883a 	mov	r6,r4
  8020d4:	180b883a 	mov	r5,r3
  8020d8:	1009883a 	mov	r4,r2
  8020dc:	1021883a 	mov	r16,r2
  8020e0:	1823883a 	mov	r17,r3
  8020e4:	08038f80 	call	8038f8 <__muldf3>
  8020e8:	180b883a 	mov	r5,r3
  8020ec:	1009883a 	mov	r4,r2
  8020f0:	0802fcc0 	call	802fcc <floor>
  8020f4:	0011883a 	mov	r8,zero
  8020f8:	02700834 	movhi	r9,49184
  8020fc:	480f883a 	mov	r7,r9
  802100:	400d883a 	mov	r6,r8
  802104:	180b883a 	mov	r5,r3
  802108:	1009883a 	mov	r4,r2
  80210c:	08038f80 	call	8038f8 <__muldf3>
  802110:	180f883a 	mov	r7,r3
  802114:	100d883a 	mov	r6,r2
  802118:	880b883a 	mov	r5,r17
  80211c:	8009883a 	mov	r4,r16
  802120:	08038840 	call	803884 <__adddf3>
  802124:	180b883a 	mov	r5,r3
  802128:	1009883a 	mov	r4,r2
  80212c:	1823883a 	mov	r17,r3
  802130:	1021883a 	mov	r16,r2
  802134:	0803f4c0 	call	803f4c <__fixdfsi>
  802138:	1009883a 	mov	r4,r2
  80213c:	d8809415 	stw	r2,592(sp)
  802140:	0803e540 	call	803e54 <__floatsidf>
  802144:	880b883a 	mov	r5,r17
  802148:	8009883a 	mov	r4,r16
  80214c:	180f883a 	mov	r7,r3
  802150:	100d883a 	mov	r6,r2
  802154:	08038040 	call	803804 <__subdf3>
  802158:	d9c0a017 	ldw	r7,640(sp)
  80215c:	180d883a 	mov	r6,r3
  802160:	1021883a 	mov	r16,r2
  802164:	1823883a 	mov	r17,r3
  802168:	38017d1e 	bne	r7,zero,802760 <__kernel_rem_pio2+0x940>
  80216c:	da808d17 	ldw	r10,564(sp)
  802170:	d9009317 	ldw	r4,588(sp)
  802174:	00c00604 	movi	r3,24
  802178:	50bfffc4 	addi	r2,r10,-1
  80217c:	1085883a 	add	r2,r2,r2
  802180:	1085883a 	add	r2,r2,r2
  802184:	16c5883a 	add	r2,r2,sp
  802188:	11400017 	ldw	r5,0(r2)
  80218c:	1907c83a 	sub	r3,r3,r4
  802190:	d9c09317 	ldw	r7,588(sp)
  802194:	28cdd83a 	sra	r6,r5,r3
  802198:	010005c4 	movi	r4,23
  80219c:	da809417 	ldw	r10,592(sp)
  8021a0:	30c6983a 	sll	r3,r6,r3
  8021a4:	21c9c83a 	sub	r4,r4,r7
  8021a8:	5195883a 	add	r10,r10,r6
  8021ac:	28cbc83a 	sub	r5,r5,r3
  8021b0:	2909d83a 	sra	r4,r5,r4
  8021b4:	da809415 	stw	r10,592(sp)
  8021b8:	11400015 	stw	r5,0(r2)
  8021bc:	d9009215 	stw	r4,584(sp)
  8021c0:	d9409217 	ldw	r5,584(sp)
  8021c4:	0140270e 	bge	zero,r5,802264 <__kernel_rem_pio2+0x444>
  8021c8:	d9809417 	ldw	r6,592(sp)
  8021cc:	d9c08d17 	ldw	r7,564(sp)
  8021d0:	31800044 	addi	r6,r6,1
  8021d4:	d9809415 	stw	r6,592(sp)
  8021d8:	01c1a50e 	bge	zero,r7,802870 <__kernel_rem_pio2+0xa50>
  8021dc:	002d883a 	mov	r22,zero
  8021e0:	000b883a 	mov	r5,zero
  8021e4:	d809883a 	mov	r4,sp
  8021e8:	01c04034 	movhi	r7,256
  8021ec:	01804034 	movhi	r6,256
  8021f0:	31bfffc4 	addi	r6,r6,-1
  8021f4:	00000806 	br	802218 <__kernel_rem_pio2+0x3f8>
  8021f8:	38c5c83a 	sub	r2,r7,r3
  8021fc:	18000226 	beq	r3,zero,802208 <__kernel_rem_pio2+0x3e8>
  802200:	05800044 	movi	r22,1
  802204:	20800015 	stw	r2,0(r4)
  802208:	da808d17 	ldw	r10,564(sp)
  80220c:	29400044 	addi	r5,r5,1
  802210:	21000104 	addi	r4,r4,4
  802214:	51400926 	beq	r10,r5,80223c <__kernel_rem_pio2+0x41c>
  802218:	b004c03a 	cmpne	r2,r22,zero
  80221c:	20c00017 	ldw	r3,0(r4)
  802220:	103ff526 	beq	r2,zero,8021f8 <__kernel_rem_pio2+0x3d8>
  802224:	da808d17 	ldw	r10,564(sp)
  802228:	30c5c83a 	sub	r2,r6,r3
  80222c:	29400044 	addi	r5,r5,1
  802230:	20800015 	stw	r2,0(r4)
  802234:	21000104 	addi	r4,r4,4
  802238:	517ff71e 	bne	r10,r5,802218 <__kernel_rem_pio2+0x3f8>
  80223c:	d880a017 	ldw	r2,640(sp)
  802240:	1000051e 	bne	r2,zero,802258 <__kernel_rem_pio2+0x438>
  802244:	d8c09317 	ldw	r3,588(sp)
  802248:	00800044 	movi	r2,1
  80224c:	18814e26 	beq	r3,r2,802788 <__kernel_rem_pio2+0x968>
  802250:	00800084 	movi	r2,2
  802254:	18815826 	beq	r3,r2,8027b8 <__kernel_rem_pio2+0x998>
  802258:	d9c09217 	ldw	r7,584(sp)
  80225c:	00800084 	movi	r2,2
  802260:	38806926 	beq	r7,r2,802408 <__kernel_rem_pio2+0x5e8>
  802264:	000d883a 	mov	r6,zero
  802268:	000f883a 	mov	r7,zero
  80226c:	8009883a 	mov	r4,r16
  802270:	880b883a 	mov	r5,r17
  802274:	0803cbc0 	call	803cbc <__eqdf2>
  802278:	1000811e 	bne	r2,zero,802480 <__kernel_rem_pio2+0x660>
  80227c:	da808d17 	ldw	r10,564(sp)
  802280:	d8809517 	ldw	r2,596(sp)
  802284:	51bfffc4 	addi	r6,r10,-1
  802288:	30800c16 	blt	r6,r2,8022bc <__kernel_rem_pio2+0x49c>
  80228c:	3185883a 	add	r2,r6,r6
  802290:	1085883a 	add	r2,r2,r2
  802294:	16c9883a 	add	r4,r2,sp
  802298:	3007883a 	mov	r3,r6
  80229c:	000b883a 	mov	r5,zero
  8022a0:	20800017 	ldw	r2,0(r4)
  8022a4:	d9c09517 	ldw	r7,596(sp)
  8022a8:	18ffffc4 	addi	r3,r3,-1
  8022ac:	213fff04 	addi	r4,r4,-4
  8022b0:	288ab03a 	or	r5,r5,r2
  8022b4:	19fffa0e 	bge	r3,r7,8022a0 <__kernel_rem_pio2+0x480>
  8022b8:	2800791e 	bne	r5,zero,8024a0 <__kernel_rem_pio2+0x680>
  8022bc:	da809917 	ldw	r10,612(sp)
  8022c0:	50bfff17 	ldw	r2,-4(r10)
  8022c4:	1001511e 	bne	r2,zero,80280c <__kernel_rem_pio2+0x9ec>
  8022c8:	d880a117 	ldw	r2,644(sp)
  8022cc:	01000044 	movi	r4,1
  8022d0:	10ffff04 	addi	r3,r2,-4
  8022d4:	18ffff04 	addi	r3,r3,-4
  8022d8:	18800017 	ldw	r2,0(r3)
  8022dc:	21000044 	addi	r4,r4,1
  8022e0:	103ffc26 	beq	r2,zero,8022d4 <__kernel_rem_pio2+0x4b4>
  8022e4:	d8c08d17 	ldw	r3,564(sp)
  8022e8:	192f883a 	add	r23,r3,r4
  8022ec:	1f000044 	addi	fp,r3,1
  8022f0:	bf00020e 	bge	r23,fp,8022fc <__kernel_rem_pio2+0x4dc>
  8022f4:	ddc08d15 	stw	r23,564(sp)
  8022f8:	003f3a06 	br	801fe4 <__kernel_rem_pio2+0x1c4>
  8022fc:	d9408c17 	ldw	r5,560(sp)
  802300:	d9009817 	ldw	r4,608(sp)
  802304:	da80ae17 	ldw	r10,696(sp)
  802308:	1945883a 	add	r2,r3,r5
  80230c:	190f883a 	add	r7,r3,r4
  802310:	1085883a 	add	r2,r2,r2
  802314:	380a90fa 	slli	r5,r7,3
  802318:	e00c90fa 	slli	r6,fp,3
  80231c:	1085883a 	add	r2,r2,r2
  802320:	5085883a 	add	r2,r10,r2
  802324:	d8c01404 	addi	r3,sp,80
  802328:	d9006404 	addi	r4,sp,400
  80232c:	10800104 	addi	r2,r2,4
  802330:	196b883a 	add	r21,r3,r5
  802334:	21a1883a 	add	r16,r4,r6
  802338:	d8809115 	stw	r2,580(sp)
  80233c:	d9c09015 	stw	r7,576(sp)
  802340:	d8809117 	ldw	r2,580(sp)
  802344:	11000017 	ldw	r4,0(r2)
  802348:	0803e540 	call	803e54 <__floatsidf>
  80234c:	a8c00115 	stw	r3,4(r21)
  802350:	d8c0a217 	ldw	r3,648(sp)
  802354:	a8800015 	stw	r2,0(r21)
  802358:	18002826 	beq	r3,zero,8023fc <__kernel_rem_pio2+0x5dc>
  80235c:	d9009017 	ldw	r4,576(sp)
  802360:	dd009617 	ldw	r20,600(sp)
  802364:	0023883a 	mov	r17,zero
  802368:	200490fa 	slli	r2,r4,3
  80236c:	002d883a 	mov	r22,zero
  802370:	0025883a 	mov	r18,zero
  802374:	16e7883a 	add	r19,r2,sp
  802378:	98801417 	ldw	r2,80(r19)
  80237c:	98c01517 	ldw	r3,84(r19)
  802380:	a1800017 	ldw	r6,0(r20)
  802384:	a1c00117 	ldw	r7,4(r20)
  802388:	180b883a 	mov	r5,r3
  80238c:	1009883a 	mov	r4,r2
  802390:	08038f80 	call	8038f8 <__muldf3>
  802394:	180f883a 	mov	r7,r3
  802398:	900b883a 	mov	r5,r18
  80239c:	8809883a 	mov	r4,r17
  8023a0:	100d883a 	mov	r6,r2
  8023a4:	08038840 	call	803884 <__adddf3>
  8023a8:	d9409817 	ldw	r5,608(sp)
  8023ac:	b5800044 	addi	r22,r22,1
  8023b0:	9cfffe04 	addi	r19,r19,-8
  8023b4:	1023883a 	mov	r17,r2
  8023b8:	1825883a 	mov	r18,r3
  8023bc:	a5000204 	addi	r20,r20,8
  8023c0:	2dbfed1e 	bne	r5,r22,802378 <__kernel_rem_pio2+0x558>
  8023c4:	d9809117 	ldw	r6,580(sp)
  8023c8:	d9c09017 	ldw	r7,576(sp)
  8023cc:	e7000044 	addi	fp,fp,1
  8023d0:	31800104 	addi	r6,r6,4
  8023d4:	39c00044 	addi	r7,r7,1
  8023d8:	84800115 	stw	r18,4(r16)
  8023dc:	84400015 	stw	r17,0(r16)
  8023e0:	d9809115 	stw	r6,580(sp)
  8023e4:	ad400204 	addi	r21,r21,8
  8023e8:	84000204 	addi	r16,r16,8
  8023ec:	d9c09015 	stw	r7,576(sp)
  8023f0:	bf3fd30e 	bge	r23,fp,802340 <__kernel_rem_pio2+0x520>
  8023f4:	ddc08d15 	stw	r23,564(sp)
  8023f8:	003efa06 	br	801fe4 <__kernel_rem_pio2+0x1c4>
  8023fc:	0023883a 	mov	r17,zero
  802400:	0025883a 	mov	r18,zero
  802404:	003fef06 	br	8023c4 <__kernel_rem_pio2+0x5a4>
  802408:	0029883a 	mov	r20,zero
  80240c:	054ffc34 	movhi	r21,16368
  802410:	880f883a 	mov	r7,r17
  802414:	800d883a 	mov	r6,r16
  802418:	a009883a 	mov	r4,r20
  80241c:	a80b883a 	mov	r5,r21
  802420:	08038040 	call	803804 <__subdf3>
  802424:	1025883a 	mov	r18,r2
  802428:	b005003a 	cmpeq	r2,r22,zero
  80242c:	1827883a 	mov	r19,r3
  802430:	9021883a 	mov	r16,r18
  802434:	1823883a 	mov	r17,r3
  802438:	103f8a1e 	bne	r2,zero,802264 <__kernel_rem_pio2+0x444>
  80243c:	d9809317 	ldw	r6,588(sp)
  802440:	0009883a 	mov	r4,zero
  802444:	a80b883a 	mov	r5,r21
  802448:	08031f00 	call	8031f0 <scalbn>
  80244c:	180f883a 	mov	r7,r3
  802450:	9009883a 	mov	r4,r18
  802454:	980b883a 	mov	r5,r19
  802458:	100d883a 	mov	r6,r2
  80245c:	08038040 	call	803804 <__subdf3>
  802460:	1021883a 	mov	r16,r2
  802464:	1823883a 	mov	r17,r3
  802468:	000d883a 	mov	r6,zero
  80246c:	000f883a 	mov	r7,zero
  802470:	8009883a 	mov	r4,r16
  802474:	880b883a 	mov	r5,r17
  802478:	0803cbc0 	call	803cbc <__eqdf2>
  80247c:	103f7f26 	beq	r2,zero,80227c <__kernel_rem_pio2+0x45c>
  802480:	000d883a 	mov	r6,zero
  802484:	000f883a 	mov	r7,zero
  802488:	8009883a 	mov	r4,r16
  80248c:	880b883a 	mov	r5,r17
  802490:	0803cbc0 	call	803cbc <__eqdf2>
  802494:	10019a1e 	bne	r2,zero,802b00 <__kernel_rem_pio2+0xce0>
  802498:	da808d17 	ldw	r10,564(sp)
  80249c:	51bfffc4 	addi	r6,r10,-1
  8024a0:	3185883a 	add	r2,r6,r6
  8024a4:	1085883a 	add	r2,r2,r2
  8024a8:	d9009317 	ldw	r4,588(sp)
  8024ac:	16c5883a 	add	r2,r2,sp
  8024b0:	10c00017 	ldw	r3,0(r2)
  8024b4:	213ffa04 	addi	r4,r4,-24
  8024b8:	d9009315 	stw	r4,588(sp)
  8024bc:	1801d41e 	bne	r3,zero,802c10 <__kernel_rem_pio2+0xdf0>
  8024c0:	d9808d15 	stw	r6,564(sp)
  8024c4:	1007883a 	mov	r3,r2
  8024c8:	d9408d17 	ldw	r5,564(sp)
  8024cc:	d9809317 	ldw	r6,588(sp)
  8024d0:	18ffff04 	addi	r3,r3,-4
  8024d4:	18800017 	ldw	r2,0(r3)
  8024d8:	297fffc4 	addi	r5,r5,-1
  8024dc:	31bffa04 	addi	r6,r6,-24
  8024e0:	d9408d15 	stw	r5,564(sp)
  8024e4:	d9809315 	stw	r6,588(sp)
  8024e8:	103ff726 	beq	r2,zero,8024c8 <__kernel_rem_pio2+0x6a8>
  8024ec:	d9809317 	ldw	r6,588(sp)
  8024f0:	0005883a 	mov	r2,zero
  8024f4:	00cffc34 	movhi	r3,16368
  8024f8:	180b883a 	mov	r5,r3
  8024fc:	1009883a 	mov	r4,r2
  802500:	08031f00 	call	8031f0 <scalbn>
  802504:	d9808d17 	ldw	r6,564(sp)
  802508:	1021883a 	mov	r16,r2
  80250c:	1823883a 	mov	r17,r3
  802510:	30004616 	blt	r6,zero,80262c <__kernel_rem_pio2+0x80c>
  802514:	300690fa 	slli	r3,r6,3
  802518:	3185883a 	add	r2,r6,r6
  80251c:	1085883a 	add	r2,r2,r2
  802520:	16e9883a 	add	r20,r2,sp
  802524:	1ee5883a 	add	r18,r3,sp
  802528:	3027883a 	mov	r19,r6
  80252c:	057fffc4 	movi	r21,-1
  802530:	a1000017 	ldw	r4,0(r20)
  802534:	9cffffc4 	addi	r19,r19,-1
  802538:	a53fff04 	addi	r20,r20,-4
  80253c:	0803e540 	call	803e54 <__floatsidf>
  802540:	800d883a 	mov	r6,r16
  802544:	880f883a 	mov	r7,r17
  802548:	180b883a 	mov	r5,r3
  80254c:	1009883a 	mov	r4,r2
  802550:	08038f80 	call	8038f8 <__muldf3>
  802554:	0015883a 	mov	r10,zero
  802558:	02cf9c34 	movhi	r11,15984
  80255c:	880b883a 	mov	r5,r17
  802560:	8009883a 	mov	r4,r16
  802564:	90c06515 	stw	r3,404(r18)
  802568:	90806415 	stw	r2,400(r18)
  80256c:	580f883a 	mov	r7,r11
  802570:	500d883a 	mov	r6,r10
  802574:	08038f80 	call	8038f8 <__muldf3>
  802578:	1021883a 	mov	r16,r2
  80257c:	1823883a 	mov	r17,r3
  802580:	94bffe04 	addi	r18,r18,-8
  802584:	9d7fea1e 	bne	r19,r21,802530 <__kernel_rem_pio2+0x710>
  802588:	d9c09517 	ldw	r7,596(sp)
  80258c:	dd808d17 	ldw	r22,564(sp)
  802590:	002b883a 	mov	r21,zero
  802594:	382e403a 	cmpge	r23,r7,zero
  802598:	b800aa26 	beq	r23,zero,802844 <__kernel_rem_pio2+0xa24>
  80259c:	a800a916 	blt	r21,zero,802844 <__kernel_rem_pio2+0xa24>
  8025a0:	b00690fa 	slli	r3,r22,3
  8025a4:	d8806404 	addi	r2,sp,400
  8025a8:	0021883a 	mov	r16,zero
  8025ac:	10e9883a 	add	r20,r2,r3
  8025b0:	0027883a 	mov	r19,zero
  8025b4:	0023883a 	mov	r17,zero
  8025b8:	04802234 	movhi	r18,136
  8025bc:	94bafe04 	addi	r18,r18,-5128
  8025c0:	00000106 	br	8025c8 <__kernel_rem_pio2+0x7a8>
  8025c4:	acc01116 	blt	r21,r19,80260c <__kernel_rem_pio2+0x7ec>
  8025c8:	91000017 	ldw	r4,0(r18)
  8025cc:	91400117 	ldw	r5,4(r18)
  8025d0:	a1800017 	ldw	r6,0(r20)
  8025d4:	a1c00117 	ldw	r7,4(r20)
  8025d8:	9cc00044 	addi	r19,r19,1
  8025dc:	94800204 	addi	r18,r18,8
  8025e0:	08038f80 	call	8038f8 <__muldf3>
  8025e4:	180f883a 	mov	r7,r3
  8025e8:	880b883a 	mov	r5,r17
  8025ec:	8009883a 	mov	r4,r16
  8025f0:	100d883a 	mov	r6,r2
  8025f4:	08038840 	call	803884 <__adddf3>
  8025f8:	da809517 	ldw	r10,596(sp)
  8025fc:	a5000204 	addi	r20,r20,8
  802600:	1021883a 	mov	r16,r2
  802604:	1823883a 	mov	r17,r3
  802608:	54ffee0e 	bge	r10,r19,8025c4 <__kernel_rem_pio2+0x7a4>
  80260c:	a80490fa 	slli	r2,r21,3
  802610:	b5bfffc4 	addi	r22,r22,-1
  802614:	ad400044 	addi	r21,r21,1
  802618:	16c5883a 	add	r2,r2,sp
  80261c:	14403d15 	stw	r17,244(r2)
  802620:	14003c15 	stw	r16,240(r2)
  802624:	00bfffc4 	movi	r2,-1
  802628:	b0bfdb1e 	bne	r22,r2,802598 <__kernel_rem_pio2+0x778>
  80262c:	d8c0ad17 	ldw	r3,692(sp)
  802630:	00800084 	movi	r2,2
  802634:	10c09316 	blt	r2,r3,802884 <__kernel_rem_pio2+0xa64>
  802638:	00c1120e 	bge	zero,r3,802a84 <__kernel_rem_pio2+0xc64>
  80263c:	d9808d17 	ldw	r6,564(sp)
  802640:	30018d16 	blt	r6,zero,802c78 <__kernel_rem_pio2+0xe58>
  802644:	d8c08d17 	ldw	r3,564(sp)
  802648:	0011883a 	mov	r8,zero
  80264c:	0013883a 	mov	r9,zero
  802650:	180490fa 	slli	r2,r3,3
  802654:	1823883a 	mov	r17,r3
  802658:	04bfffc4 	movi	r18,-1
  80265c:	16e1883a 	add	r16,r2,sp
  802660:	80803c17 	ldw	r2,240(r16)
  802664:	80c03d17 	ldw	r3,244(r16)
  802668:	480b883a 	mov	r5,r9
  80266c:	4009883a 	mov	r4,r8
  802670:	180f883a 	mov	r7,r3
  802674:	100d883a 	mov	r6,r2
  802678:	08038840 	call	803884 <__adddf3>
  80267c:	8c7fffc4 	addi	r17,r17,-1
  802680:	843ffe04 	addi	r16,r16,-8
  802684:	1011883a 	mov	r8,r2
  802688:	1813883a 	mov	r9,r3
  80268c:	8cbff41e 	bne	r17,r18,802660 <__kernel_rem_pio2+0x840>
  802690:	d9009217 	ldw	r4,584(sp)
  802694:	20015b1e 	bne	r4,zero,802c04 <__kernel_rem_pio2+0xde4>
  802698:	4009883a 	mov	r4,r8
  80269c:	480b883a 	mov	r5,r9
  8026a0:	d9809717 	ldw	r6,604(sp)
  8026a4:	d8803c17 	ldw	r2,240(sp)
  8026a8:	480f883a 	mov	r7,r9
  8026ac:	31400115 	stw	r5,4(r6)
  8026b0:	31000015 	stw	r4,0(r6)
  8026b4:	d8c03d17 	ldw	r3,244(sp)
  8026b8:	400d883a 	mov	r6,r8
  8026bc:	1009883a 	mov	r4,r2
  8026c0:	180b883a 	mov	r5,r3
  8026c4:	08038040 	call	803804 <__subdf3>
  8026c8:	d9c08d17 	ldw	r7,564(sp)
  8026cc:	1011883a 	mov	r8,r2
  8026d0:	1813883a 	mov	r9,r3
  8026d4:	01c00d0e 	bge	zero,r7,80270c <__kernel_rem_pio2+0x8ec>
  8026d8:	0023883a 	mov	r17,zero
  8026dc:	dc003e04 	addi	r16,sp,248
  8026e0:	81800017 	ldw	r6,0(r16)
  8026e4:	81c00117 	ldw	r7,4(r16)
  8026e8:	480b883a 	mov	r5,r9
  8026ec:	4009883a 	mov	r4,r8
  8026f0:	08038840 	call	803884 <__adddf3>
  8026f4:	da808d17 	ldw	r10,564(sp)
  8026f8:	8c400044 	addi	r17,r17,1
  8026fc:	1011883a 	mov	r8,r2
  802700:	1813883a 	mov	r9,r3
  802704:	84000204 	addi	r16,r16,8
  802708:	8abff51e 	bne	r17,r10,8026e0 <__kernel_rem_pio2+0x8c0>
  80270c:	d8809217 	ldw	r2,584(sp)
  802710:	10000226 	beq	r2,zero,80271c <__kernel_rem_pio2+0x8fc>
  802714:	48e0003c 	xorhi	r3,r9,32768
  802718:	1813883a 	mov	r9,r3
  80271c:	d8c09717 	ldw	r3,604(sp)
  802720:	1a400315 	stw	r9,12(r3)
  802724:	1a000215 	stw	r8,8(r3)
  802728:	d8c09417 	ldw	r3,592(sp)
  80272c:	188001cc 	andi	r2,r3,7
  802730:	dfc0ac17 	ldw	ra,688(sp)
  802734:	df00ab17 	ldw	fp,684(sp)
  802738:	ddc0aa17 	ldw	r23,680(sp)
  80273c:	dd80a917 	ldw	r22,676(sp)
  802740:	dd40a817 	ldw	r21,672(sp)
  802744:	dd00a717 	ldw	r20,668(sp)
  802748:	dcc0a617 	ldw	r19,664(sp)
  80274c:	dc80a517 	ldw	r18,660(sp)
  802750:	dc40a417 	ldw	r17,656(sp)
  802754:	dc00a317 	ldw	r16,652(sp)
  802758:	dec0ad04 	addi	sp,sp,692
  80275c:	f800283a 	ret
  802760:	d8809317 	ldw	r2,588(sp)
  802764:	10001f1e 	bne	r2,zero,8027e4 <__kernel_rem_pio2+0x9c4>
  802768:	d8c08d17 	ldw	r3,564(sp)
  80276c:	18c5883a 	add	r2,r3,r3
  802770:	1085883a 	add	r2,r2,r2
  802774:	16c5883a 	add	r2,r2,sp
  802778:	10ffff17 	ldw	r3,-4(r2)
  80277c:	1807d5fa 	srai	r3,r3,23
  802780:	d8c09215 	stw	r3,584(sp)
  802784:	003e8e06 	br	8021c0 <__kernel_rem_pio2+0x3a0>
  802788:	d9008d17 	ldw	r4,564(sp)
  80278c:	d9409317 	ldw	r5,588(sp)
  802790:	2145c83a 	sub	r2,r4,r5
  802794:	1085883a 	add	r2,r2,r2
  802798:	1085883a 	add	r2,r2,r2
  80279c:	16c5883a 	add	r2,r2,sp
  8027a0:	10c00017 	ldw	r3,0(r2)
  8027a4:	01002034 	movhi	r4,128
  8027a8:	213fffc4 	addi	r4,r4,-1
  8027ac:	1906703a 	and	r3,r3,r4
  8027b0:	10c00015 	stw	r3,0(r2)
  8027b4:	003ea806 	br	802258 <__kernel_rem_pio2+0x438>
  8027b8:	d9808d17 	ldw	r6,564(sp)
  8027bc:	01001034 	movhi	r4,64
  8027c0:	213fffc4 	addi	r4,r4,-1
  8027c4:	30bfffc4 	addi	r2,r6,-1
  8027c8:	1085883a 	add	r2,r2,r2
  8027cc:	1085883a 	add	r2,r2,r2
  8027d0:	16c5883a 	add	r2,r2,sp
  8027d4:	10c00017 	ldw	r3,0(r2)
  8027d8:	1906703a 	and	r3,r3,r4
  8027dc:	10c00015 	stw	r3,0(r2)
  8027e0:	003e9d06 	br	802258 <__kernel_rem_pio2+0x438>
  8027e4:	0005883a 	mov	r2,zero
  8027e8:	00cff834 	movhi	r3,16352
  8027ec:	300b883a 	mov	r5,r6
  8027f0:	180f883a 	mov	r7,r3
  8027f4:	8009883a 	mov	r4,r16
  8027f8:	100d883a 	mov	r6,r2
  8027fc:	0803dcc0 	call	803dcc <__gedf2>
  802800:	10001d0e 	bge	r2,zero,802878 <__kernel_rem_pio2+0xa58>
  802804:	d8009215 	stw	zero,584(sp)
  802808:	003e9606 	br	802264 <__kernel_rem_pio2+0x444>
  80280c:	d8c08d17 	ldw	r3,564(sp)
  802810:	01000044 	movi	r4,1
  802814:	192f883a 	add	r23,r3,r4
  802818:	1f000044 	addi	fp,r3,1
  80281c:	bf3eb516 	blt	r23,fp,8022f4 <__kernel_rem_pio2+0x4d4>
  802820:	003eb606 	br	8022fc <__kernel_rem_pio2+0x4dc>
  802824:	0021883a 	mov	r16,zero
  802828:	0023883a 	mov	r17,zero
  80282c:	a5000044 	addi	r20,r20,1
  802830:	ac400115 	stw	r17,4(r21)
  802834:	ac000015 	stw	r16,0(r21)
  802838:	ad400204 	addi	r21,r21,8
  80283c:	a5fdba1e 	bne	r20,r23,801f28 <__kernel_rem_pio2+0x108>
  802840:	003dd806 	br	801fa4 <__kernel_rem_pio2+0x184>
  802844:	a80490fa 	slli	r2,r21,3
  802848:	0021883a 	mov	r16,zero
  80284c:	0023883a 	mov	r17,zero
  802850:	16c5883a 	add	r2,r2,sp
  802854:	14403d15 	stw	r17,244(r2)
  802858:	14003c15 	stw	r16,240(r2)
  80285c:	b5bfffc4 	addi	r22,r22,-1
  802860:	00bfffc4 	movi	r2,-1
  802864:	ad400044 	addi	r21,r21,1
  802868:	b0bf4b1e 	bne	r22,r2,802598 <__kernel_rem_pio2+0x778>
  80286c:	003f6f06 	br	80262c <__kernel_rem_pio2+0x80c>
  802870:	002d883a 	mov	r22,zero
  802874:	003e7106 	br	80223c <__kernel_rem_pio2+0x41c>
  802878:	01000084 	movi	r4,2
  80287c:	d9009215 	stw	r4,584(sp)
  802880:	003e5106 	br	8021c8 <__kernel_rem_pio2+0x3a8>
  802884:	d900ad17 	ldw	r4,692(sp)
  802888:	008000c4 	movi	r2,3
  80288c:	20bfa61e 	bne	r4,r2,802728 <__kernel_rem_pio2+0x908>
  802890:	d9c08d17 	ldw	r7,564(sp)
  802894:	01c02c0e 	bge	zero,r7,802948 <__kernel_rem_pio2+0xb28>
  802898:	3805883a 	mov	r2,r7
  80289c:	00000106 	br	8028a4 <__kernel_rem_pio2+0xa84>
  8028a0:	d8808e17 	ldw	r2,568(sp)
  8028a4:	113fffc4 	addi	r4,r2,-1
  8028a8:	100690fa 	slli	r3,r2,3
  8028ac:	200490fa 	slli	r2,r4,3
  8028b0:	d9008e15 	stw	r4,568(sp)
  8028b4:	1ef9883a 	add	fp,r3,sp
  8028b8:	16c5883a 	add	r2,r2,sp
  8028bc:	d8809a15 	stw	r2,616(sp)
  8028c0:	11403c04 	addi	r5,r2,240
  8028c4:	e1803c04 	addi	r6,fp,240
  8028c8:	14003c17 	ldw	r16,240(r2)
  8028cc:	e5003c17 	ldw	r20,240(fp)
  8028d0:	d9409b15 	stw	r5,620(sp)
  8028d4:	d9809c15 	stw	r6,624(sp)
  8028d8:	35400117 	ldw	r21,4(r6)
  8028dc:	2c400117 	ldw	r17,4(r5)
  8028e0:	8009883a 	mov	r4,r16
  8028e4:	a00d883a 	mov	r6,r20
  8028e8:	880b883a 	mov	r5,r17
  8028ec:	a80f883a 	mov	r7,r21
  8028f0:	08038840 	call	803884 <__adddf3>
  8028f4:	100d883a 	mov	r6,r2
  8028f8:	880b883a 	mov	r5,r17
  8028fc:	8009883a 	mov	r4,r16
  802900:	180f883a 	mov	r7,r3
  802904:	1025883a 	mov	r18,r2
  802908:	1827883a 	mov	r19,r3
  80290c:	08038040 	call	803804 <__subdf3>
  802910:	180f883a 	mov	r7,r3
  802914:	a80b883a 	mov	r5,r21
  802918:	a009883a 	mov	r4,r20
  80291c:	100d883a 	mov	r6,r2
  802920:	08038840 	call	803884 <__adddf3>
  802924:	e0803c15 	stw	r2,240(fp)
  802928:	d9c09c17 	ldw	r7,624(sp)
  80292c:	38c00115 	stw	r3,4(r7)
  802930:	da809a17 	ldw	r10,616(sp)
  802934:	54803c15 	stw	r18,240(r10)
  802938:	d8809b17 	ldw	r2,620(sp)
  80293c:	14c00115 	stw	r19,4(r2)
  802940:	d8c08e17 	ldw	r3,568(sp)
  802944:	183fd61e 	bne	r3,zero,8028a0 <__kernel_rem_pio2+0xa80>
  802948:	d9008d17 	ldw	r4,564(sp)
  80294c:	00800044 	movi	r2,1
  802950:	1100cc0e 	bge	r2,r4,802c84 <__kernel_rem_pio2+0xe64>
  802954:	d8808d17 	ldw	r2,564(sp)
  802958:	117fffc4 	addi	r5,r2,-1
  80295c:	100690fa 	slli	r3,r2,3
  802960:	280490fa 	slli	r2,r5,3
  802964:	d9408f15 	stw	r5,572(sp)
  802968:	1ef9883a 	add	fp,r3,sp
  80296c:	16c5883a 	add	r2,r2,sp
  802970:	d8809d15 	stw	r2,628(sp)
  802974:	11803c04 	addi	r6,r2,240
  802978:	e1c03c04 	addi	r7,fp,240
  80297c:	14003c17 	ldw	r16,240(r2)
  802980:	e5003c17 	ldw	r20,240(fp)
  802984:	d9809e15 	stw	r6,632(sp)
  802988:	d9c09f15 	stw	r7,636(sp)
  80298c:	34400117 	ldw	r17,4(r6)
  802990:	3d400117 	ldw	r21,4(r7)
  802994:	8009883a 	mov	r4,r16
  802998:	880b883a 	mov	r5,r17
  80299c:	a00d883a 	mov	r6,r20
  8029a0:	a80f883a 	mov	r7,r21
  8029a4:	08038840 	call	803884 <__adddf3>
  8029a8:	100d883a 	mov	r6,r2
  8029ac:	880b883a 	mov	r5,r17
  8029b0:	8009883a 	mov	r4,r16
  8029b4:	180f883a 	mov	r7,r3
  8029b8:	1025883a 	mov	r18,r2
  8029bc:	1827883a 	mov	r19,r3
  8029c0:	08038040 	call	803804 <__subdf3>
  8029c4:	180f883a 	mov	r7,r3
  8029c8:	a80b883a 	mov	r5,r21
  8029cc:	a009883a 	mov	r4,r20
  8029d0:	100d883a 	mov	r6,r2
  8029d4:	08038840 	call	803884 <__adddf3>
  8029d8:	e0803c15 	stw	r2,240(fp)
  8029dc:	da809f17 	ldw	r10,636(sp)
  8029e0:	50c00115 	stw	r3,4(r10)
  8029e4:	d8c09d17 	ldw	r3,628(sp)
  8029e8:	d8808f17 	ldw	r2,572(sp)
  8029ec:	1c803c15 	stw	r18,240(r3)
  8029f0:	d9009e17 	ldw	r4,632(sp)
  8029f4:	00c00044 	movi	r3,1
  8029f8:	24c00115 	stw	r19,4(r4)
  8029fc:	d9408f17 	ldw	r5,572(sp)
  802a00:	28ffd51e 	bne	r5,r3,802958 <__kernel_rem_pio2+0xb38>
  802a04:	dc008d17 	ldw	r16,564(sp)
  802a08:	0011883a 	mov	r8,zero
  802a0c:	1825883a 	mov	r18,r3
  802a10:	800490fa 	slli	r2,r16,3
  802a14:	0013883a 	mov	r9,zero
  802a18:	16e3883a 	add	r17,r2,sp
  802a1c:	88803c17 	ldw	r2,240(r17)
  802a20:	88c03d17 	ldw	r3,244(r17)
  802a24:	480b883a 	mov	r5,r9
  802a28:	4009883a 	mov	r4,r8
  802a2c:	180f883a 	mov	r7,r3
  802a30:	100d883a 	mov	r6,r2
  802a34:	08038840 	call	803884 <__adddf3>
  802a38:	843fffc4 	addi	r16,r16,-1
  802a3c:	8c7ffe04 	addi	r17,r17,-8
  802a40:	1011883a 	mov	r8,r2
  802a44:	1813883a 	mov	r9,r3
  802a48:	84bff41e 	bne	r16,r18,802a1c <__kernel_rem_pio2+0xbfc>
  802a4c:	d9809217 	ldw	r6,584(sp)
  802a50:	30007a1e 	bne	r6,zero,802c3c <__kernel_rem_pio2+0xe1c>
  802a54:	d9c09717 	ldw	r7,604(sp)
  802a58:	d8803c17 	ldw	r2,240(sp)
  802a5c:	d9003e17 	ldw	r4,248(sp)
  802a60:	3a400515 	stw	r9,20(r7)
  802a64:	d8c03d17 	ldw	r3,244(sp)
  802a68:	d9403f17 	ldw	r5,252(sp)
  802a6c:	3a000415 	stw	r8,16(r7)
  802a70:	38c00115 	stw	r3,4(r7)
  802a74:	39400315 	stw	r5,12(r7)
  802a78:	38800015 	stw	r2,0(r7)
  802a7c:	39000215 	stw	r4,8(r7)
  802a80:	003f2906 	br	802728 <__kernel_rem_pio2+0x908>
  802a84:	183f281e 	bne	r3,zero,802728 <__kernel_rem_pio2+0x908>
  802a88:	d9408d17 	ldw	r5,564(sp)
  802a8c:	28008016 	blt	r5,zero,802c90 <__kernel_rem_pio2+0xe70>
  802a90:	dc008d17 	ldw	r16,564(sp)
  802a94:	000d883a 	mov	r6,zero
  802a98:	000f883a 	mov	r7,zero
  802a9c:	800490fa 	slli	r2,r16,3
  802aa0:	04bfffc4 	movi	r18,-1
  802aa4:	16e3883a 	add	r17,r2,sp
  802aa8:	88803c17 	ldw	r2,240(r17)
  802aac:	88c03d17 	ldw	r3,244(r17)
  802ab0:	380b883a 	mov	r5,r7
  802ab4:	3009883a 	mov	r4,r6
  802ab8:	180f883a 	mov	r7,r3
  802abc:	100d883a 	mov	r6,r2
  802ac0:	08038840 	call	803884 <__adddf3>
  802ac4:	843fffc4 	addi	r16,r16,-1
  802ac8:	8c7ffe04 	addi	r17,r17,-8
  802acc:	100d883a 	mov	r6,r2
  802ad0:	180f883a 	mov	r7,r3
  802ad4:	84bff41e 	bne	r16,r18,802aa8 <__kernel_rem_pio2+0xc88>
  802ad8:	da809217 	ldw	r10,584(sp)
  802adc:	50000226 	beq	r10,zero,802ae8 <__kernel_rem_pio2+0xcc8>
  802ae0:	38e0003c 	xorhi	r3,r7,32768
  802ae4:	180f883a 	mov	r7,r3
  802ae8:	d8809717 	ldw	r2,604(sp)
  802aec:	11c00115 	stw	r7,4(r2)
  802af0:	11800015 	stw	r6,0(r2)
  802af4:	003f0c06 	br	802728 <__kernel_rem_pio2+0x908>
  802af8:	d8008c15 	stw	zero,560(sp)
  802afc:	003ce606 	br	801e98 <__kernel_rem_pio2+0x78>
  802b00:	d9c09317 	ldw	r7,588(sp)
  802b04:	880b883a 	mov	r5,r17
  802b08:	8009883a 	mov	r4,r16
  802b0c:	01cdc83a 	sub	r6,zero,r7
  802b10:	08031f00 	call	8031f0 <scalbn>
  802b14:	0011883a 	mov	r8,zero
  802b18:	02505c34 	movhi	r9,16752
  802b1c:	480f883a 	mov	r7,r9
  802b20:	1009883a 	mov	r4,r2
  802b24:	180b883a 	mov	r5,r3
  802b28:	400d883a 	mov	r6,r8
  802b2c:	102d883a 	mov	r22,r2
  802b30:	182f883a 	mov	r23,r3
  802b34:	0803dcc0 	call	803dcc <__gedf2>
  802b38:	10003716 	blt	r2,zero,802c18 <__kernel_rem_pio2+0xdf8>
  802b3c:	0005883a 	mov	r2,zero
  802b40:	00cf9c34 	movhi	r3,15984
  802b44:	180f883a 	mov	r7,r3
  802b48:	100d883a 	mov	r6,r2
  802b4c:	b009883a 	mov	r4,r22
  802b50:	b80b883a 	mov	r5,r23
  802b54:	08038f80 	call	8038f8 <__muldf3>
  802b58:	180b883a 	mov	r5,r3
  802b5c:	1009883a 	mov	r4,r2
  802b60:	0803f4c0 	call	803f4c <__fixdfsi>
  802b64:	1009883a 	mov	r4,r2
  802b68:	0803e540 	call	803e54 <__floatsidf>
  802b6c:	da808d17 	ldw	r10,564(sp)
  802b70:	1023883a 	mov	r17,r2
  802b74:	1825883a 	mov	r18,r3
  802b78:	0005883a 	mov	r2,zero
  802b7c:	00f05c34 	movhi	r3,49520
  802b80:	180f883a 	mov	r7,r3
  802b84:	8809883a 	mov	r4,r17
  802b88:	900b883a 	mov	r5,r18
  802b8c:	100d883a 	mov	r6,r2
  802b90:	52ab883a 	add	r21,r10,r10
  802b94:	08038f80 	call	8038f8 <__muldf3>
  802b98:	180f883a 	mov	r7,r3
  802b9c:	b80b883a 	mov	r5,r23
  802ba0:	100d883a 	mov	r6,r2
  802ba4:	b009883a 	mov	r4,r22
  802ba8:	08038840 	call	803884 <__adddf3>
  802bac:	100d883a 	mov	r6,r2
  802bb0:	d8808d17 	ldw	r2,564(sp)
  802bb4:	180b883a 	mov	r5,r3
  802bb8:	3009883a 	mov	r4,r6
  802bbc:	10800044 	addi	r2,r2,1
  802bc0:	ad6b883a 	add	r21,r21,r21
  802bc4:	d8808d15 	stw	r2,564(sp)
  802bc8:	0803f4c0 	call	803f4c <__fixdfsi>
  802bcc:	d8c08d17 	ldw	r3,564(sp)
  802bd0:	aeeb883a 	add	r21,r21,sp
  802bd4:	8809883a 	mov	r4,r17
  802bd8:	900b883a 	mov	r5,r18
  802bdc:	a8800015 	stw	r2,0(r21)
  802be0:	18e1883a 	add	r16,r3,r3
  802be4:	0803f4c0 	call	803f4c <__fixdfsi>
  802be8:	d9009317 	ldw	r4,588(sp)
  802bec:	8421883a 	add	r16,r16,r16
  802bf0:	86e1883a 	add	r16,r16,sp
  802bf4:	21000604 	addi	r4,r4,24
  802bf8:	d9009315 	stw	r4,588(sp)
  802bfc:	80800015 	stw	r2,0(r16)
  802c00:	003e3a06 	br	8024ec <__kernel_rem_pio2+0x6cc>
  802c04:	4009883a 	mov	r4,r8
  802c08:	4960003c 	xorhi	r5,r9,32768
  802c0c:	003ea406 	br	8026a0 <__kernel_rem_pio2+0x880>
  802c10:	d9808d15 	stw	r6,564(sp)
  802c14:	003e3506 	br	8024ec <__kernel_rem_pio2+0x6cc>
  802c18:	d9408d17 	ldw	r5,564(sp)
  802c1c:	b009883a 	mov	r4,r22
  802c20:	2961883a 	add	r16,r5,r5
  802c24:	8421883a 	add	r16,r16,r16
  802c28:	b80b883a 	mov	r5,r23
  802c2c:	86e1883a 	add	r16,r16,sp
  802c30:	0803f4c0 	call	803f4c <__fixdfsi>
  802c34:	80800015 	stw	r2,0(r16)
  802c38:	003e2c06 	br	8024ec <__kernel_rem_pio2+0x6cc>
  802c3c:	d8c03d17 	ldw	r3,244(sp)
  802c40:	d9403f17 	ldw	r5,252(sp)
  802c44:	da809717 	ldw	r10,604(sp)
  802c48:	d8803c17 	ldw	r2,240(sp)
  802c4c:	d9003e17 	ldw	r4,248(sp)
  802c50:	49e0003c 	xorhi	r7,r9,32768
  802c54:	51c00515 	stw	r7,20(r10)
  802c58:	19a0003c 	xorhi	r6,r3,32768
  802c5c:	29e0003c 	xorhi	r7,r5,32768
  802c60:	51800115 	stw	r6,4(r10)
  802c64:	51c00315 	stw	r7,12(r10)
  802c68:	50800015 	stw	r2,0(r10)
  802c6c:	51000215 	stw	r4,8(r10)
  802c70:	52000415 	stw	r8,16(r10)
  802c74:	003eac06 	br	802728 <__kernel_rem_pio2+0x908>
  802c78:	0011883a 	mov	r8,zero
  802c7c:	0013883a 	mov	r9,zero
  802c80:	003e8306 	br	802690 <__kernel_rem_pio2+0x870>
  802c84:	0011883a 	mov	r8,zero
  802c88:	0013883a 	mov	r9,zero
  802c8c:	003f6f06 	br	802a4c <__kernel_rem_pio2+0xc2c>
  802c90:	000d883a 	mov	r6,zero
  802c94:	000f883a 	mov	r7,zero
  802c98:	003f8f06 	br	802ad8 <__kernel_rem_pio2+0xcb8>

00802c9c <__kernel_sin>:
  802c9c:	00a00034 	movhi	r2,32768
  802ca0:	10bfffc4 	addi	r2,r2,-1
  802ca4:	deffef04 	addi	sp,sp,-68
  802ca8:	1144703a 	and	r2,r2,r5
  802cac:	00cf9034 	movhi	r3,15936
  802cb0:	18ffffc4 	addi	r3,r3,-1
  802cb4:	dd400d15 	stw	r21,52(sp)
  802cb8:	dd000c15 	stw	r20,48(sp)
  802cbc:	dfc01015 	stw	ra,64(sp)
  802cc0:	ddc00f15 	stw	r23,60(sp)
  802cc4:	dd800e15 	stw	r22,56(sp)
  802cc8:	dcc00b15 	stw	r19,44(sp)
  802ccc:	dc800a15 	stw	r18,40(sp)
  802cd0:	dc400915 	stw	r17,36(sp)
  802cd4:	dc000815 	stw	r16,32(sp)
  802cd8:	2029883a 	mov	r20,r4
  802cdc:	282b883a 	mov	r21,r5
  802ce0:	d9800415 	stw	r6,16(sp)
  802ce4:	d9c00515 	stw	r7,20(sp)
  802ce8:	18800216 	blt	r3,r2,802cf4 <__kernel_sin+0x58>
  802cec:	0803f4c0 	call	803f4c <__fixdfsi>
  802cf0:	10008826 	beq	r2,zero,802f14 <__kernel_sin+0x278>
  802cf4:	a009883a 	mov	r4,r20
  802cf8:	a80b883a 	mov	r5,r21
  802cfc:	a00d883a 	mov	r6,r20
  802d00:	a80f883a 	mov	r7,r21
  802d04:	08038f80 	call	8038f8 <__muldf3>
  802d08:	102d883a 	mov	r22,r2
  802d0c:	a009883a 	mov	r4,r20
  802d10:	a80b883a 	mov	r5,r21
  802d14:	b00d883a 	mov	r6,r22
  802d18:	180f883a 	mov	r7,r3
  802d1c:	182f883a 	mov	r23,r3
  802d20:	d8800215 	stw	r2,8(sp)
  802d24:	d8c00315 	stw	r3,12(sp)
  802d28:	08038f80 	call	8038f8 <__muldf3>
  802d2c:	d9000217 	ldw	r4,8(sp)
  802d30:	0216b434 	movhi	r8,23248
  802d34:	42355f04 	addi	r8,r8,-10884
  802d38:	024f79b4 	movhi	r9,15846
  802d3c:	4a764e84 	addi	r9,r9,-9926
  802d40:	480f883a 	mov	r7,r9
  802d44:	400d883a 	mov	r6,r8
  802d48:	b80b883a 	mov	r5,r23
  802d4c:	d8800615 	stw	r2,24(sp)
  802d50:	d8c00715 	stw	r3,28(sp)
  802d54:	08038f80 	call	8038f8 <__muldf3>
  802d58:	02228b34 	movhi	r8,35372
  802d5c:	42273ac4 	addi	r8,r8,-25365
  802d60:	024f96f4 	movhi	r9,15963
  802d64:	4a797984 	addi	r9,r9,-6682
  802d68:	480f883a 	mov	r7,r9
  802d6c:	400d883a 	mov	r6,r8
  802d70:	180b883a 	mov	r5,r3
  802d74:	1009883a 	mov	r4,r2
  802d78:	08038040 	call	803804 <__subdf3>
  802d7c:	d9000217 	ldw	r4,8(sp)
  802d80:	180f883a 	mov	r7,r3
  802d84:	b80b883a 	mov	r5,r23
  802d88:	100d883a 	mov	r6,r2
  802d8c:	08038f80 	call	8038f8 <__muldf3>
  802d90:	0215ecb4 	movhi	r8,22450
  802d94:	423f9f44 	addi	r8,r8,-387
  802d98:	024fb1f4 	movhi	r9,16071
  802d9c:	4a4778c4 	addi	r9,r9,7651
  802da0:	480f883a 	mov	r7,r9
  802da4:	400d883a 	mov	r6,r8
  802da8:	180b883a 	mov	r5,r3
  802dac:	1009883a 	mov	r4,r2
  802db0:	08038840 	call	803884 <__adddf3>
  802db4:	d9000217 	ldw	r4,8(sp)
  802db8:	180f883a 	mov	r7,r3
  802dbc:	b80b883a 	mov	r5,r23
  802dc0:	100d883a 	mov	r6,r2
  802dc4:	08038f80 	call	8038f8 <__muldf3>
  802dc8:	02067074 	movhi	r8,6593
  802dcc:	42187544 	addi	r8,r8,25045
  802dd0:	024fcab4 	movhi	r9,16170
  802dd4:	4a406804 	addi	r9,r9,416
  802dd8:	480f883a 	mov	r7,r9
  802ddc:	400d883a 	mov	r6,r8
  802de0:	180b883a 	mov	r5,r3
  802de4:	1009883a 	mov	r4,r2
  802de8:	08038040 	call	803804 <__subdf3>
  802dec:	d9000217 	ldw	r4,8(sp)
  802df0:	180f883a 	mov	r7,r3
  802df4:	b80b883a 	mov	r5,r23
  802df8:	100d883a 	mov	r6,r2
  802dfc:	08038f80 	call	8038f8 <__muldf3>
  802e00:	02044474 	movhi	r8,4369
  802e04:	423e2984 	addi	r8,r8,-1882
  802e08:	024fe074 	movhi	r9,16257
  802e0c:	4a444444 	addi	r9,r9,4369
  802e10:	180b883a 	mov	r5,r3
  802e14:	480f883a 	mov	r7,r9
  802e18:	1009883a 	mov	r4,r2
  802e1c:	400d883a 	mov	r6,r8
  802e20:	08038840 	call	803884 <__adddf3>
  802e24:	1021883a 	mov	r16,r2
  802e28:	d8800617 	ldw	r2,24(sp)
  802e2c:	1823883a 	mov	r17,r3
  802e30:	d8800015 	stw	r2,0(sp)
  802e34:	d8800717 	ldw	r2,28(sp)
  802e38:	d8800115 	stw	r2,4(sp)
  802e3c:	d8801117 	ldw	r2,68(sp)
  802e40:	10004126 	beq	r2,zero,802f48 <__kernel_sin+0x2ac>
  802e44:	d9000417 	ldw	r4,16(sp)
  802e48:	d9400517 	ldw	r5,20(sp)
  802e4c:	0005883a 	mov	r2,zero
  802e50:	00cff834 	movhi	r3,16352
  802e54:	180f883a 	mov	r7,r3
  802e58:	100d883a 	mov	r6,r2
  802e5c:	08038f80 	call	8038f8 <__muldf3>
  802e60:	d9000017 	ldw	r4,0(sp)
  802e64:	d9400717 	ldw	r5,28(sp)
  802e68:	800d883a 	mov	r6,r16
  802e6c:	880f883a 	mov	r7,r17
  802e70:	1021883a 	mov	r16,r2
  802e74:	1823883a 	mov	r17,r3
  802e78:	08038f80 	call	8038f8 <__muldf3>
  802e7c:	180f883a 	mov	r7,r3
  802e80:	880b883a 	mov	r5,r17
  802e84:	8009883a 	mov	r4,r16
  802e88:	100d883a 	mov	r6,r2
  802e8c:	08038040 	call	803804 <__subdf3>
  802e90:	d9000217 	ldw	r4,8(sp)
  802e94:	b80b883a 	mov	r5,r23
  802e98:	180f883a 	mov	r7,r3
  802e9c:	100d883a 	mov	r6,r2
  802ea0:	08038f80 	call	8038f8 <__muldf3>
  802ea4:	d9c00517 	ldw	r7,20(sp)
  802ea8:	d9800417 	ldw	r6,16(sp)
  802eac:	180b883a 	mov	r5,r3
  802eb0:	1009883a 	mov	r4,r2
  802eb4:	08038040 	call	803804 <__subdf3>
  802eb8:	d9000017 	ldw	r4,0(sp)
  802ebc:	d9400717 	ldw	r5,28(sp)
  802ec0:	02155574 	movhi	r8,21845
  802ec4:	42155244 	addi	r8,r8,21833
  802ec8:	024ff174 	movhi	r9,16325
  802ecc:	4a555544 	addi	r9,r9,21845
  802ed0:	480f883a 	mov	r7,r9
  802ed4:	400d883a 	mov	r6,r8
  802ed8:	1021883a 	mov	r16,r2
  802edc:	1823883a 	mov	r17,r3
  802ee0:	08038f80 	call	8038f8 <__muldf3>
  802ee4:	180f883a 	mov	r7,r3
  802ee8:	880b883a 	mov	r5,r17
  802eec:	8009883a 	mov	r4,r16
  802ef0:	100d883a 	mov	r6,r2
  802ef4:	08038840 	call	803884 <__adddf3>
  802ef8:	180f883a 	mov	r7,r3
  802efc:	a80b883a 	mov	r5,r21
  802f00:	a009883a 	mov	r4,r20
  802f04:	100d883a 	mov	r6,r2
  802f08:	08038040 	call	803804 <__subdf3>
  802f0c:	1029883a 	mov	r20,r2
  802f10:	182b883a 	mov	r21,r3
  802f14:	a005883a 	mov	r2,r20
  802f18:	a807883a 	mov	r3,r21
  802f1c:	dfc01017 	ldw	ra,64(sp)
  802f20:	ddc00f17 	ldw	r23,60(sp)
  802f24:	dd800e17 	ldw	r22,56(sp)
  802f28:	dd400d17 	ldw	r21,52(sp)
  802f2c:	dd000c17 	ldw	r20,48(sp)
  802f30:	dcc00b17 	ldw	r19,44(sp)
  802f34:	dc800a17 	ldw	r18,40(sp)
  802f38:	dc400917 	ldw	r17,36(sp)
  802f3c:	dc000817 	ldw	r16,32(sp)
  802f40:	dec01104 	addi	sp,sp,68
  802f44:	f800283a 	ret
  802f48:	d9000217 	ldw	r4,8(sp)
  802f4c:	b80b883a 	mov	r5,r23
  802f50:	800d883a 	mov	r6,r16
  802f54:	180f883a 	mov	r7,r3
  802f58:	08038f80 	call	8038f8 <__muldf3>
  802f5c:	02155574 	movhi	r8,21845
  802f60:	42155244 	addi	r8,r8,21833
  802f64:	024ff174 	movhi	r9,16325
  802f68:	4a555544 	addi	r9,r9,21845
  802f6c:	480f883a 	mov	r7,r9
  802f70:	400d883a 	mov	r6,r8
  802f74:	180b883a 	mov	r5,r3
  802f78:	1009883a 	mov	r4,r2
  802f7c:	08038040 	call	803804 <__subdf3>
  802f80:	d9000017 	ldw	r4,0(sp)
  802f84:	d9400717 	ldw	r5,28(sp)
  802f88:	180f883a 	mov	r7,r3
  802f8c:	100d883a 	mov	r6,r2
  802f90:	08038f80 	call	8038f8 <__muldf3>
  802f94:	180f883a 	mov	r7,r3
  802f98:	a80b883a 	mov	r5,r21
  802f9c:	a009883a 	mov	r4,r20
  802fa0:	100d883a 	mov	r6,r2
  802fa4:	08038840 	call	803884 <__adddf3>
  802fa8:	1029883a 	mov	r20,r2
  802fac:	182b883a 	mov	r21,r3
  802fb0:	003fd806 	br	802f14 <__kernel_sin+0x278>

00802fb4 <fabs>:
  802fb4:	01e00034 	movhi	r7,32768
  802fb8:	39ffffc4 	addi	r7,r7,-1
  802fbc:	394e703a 	and	r7,r7,r5
  802fc0:	2005883a 	mov	r2,r4
  802fc4:	3807883a 	mov	r3,r7
  802fc8:	f800283a 	ret

00802fcc <floor>:
  802fcc:	2805d53a 	srai	r2,r5,20
  802fd0:	defff604 	addi	sp,sp,-40
  802fd4:	dd800615 	stw	r22,24(sp)
  802fd8:	10c1ffcc 	andi	r3,r2,2047
  802fdc:	1dbf0044 	addi	r22,r3,-1023
  802fe0:	008004c4 	movi	r2,19
  802fe4:	ddc00715 	stw	r23,28(sp)
  802fe8:	dc800215 	stw	r18,8(sp)
  802fec:	dc400115 	stw	r17,4(sp)
  802ff0:	dc000015 	stw	r16,0(sp)
  802ff4:	dfc00915 	stw	ra,36(sp)
  802ff8:	df000815 	stw	fp,32(sp)
  802ffc:	dd400515 	stw	r21,20(sp)
  803000:	dd000415 	stw	r20,16(sp)
  803004:	dcc00315 	stw	r19,12(sp)
  803008:	2021883a 	mov	r16,r4
  80300c:	2823883a 	mov	r17,r5
  803010:	282f883a 	mov	r23,r5
  803014:	2025883a 	mov	r18,r4
  803018:	15802916 	blt	r2,r22,8030c0 <floor+0xf4>
  80301c:	b0004816 	blt	r22,zero,803140 <floor+0x174>
  803020:	00800434 	movhi	r2,16
  803024:	10bfffc4 	addi	r2,r2,-1
  803028:	15b9d83a 	sra	fp,r2,r22
  80302c:	282f883a 	mov	r23,r5
  803030:	e144703a 	and	r2,fp,r5
  803034:	1104b03a 	or	r2,r2,r4
  803038:	10001326 	beq	r2,zero,803088 <floor+0xbc>
  80303c:	00a20034 	movhi	r2,34816
  803040:	109d6704 	addi	r2,r2,30108
  803044:	00df8e34 	movhi	r3,32312
  803048:	18f90f04 	addi	r3,r3,-7108
  80304c:	180f883a 	mov	r7,r3
  803050:	100d883a 	mov	r6,r2
  803054:	08038840 	call	803884 <__adddf3>
  803058:	180b883a 	mov	r5,r3
  80305c:	000d883a 	mov	r6,zero
  803060:	000f883a 	mov	r7,zero
  803064:	1009883a 	mov	r4,r2
  803068:	0803d440 	call	803d44 <__gtdf2>
  80306c:	0080040e 	bge	zero,r2,803080 <floor+0xb4>
  803070:	88004416 	blt	r17,zero,803184 <floor+0x1b8>
  803074:	0704303a 	nor	r2,zero,fp
  803078:	b8ae703a 	and	r23,r23,r2
  80307c:	0025883a 	mov	r18,zero
  803080:	9021883a 	mov	r16,r18
  803084:	b823883a 	mov	r17,r23
  803088:	8005883a 	mov	r2,r16
  80308c:	8807883a 	mov	r3,r17
  803090:	dfc00917 	ldw	ra,36(sp)
  803094:	df000817 	ldw	fp,32(sp)
  803098:	ddc00717 	ldw	r23,28(sp)
  80309c:	dd800617 	ldw	r22,24(sp)
  8030a0:	dd400517 	ldw	r21,20(sp)
  8030a4:	dd000417 	ldw	r20,16(sp)
  8030a8:	dcc00317 	ldw	r19,12(sp)
  8030ac:	dc800217 	ldw	r18,8(sp)
  8030b0:	dc400117 	ldw	r17,4(sp)
  8030b4:	dc000017 	ldw	r16,0(sp)
  8030b8:	dec00a04 	addi	sp,sp,40
  8030bc:	f800283a 	ret
  8030c0:	00800cc4 	movi	r2,51
  8030c4:	15801616 	blt	r2,r22,803120 <floor+0x154>
  8030c8:	18befb44 	addi	r2,r3,-1043
  8030cc:	00ffffc4 	movi	r3,-1
  8030d0:	18b8d83a 	srl	fp,r3,r2
  8030d4:	e104703a 	and	r2,fp,r4
  8030d8:	103feb26 	beq	r2,zero,803088 <floor+0xbc>
  8030dc:	00a20034 	movhi	r2,34816
  8030e0:	109d6704 	addi	r2,r2,30108
  8030e4:	00df8e34 	movhi	r3,32312
  8030e8:	18f90f04 	addi	r3,r3,-7108
  8030ec:	180f883a 	mov	r7,r3
  8030f0:	100d883a 	mov	r6,r2
  8030f4:	08038840 	call	803884 <__adddf3>
  8030f8:	180b883a 	mov	r5,r3
  8030fc:	000d883a 	mov	r6,zero
  803100:	000f883a 	mov	r7,zero
  803104:	1009883a 	mov	r4,r2
  803108:	0803d440 	call	803d44 <__gtdf2>
  80310c:	0080210e 	bge	zero,r2,803194 <floor+0x1c8>
  803110:	88002216 	blt	r17,zero,80319c <floor+0x1d0>
  803114:	0704303a 	nor	r2,zero,fp
  803118:	90a4703a 	and	r18,r18,r2
  80311c:	003fd806 	br	803080 <floor+0xb4>
  803120:	00810004 	movi	r2,1024
  803124:	b0bfd81e 	bne	r22,r2,803088 <floor+0xbc>
  803128:	800d883a 	mov	r6,r16
  80312c:	280f883a 	mov	r7,r5
  803130:	08038840 	call	803884 <__adddf3>
  803134:	1021883a 	mov	r16,r2
  803138:	1823883a 	mov	r17,r3
  80313c:	003fd206 	br	803088 <floor+0xbc>
  803140:	00a20034 	movhi	r2,34816
  803144:	109d6704 	addi	r2,r2,30108
  803148:	00df8e34 	movhi	r3,32312
  80314c:	18f90f04 	addi	r3,r3,-7108
  803150:	180f883a 	mov	r7,r3
  803154:	100d883a 	mov	r6,r2
  803158:	08038840 	call	803884 <__adddf3>
  80315c:	180b883a 	mov	r5,r3
  803160:	000d883a 	mov	r6,zero
  803164:	000f883a 	mov	r7,zero
  803168:	1009883a 	mov	r4,r2
  80316c:	0803d440 	call	803d44 <__gtdf2>
  803170:	00bfc30e 	bge	zero,r2,803080 <floor+0xb4>
  803174:	88001416 	blt	r17,zero,8031c8 <floor+0x1fc>
  803178:	002f883a 	mov	r23,zero
  80317c:	0025883a 	mov	r18,zero
  803180:	003fbf06 	br	803080 <floor+0xb4>
  803184:	00800434 	movhi	r2,16
  803188:	1585d83a 	sra	r2,r2,r22
  80318c:	88af883a 	add	r23,r17,r2
  803190:	003fb806 	br	803074 <floor+0xa8>
  803194:	882f883a 	mov	r23,r17
  803198:	003fb906 	br	803080 <floor+0xb4>
  80319c:	00800504 	movi	r2,20
  8031a0:	b0801126 	beq	r22,r2,8031e8 <floor+0x21c>
  8031a4:	00c00d04 	movi	r3,52
  8031a8:	1d87c83a 	sub	r3,r3,r22
  8031ac:	00800044 	movi	r2,1
  8031b0:	10c4983a 	sll	r2,r2,r3
  8031b4:	8085883a 	add	r2,r16,r2
  8031b8:	1400012e 	bgeu	r2,r16,8031c0 <floor+0x1f4>
  8031bc:	8dc00044 	addi	r23,r17,1
  8031c0:	1025883a 	mov	r18,r2
  8031c4:	003fd306 	br	803114 <floor+0x148>
  8031c8:	00a00034 	movhi	r2,32768
  8031cc:	10bfffc4 	addi	r2,r2,-1
  8031d0:	8884703a 	and	r2,r17,r2
  8031d4:	8084b03a 	or	r2,r16,r2
  8031d8:	103fee26 	beq	r2,zero,803194 <floor+0x1c8>
  8031dc:	05effc34 	movhi	r23,49136
  8031e0:	0025883a 	mov	r18,zero
  8031e4:	003fa606 	br	803080 <floor+0xb4>
  8031e8:	8dc00044 	addi	r23,r17,1
  8031ec:	003fc906 	br	803114 <floor+0x148>

008031f0 <scalbn>:
  8031f0:	2011883a 	mov	r8,r4
  8031f4:	291ffc2c 	andhi	r4,r5,32752
  8031f8:	2009d53a 	srai	r4,r4,20
  8031fc:	defffd04 	addi	sp,sp,-12
  803200:	dc000015 	stw	r16,0(sp)
  803204:	dfc00215 	stw	ra,8(sp)
  803208:	dc400115 	stw	r17,4(sp)
  80320c:	2813883a 	mov	r9,r5
  803210:	2815883a 	mov	r10,r5
  803214:	3021883a 	mov	r16,r6
  803218:	2000281e 	bne	r4,zero,8032bc <scalbn+0xcc>
  80321c:	00a00034 	movhi	r2,32768
  803220:	10bfffc4 	addi	r2,r2,-1
  803224:	2884703a 	and	r2,r5,r2
  803228:	4084b03a 	or	r2,r8,r2
  80322c:	10001826 	beq	r2,zero,803290 <scalbn+0xa0>
  803230:	0005883a 	mov	r2,zero
  803234:	00d0d434 	movhi	r3,17232
  803238:	4009883a 	mov	r4,r8
  80323c:	100d883a 	mov	r6,r2
  803240:	180f883a 	mov	r7,r3
  803244:	08038f80 	call	8038f8 <__muldf3>
  803248:	100b883a 	mov	r5,r2
  80324c:	1011883a 	mov	r8,r2
  803250:	00bffff4 	movhi	r2,65535
  803254:	108f2c04 	addi	r2,r2,15536
  803258:	180d883a 	mov	r6,r3
  80325c:	1813883a 	mov	r9,r3
  803260:	8080120e 	bge	r16,r2,8032ac <scalbn+0xbc>
  803264:	00b0be74 	movhi	r2,49913
  803268:	10bcd644 	addi	r2,r2,-3239
  80326c:	00c06974 	movhi	r3,421
  803270:	18db87c4 	addi	r3,r3,28191
  803274:	2809883a 	mov	r4,r5
  803278:	180f883a 	mov	r7,r3
  80327c:	300b883a 	mov	r5,r6
  803280:	100d883a 	mov	r6,r2
  803284:	08038f80 	call	8038f8 <__muldf3>
  803288:	1011883a 	mov	r8,r2
  80328c:	1813883a 	mov	r9,r3
  803290:	4005883a 	mov	r2,r8
  803294:	4807883a 	mov	r3,r9
  803298:	dfc00217 	ldw	ra,8(sp)
  80329c:	dc400117 	ldw	r17,4(sp)
  8032a0:	dc000017 	ldw	r16,0(sp)
  8032a4:	dec00304 	addi	sp,sp,12
  8032a8:	f800283a 	ret
  8032ac:	189ffc2c 	andhi	r2,r3,32752
  8032b0:	1005d53a 	srai	r2,r2,20
  8032b4:	1815883a 	mov	r10,r3
  8032b8:	113ff284 	addi	r4,r2,-54
  8032bc:	0081ffc4 	movi	r2,2047
  8032c0:	20801126 	beq	r4,r2,803308 <scalbn+0x118>
  8032c4:	2409883a 	add	r4,r4,r16
  8032c8:	0081ff84 	movi	r2,2046
  8032cc:	11001c16 	blt	r2,r4,803340 <scalbn+0x150>
  8032d0:	0100290e 	bge	zero,r4,803378 <scalbn+0x188>
  8032d4:	200a953a 	slli	r5,r4,20
  8032d8:	01200434 	movhi	r4,32784
  8032dc:	213fffc4 	addi	r4,r4,-1
  8032e0:	5108703a 	and	r4,r10,r4
  8032e4:	2148b03a 	or	r4,r4,r5
  8032e8:	2013883a 	mov	r9,r4
  8032ec:	4005883a 	mov	r2,r8
  8032f0:	4807883a 	mov	r3,r9
  8032f4:	dfc00217 	ldw	ra,8(sp)
  8032f8:	dc400117 	ldw	r17,4(sp)
  8032fc:	dc000017 	ldw	r16,0(sp)
  803300:	dec00304 	addi	sp,sp,12
  803304:	f800283a 	ret
  803308:	480f883a 	mov	r7,r9
  80330c:	4009883a 	mov	r4,r8
  803310:	480b883a 	mov	r5,r9
  803314:	400d883a 	mov	r6,r8
  803318:	08038840 	call	803884 <__adddf3>
  80331c:	1011883a 	mov	r8,r2
  803320:	1813883a 	mov	r9,r3
  803324:	4005883a 	mov	r2,r8
  803328:	4807883a 	mov	r3,r9
  80332c:	dfc00217 	ldw	ra,8(sp)
  803330:	dc400117 	ldw	r17,4(sp)
  803334:	dc000017 	ldw	r16,0(sp)
  803338:	dec00304 	addi	sp,sp,12
  80333c:	f800283a 	ret
  803340:	04220034 	movhi	r16,34816
  803344:	841d6704 	addi	r16,r16,30108
  803348:	045f8e34 	movhi	r17,32312
  80334c:	8c790f04 	addi	r17,r17,-7108
  803350:	480f883a 	mov	r7,r9
  803354:	400d883a 	mov	r6,r8
  803358:	8009883a 	mov	r4,r16
  80335c:	880b883a 	mov	r5,r17
  803360:	08033d00 	call	8033d0 <copysign>
  803364:	180b883a 	mov	r5,r3
  803368:	800d883a 	mov	r6,r16
  80336c:	880f883a 	mov	r7,r17
  803370:	1009883a 	mov	r4,r2
  803374:	003fc306 	br	803284 <scalbn+0x94>
  803378:	00bff284 	movi	r2,-54
  80337c:	11000716 	blt	r2,r4,80339c <scalbn+0x1ac>
  803380:	00b0d414 	movui	r2,50000
  803384:	143fee16 	blt	r2,r16,803340 <scalbn+0x150>
  803388:	0430be74 	movhi	r16,49913
  80338c:	843cd644 	addi	r16,r16,-3239
  803390:	04406974 	movhi	r17,421
  803394:	8c5b87c4 	addi	r17,r17,28191
  803398:	003fed06 	br	803350 <scalbn+0x160>
  80339c:	21000d84 	addi	r4,r4,54
  8033a0:	2008953a 	slli	r4,r4,20
  8033a4:	01e00434 	movhi	r7,32784
  8033a8:	39ffffc4 	addi	r7,r7,-1
  8033ac:	51ce703a 	and	r7,r10,r7
  8033b0:	390eb03a 	or	r7,r7,r4
  8033b4:	024f2434 	movhi	r9,15504
  8033b8:	4009883a 	mov	r4,r8
  8033bc:	0011883a 	mov	r8,zero
  8033c0:	380b883a 	mov	r5,r7
  8033c4:	400d883a 	mov	r6,r8
  8033c8:	480f883a 	mov	r7,r9
  8033cc:	003fad06 	br	803284 <scalbn+0x94>

008033d0 <copysign>:
  8033d0:	3813883a 	mov	r9,r7
  8033d4:	01e00034 	movhi	r7,32768
  8033d8:	39ffffc4 	addi	r7,r7,-1
  8033dc:	394e703a 	and	r7,r7,r5
  8033e0:	4aa0002c 	andhi	r10,r9,32768
  8033e4:	3a8eb03a 	or	r7,r7,r10
  8033e8:	2005883a 	mov	r2,r4
  8033ec:	3807883a 	mov	r3,r7
  8033f0:	f800283a 	ret

008033f4 <_fpadd_parts>:
  8033f4:	defff804 	addi	sp,sp,-32
  8033f8:	dcc00315 	stw	r19,12(sp)
  8033fc:	2027883a 	mov	r19,r4
  803400:	21000017 	ldw	r4,0(r4)
  803404:	00c00044 	movi	r3,1
  803408:	dd400515 	stw	r21,20(sp)
  80340c:	dd000415 	stw	r20,16(sp)
  803410:	ddc00715 	stw	r23,28(sp)
  803414:	dd800615 	stw	r22,24(sp)
  803418:	dc800215 	stw	r18,8(sp)
  80341c:	dc400115 	stw	r17,4(sp)
  803420:	dc000015 	stw	r16,0(sp)
  803424:	282b883a 	mov	r21,r5
  803428:	3029883a 	mov	r20,r6
  80342c:	1900632e 	bgeu	r3,r4,8035bc <_fpadd_parts+0x1c8>
  803430:	28800017 	ldw	r2,0(r5)
  803434:	1880812e 	bgeu	r3,r2,80363c <_fpadd_parts+0x248>
  803438:	00c00104 	movi	r3,4
  80343c:	20c0dc26 	beq	r4,r3,8037b0 <_fpadd_parts+0x3bc>
  803440:	10c07e26 	beq	r2,r3,80363c <_fpadd_parts+0x248>
  803444:	00c00084 	movi	r3,2
  803448:	10c06726 	beq	r2,r3,8035e8 <_fpadd_parts+0x1f4>
  80344c:	20c07b26 	beq	r4,r3,80363c <_fpadd_parts+0x248>
  803450:	9dc00217 	ldw	r23,8(r19)
  803454:	28c00217 	ldw	r3,8(r5)
  803458:	9c400317 	ldw	r17,12(r19)
  80345c:	2bc00317 	ldw	r15,12(r5)
  803460:	b8cdc83a 	sub	r6,r23,r3
  803464:	9c800417 	ldw	r18,16(r19)
  803468:	2c000417 	ldw	r16,16(r5)
  80346c:	3009883a 	mov	r4,r6
  803470:	30009716 	blt	r6,zero,8036d0 <_fpadd_parts+0x2dc>
  803474:	00800fc4 	movi	r2,63
  803478:	11806b16 	blt	r2,r6,803628 <_fpadd_parts+0x234>
  80347c:	0100a40e 	bge	zero,r4,803710 <_fpadd_parts+0x31c>
  803480:	35bff804 	addi	r22,r6,-32
  803484:	b000bc16 	blt	r22,zero,803778 <_fpadd_parts+0x384>
  803488:	8596d83a 	srl	r11,r16,r22
  80348c:	0019883a 	mov	r12,zero
  803490:	0013883a 	mov	r9,zero
  803494:	01000044 	movi	r4,1
  803498:	0015883a 	mov	r10,zero
  80349c:	b000be16 	blt	r22,zero,803798 <_fpadd_parts+0x3a4>
  8034a0:	2590983a 	sll	r8,r4,r22
  8034a4:	000f883a 	mov	r7,zero
  8034a8:	00bfffc4 	movi	r2,-1
  8034ac:	3889883a 	add	r4,r7,r2
  8034b0:	408b883a 	add	r5,r8,r2
  8034b4:	21cd803a 	cmpltu	r6,r4,r7
  8034b8:	314b883a 	add	r5,r6,r5
  8034bc:	7904703a 	and	r2,r15,r4
  8034c0:	8146703a 	and	r3,r16,r5
  8034c4:	10c4b03a 	or	r2,r2,r3
  8034c8:	10000226 	beq	r2,zero,8034d4 <_fpadd_parts+0xe0>
  8034cc:	02400044 	movi	r9,1
  8034d0:	0015883a 	mov	r10,zero
  8034d4:	5a5eb03a 	or	r15,r11,r9
  8034d8:	62a0b03a 	or	r16,r12,r10
  8034dc:	99400117 	ldw	r5,4(r19)
  8034e0:	a8800117 	ldw	r2,4(r21)
  8034e4:	28806e26 	beq	r5,r2,8036a0 <_fpadd_parts+0x2ac>
  8034e8:	28006626 	beq	r5,zero,803684 <_fpadd_parts+0x290>
  8034ec:	7c45c83a 	sub	r2,r15,r17
  8034f0:	7889803a 	cmpltu	r4,r15,r2
  8034f4:	8487c83a 	sub	r3,r16,r18
  8034f8:	1909c83a 	sub	r4,r3,r4
  8034fc:	100d883a 	mov	r6,r2
  803500:	200f883a 	mov	r7,r4
  803504:	38007716 	blt	r7,zero,8036e4 <_fpadd_parts+0x2f0>
  803508:	a5c00215 	stw	r23,8(r20)
  80350c:	a1c00415 	stw	r7,16(r20)
  803510:	a0000115 	stw	zero,4(r20)
  803514:	a1800315 	stw	r6,12(r20)
  803518:	a2000317 	ldw	r8,12(r20)
  80351c:	a2400417 	ldw	r9,16(r20)
  803520:	00bfffc4 	movi	r2,-1
  803524:	408b883a 	add	r5,r8,r2
  803528:	2a09803a 	cmpltu	r4,r5,r8
  80352c:	488d883a 	add	r6,r9,r2
  803530:	01c40034 	movhi	r7,4096
  803534:	39ffffc4 	addi	r7,r7,-1
  803538:	218d883a 	add	r6,r4,r6
  80353c:	39801736 	bltu	r7,r6,80359c <_fpadd_parts+0x1a8>
  803540:	31c06526 	beq	r6,r7,8036d8 <_fpadd_parts+0x2e4>
  803544:	a3000217 	ldw	r12,8(r20)
  803548:	4209883a 	add	r4,r8,r8
  80354c:	00bfffc4 	movi	r2,-1
  803550:	220f803a 	cmpltu	r7,r4,r8
  803554:	4a4b883a 	add	r5,r9,r9
  803558:	394f883a 	add	r7,r7,r5
  80355c:	2095883a 	add	r10,r4,r2
  803560:	3897883a 	add	r11,r7,r2
  803564:	510d803a 	cmpltu	r6,r10,r4
  803568:	6099883a 	add	r12,r12,r2
  80356c:	32d7883a 	add	r11,r6,r11
  803570:	00840034 	movhi	r2,4096
  803574:	10bfffc4 	addi	r2,r2,-1
  803578:	2011883a 	mov	r8,r4
  80357c:	3813883a 	mov	r9,r7
  803580:	a1000315 	stw	r4,12(r20)
  803584:	a1c00415 	stw	r7,16(r20)
  803588:	a3000215 	stw	r12,8(r20)
  80358c:	12c00336 	bltu	r2,r11,80359c <_fpadd_parts+0x1a8>
  803590:	58bfed1e 	bne	r11,r2,803548 <_fpadd_parts+0x154>
  803594:	00bfff84 	movi	r2,-2
  803598:	12bfeb2e 	bgeu	r2,r10,803548 <_fpadd_parts+0x154>
  80359c:	a2800417 	ldw	r10,16(r20)
  8035a0:	008000c4 	movi	r2,3
  8035a4:	00c80034 	movhi	r3,8192
  8035a8:	18ffffc4 	addi	r3,r3,-1
  8035ac:	a2400317 	ldw	r9,12(r20)
  8035b0:	a0800015 	stw	r2,0(r20)
  8035b4:	1a802336 	bltu	r3,r10,803644 <_fpadd_parts+0x250>
  8035b8:	a027883a 	mov	r19,r20
  8035bc:	9805883a 	mov	r2,r19
  8035c0:	ddc00717 	ldw	r23,28(sp)
  8035c4:	dd800617 	ldw	r22,24(sp)
  8035c8:	dd400517 	ldw	r21,20(sp)
  8035cc:	dd000417 	ldw	r20,16(sp)
  8035d0:	dcc00317 	ldw	r19,12(sp)
  8035d4:	dc800217 	ldw	r18,8(sp)
  8035d8:	dc400117 	ldw	r17,4(sp)
  8035dc:	dc000017 	ldw	r16,0(sp)
  8035e0:	dec00804 	addi	sp,sp,32
  8035e4:	f800283a 	ret
  8035e8:	20fff41e 	bne	r4,r3,8035bc <_fpadd_parts+0x1c8>
  8035ec:	31000015 	stw	r4,0(r6)
  8035f0:	98800117 	ldw	r2,4(r19)
  8035f4:	30800115 	stw	r2,4(r6)
  8035f8:	98c00217 	ldw	r3,8(r19)
  8035fc:	30c00215 	stw	r3,8(r6)
  803600:	98800317 	ldw	r2,12(r19)
  803604:	30800315 	stw	r2,12(r6)
  803608:	98c00417 	ldw	r3,16(r19)
  80360c:	30c00415 	stw	r3,16(r6)
  803610:	98800117 	ldw	r2,4(r19)
  803614:	28c00117 	ldw	r3,4(r5)
  803618:	3027883a 	mov	r19,r6
  80361c:	10c4703a 	and	r2,r2,r3
  803620:	30800115 	stw	r2,4(r6)
  803624:	003fe506 	br	8035bc <_fpadd_parts+0x1c8>
  803628:	1dc02616 	blt	r3,r23,8036c4 <_fpadd_parts+0x2d0>
  80362c:	0023883a 	mov	r17,zero
  803630:	182f883a 	mov	r23,r3
  803634:	0025883a 	mov	r18,zero
  803638:	003fa806 	br	8034dc <_fpadd_parts+0xe8>
  80363c:	a827883a 	mov	r19,r21
  803640:	003fde06 	br	8035bc <_fpadd_parts+0x1c8>
  803644:	01800044 	movi	r6,1
  803648:	500497fa 	slli	r2,r10,31
  80364c:	4808d07a 	srli	r4,r9,1
  803650:	518ad83a 	srl	r5,r10,r6
  803654:	a2000217 	ldw	r8,8(r20)
  803658:	1108b03a 	or	r4,r2,r4
  80365c:	0007883a 	mov	r3,zero
  803660:	4984703a 	and	r2,r9,r6
  803664:	208cb03a 	or	r6,r4,r2
  803668:	28ceb03a 	or	r7,r5,r3
  80366c:	42000044 	addi	r8,r8,1
  803670:	a027883a 	mov	r19,r20
  803674:	a1c00415 	stw	r7,16(r20)
  803678:	a2000215 	stw	r8,8(r20)
  80367c:	a1800315 	stw	r6,12(r20)
  803680:	003fce06 	br	8035bc <_fpadd_parts+0x1c8>
  803684:	8bc5c83a 	sub	r2,r17,r15
  803688:	8889803a 	cmpltu	r4,r17,r2
  80368c:	9407c83a 	sub	r3,r18,r16
  803690:	1909c83a 	sub	r4,r3,r4
  803694:	100d883a 	mov	r6,r2
  803698:	200f883a 	mov	r7,r4
  80369c:	003f9906 	br	803504 <_fpadd_parts+0x110>
  8036a0:	7c45883a 	add	r2,r15,r17
  8036a4:	13c9803a 	cmpltu	r4,r2,r15
  8036a8:	8487883a 	add	r3,r16,r18
  8036ac:	20c9883a 	add	r4,r4,r3
  8036b0:	a1400115 	stw	r5,4(r20)
  8036b4:	a5c00215 	stw	r23,8(r20)
  8036b8:	a0800315 	stw	r2,12(r20)
  8036bc:	a1000415 	stw	r4,16(r20)
  8036c0:	003fb606 	br	80359c <_fpadd_parts+0x1a8>
  8036c4:	001f883a 	mov	r15,zero
  8036c8:	0021883a 	mov	r16,zero
  8036cc:	003f8306 	br	8034dc <_fpadd_parts+0xe8>
  8036d0:	018dc83a 	sub	r6,zero,r6
  8036d4:	003f6706 	br	803474 <_fpadd_parts+0x80>
  8036d8:	00bfff84 	movi	r2,-2
  8036dc:	117faf36 	bltu	r2,r5,80359c <_fpadd_parts+0x1a8>
  8036e0:	003f9806 	br	803544 <_fpadd_parts+0x150>
  8036e4:	0005883a 	mov	r2,zero
  8036e8:	1189c83a 	sub	r4,r2,r6
  8036ec:	1105803a 	cmpltu	r2,r2,r4
  8036f0:	01cbc83a 	sub	r5,zero,r7
  8036f4:	2885c83a 	sub	r2,r5,r2
  8036f8:	01800044 	movi	r6,1
  8036fc:	a1800115 	stw	r6,4(r20)
  803700:	a5c00215 	stw	r23,8(r20)
  803704:	a1000315 	stw	r4,12(r20)
  803708:	a0800415 	stw	r2,16(r20)
  80370c:	003f8206 	br	803518 <_fpadd_parts+0x124>
  803710:	203f7226 	beq	r4,zero,8034dc <_fpadd_parts+0xe8>
  803714:	35bff804 	addi	r22,r6,-32
  803718:	b9af883a 	add	r23,r23,r6
  80371c:	b0003116 	blt	r22,zero,8037e4 <_fpadd_parts+0x3f0>
  803720:	959ad83a 	srl	r13,r18,r22
  803724:	001d883a 	mov	r14,zero
  803728:	000f883a 	mov	r7,zero
  80372c:	01000044 	movi	r4,1
  803730:	0011883a 	mov	r8,zero
  803734:	b0002516 	blt	r22,zero,8037cc <_fpadd_parts+0x3d8>
  803738:	2594983a 	sll	r10,r4,r22
  80373c:	0013883a 	mov	r9,zero
  803740:	00bfffc4 	movi	r2,-1
  803744:	4889883a 	add	r4,r9,r2
  803748:	508b883a 	add	r5,r10,r2
  80374c:	224d803a 	cmpltu	r6,r4,r9
  803750:	314b883a 	add	r5,r6,r5
  803754:	8904703a 	and	r2,r17,r4
  803758:	9146703a 	and	r3,r18,r5
  80375c:	10c4b03a 	or	r2,r2,r3
  803760:	10000226 	beq	r2,zero,80376c <_fpadd_parts+0x378>
  803764:	01c00044 	movi	r7,1
  803768:	0011883a 	mov	r8,zero
  80376c:	69e2b03a 	or	r17,r13,r7
  803770:	7224b03a 	or	r18,r14,r8
  803774:	003f5906 	br	8034dc <_fpadd_parts+0xe8>
  803778:	8407883a 	add	r3,r16,r16
  80377c:	008007c4 	movi	r2,31
  803780:	1185c83a 	sub	r2,r2,r6
  803784:	1886983a 	sll	r3,r3,r2
  803788:	7996d83a 	srl	r11,r15,r6
  80378c:	8198d83a 	srl	r12,r16,r6
  803790:	1ad6b03a 	or	r11,r3,r11
  803794:	003f3e06 	br	803490 <_fpadd_parts+0x9c>
  803798:	2006d07a 	srli	r3,r4,1
  80379c:	008007c4 	movi	r2,31
  8037a0:	1185c83a 	sub	r2,r2,r6
  8037a4:	1890d83a 	srl	r8,r3,r2
  8037a8:	218e983a 	sll	r7,r4,r6
  8037ac:	003f3e06 	br	8034a8 <_fpadd_parts+0xb4>
  8037b0:	113f821e 	bne	r2,r4,8035bc <_fpadd_parts+0x1c8>
  8037b4:	28c00117 	ldw	r3,4(r5)
  8037b8:	98800117 	ldw	r2,4(r19)
  8037bc:	10ff7f26 	beq	r2,r3,8035bc <_fpadd_parts+0x1c8>
  8037c0:	04c02234 	movhi	r19,136
  8037c4:	9cfb0e04 	addi	r19,r19,-5064
  8037c8:	003f7c06 	br	8035bc <_fpadd_parts+0x1c8>
  8037cc:	2006d07a 	srli	r3,r4,1
  8037d0:	008007c4 	movi	r2,31
  8037d4:	1185c83a 	sub	r2,r2,r6
  8037d8:	1894d83a 	srl	r10,r3,r2
  8037dc:	2192983a 	sll	r9,r4,r6
  8037e0:	003fd706 	br	803740 <_fpadd_parts+0x34c>
  8037e4:	9487883a 	add	r3,r18,r18
  8037e8:	008007c4 	movi	r2,31
  8037ec:	1185c83a 	sub	r2,r2,r6
  8037f0:	1886983a 	sll	r3,r3,r2
  8037f4:	899ad83a 	srl	r13,r17,r6
  8037f8:	919cd83a 	srl	r14,r18,r6
  8037fc:	1b5ab03a 	or	r13,r3,r13
  803800:	003fc906 	br	803728 <_fpadd_parts+0x334>

00803804 <__subdf3>:
  803804:	deffea04 	addi	sp,sp,-88
  803808:	dcc01415 	stw	r19,80(sp)
  80380c:	dcc00404 	addi	r19,sp,16
  803810:	2011883a 	mov	r8,r4
  803814:	2813883a 	mov	r9,r5
  803818:	dc401315 	stw	r17,76(sp)
  80381c:	d809883a 	mov	r4,sp
  803820:	980b883a 	mov	r5,r19
  803824:	dc400904 	addi	r17,sp,36
  803828:	dfc01515 	stw	ra,84(sp)
  80382c:	da400115 	stw	r9,4(sp)
  803830:	d9c00315 	stw	r7,12(sp)
  803834:	da000015 	stw	r8,0(sp)
  803838:	d9800215 	stw	r6,8(sp)
  80383c:	080459c0 	call	80459c <__unpack_d>
  803840:	d9000204 	addi	r4,sp,8
  803844:	880b883a 	mov	r5,r17
  803848:	080459c0 	call	80459c <__unpack_d>
  80384c:	d8800a17 	ldw	r2,40(sp)
  803850:	880b883a 	mov	r5,r17
  803854:	9809883a 	mov	r4,r19
  803858:	d9800e04 	addi	r6,sp,56
  80385c:	1080005c 	xori	r2,r2,1
  803860:	d8800a15 	stw	r2,40(sp)
  803864:	08033f40 	call	8033f4 <_fpadd_parts>
  803868:	1009883a 	mov	r4,r2
  80386c:	08042880 	call	804288 <__pack_d>
  803870:	dfc01517 	ldw	ra,84(sp)
  803874:	dcc01417 	ldw	r19,80(sp)
  803878:	dc401317 	ldw	r17,76(sp)
  80387c:	dec01604 	addi	sp,sp,88
  803880:	f800283a 	ret

00803884 <__adddf3>:
  803884:	deffea04 	addi	sp,sp,-88
  803888:	dcc01415 	stw	r19,80(sp)
  80388c:	dcc00404 	addi	r19,sp,16
  803890:	2011883a 	mov	r8,r4
  803894:	2813883a 	mov	r9,r5
  803898:	dc401315 	stw	r17,76(sp)
  80389c:	d809883a 	mov	r4,sp
  8038a0:	980b883a 	mov	r5,r19
  8038a4:	dc400904 	addi	r17,sp,36
  8038a8:	dfc01515 	stw	ra,84(sp)
  8038ac:	da400115 	stw	r9,4(sp)
  8038b0:	d9c00315 	stw	r7,12(sp)
  8038b4:	da000015 	stw	r8,0(sp)
  8038b8:	d9800215 	stw	r6,8(sp)
  8038bc:	080459c0 	call	80459c <__unpack_d>
  8038c0:	d9000204 	addi	r4,sp,8
  8038c4:	880b883a 	mov	r5,r17
  8038c8:	080459c0 	call	80459c <__unpack_d>
  8038cc:	d9800e04 	addi	r6,sp,56
  8038d0:	9809883a 	mov	r4,r19
  8038d4:	880b883a 	mov	r5,r17
  8038d8:	08033f40 	call	8033f4 <_fpadd_parts>
  8038dc:	1009883a 	mov	r4,r2
  8038e0:	08042880 	call	804288 <__pack_d>
  8038e4:	dfc01517 	ldw	ra,84(sp)
  8038e8:	dcc01417 	ldw	r19,80(sp)
  8038ec:	dc401317 	ldw	r17,76(sp)
  8038f0:	dec01604 	addi	sp,sp,88
  8038f4:	f800283a 	ret

008038f8 <__muldf3>:
  8038f8:	deffe004 	addi	sp,sp,-128
  8038fc:	dc401815 	stw	r17,96(sp)
  803900:	dc400404 	addi	r17,sp,16
  803904:	2011883a 	mov	r8,r4
  803908:	2813883a 	mov	r9,r5
  80390c:	dc001715 	stw	r16,92(sp)
  803910:	d809883a 	mov	r4,sp
  803914:	880b883a 	mov	r5,r17
  803918:	dc000904 	addi	r16,sp,36
  80391c:	dfc01f15 	stw	ra,124(sp)
  803920:	da400115 	stw	r9,4(sp)
  803924:	d9c00315 	stw	r7,12(sp)
  803928:	da000015 	stw	r8,0(sp)
  80392c:	d9800215 	stw	r6,8(sp)
  803930:	ddc01e15 	stw	r23,120(sp)
  803934:	dd801d15 	stw	r22,116(sp)
  803938:	dd401c15 	stw	r21,112(sp)
  80393c:	dd001b15 	stw	r20,108(sp)
  803940:	dcc01a15 	stw	r19,104(sp)
  803944:	dc801915 	stw	r18,100(sp)
  803948:	080459c0 	call	80459c <__unpack_d>
  80394c:	d9000204 	addi	r4,sp,8
  803950:	800b883a 	mov	r5,r16
  803954:	080459c0 	call	80459c <__unpack_d>
  803958:	d9000417 	ldw	r4,16(sp)
  80395c:	00800044 	movi	r2,1
  803960:	1100102e 	bgeu	r2,r4,8039a4 <__muldf3+0xac>
  803964:	d8c00917 	ldw	r3,36(sp)
  803968:	10c0062e 	bgeu	r2,r3,803984 <__muldf3+0x8c>
  80396c:	00800104 	movi	r2,4
  803970:	20800a26 	beq	r4,r2,80399c <__muldf3+0xa4>
  803974:	1880cc26 	beq	r3,r2,803ca8 <__muldf3+0x3b0>
  803978:	00800084 	movi	r2,2
  80397c:	20800926 	beq	r4,r2,8039a4 <__muldf3+0xac>
  803980:	1880191e 	bne	r3,r2,8039e8 <__muldf3+0xf0>
  803984:	d8c00a17 	ldw	r3,40(sp)
  803988:	d8800517 	ldw	r2,20(sp)
  80398c:	8009883a 	mov	r4,r16
  803990:	10c4c03a 	cmpne	r2,r2,r3
  803994:	d8800a15 	stw	r2,40(sp)
  803998:	00000706 	br	8039b8 <__muldf3+0xc0>
  80399c:	00800084 	movi	r2,2
  8039a0:	1880c326 	beq	r3,r2,803cb0 <__muldf3+0x3b8>
  8039a4:	d8800517 	ldw	r2,20(sp)
  8039a8:	d8c00a17 	ldw	r3,40(sp)
  8039ac:	8809883a 	mov	r4,r17
  8039b0:	10c4c03a 	cmpne	r2,r2,r3
  8039b4:	d8800515 	stw	r2,20(sp)
  8039b8:	08042880 	call	804288 <__pack_d>
  8039bc:	dfc01f17 	ldw	ra,124(sp)
  8039c0:	ddc01e17 	ldw	r23,120(sp)
  8039c4:	dd801d17 	ldw	r22,116(sp)
  8039c8:	dd401c17 	ldw	r21,112(sp)
  8039cc:	dd001b17 	ldw	r20,108(sp)
  8039d0:	dcc01a17 	ldw	r19,104(sp)
  8039d4:	dc801917 	ldw	r18,100(sp)
  8039d8:	dc401817 	ldw	r17,96(sp)
  8039dc:	dc001717 	ldw	r16,92(sp)
  8039e0:	dec02004 	addi	sp,sp,128
  8039e4:	f800283a 	ret
  8039e8:	dd800717 	ldw	r22,28(sp)
  8039ec:	dc800c17 	ldw	r18,48(sp)
  8039f0:	002b883a 	mov	r21,zero
  8039f4:	0023883a 	mov	r17,zero
  8039f8:	a80b883a 	mov	r5,r21
  8039fc:	b00d883a 	mov	r6,r22
  803a00:	880f883a 	mov	r7,r17
  803a04:	ddc00817 	ldw	r23,32(sp)
  803a08:	dcc00d17 	ldw	r19,52(sp)
  803a0c:	9009883a 	mov	r4,r18
  803a10:	08041700 	call	804170 <__muldi3>
  803a14:	001b883a 	mov	r13,zero
  803a18:	680f883a 	mov	r7,r13
  803a1c:	b009883a 	mov	r4,r22
  803a20:	000b883a 	mov	r5,zero
  803a24:	980d883a 	mov	r6,r19
  803a28:	b82d883a 	mov	r22,r23
  803a2c:	002f883a 	mov	r23,zero
  803a30:	db401615 	stw	r13,88(sp)
  803a34:	d8801315 	stw	r2,76(sp)
  803a38:	d8c01415 	stw	r3,80(sp)
  803a3c:	dcc01515 	stw	r19,84(sp)
  803a40:	08041700 	call	804170 <__muldi3>
  803a44:	b00d883a 	mov	r6,r22
  803a48:	000b883a 	mov	r5,zero
  803a4c:	9009883a 	mov	r4,r18
  803a50:	b80f883a 	mov	r7,r23
  803a54:	1021883a 	mov	r16,r2
  803a58:	1823883a 	mov	r17,r3
  803a5c:	08041700 	call	804170 <__muldi3>
  803a60:	8085883a 	add	r2,r16,r2
  803a64:	140d803a 	cmpltu	r6,r2,r16
  803a68:	88c7883a 	add	r3,r17,r3
  803a6c:	30cd883a 	add	r6,r6,r3
  803a70:	1029883a 	mov	r20,r2
  803a74:	302b883a 	mov	r21,r6
  803a78:	da801317 	ldw	r10,76(sp)
  803a7c:	dac01417 	ldw	r11,80(sp)
  803a80:	db001517 	ldw	r12,84(sp)
  803a84:	db401617 	ldw	r13,88(sp)
  803a88:	3440612e 	bgeu	r6,r17,803c10 <__muldf3+0x318>
  803a8c:	0009883a 	mov	r4,zero
  803a90:	5105883a 	add	r2,r10,r4
  803a94:	128d803a 	cmpltu	r6,r2,r10
  803a98:	5d07883a 	add	r3,r11,r20
  803a9c:	30cd883a 	add	r6,r6,r3
  803aa0:	0021883a 	mov	r16,zero
  803aa4:	04400044 	movi	r17,1
  803aa8:	1025883a 	mov	r18,r2
  803aac:	3027883a 	mov	r19,r6
  803ab0:	32c06236 	bltu	r6,r11,803c3c <__muldf3+0x344>
  803ab4:	59807a26 	beq	r11,r6,803ca0 <__muldf3+0x3a8>
  803ab8:	680b883a 	mov	r5,r13
  803abc:	b80f883a 	mov	r7,r23
  803ac0:	6009883a 	mov	r4,r12
  803ac4:	b00d883a 	mov	r6,r22
  803ac8:	08041700 	call	804170 <__muldi3>
  803acc:	1009883a 	mov	r4,r2
  803ad0:	000f883a 	mov	r7,zero
  803ad4:	1545883a 	add	r2,r2,r21
  803ad8:	1111803a 	cmpltu	r8,r2,r4
  803adc:	19c7883a 	add	r3,r3,r7
  803ae0:	40c7883a 	add	r3,r8,r3
  803ae4:	88cb883a 	add	r5,r17,r3
  803ae8:	d8c00617 	ldw	r3,24(sp)
  803aec:	8089883a 	add	r4,r16,r2
  803af0:	d8800b17 	ldw	r2,44(sp)
  803af4:	18c00104 	addi	r3,r3,4
  803af8:	240d803a 	cmpltu	r6,r4,r16
  803afc:	10c7883a 	add	r3,r2,r3
  803b00:	2013883a 	mov	r9,r4
  803b04:	d8800a17 	ldw	r2,40(sp)
  803b08:	d9000517 	ldw	r4,20(sp)
  803b0c:	314d883a 	add	r6,r6,r5
  803b10:	3015883a 	mov	r10,r6
  803b14:	2088c03a 	cmpne	r4,r4,r2
  803b18:	00880034 	movhi	r2,8192
  803b1c:	10bfffc4 	addi	r2,r2,-1
  803b20:	d9000f15 	stw	r4,60(sp)
  803b24:	d8c01015 	stw	r3,64(sp)
  803b28:	1180162e 	bgeu	r2,r6,803b84 <__muldf3+0x28c>
  803b2c:	1811883a 	mov	r8,r3
  803b30:	101f883a 	mov	r15,r2
  803b34:	980497fa 	slli	r2,r19,31
  803b38:	9016d07a 	srli	r11,r18,1
  803b3c:	500697fa 	slli	r3,r10,31
  803b40:	480cd07a 	srli	r6,r9,1
  803b44:	500ed07a 	srli	r7,r10,1
  803b48:	12d6b03a 	or	r11,r2,r11
  803b4c:	00800044 	movi	r2,1
  803b50:	198cb03a 	or	r6,r3,r6
  803b54:	4888703a 	and	r4,r9,r2
  803b58:	9818d07a 	srli	r12,r19,1
  803b5c:	001b883a 	mov	r13,zero
  803b60:	03a00034 	movhi	r14,32768
  803b64:	3013883a 	mov	r9,r6
  803b68:	3815883a 	mov	r10,r7
  803b6c:	4091883a 	add	r8,r8,r2
  803b70:	20000226 	beq	r4,zero,803b7c <__muldf3+0x284>
  803b74:	5b64b03a 	or	r18,r11,r13
  803b78:	63a6b03a 	or	r19,r12,r14
  803b7c:	7abfed36 	bltu	r15,r10,803b34 <__muldf3+0x23c>
  803b80:	da001015 	stw	r8,64(sp)
  803b84:	00840034 	movhi	r2,4096
  803b88:	10bfffc4 	addi	r2,r2,-1
  803b8c:	12801436 	bltu	r2,r10,803be0 <__muldf3+0x2e8>
  803b90:	da001017 	ldw	r8,64(sp)
  803b94:	101f883a 	mov	r15,r2
  803b98:	4a45883a 	add	r2,r9,r9
  803b9c:	124d803a 	cmpltu	r6,r2,r9
  803ba0:	5287883a 	add	r3,r10,r10
  803ba4:	9497883a 	add	r11,r18,r18
  803ba8:	5c8f803a 	cmpltu	r7,r11,r18
  803bac:	9cd9883a 	add	r12,r19,r19
  803bb0:	01000044 	movi	r4,1
  803bb4:	30cd883a 	add	r6,r6,r3
  803bb8:	3b0f883a 	add	r7,r7,r12
  803bbc:	423fffc4 	addi	r8,r8,-1
  803bc0:	1013883a 	mov	r9,r2
  803bc4:	3015883a 	mov	r10,r6
  803bc8:	111ab03a 	or	r13,r2,r4
  803bcc:	98003016 	blt	r19,zero,803c90 <__muldf3+0x398>
  803bd0:	5825883a 	mov	r18,r11
  803bd4:	3827883a 	mov	r19,r7
  803bd8:	7abfef2e 	bgeu	r15,r10,803b98 <__muldf3+0x2a0>
  803bdc:	da001015 	stw	r8,64(sp)
  803be0:	00803fc4 	movi	r2,255
  803be4:	488e703a 	and	r7,r9,r2
  803be8:	00802004 	movi	r2,128
  803bec:	0007883a 	mov	r3,zero
  803bf0:	0011883a 	mov	r8,zero
  803bf4:	38801826 	beq	r7,r2,803c58 <__muldf3+0x360>
  803bf8:	008000c4 	movi	r2,3
  803bfc:	d9000e04 	addi	r4,sp,56
  803c00:	da801215 	stw	r10,72(sp)
  803c04:	d8800e15 	stw	r2,56(sp)
  803c08:	da401115 	stw	r9,68(sp)
  803c0c:	003f6a06 	br	8039b8 <__muldf3+0xc0>
  803c10:	89802126 	beq	r17,r6,803c98 <__muldf3+0x3a0>
  803c14:	0009883a 	mov	r4,zero
  803c18:	5105883a 	add	r2,r10,r4
  803c1c:	128d803a 	cmpltu	r6,r2,r10
  803c20:	5d07883a 	add	r3,r11,r20
  803c24:	30cd883a 	add	r6,r6,r3
  803c28:	0021883a 	mov	r16,zero
  803c2c:	0023883a 	mov	r17,zero
  803c30:	1025883a 	mov	r18,r2
  803c34:	3027883a 	mov	r19,r6
  803c38:	32ff9e2e 	bgeu	r6,r11,803ab4 <__muldf3+0x1bc>
  803c3c:	00800044 	movi	r2,1
  803c40:	8089883a 	add	r4,r16,r2
  803c44:	240d803a 	cmpltu	r6,r4,r16
  803c48:	344d883a 	add	r6,r6,r17
  803c4c:	2021883a 	mov	r16,r4
  803c50:	3023883a 	mov	r17,r6
  803c54:	003f9806 	br	803ab8 <__muldf3+0x1c0>
  803c58:	403fe71e 	bne	r8,zero,803bf8 <__muldf3+0x300>
  803c5c:	01004004 	movi	r4,256
  803c60:	4904703a 	and	r2,r9,r4
  803c64:	10c4b03a 	or	r2,r2,r3
  803c68:	103fe31e 	bne	r2,zero,803bf8 <__muldf3+0x300>
  803c6c:	94c4b03a 	or	r2,r18,r19
  803c70:	103fe126 	beq	r2,zero,803bf8 <__muldf3+0x300>
  803c74:	49c5883a 	add	r2,r9,r7
  803c78:	1251803a 	cmpltu	r8,r2,r9
  803c7c:	4291883a 	add	r8,r8,r10
  803c80:	013fc004 	movi	r4,-256
  803c84:	1112703a 	and	r9,r2,r4
  803c88:	4015883a 	mov	r10,r8
  803c8c:	003fda06 	br	803bf8 <__muldf3+0x300>
  803c90:	6813883a 	mov	r9,r13
  803c94:	003fce06 	br	803bd0 <__muldf3+0x2d8>
  803c98:	143f7c36 	bltu	r2,r16,803a8c <__muldf3+0x194>
  803c9c:	003fdd06 	br	803c14 <__muldf3+0x31c>
  803ca0:	12bf852e 	bgeu	r2,r10,803ab8 <__muldf3+0x1c0>
  803ca4:	003fe506 	br	803c3c <__muldf3+0x344>
  803ca8:	00800084 	movi	r2,2
  803cac:	20bf351e 	bne	r4,r2,803984 <__muldf3+0x8c>
  803cb0:	01002234 	movhi	r4,136
  803cb4:	213b0e04 	addi	r4,r4,-5064
  803cb8:	003f3f06 	br	8039b8 <__muldf3+0xc0>

00803cbc <__eqdf2>:
  803cbc:	deffef04 	addi	sp,sp,-68
  803cc0:	dc400f15 	stw	r17,60(sp)
  803cc4:	dc400404 	addi	r17,sp,16
  803cc8:	2005883a 	mov	r2,r4
  803ccc:	2807883a 	mov	r3,r5
  803cd0:	dc000e15 	stw	r16,56(sp)
  803cd4:	d809883a 	mov	r4,sp
  803cd8:	880b883a 	mov	r5,r17
  803cdc:	dc000904 	addi	r16,sp,36
  803ce0:	d8c00115 	stw	r3,4(sp)
  803ce4:	d8800015 	stw	r2,0(sp)
  803ce8:	d9800215 	stw	r6,8(sp)
  803cec:	dfc01015 	stw	ra,64(sp)
  803cf0:	d9c00315 	stw	r7,12(sp)
  803cf4:	080459c0 	call	80459c <__unpack_d>
  803cf8:	d9000204 	addi	r4,sp,8
  803cfc:	800b883a 	mov	r5,r16
  803d00:	080459c0 	call	80459c <__unpack_d>
  803d04:	d8800417 	ldw	r2,16(sp)
  803d08:	00c00044 	movi	r3,1
  803d0c:	180d883a 	mov	r6,r3
  803d10:	1880062e 	bgeu	r3,r2,803d2c <__eqdf2+0x70>
  803d14:	d8800917 	ldw	r2,36(sp)
  803d18:	8809883a 	mov	r4,r17
  803d1c:	800b883a 	mov	r5,r16
  803d20:	1880022e 	bgeu	r3,r2,803d2c <__eqdf2+0x70>
  803d24:	08046d40 	call	8046d4 <__fpcmp_parts_d>
  803d28:	100d883a 	mov	r6,r2
  803d2c:	3005883a 	mov	r2,r6
  803d30:	dfc01017 	ldw	ra,64(sp)
  803d34:	dc400f17 	ldw	r17,60(sp)
  803d38:	dc000e17 	ldw	r16,56(sp)
  803d3c:	dec01104 	addi	sp,sp,68
  803d40:	f800283a 	ret

00803d44 <__gtdf2>:
  803d44:	deffef04 	addi	sp,sp,-68
  803d48:	dc400f15 	stw	r17,60(sp)
  803d4c:	dc400404 	addi	r17,sp,16
  803d50:	2005883a 	mov	r2,r4
  803d54:	2807883a 	mov	r3,r5
  803d58:	dc000e15 	stw	r16,56(sp)
  803d5c:	d809883a 	mov	r4,sp
  803d60:	880b883a 	mov	r5,r17
  803d64:	dc000904 	addi	r16,sp,36
  803d68:	d8c00115 	stw	r3,4(sp)
  803d6c:	d8800015 	stw	r2,0(sp)
  803d70:	d9800215 	stw	r6,8(sp)
  803d74:	dfc01015 	stw	ra,64(sp)
  803d78:	d9c00315 	stw	r7,12(sp)
  803d7c:	080459c0 	call	80459c <__unpack_d>
  803d80:	d9000204 	addi	r4,sp,8
  803d84:	800b883a 	mov	r5,r16
  803d88:	080459c0 	call	80459c <__unpack_d>
  803d8c:	d8800417 	ldw	r2,16(sp)
  803d90:	00c00044 	movi	r3,1
  803d94:	01bfffc4 	movi	r6,-1
  803d98:	1880062e 	bgeu	r3,r2,803db4 <__gtdf2+0x70>
  803d9c:	d8800917 	ldw	r2,36(sp)
  803da0:	8809883a 	mov	r4,r17
  803da4:	800b883a 	mov	r5,r16
  803da8:	1880022e 	bgeu	r3,r2,803db4 <__gtdf2+0x70>
  803dac:	08046d40 	call	8046d4 <__fpcmp_parts_d>
  803db0:	100d883a 	mov	r6,r2
  803db4:	3005883a 	mov	r2,r6
  803db8:	dfc01017 	ldw	ra,64(sp)
  803dbc:	dc400f17 	ldw	r17,60(sp)
  803dc0:	dc000e17 	ldw	r16,56(sp)
  803dc4:	dec01104 	addi	sp,sp,68
  803dc8:	f800283a 	ret

00803dcc <__gedf2>:
  803dcc:	deffef04 	addi	sp,sp,-68
  803dd0:	dc400f15 	stw	r17,60(sp)
  803dd4:	dc400404 	addi	r17,sp,16
  803dd8:	2005883a 	mov	r2,r4
  803ddc:	2807883a 	mov	r3,r5
  803de0:	dc000e15 	stw	r16,56(sp)
  803de4:	d809883a 	mov	r4,sp
  803de8:	880b883a 	mov	r5,r17
  803dec:	dc000904 	addi	r16,sp,36
  803df0:	d8c00115 	stw	r3,4(sp)
  803df4:	d8800015 	stw	r2,0(sp)
  803df8:	d9800215 	stw	r6,8(sp)
  803dfc:	dfc01015 	stw	ra,64(sp)
  803e00:	d9c00315 	stw	r7,12(sp)
  803e04:	080459c0 	call	80459c <__unpack_d>
  803e08:	d9000204 	addi	r4,sp,8
  803e0c:	800b883a 	mov	r5,r16
  803e10:	080459c0 	call	80459c <__unpack_d>
  803e14:	d8800417 	ldw	r2,16(sp)
  803e18:	00c00044 	movi	r3,1
  803e1c:	01bfffc4 	movi	r6,-1
  803e20:	1880062e 	bgeu	r3,r2,803e3c <__gedf2+0x70>
  803e24:	d8800917 	ldw	r2,36(sp)
  803e28:	8809883a 	mov	r4,r17
  803e2c:	800b883a 	mov	r5,r16
  803e30:	1880022e 	bgeu	r3,r2,803e3c <__gedf2+0x70>
  803e34:	08046d40 	call	8046d4 <__fpcmp_parts_d>
  803e38:	100d883a 	mov	r6,r2
  803e3c:	3005883a 	mov	r2,r6
  803e40:	dfc01017 	ldw	ra,64(sp)
  803e44:	dc400f17 	ldw	r17,60(sp)
  803e48:	dc000e17 	ldw	r16,56(sp)
  803e4c:	dec01104 	addi	sp,sp,68
  803e50:	f800283a 	ret

00803e54 <__floatsidf>:
  803e54:	2006d7fa 	srli	r3,r4,31
  803e58:	defff604 	addi	sp,sp,-40
  803e5c:	008000c4 	movi	r2,3
  803e60:	dfc00915 	stw	ra,36(sp)
  803e64:	dcc00815 	stw	r19,32(sp)
  803e68:	dc800715 	stw	r18,28(sp)
  803e6c:	dc400615 	stw	r17,24(sp)
  803e70:	dc000515 	stw	r16,20(sp)
  803e74:	d8800015 	stw	r2,0(sp)
  803e78:	d8c00115 	stw	r3,4(sp)
  803e7c:	20000f1e 	bne	r4,zero,803ebc <__floatsidf+0x68>
  803e80:	00800084 	movi	r2,2
  803e84:	d8800015 	stw	r2,0(sp)
  803e88:	d809883a 	mov	r4,sp
  803e8c:	08042880 	call	804288 <__pack_d>
  803e90:	1009883a 	mov	r4,r2
  803e94:	180b883a 	mov	r5,r3
  803e98:	2005883a 	mov	r2,r4
  803e9c:	2807883a 	mov	r3,r5
  803ea0:	dfc00917 	ldw	ra,36(sp)
  803ea4:	dcc00817 	ldw	r19,32(sp)
  803ea8:	dc800717 	ldw	r18,28(sp)
  803eac:	dc400617 	ldw	r17,24(sp)
  803eb0:	dc000517 	ldw	r16,20(sp)
  803eb4:	dec00a04 	addi	sp,sp,40
  803eb8:	f800283a 	ret
  803ebc:	00800f04 	movi	r2,60
  803ec0:	1807003a 	cmpeq	r3,r3,zero
  803ec4:	d8800215 	stw	r2,8(sp)
  803ec8:	18001126 	beq	r3,zero,803f10 <__floatsidf+0xbc>
  803ecc:	0027883a 	mov	r19,zero
  803ed0:	2025883a 	mov	r18,r4
  803ed4:	d9000315 	stw	r4,12(sp)
  803ed8:	dcc00415 	stw	r19,16(sp)
  803edc:	08042080 	call	804208 <__clzsi2>
  803ee0:	11000744 	addi	r4,r2,29
  803ee4:	013fe80e 	bge	zero,r4,803e88 <__floatsidf+0x34>
  803ee8:	10bfff44 	addi	r2,r2,-3
  803eec:	10000c16 	blt	r2,zero,803f20 <__floatsidf+0xcc>
  803ef0:	90a2983a 	sll	r17,r18,r2
  803ef4:	0021883a 	mov	r16,zero
  803ef8:	d8800217 	ldw	r2,8(sp)
  803efc:	dc400415 	stw	r17,16(sp)
  803f00:	dc000315 	stw	r16,12(sp)
  803f04:	1105c83a 	sub	r2,r2,r4
  803f08:	d8800215 	stw	r2,8(sp)
  803f0c:	003fde06 	br	803e88 <__floatsidf+0x34>
  803f10:	00a00034 	movhi	r2,32768
  803f14:	20800a26 	beq	r4,r2,803f40 <__floatsidf+0xec>
  803f18:	0109c83a 	sub	r4,zero,r4
  803f1c:	003feb06 	br	803ecc <__floatsidf+0x78>
  803f20:	9006d07a 	srli	r3,r18,1
  803f24:	008007c4 	movi	r2,31
  803f28:	1105c83a 	sub	r2,r2,r4
  803f2c:	1886d83a 	srl	r3,r3,r2
  803f30:	9922983a 	sll	r17,r19,r4
  803f34:	9120983a 	sll	r16,r18,r4
  803f38:	1c62b03a 	or	r17,r3,r17
  803f3c:	003fee06 	br	803ef8 <__floatsidf+0xa4>
  803f40:	0009883a 	mov	r4,zero
  803f44:	01707834 	movhi	r5,49632
  803f48:	003fd306 	br	803e98 <__floatsidf+0x44>

00803f4c <__fixdfsi>:
  803f4c:	defff804 	addi	sp,sp,-32
  803f50:	2005883a 	mov	r2,r4
  803f54:	2807883a 	mov	r3,r5
  803f58:	d809883a 	mov	r4,sp
  803f5c:	d9400204 	addi	r5,sp,8
  803f60:	d8c00115 	stw	r3,4(sp)
  803f64:	d8800015 	stw	r2,0(sp)
  803f68:	dfc00715 	stw	ra,28(sp)
  803f6c:	080459c0 	call	80459c <__unpack_d>
  803f70:	d8c00217 	ldw	r3,8(sp)
  803f74:	00800084 	movi	r2,2
  803f78:	1880051e 	bne	r3,r2,803f90 <__fixdfsi+0x44>
  803f7c:	0007883a 	mov	r3,zero
  803f80:	1805883a 	mov	r2,r3
  803f84:	dfc00717 	ldw	ra,28(sp)
  803f88:	dec00804 	addi	sp,sp,32
  803f8c:	f800283a 	ret
  803f90:	00800044 	movi	r2,1
  803f94:	10fff92e 	bgeu	r2,r3,803f7c <__fixdfsi+0x30>
  803f98:	00800104 	movi	r2,4
  803f9c:	18800426 	beq	r3,r2,803fb0 <__fixdfsi+0x64>
  803fa0:	d8c00417 	ldw	r3,16(sp)
  803fa4:	183ff516 	blt	r3,zero,803f7c <__fixdfsi+0x30>
  803fa8:	00800784 	movi	r2,30
  803fac:	10c0080e 	bge	r2,r3,803fd0 <__fixdfsi+0x84>
  803fb0:	d8800317 	ldw	r2,12(sp)
  803fb4:	1000121e 	bne	r2,zero,804000 <__fixdfsi+0xb4>
  803fb8:	00e00034 	movhi	r3,32768
  803fbc:	18ffffc4 	addi	r3,r3,-1
  803fc0:	1805883a 	mov	r2,r3
  803fc4:	dfc00717 	ldw	ra,28(sp)
  803fc8:	dec00804 	addi	sp,sp,32
  803fcc:	f800283a 	ret
  803fd0:	00800f04 	movi	r2,60
  803fd4:	10d1c83a 	sub	r8,r2,r3
  803fd8:	40bff804 	addi	r2,r8,-32
  803fdc:	d9800517 	ldw	r6,20(sp)
  803fe0:	d9c00617 	ldw	r7,24(sp)
  803fe4:	10000816 	blt	r2,zero,804008 <__fixdfsi+0xbc>
  803fe8:	3888d83a 	srl	r4,r7,r2
  803fec:	d8800317 	ldw	r2,12(sp)
  803ff0:	2007883a 	mov	r3,r4
  803ff4:	103fe226 	beq	r2,zero,803f80 <__fixdfsi+0x34>
  803ff8:	0107c83a 	sub	r3,zero,r4
  803ffc:	003fe006 	br	803f80 <__fixdfsi+0x34>
  804000:	00e00034 	movhi	r3,32768
  804004:	003fde06 	br	803f80 <__fixdfsi+0x34>
  804008:	39c7883a 	add	r3,r7,r7
  80400c:	008007c4 	movi	r2,31
  804010:	1205c83a 	sub	r2,r2,r8
  804014:	1886983a 	sll	r3,r3,r2
  804018:	3208d83a 	srl	r4,r6,r8
  80401c:	1908b03a 	or	r4,r3,r4
  804020:	003ff206 	br	803fec <__fixdfsi+0xa0>

00804024 <udivmodsi4>:
  804024:	29001b2e 	bgeu	r5,r4,804094 <udivmodsi4+0x70>
  804028:	28001a16 	blt	r5,zero,804094 <udivmodsi4+0x70>
  80402c:	00800044 	movi	r2,1
  804030:	0007883a 	mov	r3,zero
  804034:	01c007c4 	movi	r7,31
  804038:	00000306 	br	804048 <udivmodsi4+0x24>
  80403c:	19c01326 	beq	r3,r7,80408c <udivmodsi4+0x68>
  804040:	18c00044 	addi	r3,r3,1
  804044:	28000416 	blt	r5,zero,804058 <udivmodsi4+0x34>
  804048:	294b883a 	add	r5,r5,r5
  80404c:	1085883a 	add	r2,r2,r2
  804050:	293ffa36 	bltu	r5,r4,80403c <udivmodsi4+0x18>
  804054:	10000d26 	beq	r2,zero,80408c <udivmodsi4+0x68>
  804058:	0007883a 	mov	r3,zero
  80405c:	21400236 	bltu	r4,r5,804068 <udivmodsi4+0x44>
  804060:	2149c83a 	sub	r4,r4,r5
  804064:	1886b03a 	or	r3,r3,r2
  804068:	1004d07a 	srli	r2,r2,1
  80406c:	280ad07a 	srli	r5,r5,1
  804070:	103ffa1e 	bne	r2,zero,80405c <udivmodsi4+0x38>
  804074:	30000226 	beq	r6,zero,804080 <udivmodsi4+0x5c>
  804078:	2005883a 	mov	r2,r4
  80407c:	f800283a 	ret
  804080:	1809883a 	mov	r4,r3
  804084:	2005883a 	mov	r2,r4
  804088:	f800283a 	ret
  80408c:	0007883a 	mov	r3,zero
  804090:	003ff806 	br	804074 <udivmodsi4+0x50>
  804094:	00800044 	movi	r2,1
  804098:	0007883a 	mov	r3,zero
  80409c:	003fef06 	br	80405c <udivmodsi4+0x38>

008040a0 <__divsi3>:
  8040a0:	defffe04 	addi	sp,sp,-8
  8040a4:	dc000015 	stw	r16,0(sp)
  8040a8:	dfc00115 	stw	ra,4(sp)
  8040ac:	0021883a 	mov	r16,zero
  8040b0:	20000c16 	blt	r4,zero,8040e4 <__divsi3+0x44>
  8040b4:	000d883a 	mov	r6,zero
  8040b8:	28000e16 	blt	r5,zero,8040f4 <__divsi3+0x54>
  8040bc:	08040240 	call	804024 <udivmodsi4>
  8040c0:	1007883a 	mov	r3,r2
  8040c4:	8005003a 	cmpeq	r2,r16,zero
  8040c8:	1000011e 	bne	r2,zero,8040d0 <__divsi3+0x30>
  8040cc:	00c7c83a 	sub	r3,zero,r3
  8040d0:	1805883a 	mov	r2,r3
  8040d4:	dfc00117 	ldw	ra,4(sp)
  8040d8:	dc000017 	ldw	r16,0(sp)
  8040dc:	dec00204 	addi	sp,sp,8
  8040e0:	f800283a 	ret
  8040e4:	0109c83a 	sub	r4,zero,r4
  8040e8:	04000044 	movi	r16,1
  8040ec:	000d883a 	mov	r6,zero
  8040f0:	283ff20e 	bge	r5,zero,8040bc <__divsi3+0x1c>
  8040f4:	014bc83a 	sub	r5,zero,r5
  8040f8:	8021003a 	cmpeq	r16,r16,zero
  8040fc:	003fef06 	br	8040bc <__divsi3+0x1c>

00804100 <__modsi3>:
  804100:	deffff04 	addi	sp,sp,-4
  804104:	dfc00015 	stw	ra,0(sp)
  804108:	01800044 	movi	r6,1
  80410c:	2807883a 	mov	r3,r5
  804110:	20000416 	blt	r4,zero,804124 <__modsi3+0x24>
  804114:	28000c16 	blt	r5,zero,804148 <__modsi3+0x48>
  804118:	dfc00017 	ldw	ra,0(sp)
  80411c:	dec00104 	addi	sp,sp,4
  804120:	08040241 	jmpi	804024 <udivmodsi4>
  804124:	0109c83a 	sub	r4,zero,r4
  804128:	28000b16 	blt	r5,zero,804158 <__modsi3+0x58>
  80412c:	180b883a 	mov	r5,r3
  804130:	01800044 	movi	r6,1
  804134:	08040240 	call	804024 <udivmodsi4>
  804138:	0085c83a 	sub	r2,zero,r2
  80413c:	dfc00017 	ldw	ra,0(sp)
  804140:	dec00104 	addi	sp,sp,4
  804144:	f800283a 	ret
  804148:	014bc83a 	sub	r5,zero,r5
  80414c:	dfc00017 	ldw	ra,0(sp)
  804150:	dec00104 	addi	sp,sp,4
  804154:	08040241 	jmpi	804024 <udivmodsi4>
  804158:	0147c83a 	sub	r3,zero,r5
  80415c:	003ff306 	br	80412c <__modsi3+0x2c>

00804160 <__udivsi3>:
  804160:	000d883a 	mov	r6,zero
  804164:	08040241 	jmpi	804024 <udivmodsi4>

00804168 <__umodsi3>:
  804168:	01800044 	movi	r6,1
  80416c:	08040241 	jmpi	804024 <udivmodsi4>

00804170 <__muldi3>:
  804170:	2011883a 	mov	r8,r4
  804174:	427fffcc 	andi	r9,r8,65535
  804178:	4018d43a 	srli	r12,r8,16
  80417c:	32bfffcc 	andi	r10,r6,65535
  804180:	3016d43a 	srli	r11,r6,16
  804184:	4a85383a 	mul	r2,r9,r10
  804188:	6295383a 	mul	r10,r12,r10
  80418c:	4ad3383a 	mul	r9,r9,r11
  804190:	113fffcc 	andi	r4,r2,65535
  804194:	1004d43a 	srli	r2,r2,16
  804198:	4a93883a 	add	r9,r9,r10
  80419c:	3807883a 	mov	r3,r7
  8041a0:	1245883a 	add	r2,r2,r9
  8041a4:	280f883a 	mov	r7,r5
  8041a8:	180b883a 	mov	r5,r3
  8041ac:	1006943a 	slli	r3,r2,16
  8041b0:	defffd04 	addi	sp,sp,-12
  8041b4:	dc800215 	stw	r18,8(sp)
  8041b8:	1907883a 	add	r3,r3,r4
  8041bc:	dc400115 	stw	r17,4(sp)
  8041c0:	dc000015 	stw	r16,0(sp)
  8041c4:	4165383a 	mul	r18,r8,r5
  8041c8:	31e3383a 	mul	r17,r6,r7
  8041cc:	1012d43a 	srli	r9,r2,16
  8041d0:	62d9383a 	mul	r12,r12,r11
  8041d4:	181f883a 	mov	r15,r3
  8041d8:	1280022e 	bgeu	r2,r10,8041e4 <__muldi3+0x74>
  8041dc:	00800074 	movhi	r2,1
  8041e0:	6099883a 	add	r12,r12,r2
  8041e4:	624d883a 	add	r6,r12,r9
  8041e8:	9187883a 	add	r3,r18,r6
  8041ec:	88c7883a 	add	r3,r17,r3
  8041f0:	7805883a 	mov	r2,r15
  8041f4:	dc800217 	ldw	r18,8(sp)
  8041f8:	dc400117 	ldw	r17,4(sp)
  8041fc:	dc000017 	ldw	r16,0(sp)
  804200:	dec00304 	addi	sp,sp,12
  804204:	f800283a 	ret

00804208 <__clzsi2>:
  804208:	00bfffd4 	movui	r2,65535
  80420c:	11000e36 	bltu	r2,r4,804248 <__clzsi2+0x40>
  804210:	00803fc4 	movi	r2,255
  804214:	01400204 	movi	r5,8
  804218:	0007883a 	mov	r3,zero
  80421c:	11001036 	bltu	r2,r4,804260 <__clzsi2+0x58>
  804220:	000b883a 	mov	r5,zero
  804224:	20c6d83a 	srl	r3,r4,r3
  804228:	00802234 	movhi	r2,136
  80422c:	10bb1304 	addi	r2,r2,-5044
  804230:	1887883a 	add	r3,r3,r2
  804234:	18800003 	ldbu	r2,0(r3)
  804238:	00c00804 	movi	r3,32
  80423c:	2885883a 	add	r2,r5,r2
  804240:	1885c83a 	sub	r2,r3,r2
  804244:	f800283a 	ret
  804248:	01400404 	movi	r5,16
  80424c:	00804034 	movhi	r2,256
  804250:	10bfffc4 	addi	r2,r2,-1
  804254:	2807883a 	mov	r3,r5
  804258:	113ff22e 	bgeu	r2,r4,804224 <__clzsi2+0x1c>
  80425c:	01400604 	movi	r5,24
  804260:	2807883a 	mov	r3,r5
  804264:	20c6d83a 	srl	r3,r4,r3
  804268:	00802234 	movhi	r2,136
  80426c:	10bb1304 	addi	r2,r2,-5044
  804270:	1887883a 	add	r3,r3,r2
  804274:	18800003 	ldbu	r2,0(r3)
  804278:	00c00804 	movi	r3,32
  80427c:	2885883a 	add	r2,r5,r2
  804280:	1885c83a 	sub	r2,r3,r2
  804284:	f800283a 	ret

00804288 <__pack_d>:
  804288:	20c00017 	ldw	r3,0(r4)
  80428c:	defffd04 	addi	sp,sp,-12
  804290:	dc000015 	stw	r16,0(sp)
  804294:	dc800215 	stw	r18,8(sp)
  804298:	dc400115 	stw	r17,4(sp)
  80429c:	00800044 	movi	r2,1
  8042a0:	22000317 	ldw	r8,12(r4)
  8042a4:	001f883a 	mov	r15,zero
  8042a8:	22400417 	ldw	r9,16(r4)
  8042ac:	24000117 	ldw	r16,4(r4)
  8042b0:	10c0552e 	bgeu	r2,r3,804408 <__pack_d+0x180>
  8042b4:	00800104 	movi	r2,4
  8042b8:	18804f26 	beq	r3,r2,8043f8 <__pack_d+0x170>
  8042bc:	00800084 	movi	r2,2
  8042c0:	18800226 	beq	r3,r2,8042cc <__pack_d+0x44>
  8042c4:	4244b03a 	or	r2,r8,r9
  8042c8:	10001a1e 	bne	r2,zero,804334 <__pack_d+0xac>
  8042cc:	000d883a 	mov	r6,zero
  8042d0:	000f883a 	mov	r7,zero
  8042d4:	0011883a 	mov	r8,zero
  8042d8:	00800434 	movhi	r2,16
  8042dc:	10bfffc4 	addi	r2,r2,-1
  8042e0:	301d883a 	mov	r14,r6
  8042e4:	3884703a 	and	r2,r7,r2
  8042e8:	400a953a 	slli	r5,r8,20
  8042ec:	79bffc2c 	andhi	r6,r15,65520
  8042f0:	308cb03a 	or	r6,r6,r2
  8042f4:	00e00434 	movhi	r3,32784
  8042f8:	18ffffc4 	addi	r3,r3,-1
  8042fc:	800497fa 	slli	r2,r16,31
  804300:	30c6703a 	and	r3,r6,r3
  804304:	1946b03a 	or	r3,r3,r5
  804308:	01600034 	movhi	r5,32768
  80430c:	297fffc4 	addi	r5,r5,-1
  804310:	194a703a 	and	r5,r3,r5
  804314:	288ab03a 	or	r5,r5,r2
  804318:	2807883a 	mov	r3,r5
  80431c:	7005883a 	mov	r2,r14
  804320:	dc800217 	ldw	r18,8(sp)
  804324:	dc400117 	ldw	r17,4(sp)
  804328:	dc000017 	ldw	r16,0(sp)
  80432c:	dec00304 	addi	sp,sp,12
  804330:	f800283a 	ret
  804334:	21000217 	ldw	r4,8(r4)
  804338:	00bf0084 	movi	r2,-1022
  80433c:	20803f16 	blt	r4,r2,80443c <__pack_d+0x1b4>
  804340:	0080ffc4 	movi	r2,1023
  804344:	11002c16 	blt	r2,r4,8043f8 <__pack_d+0x170>
  804348:	00803fc4 	movi	r2,255
  80434c:	408c703a 	and	r6,r8,r2
  804350:	00802004 	movi	r2,128
  804354:	0007883a 	mov	r3,zero
  804358:	000f883a 	mov	r7,zero
  80435c:	2280ffc4 	addi	r10,r4,1023
  804360:	30801e26 	beq	r6,r2,8043dc <__pack_d+0x154>
  804364:	00801fc4 	movi	r2,127
  804368:	4089883a 	add	r4,r8,r2
  80436c:	220d803a 	cmpltu	r6,r4,r8
  804370:	324d883a 	add	r6,r6,r9
  804374:	2011883a 	mov	r8,r4
  804378:	3013883a 	mov	r9,r6
  80437c:	00880034 	movhi	r2,8192
  804380:	10bfffc4 	addi	r2,r2,-1
  804384:	12400d36 	bltu	r2,r9,8043bc <__pack_d+0x134>
  804388:	4804963a 	slli	r2,r9,24
  80438c:	400cd23a 	srli	r6,r8,8
  804390:	480ed23a 	srli	r7,r9,8
  804394:	013fffc4 	movi	r4,-1
  804398:	118cb03a 	or	r6,r2,r6
  80439c:	01400434 	movhi	r5,16
  8043a0:	297fffc4 	addi	r5,r5,-1
  8043a4:	3104703a 	and	r2,r6,r4
  8043a8:	3946703a 	and	r3,r7,r5
  8043ac:	5201ffcc 	andi	r8,r10,2047
  8043b0:	100d883a 	mov	r6,r2
  8043b4:	180f883a 	mov	r7,r3
  8043b8:	003fc706 	br	8042d8 <__pack_d+0x50>
  8043bc:	480897fa 	slli	r4,r9,31
  8043c0:	4004d07a 	srli	r2,r8,1
  8043c4:	4806d07a 	srli	r3,r9,1
  8043c8:	52800044 	addi	r10,r10,1
  8043cc:	2084b03a 	or	r2,r4,r2
  8043d0:	1011883a 	mov	r8,r2
  8043d4:	1813883a 	mov	r9,r3
  8043d8:	003feb06 	br	804388 <__pack_d+0x100>
  8043dc:	383fe11e 	bne	r7,zero,804364 <__pack_d+0xdc>
  8043e0:	01004004 	movi	r4,256
  8043e4:	4104703a 	and	r2,r8,r4
  8043e8:	10c4b03a 	or	r2,r2,r3
  8043ec:	103fe326 	beq	r2,zero,80437c <__pack_d+0xf4>
  8043f0:	3005883a 	mov	r2,r6
  8043f4:	003fdc06 	br	804368 <__pack_d+0xe0>
  8043f8:	000d883a 	mov	r6,zero
  8043fc:	000f883a 	mov	r7,zero
  804400:	0201ffc4 	movi	r8,2047
  804404:	003fb406 	br	8042d8 <__pack_d+0x50>
  804408:	0005883a 	mov	r2,zero
  80440c:	00c00234 	movhi	r3,8
  804410:	408cb03a 	or	r6,r8,r2
  804414:	48ceb03a 	or	r7,r9,r3
  804418:	013fffc4 	movi	r4,-1
  80441c:	01400434 	movhi	r5,16
  804420:	297fffc4 	addi	r5,r5,-1
  804424:	3104703a 	and	r2,r6,r4
  804428:	3946703a 	and	r3,r7,r5
  80442c:	100d883a 	mov	r6,r2
  804430:	180f883a 	mov	r7,r3
  804434:	0201ffc4 	movi	r8,2047
  804438:	003fa706 	br	8042d8 <__pack_d+0x50>
  80443c:	1109c83a 	sub	r4,r2,r4
  804440:	00800e04 	movi	r2,56
  804444:	11004316 	blt	r2,r4,804554 <__pack_d+0x2cc>
  804448:	21fff804 	addi	r7,r4,-32
  80444c:	38004516 	blt	r7,zero,804564 <__pack_d+0x2dc>
  804450:	49d8d83a 	srl	r12,r9,r7
  804454:	001b883a 	mov	r13,zero
  804458:	0023883a 	mov	r17,zero
  80445c:	01400044 	movi	r5,1
  804460:	0025883a 	mov	r18,zero
  804464:	38004716 	blt	r7,zero,804584 <__pack_d+0x2fc>
  804468:	29d6983a 	sll	r11,r5,r7
  80446c:	0015883a 	mov	r10,zero
  804470:	00bfffc4 	movi	r2,-1
  804474:	5089883a 	add	r4,r10,r2
  804478:	588b883a 	add	r5,r11,r2
  80447c:	228d803a 	cmpltu	r6,r4,r10
  804480:	314b883a 	add	r5,r6,r5
  804484:	4104703a 	and	r2,r8,r4
  804488:	4946703a 	and	r3,r9,r5
  80448c:	10c4b03a 	or	r2,r2,r3
  804490:	10000226 	beq	r2,zero,80449c <__pack_d+0x214>
  804494:	04400044 	movi	r17,1
  804498:	0025883a 	mov	r18,zero
  80449c:	00803fc4 	movi	r2,255
  8044a0:	644eb03a 	or	r7,r12,r17
  8044a4:	3892703a 	and	r9,r7,r2
  8044a8:	00802004 	movi	r2,128
  8044ac:	6c90b03a 	or	r8,r13,r18
  8044b0:	0015883a 	mov	r10,zero
  8044b4:	48801626 	beq	r9,r2,804510 <__pack_d+0x288>
  8044b8:	01001fc4 	movi	r4,127
  8044bc:	3905883a 	add	r2,r7,r4
  8044c0:	11cd803a 	cmpltu	r6,r2,r7
  8044c4:	320d883a 	add	r6,r6,r8
  8044c8:	100f883a 	mov	r7,r2
  8044cc:	00840034 	movhi	r2,4096
  8044d0:	10bfffc4 	addi	r2,r2,-1
  8044d4:	3011883a 	mov	r8,r6
  8044d8:	0007883a 	mov	r3,zero
  8044dc:	11801b36 	bltu	r2,r6,80454c <__pack_d+0x2c4>
  8044e0:	4004963a 	slli	r2,r8,24
  8044e4:	3808d23a 	srli	r4,r7,8
  8044e8:	400ad23a 	srli	r5,r8,8
  8044ec:	1813883a 	mov	r9,r3
  8044f0:	1108b03a 	or	r4,r2,r4
  8044f4:	00bfffc4 	movi	r2,-1
  8044f8:	00c00434 	movhi	r3,16
  8044fc:	18ffffc4 	addi	r3,r3,-1
  804500:	208c703a 	and	r6,r4,r2
  804504:	28ce703a 	and	r7,r5,r3
  804508:	4a01ffcc 	andi	r8,r9,2047
  80450c:	003f7206 	br	8042d8 <__pack_d+0x50>
  804510:	503fe91e 	bne	r10,zero,8044b8 <__pack_d+0x230>
  804514:	01004004 	movi	r4,256
  804518:	3904703a 	and	r2,r7,r4
  80451c:	0007883a 	mov	r3,zero
  804520:	10c4b03a 	or	r2,r2,r3
  804524:	10000626 	beq	r2,zero,804540 <__pack_d+0x2b8>
  804528:	3a45883a 	add	r2,r7,r9
  80452c:	11cd803a 	cmpltu	r6,r2,r7
  804530:	320d883a 	add	r6,r6,r8
  804534:	100f883a 	mov	r7,r2
  804538:	3011883a 	mov	r8,r6
  80453c:	0007883a 	mov	r3,zero
  804540:	00840034 	movhi	r2,4096
  804544:	10bfffc4 	addi	r2,r2,-1
  804548:	123fe52e 	bgeu	r2,r8,8044e0 <__pack_d+0x258>
  80454c:	00c00044 	movi	r3,1
  804550:	003fe306 	br	8044e0 <__pack_d+0x258>
  804554:	0009883a 	mov	r4,zero
  804558:	0013883a 	mov	r9,zero
  80455c:	000b883a 	mov	r5,zero
  804560:	003fe406 	br	8044f4 <__pack_d+0x26c>
  804564:	4a47883a 	add	r3,r9,r9
  804568:	008007c4 	movi	r2,31
  80456c:	1105c83a 	sub	r2,r2,r4
  804570:	1886983a 	sll	r3,r3,r2
  804574:	4118d83a 	srl	r12,r8,r4
  804578:	491ad83a 	srl	r13,r9,r4
  80457c:	1b18b03a 	or	r12,r3,r12
  804580:	003fb506 	br	804458 <__pack_d+0x1d0>
  804584:	2806d07a 	srli	r3,r5,1
  804588:	008007c4 	movi	r2,31
  80458c:	1105c83a 	sub	r2,r2,r4
  804590:	1896d83a 	srl	r11,r3,r2
  804594:	2914983a 	sll	r10,r5,r4
  804598:	003fb506 	br	804470 <__pack_d+0x1e8>

0080459c <__unpack_d>:
  80459c:	20c00117 	ldw	r3,4(r4)
  8045a0:	22400017 	ldw	r9,0(r4)
  8045a4:	00800434 	movhi	r2,16
  8045a8:	10bfffc4 	addi	r2,r2,-1
  8045ac:	1808d53a 	srli	r4,r3,20
  8045b0:	180cd7fa 	srli	r6,r3,31
  8045b4:	1894703a 	and	r10,r3,r2
  8045b8:	2201ffcc 	andi	r8,r4,2047
  8045bc:	281b883a 	mov	r13,r5
  8045c0:	4817883a 	mov	r11,r9
  8045c4:	29800115 	stw	r6,4(r5)
  8045c8:	5019883a 	mov	r12,r10
  8045cc:	40001e1e 	bne	r8,zero,804648 <__unpack_d+0xac>
  8045d0:	4a84b03a 	or	r2,r9,r10
  8045d4:	10001926 	beq	r2,zero,80463c <__unpack_d+0xa0>
  8045d8:	4804d63a 	srli	r2,r9,24
  8045dc:	500c923a 	slli	r6,r10,8
  8045e0:	013f0084 	movi	r4,-1022
  8045e4:	00c40034 	movhi	r3,4096
  8045e8:	18ffffc4 	addi	r3,r3,-1
  8045ec:	118cb03a 	or	r6,r2,r6
  8045f0:	008000c4 	movi	r2,3
  8045f4:	480a923a 	slli	r5,r9,8
  8045f8:	68800015 	stw	r2,0(r13)
  8045fc:	69000215 	stw	r4,8(r13)
  804600:	19800b36 	bltu	r3,r6,804630 <__unpack_d+0x94>
  804604:	200f883a 	mov	r7,r4
  804608:	1811883a 	mov	r8,r3
  80460c:	2945883a 	add	r2,r5,r5
  804610:	1149803a 	cmpltu	r4,r2,r5
  804614:	3187883a 	add	r3,r6,r6
  804618:	20c9883a 	add	r4,r4,r3
  80461c:	100b883a 	mov	r5,r2
  804620:	200d883a 	mov	r6,r4
  804624:	39ffffc4 	addi	r7,r7,-1
  804628:	413ff82e 	bgeu	r8,r4,80460c <__unpack_d+0x70>
  80462c:	69c00215 	stw	r7,8(r13)
  804630:	69800415 	stw	r6,16(r13)
  804634:	69400315 	stw	r5,12(r13)
  804638:	f800283a 	ret
  80463c:	00800084 	movi	r2,2
  804640:	28800015 	stw	r2,0(r5)
  804644:	f800283a 	ret
  804648:	0081ffc4 	movi	r2,2047
  80464c:	40800f26 	beq	r8,r2,80468c <__unpack_d+0xf0>
  804650:	480cd63a 	srli	r6,r9,24
  804654:	5006923a 	slli	r3,r10,8
  804658:	4804923a 	slli	r2,r9,8
  80465c:	0009883a 	mov	r4,zero
  804660:	30c6b03a 	or	r3,r6,r3
  804664:	01440034 	movhi	r5,4096
  804668:	110cb03a 	or	r6,r2,r4
  80466c:	423f0044 	addi	r8,r8,-1023
  804670:	194eb03a 	or	r7,r3,r5
  804674:	008000c4 	movi	r2,3
  804678:	69c00415 	stw	r7,16(r13)
  80467c:	6a000215 	stw	r8,8(r13)
  804680:	68800015 	stw	r2,0(r13)
  804684:	69800315 	stw	r6,12(r13)
  804688:	f800283a 	ret
  80468c:	4a84b03a 	or	r2,r9,r10
  804690:	1000031e 	bne	r2,zero,8046a0 <__unpack_d+0x104>
  804694:	00800104 	movi	r2,4
  804698:	28800015 	stw	r2,0(r5)
  80469c:	f800283a 	ret
  8046a0:	0009883a 	mov	r4,zero
  8046a4:	01400234 	movhi	r5,8
  8046a8:	4904703a 	and	r2,r9,r4
  8046ac:	5146703a 	and	r3,r10,r5
  8046b0:	10c4b03a 	or	r2,r2,r3
  8046b4:	10000526 	beq	r2,zero,8046cc <__unpack_d+0x130>
  8046b8:	00800044 	movi	r2,1
  8046bc:	68800015 	stw	r2,0(r13)
  8046c0:	6b000415 	stw	r12,16(r13)
  8046c4:	6ac00315 	stw	r11,12(r13)
  8046c8:	f800283a 	ret
  8046cc:	68000015 	stw	zero,0(r13)
  8046d0:	003ffb06 	br	8046c0 <__unpack_d+0x124>

008046d4 <__fpcmp_parts_d>:
  8046d4:	21800017 	ldw	r6,0(r4)
  8046d8:	00c00044 	movi	r3,1
  8046dc:	19800a2e 	bgeu	r3,r6,804708 <__fpcmp_parts_d+0x34>
  8046e0:	28800017 	ldw	r2,0(r5)
  8046e4:	1880082e 	bgeu	r3,r2,804708 <__fpcmp_parts_d+0x34>
  8046e8:	00c00104 	movi	r3,4
  8046ec:	30c02626 	beq	r6,r3,804788 <__fpcmp_parts_d+0xb4>
  8046f0:	10c02226 	beq	r2,r3,80477c <__fpcmp_parts_d+0xa8>
  8046f4:	00c00084 	movi	r3,2
  8046f8:	30c00526 	beq	r6,r3,804710 <__fpcmp_parts_d+0x3c>
  8046fc:	10c0071e 	bne	r2,r3,80471c <__fpcmp_parts_d+0x48>
  804700:	20800117 	ldw	r2,4(r4)
  804704:	1000091e 	bne	r2,zero,80472c <__fpcmp_parts_d+0x58>
  804708:	00800044 	movi	r2,1
  80470c:	f800283a 	ret
  804710:	10c01a1e 	bne	r2,r3,80477c <__fpcmp_parts_d+0xa8>
  804714:	0005883a 	mov	r2,zero
  804718:	f800283a 	ret
  80471c:	22000117 	ldw	r8,4(r4)
  804720:	28800117 	ldw	r2,4(r5)
  804724:	40800326 	beq	r8,r2,804734 <__fpcmp_parts_d+0x60>
  804728:	403ff726 	beq	r8,zero,804708 <__fpcmp_parts_d+0x34>
  80472c:	00bfffc4 	movi	r2,-1
  804730:	f800283a 	ret
  804734:	20c00217 	ldw	r3,8(r4)
  804738:	28800217 	ldw	r2,8(r5)
  80473c:	10fffa16 	blt	r2,r3,804728 <__fpcmp_parts_d+0x54>
  804740:	18800916 	blt	r3,r2,804768 <__fpcmp_parts_d+0x94>
  804744:	21c00417 	ldw	r7,16(r4)
  804748:	28c00417 	ldw	r3,16(r5)
  80474c:	21800317 	ldw	r6,12(r4)
  804750:	28800317 	ldw	r2,12(r5)
  804754:	19fff436 	bltu	r3,r7,804728 <__fpcmp_parts_d+0x54>
  804758:	38c00526 	beq	r7,r3,804770 <__fpcmp_parts_d+0x9c>
  80475c:	38c00236 	bltu	r7,r3,804768 <__fpcmp_parts_d+0x94>
  804760:	19ffec1e 	bne	r3,r7,804714 <__fpcmp_parts_d+0x40>
  804764:	30bfeb2e 	bgeu	r6,r2,804714 <__fpcmp_parts_d+0x40>
  804768:	403fe71e 	bne	r8,zero,804708 <__fpcmp_parts_d+0x34>
  80476c:	003fef06 	br	80472c <__fpcmp_parts_d+0x58>
  804770:	11bffa2e 	bgeu	r2,r6,80475c <__fpcmp_parts_d+0x88>
  804774:	403fe426 	beq	r8,zero,804708 <__fpcmp_parts_d+0x34>
  804778:	003fec06 	br	80472c <__fpcmp_parts_d+0x58>
  80477c:	28800117 	ldw	r2,4(r5)
  804780:	103fe11e 	bne	r2,zero,804708 <__fpcmp_parts_d+0x34>
  804784:	003fe906 	br	80472c <__fpcmp_parts_d+0x58>
  804788:	11bfdd1e 	bne	r2,r6,804700 <__fpcmp_parts_d+0x2c>
  80478c:	28c00117 	ldw	r3,4(r5)
  804790:	20800117 	ldw	r2,4(r4)
  804794:	1885c83a 	sub	r2,r3,r2
  804798:	f800283a 	ret

0080479c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80479c:	defffe04 	addi	sp,sp,-8
  8047a0:	dfc00115 	stw	ra,4(sp)
  8047a4:	df000015 	stw	fp,0(sp)
  8047a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8047ac:	01002234 	movhi	r4,136
  8047b0:	2101ee04 	addi	r4,r4,1976
  8047b4:	01402234 	movhi	r5,136
  8047b8:	297b6104 	addi	r5,r5,-4732
  8047bc:	01802234 	movhi	r6,136
  8047c0:	3181ee04 	addi	r6,r6,1976
  8047c4:	080481c0 	call	80481c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8047c8:	01002034 	movhi	r4,128
  8047cc:	21000804 	addi	r4,r4,32
  8047d0:	01402034 	movhi	r5,128
  8047d4:	29400804 	addi	r5,r5,32
  8047d8:	01802034 	movhi	r6,128
  8047dc:	31806d04 	addi	r6,r6,436
  8047e0:	080481c0 	call	80481c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8047e4:	01002034 	movhi	r4,128
  8047e8:	211a9804 	addi	r4,r4,27232
  8047ec:	01402034 	movhi	r5,128
  8047f0:	295a9804 	addi	r5,r5,27232
  8047f4:	01802234 	movhi	r6,136
  8047f8:	31bb6104 	addi	r6,r6,-4732
  8047fc:	080481c0 	call	80481c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804800:	08057000 	call	805700 <alt_dcache_flush_all>
  alt_icache_flush_all();
  804804:	08059240 	call	805924 <alt_icache_flush_all>
}
  804808:	e037883a 	mov	sp,fp
  80480c:	dfc00117 	ldw	ra,4(sp)
  804810:	df000017 	ldw	fp,0(sp)
  804814:	dec00204 	addi	sp,sp,8
  804818:	f800283a 	ret

0080481c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80481c:	defffc04 	addi	sp,sp,-16
  804820:	df000315 	stw	fp,12(sp)
  804824:	df000304 	addi	fp,sp,12
  804828:	e13ffd15 	stw	r4,-12(fp)
  80482c:	e17ffe15 	stw	r5,-8(fp)
  804830:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  804834:	e0fffe17 	ldw	r3,-8(fp)
  804838:	e0bffd17 	ldw	r2,-12(fp)
  80483c:	18800e26 	beq	r3,r2,804878 <alt_load_section+0x5c>
  {
    while( to != end )
  804840:	00000a06 	br	80486c <alt_load_section+0x50>
    {
      *to++ = *from++;
  804844:	e0bffd17 	ldw	r2,-12(fp)
  804848:	10c00017 	ldw	r3,0(r2)
  80484c:	e0bffe17 	ldw	r2,-8(fp)
  804850:	10c00015 	stw	r3,0(r2)
  804854:	e0bffe17 	ldw	r2,-8(fp)
  804858:	10800104 	addi	r2,r2,4
  80485c:	e0bffe15 	stw	r2,-8(fp)
  804860:	e0bffd17 	ldw	r2,-12(fp)
  804864:	10800104 	addi	r2,r2,4
  804868:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80486c:	e0fffe17 	ldw	r3,-8(fp)
  804870:	e0bfff17 	ldw	r2,-4(fp)
  804874:	18bff31e 	bne	r3,r2,804844 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  804878:	e037883a 	mov	sp,fp
  80487c:	df000017 	ldw	fp,0(sp)
  804880:	dec00104 	addi	sp,sp,4
  804884:	f800283a 	ret

00804888 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804888:	defffd04 	addi	sp,sp,-12
  80488c:	dfc00215 	stw	ra,8(sp)
  804890:	df000115 	stw	fp,4(sp)
  804894:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804898:	0009883a 	mov	r4,zero
  80489c:	08048f40 	call	8048f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8048a0:	08049280 	call	804928 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8048a4:	01002234 	movhi	r4,136
  8048a8:	213b5304 	addi	r4,r4,-4788
  8048ac:	01402234 	movhi	r5,136
  8048b0:	297b5304 	addi	r5,r5,-4788
  8048b4:	01802234 	movhi	r6,136
  8048b8:	31bb5304 	addi	r6,r6,-4788
  8048bc:	0805ce40 	call	805ce4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8048c0:	080585c0 	call	80585c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8048c4:	01002034 	movhi	r4,128
  8048c8:	21163004 	addi	r4,r4,22720
  8048cc:	08065400 	call	806540 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8048d0:	d1269817 	ldw	r4,-26016(gp)
  8048d4:	d1669917 	ldw	r5,-26012(gp)
  8048d8:	d1a69a17 	ldw	r6,-26008(gp)
  8048dc:	08001f00 	call	8001f0 <main>
  8048e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8048e4:	01000044 	movi	r4,1
  8048e8:	08055a40 	call	8055a4 <close>
  exit (result);
  8048ec:	e13fff17 	ldw	r4,-4(fp)
  8048f0:	08065540 	call	806554 <exit>

008048f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8048f4:	defffd04 	addi	sp,sp,-12
  8048f8:	dfc00215 	stw	ra,8(sp)
  8048fc:	df000115 	stw	fp,4(sp)
  804900:	df000104 	addi	fp,sp,4
  804904:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  804908:	08062240 	call	806224 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80490c:	00800044 	movi	r2,1
  804910:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804914:	e037883a 	mov	sp,fp
  804918:	dfc00117 	ldw	ra,4(sp)
  80491c:	df000017 	ldw	fp,0(sp)
  804920:	dec00204 	addi	sp,sp,8
  804924:	f800283a 	ret

00804928 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  804928:	defffe04 	addi	sp,sp,-8
  80492c:	dfc00115 	stw	ra,4(sp)
  804930:	df000015 	stw	fp,0(sp)
  804934:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  804938:	01002234 	movhi	r4,136
  80493c:	213c6b04 	addi	r4,r4,-3668
  804940:	000b883a 	mov	r5,zero
  804944:	000d883a 	mov	r6,zero
  804948:	0804aec0 	call	804aec <altera_avalon_jtag_uart_init>
  80494c:	01002234 	movhi	r4,136
  804950:	213c6104 	addi	r4,r4,-3708
  804954:	080496c0 	call	80496c <alt_dev_reg>
}
  804958:	e037883a 	mov	sp,fp
  80495c:	dfc00117 	ldw	ra,4(sp)
  804960:	df000017 	ldw	fp,0(sp)
  804964:	dec00204 	addi	sp,sp,8
  804968:	f800283a 	ret

0080496c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80496c:	defffd04 	addi	sp,sp,-12
  804970:	dfc00215 	stw	ra,8(sp)
  804974:	df000115 	stw	fp,4(sp)
  804978:	df000104 	addi	fp,sp,4
  80497c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804980:	e13fff17 	ldw	r4,-4(fp)
  804984:	01402234 	movhi	r5,136
  804988:	2941e504 	addi	r5,r5,1940
  80498c:	08057480 	call	805748 <alt_dev_llist_insert>
}
  804990:	e037883a 	mov	sp,fp
  804994:	dfc00117 	ldw	ra,4(sp)
  804998:	df000017 	ldw	fp,0(sp)
  80499c:	dec00204 	addi	sp,sp,8
  8049a0:	f800283a 	ret

008049a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8049a4:	defffa04 	addi	sp,sp,-24
  8049a8:	dfc00515 	stw	ra,20(sp)
  8049ac:	df000415 	stw	fp,16(sp)
  8049b0:	df000404 	addi	fp,sp,16
  8049b4:	e13ffd15 	stw	r4,-12(fp)
  8049b8:	e17ffe15 	stw	r5,-8(fp)
  8049bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8049c0:	e0bffd17 	ldw	r2,-12(fp)
  8049c4:	10800017 	ldw	r2,0(r2)
  8049c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8049cc:	e0bffc17 	ldw	r2,-16(fp)
  8049d0:	11000a04 	addi	r4,r2,40
  8049d4:	e0bffd17 	ldw	r2,-12(fp)
  8049d8:	11c00217 	ldw	r7,8(r2)
  8049dc:	e17ffe17 	ldw	r5,-8(fp)
  8049e0:	e1bfff17 	ldw	r6,-4(fp)
  8049e4:	0804fec0 	call	804fec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8049e8:	e037883a 	mov	sp,fp
  8049ec:	dfc00117 	ldw	ra,4(sp)
  8049f0:	df000017 	ldw	fp,0(sp)
  8049f4:	dec00204 	addi	sp,sp,8
  8049f8:	f800283a 	ret

008049fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8049fc:	defffa04 	addi	sp,sp,-24
  804a00:	dfc00515 	stw	ra,20(sp)
  804a04:	df000415 	stw	fp,16(sp)
  804a08:	df000404 	addi	fp,sp,16
  804a0c:	e13ffd15 	stw	r4,-12(fp)
  804a10:	e17ffe15 	stw	r5,-8(fp)
  804a14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804a18:	e0bffd17 	ldw	r2,-12(fp)
  804a1c:	10800017 	ldw	r2,0(r2)
  804a20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	11000a04 	addi	r4,r2,40
  804a2c:	e0bffd17 	ldw	r2,-12(fp)
  804a30:	11c00217 	ldw	r7,8(r2)
  804a34:	e17ffe17 	ldw	r5,-8(fp)
  804a38:	e1bfff17 	ldw	r6,-4(fp)
  804a3c:	08052100 	call	805210 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804a40:	e037883a 	mov	sp,fp
  804a44:	dfc00117 	ldw	ra,4(sp)
  804a48:	df000017 	ldw	fp,0(sp)
  804a4c:	dec00204 	addi	sp,sp,8
  804a50:	f800283a 	ret

00804a54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804a54:	defffc04 	addi	sp,sp,-16
  804a58:	dfc00315 	stw	ra,12(sp)
  804a5c:	df000215 	stw	fp,8(sp)
  804a60:	df000204 	addi	fp,sp,8
  804a64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804a68:	e0bfff17 	ldw	r2,-4(fp)
  804a6c:	10800017 	ldw	r2,0(r2)
  804a70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  804a74:	e0bffe17 	ldw	r2,-8(fp)
  804a78:	11000a04 	addi	r4,r2,40
  804a7c:	e0bfff17 	ldw	r2,-4(fp)
  804a80:	11400217 	ldw	r5,8(r2)
  804a84:	0804e840 	call	804e84 <altera_avalon_jtag_uart_close>
}
  804a88:	e037883a 	mov	sp,fp
  804a8c:	dfc00117 	ldw	ra,4(sp)
  804a90:	df000017 	ldw	fp,0(sp)
  804a94:	dec00204 	addi	sp,sp,8
  804a98:	f800283a 	ret

00804a9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  804a9c:	defffa04 	addi	sp,sp,-24
  804aa0:	dfc00515 	stw	ra,20(sp)
  804aa4:	df000415 	stw	fp,16(sp)
  804aa8:	df000404 	addi	fp,sp,16
  804aac:	e13ffd15 	stw	r4,-12(fp)
  804ab0:	e17ffe15 	stw	r5,-8(fp)
  804ab4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  804ab8:	e0bffd17 	ldw	r2,-12(fp)
  804abc:	10800017 	ldw	r2,0(r2)
  804ac0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804ac4:	e0bffc17 	ldw	r2,-16(fp)
  804ac8:	11000a04 	addi	r4,r2,40
  804acc:	e17ffe17 	ldw	r5,-8(fp)
  804ad0:	e1bfff17 	ldw	r6,-4(fp)
  804ad4:	0804ef80 	call	804ef8 <altera_avalon_jtag_uart_ioctl>
}
  804ad8:	e037883a 	mov	sp,fp
  804adc:	dfc00117 	ldw	ra,4(sp)
  804ae0:	df000017 	ldw	fp,0(sp)
  804ae4:	dec00204 	addi	sp,sp,8
  804ae8:	f800283a 	ret

00804aec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  804aec:	defffa04 	addi	sp,sp,-24
  804af0:	dfc00515 	stw	ra,20(sp)
  804af4:	df000415 	stw	fp,16(sp)
  804af8:	df000404 	addi	fp,sp,16
  804afc:	e13ffd15 	stw	r4,-12(fp)
  804b00:	e17ffe15 	stw	r5,-8(fp)
  804b04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804b08:	e0fffd17 	ldw	r3,-12(fp)
  804b0c:	00800044 	movi	r2,1
  804b10:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  804b14:	e0bffd17 	ldw	r2,-12(fp)
  804b18:	10800017 	ldw	r2,0(r2)
  804b1c:	11000104 	addi	r4,r2,4
  804b20:	e0bffd17 	ldw	r2,-12(fp)
  804b24:	10800817 	ldw	r2,32(r2)
  804b28:	1007883a 	mov	r3,r2
  804b2c:	2005883a 	mov	r2,r4
  804b30:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804b34:	e13ffe17 	ldw	r4,-8(fp)
  804b38:	e17fff17 	ldw	r5,-4(fp)
  804b3c:	d8000015 	stw	zero,0(sp)
  804b40:	01802034 	movhi	r6,128
  804b44:	3192eb04 	addi	r6,r6,19372
  804b48:	e1fffd17 	ldw	r7,-12(fp)
  804b4c:	08059540 	call	805954 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804b50:	e0bffd17 	ldw	r2,-12(fp)
  804b54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804b58:	e0bffd17 	ldw	r2,-12(fp)
  804b5c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804b60:	00802234 	movhi	r2,136
  804b64:	10887f04 	addi	r2,r2,8700
  804b68:	10800017 	ldw	r2,0(r2)
  804b6c:	100b883a 	mov	r5,r2
  804b70:	01802034 	movhi	r6,128
  804b74:	31937504 	addi	r6,r6,19924
  804b78:	e1fffd17 	ldw	r7,-12(fp)
  804b7c:	08054500 	call	805450 <alt_alarm_start>
  804b80:	1004403a 	cmpge	r2,r2,zero
  804b84:	1000041e 	bne	r2,zero,804b98 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  804b88:	e0fffd17 	ldw	r3,-12(fp)
  804b8c:	00a00034 	movhi	r2,32768
  804b90:	10bfffc4 	addi	r2,r2,-1
  804b94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  804b98:	e037883a 	mov	sp,fp
  804b9c:	dfc00117 	ldw	ra,4(sp)
  804ba0:	df000017 	ldw	fp,0(sp)
  804ba4:	dec00204 	addi	sp,sp,8
  804ba8:	f800283a 	ret

00804bac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  804bac:	defff804 	addi	sp,sp,-32
  804bb0:	df000715 	stw	fp,28(sp)
  804bb4:	df000704 	addi	fp,sp,28
  804bb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804bbc:	e0bfff17 	ldw	r2,-4(fp)
  804bc0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  804bc4:	e0bffe17 	ldw	r2,-8(fp)
  804bc8:	10800017 	ldw	r2,0(r2)
  804bcc:	e0bffd15 	stw	r2,-12(fp)
  804bd0:	00000006 	br	804bd4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804bd4:	e0bffd17 	ldw	r2,-12(fp)
  804bd8:	10800104 	addi	r2,r2,4
  804bdc:	10800037 	ldwio	r2,0(r2)
  804be0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  804be4:	e0bffc17 	ldw	r2,-16(fp)
  804be8:	1080c00c 	andi	r2,r2,768
  804bec:	1005003a 	cmpeq	r2,r2,zero
  804bf0:	1000741e 	bne	r2,zero,804dc4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	1080400c 	andi	r2,r2,256
  804bfc:	1005003a 	cmpeq	r2,r2,zero
  804c00:	1000351e 	bne	r2,zero,804cd8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804c04:	00800074 	movhi	r2,1
  804c08:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804c0c:	e0bffe17 	ldw	r2,-8(fp)
  804c10:	10800a17 	ldw	r2,40(r2)
  804c14:	10800044 	addi	r2,r2,1
  804c18:	1081ffcc 	andi	r2,r2,2047
  804c1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  804c20:	e0bffe17 	ldw	r2,-8(fp)
  804c24:	10c00b17 	ldw	r3,44(r2)
  804c28:	e0bffa17 	ldw	r2,-24(fp)
  804c2c:	18801626 	beq	r3,r2,804c88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804c30:	e0bffd17 	ldw	r2,-12(fp)
  804c34:	10800037 	ldwio	r2,0(r2)
  804c38:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804c3c:	e0bffb17 	ldw	r2,-20(fp)
  804c40:	10a0000c 	andi	r2,r2,32768
  804c44:	1005003a 	cmpeq	r2,r2,zero
  804c48:	10000f1e 	bne	r2,zero,804c88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804c4c:	e0bffe17 	ldw	r2,-8(fp)
  804c50:	10c00a17 	ldw	r3,40(r2)
  804c54:	e0bffb17 	ldw	r2,-20(fp)
  804c58:	1009883a 	mov	r4,r2
  804c5c:	e0bffe17 	ldw	r2,-8(fp)
  804c60:	1885883a 	add	r2,r3,r2
  804c64:	10800e04 	addi	r2,r2,56
  804c68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804c6c:	e0bffe17 	ldw	r2,-8(fp)
  804c70:	10800a17 	ldw	r2,40(r2)
  804c74:	10800044 	addi	r2,r2,1
  804c78:	10c1ffcc 	andi	r3,r2,2047
  804c7c:	e0bffe17 	ldw	r2,-8(fp)
  804c80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804c84:	003fe106 	br	804c0c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  804c88:	e0bffb17 	ldw	r2,-20(fp)
  804c8c:	10bfffec 	andhi	r2,r2,65535
  804c90:	1005003a 	cmpeq	r2,r2,zero
  804c94:	1000101e 	bne	r2,zero,804cd8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804c98:	e0bffe17 	ldw	r2,-8(fp)
  804c9c:	10c00817 	ldw	r3,32(r2)
  804ca0:	00bfff84 	movi	r2,-2
  804ca4:	1886703a 	and	r3,r3,r2
  804ca8:	e0bffe17 	ldw	r2,-8(fp)
  804cac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  804cb0:	e0bffd17 	ldw	r2,-12(fp)
  804cb4:	11000104 	addi	r4,r2,4
  804cb8:	e0bffe17 	ldw	r2,-8(fp)
  804cbc:	10800817 	ldw	r2,32(r2)
  804cc0:	1007883a 	mov	r3,r2
  804cc4:	2005883a 	mov	r2,r4
  804cc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804ccc:	e0bffd17 	ldw	r2,-12(fp)
  804cd0:	10800104 	addi	r2,r2,4
  804cd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  804cd8:	e0bffc17 	ldw	r2,-16(fp)
  804cdc:	1080800c 	andi	r2,r2,512
  804ce0:	1005003a 	cmpeq	r2,r2,zero
  804ce4:	103fbb1e 	bne	r2,zero,804bd4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  804ce8:	e0bffc17 	ldw	r2,-16(fp)
  804cec:	10bfffec 	andhi	r2,r2,65535
  804cf0:	1004d43a 	srli	r2,r2,16
  804cf4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804cf8:	00001506 	br	804d50 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804cfc:	e13ffd17 	ldw	r4,-12(fp)
  804d00:	e0bffe17 	ldw	r2,-8(fp)
  804d04:	10c00d17 	ldw	r3,52(r2)
  804d08:	e0bffe17 	ldw	r2,-8(fp)
  804d0c:	1885883a 	add	r2,r3,r2
  804d10:	10820e04 	addi	r2,r2,2104
  804d14:	10800003 	ldbu	r2,0(r2)
  804d18:	10c03fcc 	andi	r3,r2,255
  804d1c:	18c0201c 	xori	r3,r3,128
  804d20:	18ffe004 	addi	r3,r3,-128
  804d24:	2005883a 	mov	r2,r4
  804d28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804d2c:	e0bffe17 	ldw	r2,-8(fp)
  804d30:	10800d17 	ldw	r2,52(r2)
  804d34:	10800044 	addi	r2,r2,1
  804d38:	10c1ffcc 	andi	r3,r2,2047
  804d3c:	e0bffe17 	ldw	r2,-8(fp)
  804d40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804d44:	e0bff917 	ldw	r2,-28(fp)
  804d48:	10bfffc4 	addi	r2,r2,-1
  804d4c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804d50:	e0bff917 	ldw	r2,-28(fp)
  804d54:	1005003a 	cmpeq	r2,r2,zero
  804d58:	1000051e 	bne	r2,zero,804d70 <altera_avalon_jtag_uart_irq+0x1c4>
  804d5c:	e0bffe17 	ldw	r2,-8(fp)
  804d60:	10c00d17 	ldw	r3,52(r2)
  804d64:	e0bffe17 	ldw	r2,-8(fp)
  804d68:	10800c17 	ldw	r2,48(r2)
  804d6c:	18bfe31e 	bne	r3,r2,804cfc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804d70:	e0bff917 	ldw	r2,-28(fp)
  804d74:	1005003a 	cmpeq	r2,r2,zero
  804d78:	103f961e 	bne	r2,zero,804bd4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804d7c:	e0bffe17 	ldw	r2,-8(fp)
  804d80:	10c00817 	ldw	r3,32(r2)
  804d84:	00bfff44 	movi	r2,-3
  804d88:	1886703a 	and	r3,r3,r2
  804d8c:	e0bffe17 	ldw	r2,-8(fp)
  804d90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804d94:	e0bffe17 	ldw	r2,-8(fp)
  804d98:	10800017 	ldw	r2,0(r2)
  804d9c:	11000104 	addi	r4,r2,4
  804da0:	e0bffe17 	ldw	r2,-8(fp)
  804da4:	10800817 	ldw	r2,32(r2)
  804da8:	1007883a 	mov	r3,r2
  804dac:	2005883a 	mov	r2,r4
  804db0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804db4:	e0bffd17 	ldw	r2,-12(fp)
  804db8:	10800104 	addi	r2,r2,4
  804dbc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804dc0:	003f8406 	br	804bd4 <altera_avalon_jtag_uart_irq+0x28>
}
  804dc4:	e037883a 	mov	sp,fp
  804dc8:	df000017 	ldw	fp,0(sp)
  804dcc:	dec00104 	addi	sp,sp,4
  804dd0:	f800283a 	ret

00804dd4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  804dd4:	defffc04 	addi	sp,sp,-16
  804dd8:	df000315 	stw	fp,12(sp)
  804ddc:	df000304 	addi	fp,sp,12
  804de0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  804de4:	e0bfff17 	ldw	r2,-4(fp)
  804de8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  804dec:	e0bffe17 	ldw	r2,-8(fp)
  804df0:	10800017 	ldw	r2,0(r2)
  804df4:	10800104 	addi	r2,r2,4
  804df8:	10800037 	ldwio	r2,0(r2)
  804dfc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804e00:	e0bffd17 	ldw	r2,-12(fp)
  804e04:	1081000c 	andi	r2,r2,1024
  804e08:	1005003a 	cmpeq	r2,r2,zero
  804e0c:	10000c1e 	bne	r2,zero,804e40 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804e10:	e0bffe17 	ldw	r2,-8(fp)
  804e14:	10800017 	ldw	r2,0(r2)
  804e18:	11000104 	addi	r4,r2,4
  804e1c:	e0bffe17 	ldw	r2,-8(fp)
  804e20:	10800817 	ldw	r2,32(r2)
  804e24:	10810014 	ori	r2,r2,1024
  804e28:	1007883a 	mov	r3,r2
  804e2c:	2005883a 	mov	r2,r4
  804e30:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  804e34:	e0bffe17 	ldw	r2,-8(fp)
  804e38:	10000915 	stw	zero,36(r2)
  804e3c:	00000a06 	br	804e68 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804e40:	e0bffe17 	ldw	r2,-8(fp)
  804e44:	10c00917 	ldw	r3,36(r2)
  804e48:	00a00034 	movhi	r2,32768
  804e4c:	10bfff04 	addi	r2,r2,-4
  804e50:	10c00536 	bltu	r2,r3,804e68 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  804e54:	e0bffe17 	ldw	r2,-8(fp)
  804e58:	10800917 	ldw	r2,36(r2)
  804e5c:	10c00044 	addi	r3,r2,1
  804e60:	e0bffe17 	ldw	r2,-8(fp)
  804e64:	10c00915 	stw	r3,36(r2)
  804e68:	00802234 	movhi	r2,136
  804e6c:	10887f04 	addi	r2,r2,8700
  804e70:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804e74:	e037883a 	mov	sp,fp
  804e78:	df000017 	ldw	fp,0(sp)
  804e7c:	dec00104 	addi	sp,sp,4
  804e80:	f800283a 	ret

00804e84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804e84:	defffc04 	addi	sp,sp,-16
  804e88:	df000315 	stw	fp,12(sp)
  804e8c:	df000304 	addi	fp,sp,12
  804e90:	e13ffd15 	stw	r4,-12(fp)
  804e94:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804e98:	00000706 	br	804eb8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  804e9c:	e0bffe17 	ldw	r2,-8(fp)
  804ea0:	1090000c 	andi	r2,r2,16384
  804ea4:	1005003a 	cmpeq	r2,r2,zero
  804ea8:	1000031e 	bne	r2,zero,804eb8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  804eac:	00bffd44 	movi	r2,-11
  804eb0:	e0bfff15 	stw	r2,-4(fp)
  804eb4:	00000b06 	br	804ee4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804eb8:	e0bffd17 	ldw	r2,-12(fp)
  804ebc:	10c00d17 	ldw	r3,52(r2)
  804ec0:	e0bffd17 	ldw	r2,-12(fp)
  804ec4:	10800c17 	ldw	r2,48(r2)
  804ec8:	18800526 	beq	r3,r2,804ee0 <altera_avalon_jtag_uart_close+0x5c>
  804ecc:	e0bffd17 	ldw	r2,-12(fp)
  804ed0:	10c00917 	ldw	r3,36(r2)
  804ed4:	e0bffd17 	ldw	r2,-12(fp)
  804ed8:	10800117 	ldw	r2,4(r2)
  804edc:	18bfef36 	bltu	r3,r2,804e9c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804ee0:	e03fff15 	stw	zero,-4(fp)
  804ee4:	e0bfff17 	ldw	r2,-4(fp)
}
  804ee8:	e037883a 	mov	sp,fp
  804eec:	df000017 	ldw	fp,0(sp)
  804ef0:	dec00104 	addi	sp,sp,4
  804ef4:	f800283a 	ret

00804ef8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804ef8:	defff804 	addi	sp,sp,-32
  804efc:	df000715 	stw	fp,28(sp)
  804f00:	df000704 	addi	fp,sp,28
  804f04:	e13ffb15 	stw	r4,-20(fp)
  804f08:	e17ffc15 	stw	r5,-16(fp)
  804f0c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  804f10:	00bff9c4 	movi	r2,-25
  804f14:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  804f18:	e0bffc17 	ldw	r2,-16(fp)
  804f1c:	e0bfff15 	stw	r2,-4(fp)
  804f20:	e0ffff17 	ldw	r3,-4(fp)
  804f24:	189a8060 	cmpeqi	r2,r3,27137
  804f28:	1000041e 	bne	r2,zero,804f3c <altera_avalon_jtag_uart_ioctl+0x44>
  804f2c:	e0ffff17 	ldw	r3,-4(fp)
  804f30:	189a80a0 	cmpeqi	r2,r3,27138
  804f34:	10001b1e 	bne	r2,zero,804fa4 <altera_avalon_jtag_uart_ioctl+0xac>
  804f38:	00002706 	br	804fd8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804f3c:	e0bffb17 	ldw	r2,-20(fp)
  804f40:	10c00117 	ldw	r3,4(r2)
  804f44:	00a00034 	movhi	r2,32768
  804f48:	10bfffc4 	addi	r2,r2,-1
  804f4c:	18802226 	beq	r3,r2,804fd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  804f50:	e0bffd17 	ldw	r2,-12(fp)
  804f54:	10800017 	ldw	r2,0(r2)
  804f58:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804f5c:	e0bff917 	ldw	r2,-28(fp)
  804f60:	10800090 	cmplti	r2,r2,2
  804f64:	1000071e 	bne	r2,zero,804f84 <altera_avalon_jtag_uart_ioctl+0x8c>
  804f68:	e0fff917 	ldw	r3,-28(fp)
  804f6c:	00a00034 	movhi	r2,32768
  804f70:	10bfffc4 	addi	r2,r2,-1
  804f74:	18800326 	beq	r3,r2,804f84 <altera_avalon_jtag_uart_ioctl+0x8c>
  804f78:	e0bff917 	ldw	r2,-28(fp)
  804f7c:	e0bffe15 	stw	r2,-8(fp)
  804f80:	00000306 	br	804f90 <altera_avalon_jtag_uart_ioctl+0x98>
  804f84:	00e00034 	movhi	r3,32768
  804f88:	18ffff84 	addi	r3,r3,-2
  804f8c:	e0fffe15 	stw	r3,-8(fp)
  804f90:	e0bffb17 	ldw	r2,-20(fp)
  804f94:	e0fffe17 	ldw	r3,-8(fp)
  804f98:	10c00115 	stw	r3,4(r2)
      rc = 0;
  804f9c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  804fa0:	00000d06 	br	804fd8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804fa4:	e0bffb17 	ldw	r2,-20(fp)
  804fa8:	10c00117 	ldw	r3,4(r2)
  804fac:	00a00034 	movhi	r2,32768
  804fb0:	10bfffc4 	addi	r2,r2,-1
  804fb4:	18800826 	beq	r3,r2,804fd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  804fb8:	e13ffd17 	ldw	r4,-12(fp)
  804fbc:	e0bffb17 	ldw	r2,-20(fp)
  804fc0:	10c00917 	ldw	r3,36(r2)
  804fc4:	e0bffb17 	ldw	r2,-20(fp)
  804fc8:	10800117 	ldw	r2,4(r2)
  804fcc:	1885803a 	cmpltu	r2,r3,r2
  804fd0:	20800015 	stw	r2,0(r4)
      rc = 0;
  804fd4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  804fd8:	e0bffa17 	ldw	r2,-24(fp)
}
  804fdc:	e037883a 	mov	sp,fp
  804fe0:	df000017 	ldw	fp,0(sp)
  804fe4:	dec00104 	addi	sp,sp,4
  804fe8:	f800283a 	ret

00804fec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804fec:	defff204 	addi	sp,sp,-56
  804ff0:	dfc00d15 	stw	ra,52(sp)
  804ff4:	df000c15 	stw	fp,48(sp)
  804ff8:	df000c04 	addi	fp,sp,48
  804ffc:	e13ffb15 	stw	r4,-20(fp)
  805000:	e17ffc15 	stw	r5,-16(fp)
  805004:	e1bffd15 	stw	r6,-12(fp)
  805008:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80500c:	e0bffc17 	ldw	r2,-16(fp)
  805010:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805014:	00004806 	br	805138 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  805018:	e0bffb17 	ldw	r2,-20(fp)
  80501c:	10800a17 	ldw	r2,40(r2)
  805020:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  805024:	e0bffb17 	ldw	r2,-20(fp)
  805028:	10800b17 	ldw	r2,44(r2)
  80502c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  805030:	e0fff717 	ldw	r3,-36(fp)
  805034:	e0bff617 	ldw	r2,-40(fp)
  805038:	18800536 	bltu	r3,r2,805050 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80503c:	e0bff717 	ldw	r2,-36(fp)
  805040:	e0fff617 	ldw	r3,-40(fp)
  805044:	10c5c83a 	sub	r2,r2,r3
  805048:	e0bff815 	stw	r2,-32(fp)
  80504c:	00000406 	br	805060 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  805050:	00820004 	movi	r2,2048
  805054:	e0fff617 	ldw	r3,-40(fp)
  805058:	10c5c83a 	sub	r2,r2,r3
  80505c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805060:	e0bff817 	ldw	r2,-32(fp)
  805064:	1005003a 	cmpeq	r2,r2,zero
  805068:	10001f1e 	bne	r2,zero,8050e8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80506c:	e0fffd17 	ldw	r3,-12(fp)
  805070:	e0bff817 	ldw	r2,-32(fp)
  805074:	1880022e 	bgeu	r3,r2,805080 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  805078:	e0bffd17 	ldw	r2,-12(fp)
  80507c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  805080:	e0bffb17 	ldw	r2,-20(fp)
  805084:	10c00e04 	addi	r3,r2,56
  805088:	e0bff617 	ldw	r2,-40(fp)
  80508c:	1887883a 	add	r3,r3,r2
  805090:	e0bffa17 	ldw	r2,-24(fp)
  805094:	1009883a 	mov	r4,r2
  805098:	180b883a 	mov	r5,r3
  80509c:	e1bff817 	ldw	r6,-32(fp)
  8050a0:	08066000 	call	806600 <memcpy>
      ptr   += n;
  8050a4:	e0fff817 	ldw	r3,-32(fp)
  8050a8:	e0bffa17 	ldw	r2,-24(fp)
  8050ac:	10c5883a 	add	r2,r2,r3
  8050b0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  8050b4:	e0fffd17 	ldw	r3,-12(fp)
  8050b8:	e0bff817 	ldw	r2,-32(fp)
  8050bc:	1885c83a 	sub	r2,r3,r2
  8050c0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8050c4:	e0fff617 	ldw	r3,-40(fp)
  8050c8:	e0bff817 	ldw	r2,-32(fp)
  8050cc:	1885883a 	add	r2,r3,r2
  8050d0:	10c1ffcc 	andi	r3,r2,2047
  8050d4:	e0bffb17 	ldw	r2,-20(fp)
  8050d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8050dc:	e0bffd17 	ldw	r2,-12(fp)
  8050e0:	10800048 	cmpgei	r2,r2,1
  8050e4:	103fcc1e 	bne	r2,zero,805018 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8050e8:	e0fffa17 	ldw	r3,-24(fp)
  8050ec:	e0bffc17 	ldw	r2,-16(fp)
  8050f0:	1880141e 	bne	r3,r2,805144 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8050f4:	e0bffe17 	ldw	r2,-8(fp)
  8050f8:	1090000c 	andi	r2,r2,16384
  8050fc:	1004c03a 	cmpne	r2,r2,zero
  805100:	1000101e 	bne	r2,zero,805144 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805104:	e0bffb17 	ldw	r2,-20(fp)
  805108:	10c00a17 	ldw	r3,40(r2)
  80510c:	e0bff717 	ldw	r2,-36(fp)
  805110:	1880051e 	bne	r3,r2,805128 <altera_avalon_jtag_uart_read+0x13c>
  805114:	e0bffb17 	ldw	r2,-20(fp)
  805118:	10c00917 	ldw	r3,36(r2)
  80511c:	e0bffb17 	ldw	r2,-20(fp)
  805120:	10800117 	ldw	r2,4(r2)
  805124:	18bff736 	bltu	r3,r2,805104 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  805128:	e0bffb17 	ldw	r2,-20(fp)
  80512c:	10c00a17 	ldw	r3,40(r2)
  805130:	e0bff717 	ldw	r2,-36(fp)
  805134:	18800326 	beq	r3,r2,805144 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805138:	e0bffd17 	ldw	r2,-12(fp)
  80513c:	10800048 	cmpgei	r2,r2,1
  805140:	103fb51e 	bne	r2,zero,805018 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  805144:	e0fffa17 	ldw	r3,-24(fp)
  805148:	e0bffc17 	ldw	r2,-16(fp)
  80514c:	18801926 	beq	r3,r2,8051b4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805150:	0005303a 	rdctl	r2,status
  805154:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805158:	e0fff517 	ldw	r3,-44(fp)
  80515c:	00bfff84 	movi	r2,-2
  805160:	1884703a 	and	r2,r3,r2
  805164:	1001703a 	wrctl	status,r2
  
  return context;
  805168:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80516c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805170:	e0bffb17 	ldw	r2,-20(fp)
  805174:	10800817 	ldw	r2,32(r2)
  805178:	10c00054 	ori	r3,r2,1
  80517c:	e0bffb17 	ldw	r2,-20(fp)
  805180:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805184:	e0bffb17 	ldw	r2,-20(fp)
  805188:	10800017 	ldw	r2,0(r2)
  80518c:	11000104 	addi	r4,r2,4
  805190:	e0bffb17 	ldw	r2,-20(fp)
  805194:	10800817 	ldw	r2,32(r2)
  805198:	1007883a 	mov	r3,r2
  80519c:	2005883a 	mov	r2,r4
  8051a0:	10c00035 	stwio	r3,0(r2)
  8051a4:	e0bff917 	ldw	r2,-28(fp)
  8051a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8051ac:	e0bff417 	ldw	r2,-48(fp)
  8051b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8051b4:	e0fffa17 	ldw	r3,-24(fp)
  8051b8:	e0bffc17 	ldw	r2,-16(fp)
  8051bc:	18800526 	beq	r3,r2,8051d4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8051c0:	e0fffa17 	ldw	r3,-24(fp)
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	1887c83a 	sub	r3,r3,r2
  8051cc:	e0ffff15 	stw	r3,-4(fp)
  8051d0:	00000906 	br	8051f8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8051d4:	e0bffe17 	ldw	r2,-8(fp)
  8051d8:	1090000c 	andi	r2,r2,16384
  8051dc:	1005003a 	cmpeq	r2,r2,zero
  8051e0:	1000031e 	bne	r2,zero,8051f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8051e4:	00bffd44 	movi	r2,-11
  8051e8:	e0bfff15 	stw	r2,-4(fp)
  8051ec:	00000206 	br	8051f8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8051f0:	00bffec4 	movi	r2,-5
  8051f4:	e0bfff15 	stw	r2,-4(fp)
  8051f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8051fc:	e037883a 	mov	sp,fp
  805200:	dfc00117 	ldw	ra,4(sp)
  805204:	df000017 	ldw	fp,0(sp)
  805208:	dec00204 	addi	sp,sp,8
  80520c:	f800283a 	ret

00805210 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805210:	defff204 	addi	sp,sp,-56
  805214:	dfc00d15 	stw	ra,52(sp)
  805218:	df000c15 	stw	fp,48(sp)
  80521c:	df000c04 	addi	fp,sp,48
  805220:	e13ffb15 	stw	r4,-20(fp)
  805224:	e17ffc15 	stw	r5,-16(fp)
  805228:	e1bffd15 	stw	r6,-12(fp)
  80522c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805230:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805234:	e0bffc17 	ldw	r2,-16(fp)
  805238:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80523c:	00003a06 	br	805328 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805240:	e0bffb17 	ldw	r2,-20(fp)
  805244:	10800c17 	ldw	r2,48(r2)
  805248:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80524c:	e0bffb17 	ldw	r2,-20(fp)
  805250:	10800d17 	ldw	r2,52(r2)
  805254:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  805258:	e0fffa17 	ldw	r3,-24(fp)
  80525c:	e0bff917 	ldw	r2,-28(fp)
  805260:	1880062e 	bgeu	r3,r2,80527c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  805264:	e0fff917 	ldw	r3,-28(fp)
  805268:	e0bffa17 	ldw	r2,-24(fp)
  80526c:	1885c83a 	sub	r2,r3,r2
  805270:	10bfffc4 	addi	r2,r2,-1
  805274:	e0bff815 	stw	r2,-32(fp)
  805278:	00000c06 	br	8052ac <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80527c:	e0bff917 	ldw	r2,-28(fp)
  805280:	1005003a 	cmpeq	r2,r2,zero
  805284:	1000051e 	bne	r2,zero,80529c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  805288:	00820004 	movi	r2,2048
  80528c:	e0fffa17 	ldw	r3,-24(fp)
  805290:	10c5c83a 	sub	r2,r2,r3
  805294:	e0bff815 	stw	r2,-32(fp)
  805298:	00000406 	br	8052ac <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80529c:	0081ffc4 	movi	r2,2047
  8052a0:	e0fffa17 	ldw	r3,-24(fp)
  8052a4:	10c5c83a 	sub	r2,r2,r3
  8052a8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8052ac:	e0bff817 	ldw	r2,-32(fp)
  8052b0:	1005003a 	cmpeq	r2,r2,zero
  8052b4:	10001f1e 	bne	r2,zero,805334 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8052b8:	e0fffd17 	ldw	r3,-12(fp)
  8052bc:	e0bff817 	ldw	r2,-32(fp)
  8052c0:	1880022e 	bgeu	r3,r2,8052cc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8052c4:	e0bffd17 	ldw	r2,-12(fp)
  8052c8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8052cc:	e0bffb17 	ldw	r2,-20(fp)
  8052d0:	10c20e04 	addi	r3,r2,2104
  8052d4:	e0bffa17 	ldw	r2,-24(fp)
  8052d8:	1885883a 	add	r2,r3,r2
  8052dc:	e0fffc17 	ldw	r3,-16(fp)
  8052e0:	1009883a 	mov	r4,r2
  8052e4:	180b883a 	mov	r5,r3
  8052e8:	e1bff817 	ldw	r6,-32(fp)
  8052ec:	08066000 	call	806600 <memcpy>
      ptr   += n;
  8052f0:	e0fff817 	ldw	r3,-32(fp)
  8052f4:	e0bffc17 	ldw	r2,-16(fp)
  8052f8:	10c5883a 	add	r2,r2,r3
  8052fc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  805300:	e0fffd17 	ldw	r3,-12(fp)
  805304:	e0bff817 	ldw	r2,-32(fp)
  805308:	1885c83a 	sub	r2,r3,r2
  80530c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805310:	e0fffa17 	ldw	r3,-24(fp)
  805314:	e0bff817 	ldw	r2,-32(fp)
  805318:	1885883a 	add	r2,r3,r2
  80531c:	10c1ffcc 	andi	r3,r2,2047
  805320:	e0bffb17 	ldw	r2,-20(fp)
  805324:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805328:	e0bffd17 	ldw	r2,-12(fp)
  80532c:	10800048 	cmpgei	r2,r2,1
  805330:	103fc31e 	bne	r2,zero,805240 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805334:	0005303a 	rdctl	r2,status
  805338:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80533c:	e0fff517 	ldw	r3,-44(fp)
  805340:	00bfff84 	movi	r2,-2
  805344:	1884703a 	and	r2,r3,r2
  805348:	1001703a 	wrctl	status,r2
  
  return context;
  80534c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805350:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805354:	e0bffb17 	ldw	r2,-20(fp)
  805358:	10800817 	ldw	r2,32(r2)
  80535c:	10c00094 	ori	r3,r2,2
  805360:	e0bffb17 	ldw	r2,-20(fp)
  805364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805368:	e0bffb17 	ldw	r2,-20(fp)
  80536c:	10800017 	ldw	r2,0(r2)
  805370:	11000104 	addi	r4,r2,4
  805374:	e0bffb17 	ldw	r2,-20(fp)
  805378:	10800817 	ldw	r2,32(r2)
  80537c:	1007883a 	mov	r3,r2
  805380:	2005883a 	mov	r2,r4
  805384:	10c00035 	stwio	r3,0(r2)
  805388:	e0bff717 	ldw	r2,-36(fp)
  80538c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805390:	e0bff417 	ldw	r2,-48(fp)
  805394:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  805398:	e0bffd17 	ldw	r2,-12(fp)
  80539c:	10800050 	cmplti	r2,r2,1
  8053a0:	1000111e 	bne	r2,zero,8053e8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8053a4:	e0bffe17 	ldw	r2,-8(fp)
  8053a8:	1090000c 	andi	r2,r2,16384
  8053ac:	1004c03a 	cmpne	r2,r2,zero
  8053b0:	1000101e 	bne	r2,zero,8053f4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8053b4:	e0bffb17 	ldw	r2,-20(fp)
  8053b8:	10c00d17 	ldw	r3,52(r2)
  8053bc:	e0bff917 	ldw	r2,-28(fp)
  8053c0:	1880051e 	bne	r3,r2,8053d8 <altera_avalon_jtag_uart_write+0x1c8>
  8053c4:	e0bffb17 	ldw	r2,-20(fp)
  8053c8:	10c00917 	ldw	r3,36(r2)
  8053cc:	e0bffb17 	ldw	r2,-20(fp)
  8053d0:	10800117 	ldw	r2,4(r2)
  8053d4:	18bff736 	bltu	r3,r2,8053b4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8053d8:	e0bffb17 	ldw	r2,-20(fp)
  8053dc:	10c00d17 	ldw	r3,52(r2)
  8053e0:	e0bff917 	ldw	r2,-28(fp)
  8053e4:	18800326 	beq	r3,r2,8053f4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  8053e8:	e0bffd17 	ldw	r2,-12(fp)
  8053ec:	10800048 	cmpgei	r2,r2,1
  8053f0:	103fcd1e 	bne	r2,zero,805328 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8053f4:	e0fffc17 	ldw	r3,-16(fp)
  8053f8:	e0bff617 	ldw	r2,-40(fp)
  8053fc:	18800526 	beq	r3,r2,805414 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  805400:	e0fffc17 	ldw	r3,-16(fp)
  805404:	e0bff617 	ldw	r2,-40(fp)
  805408:	1887c83a 	sub	r3,r3,r2
  80540c:	e0ffff15 	stw	r3,-4(fp)
  805410:	00000906 	br	805438 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  805414:	e0bffe17 	ldw	r2,-8(fp)
  805418:	1090000c 	andi	r2,r2,16384
  80541c:	1005003a 	cmpeq	r2,r2,zero
  805420:	1000031e 	bne	r2,zero,805430 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  805424:	00bffd44 	movi	r2,-11
  805428:	e0bfff15 	stw	r2,-4(fp)
  80542c:	00000206 	br	805438 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  805430:	00bffec4 	movi	r2,-5
  805434:	e0bfff15 	stw	r2,-4(fp)
  805438:	e0bfff17 	ldw	r2,-4(fp)
}
  80543c:	e037883a 	mov	sp,fp
  805440:	dfc00117 	ldw	ra,4(sp)
  805444:	df000017 	ldw	fp,0(sp)
  805448:	dec00204 	addi	sp,sp,8
  80544c:	f800283a 	ret

00805450 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805450:	defff404 	addi	sp,sp,-48
  805454:	df000b15 	stw	fp,44(sp)
  805458:	df000b04 	addi	fp,sp,44
  80545c:	e13ffb15 	stw	r4,-20(fp)
  805460:	e17ffc15 	stw	r5,-16(fp)
  805464:	e1bffd15 	stw	r6,-12(fp)
  805468:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80546c:	e03ff915 	stw	zero,-28(fp)
  805470:	00802234 	movhi	r2,136
  805474:	10887f04 	addi	r2,r2,8700
  805478:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80547c:	1005003a 	cmpeq	r2,r2,zero
  805480:	1000411e 	bne	r2,zero,805588 <alt_alarm_start+0x138>
  {
    if (alarm)
  805484:	e0bffb17 	ldw	r2,-20(fp)
  805488:	1005003a 	cmpeq	r2,r2,zero
  80548c:	10003b1e 	bne	r2,zero,80557c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  805490:	e0fffb17 	ldw	r3,-20(fp)
  805494:	e0bffd17 	ldw	r2,-12(fp)
  805498:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80549c:	e0fffb17 	ldw	r3,-20(fp)
  8054a0:	e0bffe17 	ldw	r2,-8(fp)
  8054a4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8054a8:	0005303a 	rdctl	r2,status
  8054ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8054b0:	e0fff817 	ldw	r3,-32(fp)
  8054b4:	00bfff84 	movi	r2,-2
  8054b8:	1884703a 	and	r2,r3,r2
  8054bc:	1001703a 	wrctl	status,r2
  
  return context;
  8054c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8054c4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8054c8:	00802234 	movhi	r2,136
  8054cc:	10888004 	addi	r2,r2,8704
  8054d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8054d4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8054d8:	e0fffc17 	ldw	r3,-16(fp)
  8054dc:	e0bff917 	ldw	r2,-28(fp)
  8054e0:	1885883a 	add	r2,r3,r2
  8054e4:	10c00044 	addi	r3,r2,1
  8054e8:	e0bffb17 	ldw	r2,-20(fp)
  8054ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8054f0:	e0bffb17 	ldw	r2,-20(fp)
  8054f4:	10c00217 	ldw	r3,8(r2)
  8054f8:	e0bff917 	ldw	r2,-28(fp)
  8054fc:	1880042e 	bgeu	r3,r2,805510 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  805500:	e0fffb17 	ldw	r3,-20(fp)
  805504:	00800044 	movi	r2,1
  805508:	18800405 	stb	r2,16(r3)
  80550c:	00000206 	br	805518 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  805510:	e0bffb17 	ldw	r2,-20(fp)
  805514:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  805518:	e0fffb17 	ldw	r3,-20(fp)
  80551c:	00802234 	movhi	r2,136
  805520:	1081ea04 	addi	r2,r2,1960
  805524:	e0bff615 	stw	r2,-40(fp)
  805528:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80552c:	e0fff717 	ldw	r3,-36(fp)
  805530:	e0bff617 	ldw	r2,-40(fp)
  805534:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  805538:	e0bff617 	ldw	r2,-40(fp)
  80553c:	10c00017 	ldw	r3,0(r2)
  805540:	e0bff717 	ldw	r2,-36(fp)
  805544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805548:	e0bff617 	ldw	r2,-40(fp)
  80554c:	10c00017 	ldw	r3,0(r2)
  805550:	e0bff717 	ldw	r2,-36(fp)
  805554:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  805558:	e0fff617 	ldw	r3,-40(fp)
  80555c:	e0bff717 	ldw	r2,-36(fp)
  805560:	18800015 	stw	r2,0(r3)
  805564:	e0bffa17 	ldw	r2,-24(fp)
  805568:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80556c:	e0bff517 	ldw	r2,-44(fp)
  805570:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805574:	e03fff15 	stw	zero,-4(fp)
  805578:	00000506 	br	805590 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80557c:	00bffa84 	movi	r2,-22
  805580:	e0bfff15 	stw	r2,-4(fp)
  805584:	00000206 	br	805590 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  805588:	00bfde84 	movi	r2,-134
  80558c:	e0bfff15 	stw	r2,-4(fp)
  805590:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  805594:	e037883a 	mov	sp,fp
  805598:	df000017 	ldw	fp,0(sp)
  80559c:	dec00104 	addi	sp,sp,4
  8055a0:	f800283a 	ret

008055a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8055a4:	defff804 	addi	sp,sp,-32
  8055a8:	dfc00715 	stw	ra,28(sp)
  8055ac:	df000615 	stw	fp,24(sp)
  8055b0:	df000604 	addi	fp,sp,24
  8055b4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8055b8:	e0bffc17 	ldw	r2,-16(fp)
  8055bc:	1004803a 	cmplt	r2,r2,zero
  8055c0:	1000081e 	bne	r2,zero,8055e4 <close+0x40>
  8055c4:	e0bffc17 	ldw	r2,-16(fp)
  8055c8:	10800324 	muli	r2,r2,12
  8055cc:	1007883a 	mov	r3,r2
  8055d0:	00802234 	movhi	r2,136
  8055d4:	10808304 	addi	r2,r2,524
  8055d8:	1887883a 	add	r3,r3,r2
  8055dc:	e0ffff15 	stw	r3,-4(fp)
  8055e0:	00000106 	br	8055e8 <close+0x44>
  8055e4:	e03fff15 	stw	zero,-4(fp)
  8055e8:	e0bfff17 	ldw	r2,-4(fp)
  8055ec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8055f0:	e0bffb17 	ldw	r2,-20(fp)
  8055f4:	1005003a 	cmpeq	r2,r2,zero
  8055f8:	10001d1e 	bne	r2,zero,805670 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8055fc:	e0bffb17 	ldw	r2,-20(fp)
  805600:	10800017 	ldw	r2,0(r2)
  805604:	10800417 	ldw	r2,16(r2)
  805608:	1005003a 	cmpeq	r2,r2,zero
  80560c:	1000071e 	bne	r2,zero,80562c <close+0x88>
  805610:	e0bffb17 	ldw	r2,-20(fp)
  805614:	10800017 	ldw	r2,0(r2)
  805618:	10800417 	ldw	r2,16(r2)
  80561c:	e13ffb17 	ldw	r4,-20(fp)
  805620:	103ee83a 	callr	r2
  805624:	e0bffe15 	stw	r2,-8(fp)
  805628:	00000106 	br	805630 <close+0x8c>
  80562c:	e03ffe15 	stw	zero,-8(fp)
  805630:	e0bffe17 	ldw	r2,-8(fp)
  805634:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  805638:	e13ffc17 	ldw	r4,-16(fp)
  80563c:	08060200 	call	806020 <alt_release_fd>
    if (rval < 0)
  805640:	e0bffa17 	ldw	r2,-24(fp)
  805644:	1004403a 	cmpge	r2,r2,zero
  805648:	1000071e 	bne	r2,zero,805668 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80564c:	08056a00 	call	8056a0 <alt_get_errno>
  805650:	e0fffa17 	ldw	r3,-24(fp)
  805654:	00c7c83a 	sub	r3,zero,r3
  805658:	10c00015 	stw	r3,0(r2)
      return -1;
  80565c:	00bfffc4 	movi	r2,-1
  805660:	e0bffd15 	stw	r2,-12(fp)
  805664:	00000806 	br	805688 <close+0xe4>
    }
    return 0;
  805668:	e03ffd15 	stw	zero,-12(fp)
  80566c:	00000606 	br	805688 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  805670:	08056a00 	call	8056a0 <alt_get_errno>
  805674:	1007883a 	mov	r3,r2
  805678:	00801444 	movi	r2,81
  80567c:	18800015 	stw	r2,0(r3)
    return -1;
  805680:	00bfffc4 	movi	r2,-1
  805684:	e0bffd15 	stw	r2,-12(fp)
  805688:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80568c:	e037883a 	mov	sp,fp
  805690:	dfc00117 	ldw	ra,4(sp)
  805694:	df000017 	ldw	fp,0(sp)
  805698:	dec00204 	addi	sp,sp,8
  80569c:	f800283a 	ret

008056a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8056a0:	defffd04 	addi	sp,sp,-12
  8056a4:	dfc00215 	stw	ra,8(sp)
  8056a8:	df000115 	stw	fp,4(sp)
  8056ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8056b0:	00802234 	movhi	r2,136
  8056b4:	1081e804 	addi	r2,r2,1952
  8056b8:	10800017 	ldw	r2,0(r2)
  8056bc:	1005003a 	cmpeq	r2,r2,zero
  8056c0:	1000061e 	bne	r2,zero,8056dc <alt_get_errno+0x3c>
  8056c4:	00802234 	movhi	r2,136
  8056c8:	1081e804 	addi	r2,r2,1952
  8056cc:	10800017 	ldw	r2,0(r2)
  8056d0:	103ee83a 	callr	r2
  8056d4:	e0bfff15 	stw	r2,-4(fp)
  8056d8:	00000306 	br	8056e8 <alt_get_errno+0x48>
  8056dc:	00802234 	movhi	r2,136
  8056e0:	10888104 	addi	r2,r2,8708
  8056e4:	e0bfff15 	stw	r2,-4(fp)
  8056e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8056ec:	e037883a 	mov	sp,fp
  8056f0:	dfc00117 	ldw	ra,4(sp)
  8056f4:	df000017 	ldw	fp,0(sp)
  8056f8:	dec00204 	addi	sp,sp,8
  8056fc:	f800283a 	ret

00805700 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805700:	deffff04 	addi	sp,sp,-4
  805704:	df000015 	stw	fp,0(sp)
  805708:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80570c:	e037883a 	mov	sp,fp
  805710:	df000017 	ldw	fp,0(sp)
  805714:	dec00104 	addi	sp,sp,4
  805718:	f800283a 	ret

0080571c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80571c:	defffc04 	addi	sp,sp,-16
  805720:	df000315 	stw	fp,12(sp)
  805724:	df000304 	addi	fp,sp,12
  805728:	e13ffd15 	stw	r4,-12(fp)
  80572c:	e17ffe15 	stw	r5,-8(fp)
  805730:	e1bfff15 	stw	r6,-4(fp)
  return len;
  805734:	e0bfff17 	ldw	r2,-4(fp)
}
  805738:	e037883a 	mov	sp,fp
  80573c:	df000017 	ldw	fp,0(sp)
  805740:	dec00104 	addi	sp,sp,4
  805744:	f800283a 	ret

00805748 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805748:	defff904 	addi	sp,sp,-28
  80574c:	dfc00615 	stw	ra,24(sp)
  805750:	df000515 	stw	fp,20(sp)
  805754:	df000504 	addi	fp,sp,20
  805758:	e13ffd15 	stw	r4,-12(fp)
  80575c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805760:	e0bffd17 	ldw	r2,-12(fp)
  805764:	1005003a 	cmpeq	r2,r2,zero
  805768:	1000041e 	bne	r2,zero,80577c <alt_dev_llist_insert+0x34>
  80576c:	e0bffd17 	ldw	r2,-12(fp)
  805770:	10800217 	ldw	r2,8(r2)
  805774:	1004c03a 	cmpne	r2,r2,zero
  805778:	1000071e 	bne	r2,zero,805798 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80577c:	08057fc0 	call	8057fc <alt_get_errno>
  805780:	1007883a 	mov	r3,r2
  805784:	00800584 	movi	r2,22
  805788:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80578c:	00bffa84 	movi	r2,-22
  805790:	e0bfff15 	stw	r2,-4(fp)
  805794:	00001306 	br	8057e4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805798:	e0fffd17 	ldw	r3,-12(fp)
  80579c:	e0bffe17 	ldw	r2,-8(fp)
  8057a0:	e0bffb15 	stw	r2,-20(fp)
  8057a4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8057a8:	e0fffc17 	ldw	r3,-16(fp)
  8057ac:	e0bffb17 	ldw	r2,-20(fp)
  8057b0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8057b4:	e0bffb17 	ldw	r2,-20(fp)
  8057b8:	10c00017 	ldw	r3,0(r2)
  8057bc:	e0bffc17 	ldw	r2,-16(fp)
  8057c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8057c4:	e0bffb17 	ldw	r2,-20(fp)
  8057c8:	10c00017 	ldw	r3,0(r2)
  8057cc:	e0bffc17 	ldw	r2,-16(fp)
  8057d0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8057d4:	e0fffb17 	ldw	r3,-20(fp)
  8057d8:	e0bffc17 	ldw	r2,-16(fp)
  8057dc:	18800015 	stw	r2,0(r3)

  return 0;  
  8057e0:	e03fff15 	stw	zero,-4(fp)
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8057e8:	e037883a 	mov	sp,fp
  8057ec:	dfc00117 	ldw	ra,4(sp)
  8057f0:	df000017 	ldw	fp,0(sp)
  8057f4:	dec00204 	addi	sp,sp,8
  8057f8:	f800283a 	ret

008057fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8057fc:	defffd04 	addi	sp,sp,-12
  805800:	dfc00215 	stw	ra,8(sp)
  805804:	df000115 	stw	fp,4(sp)
  805808:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80580c:	00802234 	movhi	r2,136
  805810:	1081e804 	addi	r2,r2,1952
  805814:	10800017 	ldw	r2,0(r2)
  805818:	1005003a 	cmpeq	r2,r2,zero
  80581c:	1000061e 	bne	r2,zero,805838 <alt_get_errno+0x3c>
  805820:	00802234 	movhi	r2,136
  805824:	1081e804 	addi	r2,r2,1952
  805828:	10800017 	ldw	r2,0(r2)
  80582c:	103ee83a 	callr	r2
  805830:	e0bfff15 	stw	r2,-4(fp)
  805834:	00000306 	br	805844 <alt_get_errno+0x48>
  805838:	00802234 	movhi	r2,136
  80583c:	10888104 	addi	r2,r2,8708
  805840:	e0bfff15 	stw	r2,-4(fp)
  805844:	e0bfff17 	ldw	r2,-4(fp)
}
  805848:	e037883a 	mov	sp,fp
  80584c:	dfc00117 	ldw	ra,4(sp)
  805850:	df000017 	ldw	fp,0(sp)
  805854:	dec00204 	addi	sp,sp,8
  805858:	f800283a 	ret

0080585c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80585c:	defffd04 	addi	sp,sp,-12
  805860:	dfc00215 	stw	ra,8(sp)
  805864:	df000115 	stw	fp,4(sp)
  805868:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80586c:	00bfff04 	movi	r2,-4
  805870:	00c02034 	movhi	r3,128
  805874:	18da9804 	addi	r3,r3,27232
  805878:	1885883a 	add	r2,r3,r2
  80587c:	e0bfff15 	stw	r2,-4(fp)
  805880:	00000606 	br	80589c <_do_ctors+0x40>
        (*ctor) (); 
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	10800017 	ldw	r2,0(r2)
  80588c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805890:	e0bfff17 	ldw	r2,-4(fp)
  805894:	10bfff04 	addi	r2,r2,-4
  805898:	e0bfff15 	stw	r2,-4(fp)
  80589c:	e0ffff17 	ldw	r3,-4(fp)
  8058a0:	00802034 	movhi	r2,128
  8058a4:	109a9704 	addi	r2,r2,27228
  8058a8:	18bff62e 	bgeu	r3,r2,805884 <_do_ctors+0x28>
        (*ctor) (); 
}
  8058ac:	e037883a 	mov	sp,fp
  8058b0:	dfc00117 	ldw	ra,4(sp)
  8058b4:	df000017 	ldw	fp,0(sp)
  8058b8:	dec00204 	addi	sp,sp,8
  8058bc:	f800283a 	ret

008058c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8058c0:	defffd04 	addi	sp,sp,-12
  8058c4:	dfc00215 	stw	ra,8(sp)
  8058c8:	df000115 	stw	fp,4(sp)
  8058cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8058d0:	00bfff04 	movi	r2,-4
  8058d4:	00c02034 	movhi	r3,128
  8058d8:	18da9804 	addi	r3,r3,27232
  8058dc:	1885883a 	add	r2,r3,r2
  8058e0:	e0bfff15 	stw	r2,-4(fp)
  8058e4:	00000606 	br	805900 <_do_dtors+0x40>
        (*dtor) (); 
  8058e8:	e0bfff17 	ldw	r2,-4(fp)
  8058ec:	10800017 	ldw	r2,0(r2)
  8058f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8058f4:	e0bfff17 	ldw	r2,-4(fp)
  8058f8:	10bfff04 	addi	r2,r2,-4
  8058fc:	e0bfff15 	stw	r2,-4(fp)
  805900:	e0ffff17 	ldw	r3,-4(fp)
  805904:	00802034 	movhi	r2,128
  805908:	109a9804 	addi	r2,r2,27232
  80590c:	18bff62e 	bgeu	r3,r2,8058e8 <_do_dtors+0x28>
        (*dtor) (); 
}
  805910:	e037883a 	mov	sp,fp
  805914:	dfc00117 	ldw	ra,4(sp)
  805918:	df000017 	ldw	fp,0(sp)
  80591c:	dec00204 	addi	sp,sp,8
  805920:	f800283a 	ret

00805924 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805924:	defffe04 	addi	sp,sp,-8
  805928:	dfc00115 	stw	ra,4(sp)
  80592c:	df000015 	stw	fp,0(sp)
  805930:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  805934:	0009883a 	mov	r4,zero
  805938:	01408004 	movi	r5,512
  80593c:	08064b00 	call	8064b0 <alt_icache_flush>
#endif
}
  805940:	e037883a 	mov	sp,fp
  805944:	dfc00117 	ldw	ra,4(sp)
  805948:	df000017 	ldw	fp,0(sp)
  80594c:	dec00204 	addi	sp,sp,8
  805950:	f800283a 	ret

00805954 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805954:	defff904 	addi	sp,sp,-28
  805958:	dfc00615 	stw	ra,24(sp)
  80595c:	df000515 	stw	fp,20(sp)
  805960:	df000504 	addi	fp,sp,20
  805964:	e13ffc15 	stw	r4,-16(fp)
  805968:	e17ffd15 	stw	r5,-12(fp)
  80596c:	e1bffe15 	stw	r6,-8(fp)
  805970:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  805974:	e0800217 	ldw	r2,8(fp)
  805978:	d8800015 	stw	r2,0(sp)
  80597c:	e13ffc17 	ldw	r4,-16(fp)
  805980:	e17ffd17 	ldw	r5,-12(fp)
  805984:	e1bffe17 	ldw	r6,-8(fp)
  805988:	e1ffff17 	ldw	r7,-4(fp)
  80598c:	0805b280 	call	805b28 <alt_iic_isr_register>
}  
  805990:	e037883a 	mov	sp,fp
  805994:	dfc00117 	ldw	ra,4(sp)
  805998:	df000017 	ldw	fp,0(sp)
  80599c:	dec00204 	addi	sp,sp,8
  8059a0:	f800283a 	ret

008059a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8059a4:	defff904 	addi	sp,sp,-28
  8059a8:	df000615 	stw	fp,24(sp)
  8059ac:	df000604 	addi	fp,sp,24
  8059b0:	e13ffe15 	stw	r4,-8(fp)
  8059b4:	e17fff15 	stw	r5,-4(fp)
  8059b8:	e0bfff17 	ldw	r2,-4(fp)
  8059bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8059c0:	0005303a 	rdctl	r2,status
  8059c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8059c8:	e0fffb17 	ldw	r3,-20(fp)
  8059cc:	00bfff84 	movi	r2,-2
  8059d0:	1884703a 	and	r2,r3,r2
  8059d4:	1001703a 	wrctl	status,r2
  
  return context;
  8059d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8059dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8059e0:	e0fffc17 	ldw	r3,-16(fp)
  8059e4:	00800044 	movi	r2,1
  8059e8:	10c4983a 	sll	r2,r2,r3
  8059ec:	1007883a 	mov	r3,r2
  8059f0:	00802234 	movhi	r2,136
  8059f4:	10887e04 	addi	r2,r2,8696
  8059f8:	10800017 	ldw	r2,0(r2)
  8059fc:	1886b03a 	or	r3,r3,r2
  805a00:	00802234 	movhi	r2,136
  805a04:	10887e04 	addi	r2,r2,8696
  805a08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805a0c:	00802234 	movhi	r2,136
  805a10:	10887e04 	addi	r2,r2,8696
  805a14:	10800017 	ldw	r2,0(r2)
  805a18:	100170fa 	wrctl	ienable,r2
  805a1c:	e0bffd17 	ldw	r2,-12(fp)
  805a20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805a24:	e0bffa17 	ldw	r2,-24(fp)
  805a28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805a2c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  805a30:	e037883a 	mov	sp,fp
  805a34:	df000017 	ldw	fp,0(sp)
  805a38:	dec00104 	addi	sp,sp,4
  805a3c:	f800283a 	ret

00805a40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  805a40:	defff904 	addi	sp,sp,-28
  805a44:	df000615 	stw	fp,24(sp)
  805a48:	df000604 	addi	fp,sp,24
  805a4c:	e13ffe15 	stw	r4,-8(fp)
  805a50:	e17fff15 	stw	r5,-4(fp)
  805a54:	e0bfff17 	ldw	r2,-4(fp)
  805a58:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a5c:	0005303a 	rdctl	r2,status
  805a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a64:	e0fffb17 	ldw	r3,-20(fp)
  805a68:	00bfff84 	movi	r2,-2
  805a6c:	1884703a 	and	r2,r3,r2
  805a70:	1001703a 	wrctl	status,r2
  
  return context;
  805a74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805a78:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  805a7c:	e0fffc17 	ldw	r3,-16(fp)
  805a80:	00800044 	movi	r2,1
  805a84:	10c4983a 	sll	r2,r2,r3
  805a88:	0084303a 	nor	r2,zero,r2
  805a8c:	1007883a 	mov	r3,r2
  805a90:	00802234 	movhi	r2,136
  805a94:	10887e04 	addi	r2,r2,8696
  805a98:	10800017 	ldw	r2,0(r2)
  805a9c:	1886703a 	and	r3,r3,r2
  805aa0:	00802234 	movhi	r2,136
  805aa4:	10887e04 	addi	r2,r2,8696
  805aa8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805aac:	00802234 	movhi	r2,136
  805ab0:	10887e04 	addi	r2,r2,8696
  805ab4:	10800017 	ldw	r2,0(r2)
  805ab8:	100170fa 	wrctl	ienable,r2
  805abc:	e0bffd17 	ldw	r2,-12(fp)
  805ac0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805ac4:	e0bffa17 	ldw	r2,-24(fp)
  805ac8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805acc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  805ad0:	e037883a 	mov	sp,fp
  805ad4:	df000017 	ldw	fp,0(sp)
  805ad8:	dec00104 	addi	sp,sp,4
  805adc:	f800283a 	ret

00805ae0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805ae0:	defffc04 	addi	sp,sp,-16
  805ae4:	df000315 	stw	fp,12(sp)
  805ae8:	df000304 	addi	fp,sp,12
  805aec:	e13ffe15 	stw	r4,-8(fp)
  805af0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805af4:	000530fa 	rdctl	r2,ienable
  805af8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805afc:	e0ffff17 	ldw	r3,-4(fp)
  805b00:	00800044 	movi	r2,1
  805b04:	10c4983a 	sll	r2,r2,r3
  805b08:	1007883a 	mov	r3,r2
  805b0c:	e0bffd17 	ldw	r2,-12(fp)
  805b10:	1884703a 	and	r2,r3,r2
  805b14:	1004c03a 	cmpne	r2,r2,zero
}
  805b18:	e037883a 	mov	sp,fp
  805b1c:	df000017 	ldw	fp,0(sp)
  805b20:	dec00104 	addi	sp,sp,4
  805b24:	f800283a 	ret

00805b28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805b28:	defff404 	addi	sp,sp,-48
  805b2c:	dfc00b15 	stw	ra,44(sp)
  805b30:	df000a15 	stw	fp,40(sp)
  805b34:	df000a04 	addi	fp,sp,40
  805b38:	e13ffb15 	stw	r4,-20(fp)
  805b3c:	e17ffc15 	stw	r5,-16(fp)
  805b40:	e1bffd15 	stw	r6,-12(fp)
  805b44:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  805b48:	00bffa84 	movi	r2,-22
  805b4c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  805b50:	e0bffc17 	ldw	r2,-16(fp)
  805b54:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  805b58:	e0bff917 	ldw	r2,-28(fp)
  805b5c:	10800808 	cmpgei	r2,r2,32
  805b60:	1000291e 	bne	r2,zero,805c08 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b64:	0005303a 	rdctl	r2,status
  805b68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b6c:	e0fff717 	ldw	r3,-36(fp)
  805b70:	00bfff84 	movi	r2,-2
  805b74:	1884703a 	and	r2,r3,r2
  805b78:	1001703a 	wrctl	status,r2
  
  return context;
  805b7c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805b80:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  805b84:	e0bff917 	ldw	r2,-28(fp)
  805b88:	00c02274 	movhi	r3,137
  805b8c:	18cd8204 	addi	r3,r3,13832
  805b90:	100490fa 	slli	r2,r2,3
  805b94:	10c7883a 	add	r3,r2,r3
  805b98:	e0bffd17 	ldw	r2,-12(fp)
  805b9c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  805ba0:	e0bff917 	ldw	r2,-28(fp)
  805ba4:	00c02274 	movhi	r3,137
  805ba8:	18cd8204 	addi	r3,r3,13832
  805bac:	100490fa 	slli	r2,r2,3
  805bb0:	10c5883a 	add	r2,r2,r3
  805bb4:	10c00104 	addi	r3,r2,4
  805bb8:	e0bffe17 	ldw	r2,-8(fp)
  805bbc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805bc0:	e0bffd17 	ldw	r2,-12(fp)
  805bc4:	1005003a 	cmpeq	r2,r2,zero
  805bc8:	1000051e 	bne	r2,zero,805be0 <alt_iic_isr_register+0xb8>
  805bcc:	e17ff917 	ldw	r5,-28(fp)
  805bd0:	e13ffb17 	ldw	r4,-20(fp)
  805bd4:	08059a40 	call	8059a4 <alt_ic_irq_enable>
  805bd8:	e0bfff15 	stw	r2,-4(fp)
  805bdc:	00000406 	br	805bf0 <alt_iic_isr_register+0xc8>
  805be0:	e17ff917 	ldw	r5,-28(fp)
  805be4:	e13ffb17 	ldw	r4,-20(fp)
  805be8:	0805a400 	call	805a40 <alt_ic_irq_disable>
  805bec:	e0bfff15 	stw	r2,-4(fp)
  805bf0:	e0bfff17 	ldw	r2,-4(fp)
  805bf4:	e0bffa15 	stw	r2,-24(fp)
  805bf8:	e0bff817 	ldw	r2,-32(fp)
  805bfc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c00:	e0bff617 	ldw	r2,-40(fp)
  805c04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  805c08:	e0bffa17 	ldw	r2,-24(fp)
}
  805c0c:	e037883a 	mov	sp,fp
  805c10:	dfc00117 	ldw	ra,4(sp)
  805c14:	df000017 	ldw	fp,0(sp)
  805c18:	dec00204 	addi	sp,sp,8
  805c1c:	f800283a 	ret

00805c20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805c20:	defff904 	addi	sp,sp,-28
  805c24:	dfc00615 	stw	ra,24(sp)
  805c28:	df000515 	stw	fp,20(sp)
  805c2c:	df000504 	addi	fp,sp,20
  805c30:	e13ffc15 	stw	r4,-16(fp)
  805c34:	e17ffd15 	stw	r5,-12(fp)
  805c38:	e1bffe15 	stw	r6,-8(fp)
  805c3c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  805c40:	e13ffd17 	ldw	r4,-12(fp)
  805c44:	e17ffe17 	ldw	r5,-8(fp)
  805c48:	e1bfff17 	ldw	r6,-4(fp)
  805c4c:	0805e380 	call	805e38 <open>
  805c50:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  805c54:	e0bffb17 	ldw	r2,-20(fp)
  805c58:	1004803a 	cmplt	r2,r2,zero
  805c5c:	10001c1e 	bne	r2,zero,805cd0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  805c60:	e0bffb17 	ldw	r2,-20(fp)
  805c64:	00c02234 	movhi	r3,136
  805c68:	18c08304 	addi	r3,r3,524
  805c6c:	10800324 	muli	r2,r2,12
  805c70:	10c5883a 	add	r2,r2,r3
  805c74:	10c00017 	ldw	r3,0(r2)
  805c78:	e0bffc17 	ldw	r2,-16(fp)
  805c7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805c80:	e0bffb17 	ldw	r2,-20(fp)
  805c84:	00c02234 	movhi	r3,136
  805c88:	18c08304 	addi	r3,r3,524
  805c8c:	10800324 	muli	r2,r2,12
  805c90:	10c5883a 	add	r2,r2,r3
  805c94:	10800104 	addi	r2,r2,4
  805c98:	10c00017 	ldw	r3,0(r2)
  805c9c:	e0bffc17 	ldw	r2,-16(fp)
  805ca0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805ca4:	e0bffb17 	ldw	r2,-20(fp)
  805ca8:	00c02234 	movhi	r3,136
  805cac:	18c08304 	addi	r3,r3,524
  805cb0:	10800324 	muli	r2,r2,12
  805cb4:	10c5883a 	add	r2,r2,r3
  805cb8:	10800204 	addi	r2,r2,8
  805cbc:	10c00017 	ldw	r3,0(r2)
  805cc0:	e0bffc17 	ldw	r2,-16(fp)
  805cc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805cc8:	e13ffb17 	ldw	r4,-20(fp)
  805ccc:	08060200 	call	806020 <alt_release_fd>
  }
} 
  805cd0:	e037883a 	mov	sp,fp
  805cd4:	dfc00117 	ldw	ra,4(sp)
  805cd8:	df000017 	ldw	fp,0(sp)
  805cdc:	dec00204 	addi	sp,sp,8
  805ce0:	f800283a 	ret

00805ce4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805ce4:	defffb04 	addi	sp,sp,-20
  805ce8:	dfc00415 	stw	ra,16(sp)
  805cec:	df000315 	stw	fp,12(sp)
  805cf0:	df000304 	addi	fp,sp,12
  805cf4:	e13ffd15 	stw	r4,-12(fp)
  805cf8:	e17ffe15 	stw	r5,-8(fp)
  805cfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805d00:	01002234 	movhi	r4,136
  805d04:	21008604 	addi	r4,r4,536
  805d08:	e17ffd17 	ldw	r5,-12(fp)
  805d0c:	01800044 	movi	r6,1
  805d10:	01c07fc4 	movi	r7,511
  805d14:	0805c200 	call	805c20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805d18:	01002234 	movhi	r4,136
  805d1c:	21008304 	addi	r4,r4,524
  805d20:	e17ffe17 	ldw	r5,-8(fp)
  805d24:	000d883a 	mov	r6,zero
  805d28:	01c07fc4 	movi	r7,511
  805d2c:	0805c200 	call	805c20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805d30:	01002234 	movhi	r4,136
  805d34:	21008904 	addi	r4,r4,548
  805d38:	e17fff17 	ldw	r5,-4(fp)
  805d3c:	01800044 	movi	r6,1
  805d40:	01c07fc4 	movi	r7,511
  805d44:	0805c200 	call	805c20 <alt_open_fd>
}  
  805d48:	e037883a 	mov	sp,fp
  805d4c:	dfc00117 	ldw	ra,4(sp)
  805d50:	df000017 	ldw	fp,0(sp)
  805d54:	dec00204 	addi	sp,sp,8
  805d58:	f800283a 	ret

00805d5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805d5c:	defffc04 	addi	sp,sp,-16
  805d60:	df000315 	stw	fp,12(sp)
  805d64:	df000304 	addi	fp,sp,12
  805d68:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805d6c:	e0bffe17 	ldw	r2,-8(fp)
  805d70:	10800217 	ldw	r2,8(r2)
  805d74:	10d00034 	orhi	r3,r2,16384
  805d78:	e0bffe17 	ldw	r2,-8(fp)
  805d7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805d80:	e03ffd15 	stw	zero,-12(fp)
  805d84:	00002006 	br	805e08 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805d88:	e0bffd17 	ldw	r2,-12(fp)
  805d8c:	00c02234 	movhi	r3,136
  805d90:	18c08304 	addi	r3,r3,524
  805d94:	10800324 	muli	r2,r2,12
  805d98:	10c5883a 	add	r2,r2,r3
  805d9c:	10c00017 	ldw	r3,0(r2)
  805da0:	e0bffe17 	ldw	r2,-8(fp)
  805da4:	10800017 	ldw	r2,0(r2)
  805da8:	1880141e 	bne	r3,r2,805dfc <alt_file_locked+0xa0>
  805dac:	e0bffd17 	ldw	r2,-12(fp)
  805db0:	00c02234 	movhi	r3,136
  805db4:	18c08304 	addi	r3,r3,524
  805db8:	10800324 	muli	r2,r2,12
  805dbc:	10c5883a 	add	r2,r2,r3
  805dc0:	10800204 	addi	r2,r2,8
  805dc4:	10800017 	ldw	r2,0(r2)
  805dc8:	1004403a 	cmpge	r2,r2,zero
  805dcc:	10000b1e 	bne	r2,zero,805dfc <alt_file_locked+0xa0>
  805dd0:	e0bffd17 	ldw	r2,-12(fp)
  805dd4:	10800324 	muli	r2,r2,12
  805dd8:	1007883a 	mov	r3,r2
  805ddc:	00802234 	movhi	r2,136
  805de0:	10808304 	addi	r2,r2,524
  805de4:	1887883a 	add	r3,r3,r2
  805de8:	e0bffe17 	ldw	r2,-8(fp)
  805dec:	18800326 	beq	r3,r2,805dfc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805df0:	00bffcc4 	movi	r2,-13
  805df4:	e0bfff15 	stw	r2,-4(fp)
  805df8:	00000a06 	br	805e24 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805dfc:	e0bffd17 	ldw	r2,-12(fp)
  805e00:	10800044 	addi	r2,r2,1
  805e04:	e0bffd15 	stw	r2,-12(fp)
  805e08:	00802234 	movhi	r2,136
  805e0c:	1081e704 	addi	r2,r2,1948
  805e10:	10800017 	ldw	r2,0(r2)
  805e14:	1007883a 	mov	r3,r2
  805e18:	e0bffd17 	ldw	r2,-12(fp)
  805e1c:	18bfda2e 	bgeu	r3,r2,805d88 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805e20:	e03fff15 	stw	zero,-4(fp)
  805e24:	e0bfff17 	ldw	r2,-4(fp)
}
  805e28:	e037883a 	mov	sp,fp
  805e2c:	df000017 	ldw	fp,0(sp)
  805e30:	dec00104 	addi	sp,sp,4
  805e34:	f800283a 	ret

00805e38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805e38:	defff404 	addi	sp,sp,-48
  805e3c:	dfc00b15 	stw	ra,44(sp)
  805e40:	df000a15 	stw	fp,40(sp)
  805e44:	df000a04 	addi	fp,sp,40
  805e48:	e13ffb15 	stw	r4,-20(fp)
  805e4c:	e17ffc15 	stw	r5,-16(fp)
  805e50:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805e54:	00bfffc4 	movi	r2,-1
  805e58:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  805e5c:	00bffb44 	movi	r2,-19
  805e60:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  805e64:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805e68:	e13ffb17 	ldw	r4,-20(fp)
  805e6c:	01402234 	movhi	r5,136
  805e70:	2941e504 	addi	r5,r5,1940
  805e74:	08062440 	call	806244 <alt_find_dev>
  805e78:	e0bffa15 	stw	r2,-24(fp)
  805e7c:	e0bffa17 	ldw	r2,-24(fp)
  805e80:	1004c03a 	cmpne	r2,r2,zero
  805e84:	1000051e 	bne	r2,zero,805e9c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805e88:	e13ffb17 	ldw	r4,-20(fp)
  805e8c:	08062d80 	call	8062d8 <alt_find_file>
  805e90:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  805e94:	00800044 	movi	r2,1
  805e98:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805e9c:	e0bffa17 	ldw	r2,-24(fp)
  805ea0:	1005003a 	cmpeq	r2,r2,zero
  805ea4:	1000301e 	bne	r2,zero,805f68 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805ea8:	e13ffa17 	ldw	r4,-24(fp)
  805eac:	08063f80 	call	8063f8 <alt_get_fd>
  805eb0:	e0bff815 	stw	r2,-32(fp)
  805eb4:	e0bff817 	ldw	r2,-32(fp)
  805eb8:	1004403a 	cmpge	r2,r2,zero
  805ebc:	1000031e 	bne	r2,zero,805ecc <open+0x94>
    {
      status = index;
  805ec0:	e0bff817 	ldw	r2,-32(fp)
  805ec4:	e0bff715 	stw	r2,-36(fp)
  805ec8:	00002906 	br	805f70 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  805ecc:	e0bff817 	ldw	r2,-32(fp)
  805ed0:	10800324 	muli	r2,r2,12
  805ed4:	1007883a 	mov	r3,r2
  805ed8:	00802234 	movhi	r2,136
  805edc:	10808304 	addi	r2,r2,524
  805ee0:	1885883a 	add	r2,r3,r2
  805ee4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805ee8:	e0fffc17 	ldw	r3,-16(fp)
  805eec:	00900034 	movhi	r2,16384
  805ef0:	10bfffc4 	addi	r2,r2,-1
  805ef4:	1886703a 	and	r3,r3,r2
  805ef8:	e0bff917 	ldw	r2,-28(fp)
  805efc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805f00:	e0bff617 	ldw	r2,-40(fp)
  805f04:	1004c03a 	cmpne	r2,r2,zero
  805f08:	1000061e 	bne	r2,zero,805f24 <open+0xec>
  805f0c:	e13ff917 	ldw	r4,-28(fp)
  805f10:	0805d5c0 	call	805d5c <alt_file_locked>
  805f14:	e0bff715 	stw	r2,-36(fp)
  805f18:	e0bff717 	ldw	r2,-36(fp)
  805f1c:	1004803a 	cmplt	r2,r2,zero
  805f20:	1000131e 	bne	r2,zero,805f70 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805f24:	e0bffa17 	ldw	r2,-24(fp)
  805f28:	10800317 	ldw	r2,12(r2)
  805f2c:	1005003a 	cmpeq	r2,r2,zero
  805f30:	1000091e 	bne	r2,zero,805f58 <open+0x120>
  805f34:	e0bffa17 	ldw	r2,-24(fp)
  805f38:	10800317 	ldw	r2,12(r2)
  805f3c:	e13ff917 	ldw	r4,-28(fp)
  805f40:	e17ffb17 	ldw	r5,-20(fp)
  805f44:	e1bffc17 	ldw	r6,-16(fp)
  805f48:	e1fffd17 	ldw	r7,-12(fp)
  805f4c:	103ee83a 	callr	r2
  805f50:	e0bfff15 	stw	r2,-4(fp)
  805f54:	00000106 	br	805f5c <open+0x124>
  805f58:	e03fff15 	stw	zero,-4(fp)
  805f5c:	e0bfff17 	ldw	r2,-4(fp)
  805f60:	e0bff715 	stw	r2,-36(fp)
  805f64:	00000206 	br	805f70 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805f68:	00bffb44 	movi	r2,-19
  805f6c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805f70:	e0bff717 	ldw	r2,-36(fp)
  805f74:	1004403a 	cmpge	r2,r2,zero
  805f78:	1000091e 	bne	r2,zero,805fa0 <open+0x168>
  {
    alt_release_fd (index);  
  805f7c:	e13ff817 	ldw	r4,-32(fp)
  805f80:	08060200 	call	806020 <alt_release_fd>
    ALT_ERRNO = -status;
  805f84:	0805fc00 	call	805fc0 <alt_get_errno>
  805f88:	e0fff717 	ldw	r3,-36(fp)
  805f8c:	00c7c83a 	sub	r3,zero,r3
  805f90:	10c00015 	stw	r3,0(r2)
    return -1;
  805f94:	00bfffc4 	movi	r2,-1
  805f98:	e0bffe15 	stw	r2,-8(fp)
  805f9c:	00000206 	br	805fa8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  805fa0:	e0bff817 	ldw	r2,-32(fp)
  805fa4:	e0bffe15 	stw	r2,-8(fp)
  805fa8:	e0bffe17 	ldw	r2,-8(fp)
}
  805fac:	e037883a 	mov	sp,fp
  805fb0:	dfc00117 	ldw	ra,4(sp)
  805fb4:	df000017 	ldw	fp,0(sp)
  805fb8:	dec00204 	addi	sp,sp,8
  805fbc:	f800283a 	ret

00805fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805fc0:	defffd04 	addi	sp,sp,-12
  805fc4:	dfc00215 	stw	ra,8(sp)
  805fc8:	df000115 	stw	fp,4(sp)
  805fcc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805fd0:	00802234 	movhi	r2,136
  805fd4:	1081e804 	addi	r2,r2,1952
  805fd8:	10800017 	ldw	r2,0(r2)
  805fdc:	1005003a 	cmpeq	r2,r2,zero
  805fe0:	1000061e 	bne	r2,zero,805ffc <alt_get_errno+0x3c>
  805fe4:	00802234 	movhi	r2,136
  805fe8:	1081e804 	addi	r2,r2,1952
  805fec:	10800017 	ldw	r2,0(r2)
  805ff0:	103ee83a 	callr	r2
  805ff4:	e0bfff15 	stw	r2,-4(fp)
  805ff8:	00000306 	br	806008 <alt_get_errno+0x48>
  805ffc:	00802234 	movhi	r2,136
  806000:	10888104 	addi	r2,r2,8708
  806004:	e0bfff15 	stw	r2,-4(fp)
  806008:	e0bfff17 	ldw	r2,-4(fp)
}
  80600c:	e037883a 	mov	sp,fp
  806010:	dfc00117 	ldw	ra,4(sp)
  806014:	df000017 	ldw	fp,0(sp)
  806018:	dec00204 	addi	sp,sp,8
  80601c:	f800283a 	ret

00806020 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  806020:	defffe04 	addi	sp,sp,-8
  806024:	df000115 	stw	fp,4(sp)
  806028:	df000104 	addi	fp,sp,4
  80602c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  806030:	e0bfff17 	ldw	r2,-4(fp)
  806034:	108000d0 	cmplti	r2,r2,3
  806038:	10000d1e 	bne	r2,zero,806070 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80603c:	e0bfff17 	ldw	r2,-4(fp)
  806040:	00c02234 	movhi	r3,136
  806044:	18c08304 	addi	r3,r3,524
  806048:	10800324 	muli	r2,r2,12
  80604c:	10c5883a 	add	r2,r2,r3
  806050:	10800204 	addi	r2,r2,8
  806054:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  806058:	e0bfff17 	ldw	r2,-4(fp)
  80605c:	00c02234 	movhi	r3,136
  806060:	18c08304 	addi	r3,r3,524
  806064:	10800324 	muli	r2,r2,12
  806068:	10c5883a 	add	r2,r2,r3
  80606c:	10000015 	stw	zero,0(r2)
  }
}
  806070:	e037883a 	mov	sp,fp
  806074:	df000017 	ldw	fp,0(sp)
  806078:	dec00104 	addi	sp,sp,4
  80607c:	f800283a 	ret

00806080 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806080:	defffa04 	addi	sp,sp,-24
  806084:	df000515 	stw	fp,20(sp)
  806088:	df000504 	addi	fp,sp,20
  80608c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806090:	0005303a 	rdctl	r2,status
  806094:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806098:	e0fffd17 	ldw	r3,-12(fp)
  80609c:	00bfff84 	movi	r2,-2
  8060a0:	1884703a 	and	r2,r3,r2
  8060a4:	1001703a 	wrctl	status,r2
  
  return context;
  8060a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8060ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8060b0:	e0bfff17 	ldw	r2,-4(fp)
  8060b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8060b8:	e0bffc17 	ldw	r2,-16(fp)
  8060bc:	10c00017 	ldw	r3,0(r2)
  8060c0:	e0bffc17 	ldw	r2,-16(fp)
  8060c4:	10800117 	ldw	r2,4(r2)
  8060c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8060cc:	e0bffc17 	ldw	r2,-16(fp)
  8060d0:	10c00117 	ldw	r3,4(r2)
  8060d4:	e0bffc17 	ldw	r2,-16(fp)
  8060d8:	10800017 	ldw	r2,0(r2)
  8060dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8060e0:	e0fffc17 	ldw	r3,-16(fp)
  8060e4:	e0bffc17 	ldw	r2,-16(fp)
  8060e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8060ec:	e0fffc17 	ldw	r3,-16(fp)
  8060f0:	e0bffc17 	ldw	r2,-16(fp)
  8060f4:	18800015 	stw	r2,0(r3)
  8060f8:	e0bffe17 	ldw	r2,-8(fp)
  8060fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806100:	e0bffb17 	ldw	r2,-20(fp)
  806104:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  806108:	e037883a 	mov	sp,fp
  80610c:	df000017 	ldw	fp,0(sp)
  806110:	dec00104 	addi	sp,sp,4
  806114:	f800283a 	ret

00806118 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  806118:	defffb04 	addi	sp,sp,-20
  80611c:	dfc00415 	stw	ra,16(sp)
  806120:	df000315 	stw	fp,12(sp)
  806124:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  806128:	d0a00717 	ldw	r2,-32740(gp)
  80612c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  806130:	d0a69d17 	ldw	r2,-25996(gp)
  806134:	10800044 	addi	r2,r2,1
  806138:	d0a69d15 	stw	r2,-25996(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80613c:	00003106 	br	806204 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  806140:	e0bffe17 	ldw	r2,-8(fp)
  806144:	10800017 	ldw	r2,0(r2)
  806148:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80614c:	e0bffe17 	ldw	r2,-8(fp)
  806150:	10800403 	ldbu	r2,16(r2)
  806154:	10803fcc 	andi	r2,r2,255
  806158:	1005003a 	cmpeq	r2,r2,zero
  80615c:	1000051e 	bne	r2,zero,806174 <alt_tick+0x5c>
  806160:	d0a69d17 	ldw	r2,-25996(gp)
  806164:	1004c03a 	cmpne	r2,r2,zero
  806168:	1000021e 	bne	r2,zero,806174 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80616c:	e0bffe17 	ldw	r2,-8(fp)
  806170:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  806174:	e0bffe17 	ldw	r2,-8(fp)
  806178:	10c00217 	ldw	r3,8(r2)
  80617c:	d0a69d17 	ldw	r2,-25996(gp)
  806180:	10c01e36 	bltu	r2,r3,8061fc <alt_tick+0xe4>
  806184:	e0bffe17 	ldw	r2,-8(fp)
  806188:	10800403 	ldbu	r2,16(r2)
  80618c:	10803fcc 	andi	r2,r2,255
  806190:	1004c03a 	cmpne	r2,r2,zero
  806194:	1000191e 	bne	r2,zero,8061fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  806198:	e0bffe17 	ldw	r2,-8(fp)
  80619c:	10c00317 	ldw	r3,12(r2)
  8061a0:	e0bffe17 	ldw	r2,-8(fp)
  8061a4:	11000517 	ldw	r4,20(r2)
  8061a8:	183ee83a 	callr	r3
  8061ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8061b0:	e0bffd17 	ldw	r2,-12(fp)
  8061b4:	1004c03a 	cmpne	r2,r2,zero
  8061b8:	1000031e 	bne	r2,zero,8061c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8061bc:	e13ffe17 	ldw	r4,-8(fp)
  8061c0:	08060800 	call	806080 <alt_alarm_stop>
  8061c4:	00000d06 	br	8061fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8061c8:	e0bffe17 	ldw	r2,-8(fp)
  8061cc:	10c00217 	ldw	r3,8(r2)
  8061d0:	e0bffd17 	ldw	r2,-12(fp)
  8061d4:	1887883a 	add	r3,r3,r2
  8061d8:	e0bffe17 	ldw	r2,-8(fp)
  8061dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8061e0:	e0bffe17 	ldw	r2,-8(fp)
  8061e4:	10c00217 	ldw	r3,8(r2)
  8061e8:	d0a69d17 	ldw	r2,-25996(gp)
  8061ec:	1880032e 	bgeu	r3,r2,8061fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8061f0:	e0fffe17 	ldw	r3,-8(fp)
  8061f4:	00800044 	movi	r2,1
  8061f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8061fc:	e0bfff17 	ldw	r2,-4(fp)
  806200:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806204:	d0e00704 	addi	r3,gp,-32740
  806208:	e0bffe17 	ldw	r2,-8(fp)
  80620c:	10ffcc1e 	bne	r2,r3,806140 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  806210:	e037883a 	mov	sp,fp
  806214:	dfc00117 	ldw	ra,4(sp)
  806218:	df000017 	ldw	fp,0(sp)
  80621c:	dec00204 	addi	sp,sp,8
  806220:	f800283a 	ret

00806224 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  806224:	deffff04 	addi	sp,sp,-4
  806228:	df000015 	stw	fp,0(sp)
  80622c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  806230:	000170fa 	wrctl	ienable,zero
}
  806234:	e037883a 	mov	sp,fp
  806238:	df000017 	ldw	fp,0(sp)
  80623c:	dec00104 	addi	sp,sp,4
  806240:	f800283a 	ret

00806244 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  806244:	defff904 	addi	sp,sp,-28
  806248:	dfc00615 	stw	ra,24(sp)
  80624c:	df000515 	stw	fp,20(sp)
  806250:	df000504 	addi	fp,sp,20
  806254:	e13ffd15 	stw	r4,-12(fp)
  806258:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80625c:	e0bffe17 	ldw	r2,-8(fp)
  806260:	10800017 	ldw	r2,0(r2)
  806264:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  806268:	e13ffd17 	ldw	r4,-12(fp)
  80626c:	08066a00 	call	8066a0 <strlen>
  806270:	10800044 	addi	r2,r2,1
  806274:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806278:	00000d06 	br	8062b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80627c:	e0bffc17 	ldw	r2,-16(fp)
  806280:	11000217 	ldw	r4,8(r2)
  806284:	e1bffb17 	ldw	r6,-20(fp)
  806288:	e17ffd17 	ldw	r5,-12(fp)
  80628c:	080658c0 	call	80658c <memcmp>
  806290:	1004c03a 	cmpne	r2,r2,zero
  806294:	1000031e 	bne	r2,zero,8062a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  806298:	e0bffc17 	ldw	r2,-16(fp)
  80629c:	e0bfff15 	stw	r2,-4(fp)
  8062a0:	00000706 	br	8062c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8062a4:	e0bffc17 	ldw	r2,-16(fp)
  8062a8:	10800017 	ldw	r2,0(r2)
  8062ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8062b0:	e0fffe17 	ldw	r3,-8(fp)
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	10fff01e 	bne	r2,r3,80627c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8062bc:	e03fff15 	stw	zero,-4(fp)
  8062c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8062c4:	e037883a 	mov	sp,fp
  8062c8:	dfc00117 	ldw	ra,4(sp)
  8062cc:	df000017 	ldw	fp,0(sp)
  8062d0:	dec00204 	addi	sp,sp,8
  8062d4:	f800283a 	ret

008062d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8062d8:	defffa04 	addi	sp,sp,-24
  8062dc:	dfc00515 	stw	ra,20(sp)
  8062e0:	df000415 	stw	fp,16(sp)
  8062e4:	df000404 	addi	fp,sp,16
  8062e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8062ec:	00802234 	movhi	r2,136
  8062f0:	1081e304 	addi	r2,r2,1932
  8062f4:	10800017 	ldw	r2,0(r2)
  8062f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8062fc:	00003306 	br	8063cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  806300:	e0bffd17 	ldw	r2,-12(fp)
  806304:	11000217 	ldw	r4,8(r2)
  806308:	08066a00 	call	8066a0 <strlen>
  80630c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  806310:	e0bffd17 	ldw	r2,-12(fp)
  806314:	10c00217 	ldw	r3,8(r2)
  806318:	e0bffc17 	ldw	r2,-16(fp)
  80631c:	1885883a 	add	r2,r3,r2
  806320:	10bfffc4 	addi	r2,r2,-1
  806324:	10800003 	ldbu	r2,0(r2)
  806328:	10803fcc 	andi	r2,r2,255
  80632c:	1080201c 	xori	r2,r2,128
  806330:	10bfe004 	addi	r2,r2,-128
  806334:	10800bd8 	cmpnei	r2,r2,47
  806338:	1000031e 	bne	r2,zero,806348 <alt_find_file+0x70>
    {
      len -= 1;
  80633c:	e0bffc17 	ldw	r2,-16(fp)
  806340:	10bfffc4 	addi	r2,r2,-1
  806344:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806348:	e0bffc17 	ldw	r2,-16(fp)
  80634c:	1007883a 	mov	r3,r2
  806350:	e0bffe17 	ldw	r2,-8(fp)
  806354:	1885883a 	add	r2,r3,r2
  806358:	10800003 	ldbu	r2,0(r2)
  80635c:	10803fcc 	andi	r2,r2,255
  806360:	1080201c 	xori	r2,r2,128
  806364:	10bfe004 	addi	r2,r2,-128
  806368:	10800be0 	cmpeqi	r2,r2,47
  80636c:	10000a1e 	bne	r2,zero,806398 <alt_find_file+0xc0>
  806370:	e0bffc17 	ldw	r2,-16(fp)
  806374:	1007883a 	mov	r3,r2
  806378:	e0bffe17 	ldw	r2,-8(fp)
  80637c:	1885883a 	add	r2,r3,r2
  806380:	10800003 	ldbu	r2,0(r2)
  806384:	10803fcc 	andi	r2,r2,255
  806388:	1080201c 	xori	r2,r2,128
  80638c:	10bfe004 	addi	r2,r2,-128
  806390:	1004c03a 	cmpne	r2,r2,zero
  806394:	10000a1e 	bne	r2,zero,8063c0 <alt_find_file+0xe8>
  806398:	e0bffd17 	ldw	r2,-12(fp)
  80639c:	11000217 	ldw	r4,8(r2)
  8063a0:	e1bffc17 	ldw	r6,-16(fp)
  8063a4:	e17ffe17 	ldw	r5,-8(fp)
  8063a8:	080658c0 	call	80658c <memcmp>
  8063ac:	1004c03a 	cmpne	r2,r2,zero
  8063b0:	1000031e 	bne	r2,zero,8063c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8063b4:	e0bffd17 	ldw	r2,-12(fp)
  8063b8:	e0bfff15 	stw	r2,-4(fp)
  8063bc:	00000806 	br	8063e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8063c0:	e0bffd17 	ldw	r2,-12(fp)
  8063c4:	10800017 	ldw	r2,0(r2)
  8063c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8063cc:	00c02234 	movhi	r3,136
  8063d0:	18c1e304 	addi	r3,r3,1932
  8063d4:	e0bffd17 	ldw	r2,-12(fp)
  8063d8:	10ffc91e 	bne	r2,r3,806300 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8063dc:	e03fff15 	stw	zero,-4(fp)
  8063e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8063e4:	e037883a 	mov	sp,fp
  8063e8:	dfc00117 	ldw	ra,4(sp)
  8063ec:	df000017 	ldw	fp,0(sp)
  8063f0:	dec00204 	addi	sp,sp,8
  8063f4:	f800283a 	ret

008063f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8063f8:	defffc04 	addi	sp,sp,-16
  8063fc:	df000315 	stw	fp,12(sp)
  806400:	df000304 	addi	fp,sp,12
  806404:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806408:	00bffa04 	movi	r2,-24
  80640c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806410:	e03ffe15 	stw	zero,-8(fp)
  806414:	00001e06 	br	806490 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  806418:	e0bffe17 	ldw	r2,-8(fp)
  80641c:	00c02234 	movhi	r3,136
  806420:	18c08304 	addi	r3,r3,524
  806424:	10800324 	muli	r2,r2,12
  806428:	10c5883a 	add	r2,r2,r3
  80642c:	10800017 	ldw	r2,0(r2)
  806430:	1004c03a 	cmpne	r2,r2,zero
  806434:	1000131e 	bne	r2,zero,806484 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  806438:	e0bffe17 	ldw	r2,-8(fp)
  80643c:	00c02234 	movhi	r3,136
  806440:	18c08304 	addi	r3,r3,524
  806444:	10800324 	muli	r2,r2,12
  806448:	10c7883a 	add	r3,r2,r3
  80644c:	e0bfff17 	ldw	r2,-4(fp)
  806450:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  806454:	00802234 	movhi	r2,136
  806458:	1081e704 	addi	r2,r2,1948
  80645c:	10c00017 	ldw	r3,0(r2)
  806460:	e0bffe17 	ldw	r2,-8(fp)
  806464:	1880040e 	bge	r3,r2,806478 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  806468:	00c02234 	movhi	r3,136
  80646c:	18c1e704 	addi	r3,r3,1948
  806470:	e0bffe17 	ldw	r2,-8(fp)
  806474:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  806478:	e0bffe17 	ldw	r2,-8(fp)
  80647c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  806480:	00000606 	br	80649c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806484:	e0bffe17 	ldw	r2,-8(fp)
  806488:	10800044 	addi	r2,r2,1
  80648c:	e0bffe15 	stw	r2,-8(fp)
  806490:	e0bffe17 	ldw	r2,-8(fp)
  806494:	10800810 	cmplti	r2,r2,32
  806498:	103fdf1e 	bne	r2,zero,806418 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80649c:	e0bffd17 	ldw	r2,-12(fp)
}
  8064a0:	e037883a 	mov	sp,fp
  8064a4:	df000017 	ldw	fp,0(sp)
  8064a8:	dec00104 	addi	sp,sp,4
  8064ac:	f800283a 	ret

008064b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8064b0:	defffb04 	addi	sp,sp,-20
  8064b4:	df000415 	stw	fp,16(sp)
  8064b8:	df000404 	addi	fp,sp,16
  8064bc:	e13ffe15 	stw	r4,-8(fp)
  8064c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8064c4:	e0bfff17 	ldw	r2,-4(fp)
  8064c8:	10808070 	cmpltui	r2,r2,513
  8064cc:	1000021e 	bne	r2,zero,8064d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8064d0:	00808004 	movi	r2,512
  8064d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8064d8:	e0fffe17 	ldw	r3,-8(fp)
  8064dc:	e0bfff17 	ldw	r2,-4(fp)
  8064e0:	1885883a 	add	r2,r3,r2
  8064e4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8064e8:	e0bffe17 	ldw	r2,-8(fp)
  8064ec:	e0bffd15 	stw	r2,-12(fp)
  8064f0:	00000506 	br	806508 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8064f4:	e0bffd17 	ldw	r2,-12(fp)
  8064f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8064fc:	e0bffd17 	ldw	r2,-12(fp)
  806500:	10800804 	addi	r2,r2,32
  806504:	e0bffd15 	stw	r2,-12(fp)
  806508:	e0fffd17 	ldw	r3,-12(fp)
  80650c:	e0bffc17 	ldw	r2,-16(fp)
  806510:	18bff836 	bltu	r3,r2,8064f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  806514:	e0bffe17 	ldw	r2,-8(fp)
  806518:	108007cc 	andi	r2,r2,31
  80651c:	1005003a 	cmpeq	r2,r2,zero
  806520:	1000021e 	bne	r2,zero,80652c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  806524:	e0bffd17 	ldw	r2,-12(fp)
  806528:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80652c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  806530:	e037883a 	mov	sp,fp
  806534:	df000017 	ldw	fp,0(sp)
  806538:	dec00104 	addi	sp,sp,4
  80653c:	f800283a 	ret

00806540 <atexit>:
  806540:	200b883a 	mov	r5,r4
  806544:	000d883a 	mov	r6,zero
  806548:	0009883a 	mov	r4,zero
  80654c:	000f883a 	mov	r7,zero
  806550:	08067141 	jmpi	806714 <__register_exitproc>

00806554 <exit>:
  806554:	defffe04 	addi	sp,sp,-8
  806558:	000b883a 	mov	r5,zero
  80655c:	dc000015 	stw	r16,0(sp)
  806560:	dfc00115 	stw	ra,4(sp)
  806564:	2021883a 	mov	r16,r4
  806568:	080684c0 	call	80684c <__call_exitprocs>
  80656c:	00802234 	movhi	r2,136
  806570:	1081ed04 	addi	r2,r2,1972
  806574:	11000017 	ldw	r4,0(r2)
  806578:	20800f17 	ldw	r2,60(r4)
  80657c:	10000126 	beq	r2,zero,806584 <exit+0x30>
  806580:	103ee83a 	callr	r2
  806584:	8009883a 	mov	r4,r16
  806588:	0806a3c0 	call	806a3c <_exit>

0080658c <memcmp>:
  80658c:	00c000c4 	movi	r3,3
  806590:	1980032e 	bgeu	r3,r6,8065a0 <memcmp+0x14>
  806594:	2144b03a 	or	r2,r4,r5
  806598:	10c4703a 	and	r2,r2,r3
  80659c:	10000f26 	beq	r2,zero,8065dc <memcmp+0x50>
  8065a0:	31ffffc4 	addi	r7,r6,-1
  8065a4:	3000061e 	bne	r6,zero,8065c0 <memcmp+0x34>
  8065a8:	00000a06 	br	8065d4 <memcmp+0x48>
  8065ac:	39ffffc4 	addi	r7,r7,-1
  8065b0:	00bfffc4 	movi	r2,-1
  8065b4:	21000044 	addi	r4,r4,1
  8065b8:	29400044 	addi	r5,r5,1
  8065bc:	38800526 	beq	r7,r2,8065d4 <memcmp+0x48>
  8065c0:	20c00003 	ldbu	r3,0(r4)
  8065c4:	28800003 	ldbu	r2,0(r5)
  8065c8:	18bff826 	beq	r3,r2,8065ac <memcmp+0x20>
  8065cc:	1885c83a 	sub	r2,r3,r2
  8065d0:	f800283a 	ret
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	f800283a 	ret
  8065dc:	180f883a 	mov	r7,r3
  8065e0:	20c00017 	ldw	r3,0(r4)
  8065e4:	28800017 	ldw	r2,0(r5)
  8065e8:	18bfed1e 	bne	r3,r2,8065a0 <memcmp+0x14>
  8065ec:	31bfff04 	addi	r6,r6,-4
  8065f0:	21000104 	addi	r4,r4,4
  8065f4:	29400104 	addi	r5,r5,4
  8065f8:	39bff936 	bltu	r7,r6,8065e0 <memcmp+0x54>
  8065fc:	003fe806 	br	8065a0 <memcmp+0x14>

00806600 <memcpy>:
  806600:	01c003c4 	movi	r7,15
  806604:	2007883a 	mov	r3,r4
  806608:	3980032e 	bgeu	r7,r6,806618 <memcpy+0x18>
  80660c:	2904b03a 	or	r2,r5,r4
  806610:	108000cc 	andi	r2,r2,3
  806614:	10000926 	beq	r2,zero,80663c <memcpy+0x3c>
  806618:	30000626 	beq	r6,zero,806634 <memcpy+0x34>
  80661c:	30cd883a 	add	r6,r6,r3
  806620:	28800003 	ldbu	r2,0(r5)
  806624:	29400044 	addi	r5,r5,1
  806628:	18800005 	stb	r2,0(r3)
  80662c:	18c00044 	addi	r3,r3,1
  806630:	30fffb1e 	bne	r6,r3,806620 <memcpy+0x20>
  806634:	2005883a 	mov	r2,r4
  806638:	f800283a 	ret
  80663c:	3811883a 	mov	r8,r7
  806640:	200f883a 	mov	r7,r4
  806644:	28c00017 	ldw	r3,0(r5)
  806648:	31bffc04 	addi	r6,r6,-16
  80664c:	38c00015 	stw	r3,0(r7)
  806650:	28800117 	ldw	r2,4(r5)
  806654:	38800115 	stw	r2,4(r7)
  806658:	28c00217 	ldw	r3,8(r5)
  80665c:	38c00215 	stw	r3,8(r7)
  806660:	28800317 	ldw	r2,12(r5)
  806664:	29400404 	addi	r5,r5,16
  806668:	38800315 	stw	r2,12(r7)
  80666c:	39c00404 	addi	r7,r7,16
  806670:	41bff436 	bltu	r8,r6,806644 <memcpy+0x44>
  806674:	008000c4 	movi	r2,3
  806678:	1180072e 	bgeu	r2,r6,806698 <memcpy+0x98>
  80667c:	1007883a 	mov	r3,r2
  806680:	28800017 	ldw	r2,0(r5)
  806684:	31bfff04 	addi	r6,r6,-4
  806688:	29400104 	addi	r5,r5,4
  80668c:	38800015 	stw	r2,0(r7)
  806690:	39c00104 	addi	r7,r7,4
  806694:	19bffa36 	bltu	r3,r6,806680 <memcpy+0x80>
  806698:	3807883a 	mov	r3,r7
  80669c:	003fde06 	br	806618 <memcpy+0x18>

008066a0 <strlen>:
  8066a0:	208000cc 	andi	r2,r4,3
  8066a4:	2011883a 	mov	r8,r4
  8066a8:	1000161e 	bne	r2,zero,806704 <strlen+0x64>
  8066ac:	20c00017 	ldw	r3,0(r4)
  8066b0:	017fbff4 	movhi	r5,65279
  8066b4:	297fbfc4 	addi	r5,r5,-257
  8066b8:	01e02074 	movhi	r7,32897
  8066bc:	39e02004 	addi	r7,r7,-32640
  8066c0:	1945883a 	add	r2,r3,r5
  8066c4:	11c4703a 	and	r2,r2,r7
  8066c8:	00c6303a 	nor	r3,zero,r3
  8066cc:	1886703a 	and	r3,r3,r2
  8066d0:	18000c1e 	bne	r3,zero,806704 <strlen+0x64>
  8066d4:	280d883a 	mov	r6,r5
  8066d8:	380b883a 	mov	r5,r7
  8066dc:	21000104 	addi	r4,r4,4
  8066e0:	20800017 	ldw	r2,0(r4)
  8066e4:	1187883a 	add	r3,r2,r6
  8066e8:	1946703a 	and	r3,r3,r5
  8066ec:	0084303a 	nor	r2,zero,r2
  8066f0:	10c4703a 	and	r2,r2,r3
  8066f4:	103ff926 	beq	r2,zero,8066dc <strlen+0x3c>
  8066f8:	20800007 	ldb	r2,0(r4)
  8066fc:	10000326 	beq	r2,zero,80670c <strlen+0x6c>
  806700:	21000044 	addi	r4,r4,1
  806704:	20800007 	ldb	r2,0(r4)
  806708:	103ffd1e 	bne	r2,zero,806700 <strlen+0x60>
  80670c:	2205c83a 	sub	r2,r4,r8
  806710:	f800283a 	ret

00806714 <__register_exitproc>:
  806714:	defffa04 	addi	sp,sp,-24
  806718:	00802234 	movhi	r2,136
  80671c:	1081ed04 	addi	r2,r2,1972
  806720:	dc000015 	stw	r16,0(sp)
  806724:	14000017 	ldw	r16,0(r2)
  806728:	dd000415 	stw	r20,16(sp)
  80672c:	2829883a 	mov	r20,r5
  806730:	81405217 	ldw	r5,328(r16)
  806734:	dcc00315 	stw	r19,12(sp)
  806738:	dc800215 	stw	r18,8(sp)
  80673c:	dc400115 	stw	r17,4(sp)
  806740:	dfc00515 	stw	ra,20(sp)
  806744:	2023883a 	mov	r17,r4
  806748:	3027883a 	mov	r19,r6
  80674c:	3825883a 	mov	r18,r7
  806750:	28002526 	beq	r5,zero,8067e8 <__register_exitproc+0xd4>
  806754:	29000117 	ldw	r4,4(r5)
  806758:	008007c4 	movi	r2,31
  80675c:	11002716 	blt	r2,r4,8067fc <__register_exitproc+0xe8>
  806760:	8800101e 	bne	r17,zero,8067a4 <__register_exitproc+0x90>
  806764:	2105883a 	add	r2,r4,r4
  806768:	1085883a 	add	r2,r2,r2
  80676c:	20c00044 	addi	r3,r4,1
  806770:	1145883a 	add	r2,r2,r5
  806774:	0009883a 	mov	r4,zero
  806778:	15000215 	stw	r20,8(r2)
  80677c:	28c00115 	stw	r3,4(r5)
  806780:	2005883a 	mov	r2,r4
  806784:	dfc00517 	ldw	ra,20(sp)
  806788:	dd000417 	ldw	r20,16(sp)
  80678c:	dcc00317 	ldw	r19,12(sp)
  806790:	dc800217 	ldw	r18,8(sp)
  806794:	dc400117 	ldw	r17,4(sp)
  806798:	dc000017 	ldw	r16,0(sp)
  80679c:	dec00604 	addi	sp,sp,24
  8067a0:	f800283a 	ret
  8067a4:	29802204 	addi	r6,r5,136
  8067a8:	00800044 	movi	r2,1
  8067ac:	110e983a 	sll	r7,r2,r4
  8067b0:	30c04017 	ldw	r3,256(r6)
  8067b4:	2105883a 	add	r2,r4,r4
  8067b8:	1085883a 	add	r2,r2,r2
  8067bc:	1185883a 	add	r2,r2,r6
  8067c0:	19c6b03a 	or	r3,r3,r7
  8067c4:	14802015 	stw	r18,128(r2)
  8067c8:	14c00015 	stw	r19,0(r2)
  8067cc:	00800084 	movi	r2,2
  8067d0:	30c04015 	stw	r3,256(r6)
  8067d4:	88bfe31e 	bne	r17,r2,806764 <__register_exitproc+0x50>
  8067d8:	30804117 	ldw	r2,260(r6)
  8067dc:	11c4b03a 	or	r2,r2,r7
  8067e0:	30804115 	stw	r2,260(r6)
  8067e4:	003fdf06 	br	806764 <__register_exitproc+0x50>
  8067e8:	00802274 	movhi	r2,137
  8067ec:	108dc204 	addi	r2,r2,14088
  8067f0:	100b883a 	mov	r5,r2
  8067f4:	80805215 	stw	r2,328(r16)
  8067f8:	003fd606 	br	806754 <__register_exitproc+0x40>
  8067fc:	00800034 	movhi	r2,0
  806800:	10800004 	addi	r2,r2,0
  806804:	1000021e 	bne	r2,zero,806810 <__register_exitproc+0xfc>
  806808:	013fffc4 	movi	r4,-1
  80680c:	003fdc06 	br	806780 <__register_exitproc+0x6c>
  806810:	01006404 	movi	r4,400
  806814:	103ee83a 	callr	r2
  806818:	1007883a 	mov	r3,r2
  80681c:	103ffa26 	beq	r2,zero,806808 <__register_exitproc+0xf4>
  806820:	80805217 	ldw	r2,328(r16)
  806824:	180b883a 	mov	r5,r3
  806828:	18000115 	stw	zero,4(r3)
  80682c:	18800015 	stw	r2,0(r3)
  806830:	80c05215 	stw	r3,328(r16)
  806834:	18006215 	stw	zero,392(r3)
  806838:	18006315 	stw	zero,396(r3)
  80683c:	0009883a 	mov	r4,zero
  806840:	883fc826 	beq	r17,zero,806764 <__register_exitproc+0x50>
  806844:	003fd706 	br	8067a4 <__register_exitproc+0x90>

00806848 <register_fini>:
  806848:	f800283a 	ret

0080684c <__call_exitprocs>:
  80684c:	00802234 	movhi	r2,136
  806850:	1081ed04 	addi	r2,r2,1972
  806854:	10800017 	ldw	r2,0(r2)
  806858:	defff304 	addi	sp,sp,-52
  80685c:	df000b15 	stw	fp,44(sp)
  806860:	d8800115 	stw	r2,4(sp)
  806864:	00800034 	movhi	r2,0
  806868:	10800004 	addi	r2,r2,0
  80686c:	1005003a 	cmpeq	r2,r2,zero
  806870:	d8800215 	stw	r2,8(sp)
  806874:	d8800117 	ldw	r2,4(sp)
  806878:	dd400815 	stw	r21,32(sp)
  80687c:	dd000715 	stw	r20,28(sp)
  806880:	10805204 	addi	r2,r2,328
  806884:	dfc00c15 	stw	ra,48(sp)
  806888:	ddc00a15 	stw	r23,40(sp)
  80688c:	dd800915 	stw	r22,36(sp)
  806890:	dcc00615 	stw	r19,24(sp)
  806894:	dc800515 	stw	r18,20(sp)
  806898:	dc400415 	stw	r17,16(sp)
  80689c:	dc000315 	stw	r16,12(sp)
  8068a0:	282b883a 	mov	r21,r5
  8068a4:	2039883a 	mov	fp,r4
  8068a8:	d8800015 	stw	r2,0(sp)
  8068ac:	2829003a 	cmpeq	r20,r5,zero
  8068b0:	d8800117 	ldw	r2,4(sp)
  8068b4:	14405217 	ldw	r17,328(r2)
  8068b8:	88001026 	beq	r17,zero,8068fc <__call_exitprocs+0xb0>
  8068bc:	ddc00017 	ldw	r23,0(sp)
  8068c0:	88800117 	ldw	r2,4(r17)
  8068c4:	8c802204 	addi	r18,r17,136
  8068c8:	143fffc4 	addi	r16,r2,-1
  8068cc:	80000916 	blt	r16,zero,8068f4 <__call_exitprocs+0xa8>
  8068d0:	05bfffc4 	movi	r22,-1
  8068d4:	a000151e 	bne	r20,zero,80692c <__call_exitprocs+0xe0>
  8068d8:	8409883a 	add	r4,r16,r16
  8068dc:	2105883a 	add	r2,r4,r4
  8068e0:	1485883a 	add	r2,r2,r18
  8068e4:	10c02017 	ldw	r3,128(r2)
  8068e8:	a8c01126 	beq	r21,r3,806930 <__call_exitprocs+0xe4>
  8068ec:	843fffc4 	addi	r16,r16,-1
  8068f0:	85bff81e 	bne	r16,r22,8068d4 <__call_exitprocs+0x88>
  8068f4:	d8800217 	ldw	r2,8(sp)
  8068f8:	10003126 	beq	r2,zero,8069c0 <__call_exitprocs+0x174>
  8068fc:	dfc00c17 	ldw	ra,48(sp)
  806900:	df000b17 	ldw	fp,44(sp)
  806904:	ddc00a17 	ldw	r23,40(sp)
  806908:	dd800917 	ldw	r22,36(sp)
  80690c:	dd400817 	ldw	r21,32(sp)
  806910:	dd000717 	ldw	r20,28(sp)
  806914:	dcc00617 	ldw	r19,24(sp)
  806918:	dc800517 	ldw	r18,20(sp)
  80691c:	dc400417 	ldw	r17,16(sp)
  806920:	dc000317 	ldw	r16,12(sp)
  806924:	dec00d04 	addi	sp,sp,52
  806928:	f800283a 	ret
  80692c:	8409883a 	add	r4,r16,r16
  806930:	88c00117 	ldw	r3,4(r17)
  806934:	2105883a 	add	r2,r4,r4
  806938:	1445883a 	add	r2,r2,r17
  80693c:	18ffffc4 	addi	r3,r3,-1
  806940:	11800217 	ldw	r6,8(r2)
  806944:	1c001526 	beq	r3,r16,80699c <__call_exitprocs+0x150>
  806948:	10000215 	stw	zero,8(r2)
  80694c:	303fe726 	beq	r6,zero,8068ec <__call_exitprocs+0xa0>
  806950:	00c00044 	movi	r3,1
  806954:	1c06983a 	sll	r3,r3,r16
  806958:	90804017 	ldw	r2,256(r18)
  80695c:	8cc00117 	ldw	r19,4(r17)
  806960:	1884703a 	and	r2,r3,r2
  806964:	10001426 	beq	r2,zero,8069b8 <__call_exitprocs+0x16c>
  806968:	90804117 	ldw	r2,260(r18)
  80696c:	1884703a 	and	r2,r3,r2
  806970:	10000c1e 	bne	r2,zero,8069a4 <__call_exitprocs+0x158>
  806974:	2105883a 	add	r2,r4,r4
  806978:	1485883a 	add	r2,r2,r18
  80697c:	11400017 	ldw	r5,0(r2)
  806980:	e009883a 	mov	r4,fp
  806984:	303ee83a 	callr	r6
  806988:	88800117 	ldw	r2,4(r17)
  80698c:	98bfc81e 	bne	r19,r2,8068b0 <__call_exitprocs+0x64>
  806990:	b8800017 	ldw	r2,0(r23)
  806994:	147fd526 	beq	r2,r17,8068ec <__call_exitprocs+0xa0>
  806998:	003fc506 	br	8068b0 <__call_exitprocs+0x64>
  80699c:	8c000115 	stw	r16,4(r17)
  8069a0:	003fea06 	br	80694c <__call_exitprocs+0x100>
  8069a4:	2105883a 	add	r2,r4,r4
  8069a8:	1485883a 	add	r2,r2,r18
  8069ac:	11000017 	ldw	r4,0(r2)
  8069b0:	303ee83a 	callr	r6
  8069b4:	003ff406 	br	806988 <__call_exitprocs+0x13c>
  8069b8:	303ee83a 	callr	r6
  8069bc:	003ff206 	br	806988 <__call_exitprocs+0x13c>
  8069c0:	88800117 	ldw	r2,4(r17)
  8069c4:	1000081e 	bne	r2,zero,8069e8 <__call_exitprocs+0x19c>
  8069c8:	89000017 	ldw	r4,0(r17)
  8069cc:	20000726 	beq	r4,zero,8069ec <__call_exitprocs+0x1a0>
  8069d0:	b9000015 	stw	r4,0(r23)
  8069d4:	8809883a 	mov	r4,r17
  8069d8:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  8069dc:	bc400017 	ldw	r17,0(r23)
  8069e0:	883fb71e 	bne	r17,zero,8068c0 <__call_exitprocs+0x74>
  8069e4:	003fc506 	br	8068fc <__call_exitprocs+0xb0>
  8069e8:	89000017 	ldw	r4,0(r17)
  8069ec:	882f883a 	mov	r23,r17
  8069f0:	2023883a 	mov	r17,r4
  8069f4:	883fb21e 	bne	r17,zero,8068c0 <__call_exitprocs+0x74>
  8069f8:	003fc006 	br	8068fc <__call_exitprocs+0xb0>

008069fc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8069fc:	defffd04 	addi	sp,sp,-12
  806a00:	df000215 	stw	fp,8(sp)
  806a04:	df000204 	addi	fp,sp,8
  806a08:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  806a0c:	e0bfff17 	ldw	r2,-4(fp)
  806a10:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806a14:	e0bffe17 	ldw	r2,-8(fp)
  806a18:	1005003a 	cmpeq	r2,r2,zero
  806a1c:	1000021e 	bne	r2,zero,806a28 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  806a20:	002af070 	cmpltui	zero,zero,43969
  806a24:	00000106 	br	806a2c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  806a28:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  806a2c:	e037883a 	mov	sp,fp
  806a30:	df000017 	ldw	fp,0(sp)
  806a34:	dec00104 	addi	sp,sp,4
  806a38:	f800283a 	ret

00806a3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806a3c:	defffd04 	addi	sp,sp,-12
  806a40:	dfc00215 	stw	ra,8(sp)
  806a44:	df000115 	stw	fp,4(sp)
  806a48:	df000104 	addi	fp,sp,4
  806a4c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  806a50:	e13fff17 	ldw	r4,-4(fp)
  806a54:	08069fc0 	call	8069fc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806a58:	003fff06 	br	806a58 <_exit+0x1c>
  806a5c:	00806848 	cmpgei	r2,zero,417
