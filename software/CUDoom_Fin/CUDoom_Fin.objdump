
CUDoom_Fin.elf:     file format elf32-littlenios2
CUDoom_Fin.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00087764 memsz 0x00087764 flags r-x
    LOAD off    0x00088784 vaddr 0x00887784 paddr 0x00889420 align 2**12
         filesz 0x00001c9c memsz 0x00001c9c flags rw-
    LOAD off    0x0008b0bc vaddr 0x0088b0bc paddr 0x0088b0bc align 2**12
         filesz 0x00000000 memsz 0x0000f06c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f0ac  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00078524  0080f260  0080f260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c9c  00887784  00889420  00088784  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f06c  0088b0bc  0088b0bc  0008b0bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0008a420  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  0008a448  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014bc  00000000  00000000  0008b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002350c  00000000  00000000  0008c67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007ee0  00000000  00000000  000afb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000159d6  00000000  00000000  000b7a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019f4  00000000  00000000  000cd440  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002504  00000000  00000000  000cee34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d484  00000000  00000000  000d1338  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000de7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a20  00000000  00000000  000de7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000e22e5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000e22e8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000e22ed  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000e22ee  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000e22f9  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  000e2304  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  000e230f  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000034  00000000  00000000  000e2317  2**0
                  CONTENTS, READONLY
 25 .jdi          000040c8  00000000  00000000  000e234b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002ec76  00000000  00000000  000e6413  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080f260 l    d  .rodata	00000000 .rodata
00887784 l    d  .rwdata	00000000 .rwdata
0088b0bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
008872ec l     O .rodata	00000108 two_over_pi
0088726c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
008873f4 l     O .rodata	00000010 init_jk
00887404 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
00803258 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00803e88 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804678 l     F .text	00000058 __sprint_r
008875c6 l     O .rodata	00000010 blanks.3452
008875b6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008066dc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008080d8 l     F .text	00000058 std
008081e4 l     F .text	00000008 __fp_lock
008081ec l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008879c4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
008893ec l     O .rwdata	00000004 charset
008875fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00887744 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080c9e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ca44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080cb44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080cc64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080cd44 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cea0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080d0cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00889410 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d368 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00888380 l     O .rwdata	00001060 jtag_uart_0
0080d440 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d680 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080d8a8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080e170 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e594 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e6d0 l     F .text	000000dc alt_file_locked
0080e934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080f048 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080f1fc l     F .text	00000040 alt_sim_halt
00809e94 g     F .text	00000094 _mprec_log10
00809f80 g     F .text	00000088 __any_on
0080b700 g     F .text	00000070 _isatty_r
0088771c g     O .rodata	00000028 __mprec_tinytens
0080cf00 g     F .text	0000006c alt_main
00899e98 g     O .bss	00000100 alt_irq
00802e18 g     F .text	00000018 fabs
0080b770 g     F .text	00000078 _lseek_r
00889420 g       *ABS*	00000000 __flash_rwdata_start
00803b20 g     F .text	00000088 __eqdf2
0089a128 g       *ABS*	00000000 __alt_heap_start
00804600 g     F .text	00000044 printf
0080b158 g     F .text	00000068 __sseek
00808140 g     F .text	000000a4 __sinit
00808e18 g     F .text	00000084 _setlocale_r
00808240 g     F .text	00000068 __sfmoreglue
0088b118 g     O .bss	00003660 dirsine
0080cf8c g     F .text	00000020 __malloc_unlock
00800aa0 g     F .text	000000f8 DrawTexture
00809910 g     F .text	000000e0 memmove
00808230 g     F .text	00000010 _cleanup
0080f260 g     O .rodata	00078000 sky
0080a008 g     F .text	000000bc _Balloc
00803ba8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080b68c g     F .text	00000074 _fstat_r
0088b0d4 g     O .bss	00000004 errno
00802e30 g     F .text	00000224 floor
0088b0dc g     O .bss	00000004 alt_argv
008913e0 g       *ABS*	00000000 _gp
00888200 g     O .rwdata	00000180 alt_fd_list
00800f30 g     F .text	00000828 __ieee754_rem_pio2
0080eb58 g     F .text	00000094 alt_find_dev
00809870 g     F .text	000000a0 memcpy
00887784 g     O .rwdata	00000240 worldMap
00808224 g     F .text	0000000c _cleanup_r
00803cb8 g     F .text	000000f8 __floatsidf
0080e658 g     F .text	00000078 alt_io_redirect
0080c6cc g     F .text	00000088 __ltdf2
0080f260 g       *ABS*	00000000 __DTOR_END__
00800a1c g     F .text	00000028 intToDouble
0080eb38 g     F .text	00000020 altera_nios2_irq_init
00809de4 g     F .text	000000b0 __ratio
0080dac0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804644 g     F .text	00000034 _printf_r
00803fc4 g     F .text	00000008 __udivsi3
0080cba4 g     F .text	000000c0 isatty
0088762c g     O .rodata	000000c8 __mprec_tens
00808df4 g     F .text	00000008 __locale_charset
00801758 g     F .text	0000052c __kernel_cos
0080edc4 g     F .text	00000090 alt_icache_flush
0088b0c8 g     O .bss	00000004 __malloc_top_pad
008893e8 g     O .rwdata	00000004 __mb_cur_max
00808dfc g     F .text	0000000c _localeconv_r
0080a700 g     F .text	0000003c __i2b
008087d8 g     F .text	0000049c __sfvwrite_r
0080b0e0 g     F .text	00000070 _sbrk_r
0080b7e8 g     F .text	00000078 _read_r
00887dc4 g     O .rwdata	0000000c __lc_ctype
00889408 g     O .rwdata	00000004 alt_max_fd
00804400 g     F .text	00000138 __unpack_d
0080b568 g     F .text	00000110 _fclose_r
008080a4 g     F .text	00000034 fflush
0088b0cc g     O .bss	00000004 __malloc_max_sbrked_mem
00802b00 g     F .text	00000318 __kernel_sin
008036e8 g     F .text	00000074 __adddf3
00809cc4 g     F .text	00000120 __b2d
0080be3c g     F .text	000005b0 __umoddi3
0080cdb0 g     F .text	000000f0 lseek
008893e4 g     O .rwdata	00000004 _global_impure_ptr
0080aa7c g     F .text	000005f4 _realloc_r
0089a128 g       *ABS*	00000000 __bss_end
0080e49c g     F .text	000000f8 alt_iic_isr_register
0080ea2c g     F .text	0000010c alt_tick
0080b860 g     F .text	000005dc __udivdi3
008876f4 g     O .rodata	00000028 __mprec_bigtens
0080a95c g     F .text	00000120 __s2b
0080c754 g     F .text	00000194 __floatunsidf
00809be4 g     F .text	00000060 __mcmp
0080820c g     F .text	00000018 __fp_lock_all
0080e454 g     F .text	00000048 alt_ic_irq_enabled
0080e994 g     F .text	00000098 alt_alarm_stop
0088b0e4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
008881d8 g     O .rwdata	00000028 alt_dev_null
00801c84 g     F .text	00000e7c __kernel_rem_pio2
0080e078 g     F .text	00000044 alt_dcache_flush_all
00809ab0 g     F .text	00000070 __hi0bits
00803db0 g     F .text	000000d8 __fixdfsi
00889420 g       *ABS*	00000000 __ram_rwdata_end
0088e778 g     O .bss	00003660 sine
00889400 g     O .rwdata	00000008 alt_dev_list
0080d248 g     F .text	00000120 write
00887784 g       *ABS*	00000000 __ram_rodata_end
0080ca70 g     F .text	000000d4 fstat
0080a83c g     F .text	00000120 __pow5mult
0088b0bc g     O .bss	00000004 __nlocale_changed
00803fcc g     F .text	00000008 __umodsi3
0089a128 g       *ABS*	00000000 end
0080d5c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080f25c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080406c g     F .text	00000080 __clzsi2
0080dce4 g     F .text	00000240 altera_avalon_jtag_uart_write
00800c5c g     F .text	00000168 cos
00808130 g     F .text	00000004 __sfp_lock_acquire
0080978c g     F .text	000000e4 memchr
008046d0 g     F .text	00001eac ___vfprintf_internal_r
008084c4 g     F .text	00000314 _free_r
0080f04c g     F .text	000001b0 __call_exitprocs
0088b0c0 g     O .bss	00000004 __mlocale_changed
008893f4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0088b0e8 g     O .bss	00000004 _alt_tick_rate
00800dc4 g     F .text	0000016c sin
0080a3cc g     F .text	0000014c __lshift
0088b0ec g     O .bss	00000004 _alt_nticks
0080cfac g     F .text	00000120 read
0080d3fc g     F .text	00000044 alt_sys_init
0080ef14 g     F .text	00000134 __register_exitproc
0080a518 g     F .text	000001e8 __multiply
0080d958 g     F .text	00000074 altera_avalon_jtag_uart_close
00891dd8 g     O .bss	00003660 cosine
00887784 g       *ABS*	00000000 __ram_rwdata_start
0080f260 g       *ABS*	00000000 __ram_rodata_start
0088b0f0 g     O .bss	00000028 __malloc_current_mallinfo
0080a0c4 g     F .text	0000017c __d2b
0080d478 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080ed0c g     F .text	000000b8 alt_get_fd
00804538 g     F .text	000000c8 __fpcmp_parts_d
0080b4f8 g     F .text	00000070 _close_r
0080eea0 g     F .text	00000074 memcmp
0080d528 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0089a128 g       *ABS*	00000000 __alt_stack_base
0080d570 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008065a0 g     F .text	0000013c __swsetup_r
0080c3ec g     F .text	00000258 __divdf3
008082a8 g     F .text	000000f0 __sfp
00809f28 g     F .text	00000058 __copybits
00887dd0 g     O .rwdata	00000408 __malloc_av_
0080813c g     F .text	00000004 __sinit_lock_release
0080375c g     F .text	000003c4 __muldf3
0080b23c g     F .text	00000060 __sread
0080ebec g     F .text	00000120 alt_find_file
0080e0bc g     F .text	000000b4 alt_dev_llist_insert
0080cf6c g     F .text	00000020 __malloc_lock
0080d18c g     F .text	000000bc sbrk
00807ea8 g     F .text	000001fc _fflush_r
0080b444 g     F .text	000000b4 _calloc_r
0088b0bc g       *ABS*	00000000 __bss_start
008099f0 g     F .text	00000098 memset
00800200 g     F .text	000007e0 main
0088b0e0 g     O .bss	00000004 alt_envp
0088b0d0 g     O .bss	00000004 __malloc_max_total_mem
0080d4d0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080b150 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080b678 g     F .text	00000014 fclose
00899f98 g     O .bss	00000190 _atexit0
008068f4 g     F .text	000015b4 _dtoa_r
0080904c g     F .text	00000740 _malloc_r
0088940c g     O .rwdata	00000004 alt_errno
00808d3c g     F .text	000000b8 _fwalk
00803f04 g     F .text	00000060 __divsi3
00887444 g     O .rodata	00000014 __thenan_df
00808398 g     F .text	0000012c _malloc_trim_r
0080f260 g       *ABS*	00000000 __CTOR_END__
0080b29c g     F .text	000000bc strcmp
0080f260 g       *ABS*	00000000 __flash_rodata_start
0080f260 g       *ABS*	00000000 __DTOR_LIST__
00803234 g     F .text	00000024 copysign
0080c644 g     F .text	00000088 __nedf2
0080d3c8 g     F .text	00000034 alt_irq_init
0080d12c g     F .text	00000060 alt_release_fd
00887458 g     O .rodata	00000100 __clz_tab
0088b0c4 g     O .bss	00000004 _PathLocale
0080ee54 g     F .text	00000014 atexit
0080b3cc g     F .text	00000078 _write_r
00808e9c g     F .text	0000001c setlocale
008893e0 g     O .rwdata	00000004 _impure_ptr
0088b0d8 g     O .bss	00000004 alt_argc
00803054 g     F .text	000001e0 scalbn
0080e234 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00809c44 g     F .text	00000080 __ulp
0080b070 g     F .text	00000040 __isinfd
008009e0 g     F .text	0000003c absVal
008081f4 g     F .text	00000018 __fp_unlock_all
008893f8 g     O .rwdata	00000008 alt_fs_list
00800a44 g     F .text	0000005c doubleToInt
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808e08 g     F .text	00000010 localeconv
0080e2c8 g     F .text	00000050 alt_ic_isr_register
00889420 g       *ABS*	00000000 _edata
0089a128 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080d9cc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00895438 g     O .bss	00000a00 stoparray
0080e3b4 g     F .text	000000a0 alt_ic_irq_disable
0080b1c0 g     F .text	0000007c __swrite
008893f0 g     O .rwdata	00000004 __malloc_trim_threshold
0080ee68 g     F .text	00000038 exit
00808c74 g     F .text	000000c8 _fwalk_reent
0080a240 g     F .text	0000018c __mdiff
00803f64 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00808134 g     F .text	00000004 __sfp_lock_release
0080f23c g     F .text	00000020 _exit
0080b0b0 g     F .text	00000030 __isnand
0080df24 g     F .text	00000154 alt_alarm_start
00803fd4 g     F .text	00000098 __muldi3
00808eb8 g     F .text	00000194 __smakebuf_r
0080b358 g     F .text	00000074 strlen
0080e7ac g     F .text	00000188 open
00803c30 g     F .text	00000088 __gedf2
0080e298 g     F .text	00000030 alt_icache_flush_all
00889414 g     O .rwdata	00000004 alt_priority_mask
0080e318 g     F .text	0000009c alt_ic_irq_enable
0080657c g     F .text	00000024 __vfprintf_internal
00803668 g     F .text	00000080 __subdf3
00800b98 g     F .text	000000c4 DrawAccelerate
00809b20 g     F .text	000000c4 __lo0bits
00889418 g     O .rwdata	00000008 alt_alarm_list
0080e1d0 g     F .text	00000064 _do_ctors
00895e38 g     O .bss	00000a00 startarray
0080c8e8 g     F .text	000000fc close
0080ccc4 g     F .text	00000080 alt_load
008040ec g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00896838 g     O .bss	00003660 dircosine
00808138 g     F .text	00000004 __sinit_lock_acquire
0080a73c g     F .text	00000100 __multadd
00809a88 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c022b4 	movhi	r3,138
  800134:	18e7a604 	addi	r3,r3,-24936
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c022b4 	movhi	r3,138
  80014c:	18e7a604 	addi	r3,r3,-24936
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802274 	movhi	gp,137
    ori gp, gp, %lo(_gp)
  8001d0:	d684f814 	ori	gp,gp,5088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802234 	movhi	r2,136
    ori r2, r2, %lo(__bss_start)
  8001d8:	10ac2f14 	ori	r2,r2,45244

    movhi r3, %hi(__bss_end)
  8001dc:	00c02274 	movhi	r3,137
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e84a14 	ori	r3,r3,41256

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080ccc40 	call	80ccc4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080cf000 	call	80cf00 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <main>:
int cosine[lookupLength];
//int inv_sine[lookupLength];
//int inv_cosine[lookupLength];

int main()
{
  800200:	deffe604 	addi	sp,sp,-104
  800204:	dfc01915 	stw	ra,100(sp)
  800208:	df001815 	stw	fp,96(sp)
  80020c:	dc001715 	stw	r16,92(sp)
  800210:	df001704 	addi	fp,sp,92

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800214:	00804234 	movhi	r2,264
  800218:	10840004 	addi	r2,r2,4096
  80021c:	10000035 	stwio	zero,0(r2)
	int dir = 0;
  800220:	e03fff15 	stw	zero,-4(fp)
	int posX = doubleToInt(22.0), posY = doubleToInt(11.5);  //x and y start position
  800224:	0009883a 	mov	r4,zero
  800228:	01500db4 	movhi	r5,16438
  80022c:	0800a440 	call	800a44 <doubleToInt>
  800230:	e0bffe15 	stw	r2,-8(fp)
  800234:	0009883a 	mov	r4,zero
  800238:	015009f4 	movhi	r5,16423
  80023c:	0800a440 	call	800a44 <doubleToInt>
  800240:	e0bffd15 	stw	r2,-12(fp)
 // int posX = 22, posY = 11;  //x and y start position
  int x =0;
  800244:	e03ffc15 	stw	zero,-16(fp)

  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);
  800248:	00804234 	movhi	r2,264
  80024c:	10bfff84 	addi	r2,r2,-2
  800250:	1000002d 	sthio	zero,0(r2)

  for(p = 0; p < 480; p++){
  800254:	e03ffb15 	stw	zero,-20(fp)
  800258:	00002d06 	br	800310 <main+0x110>
	  for(q = 0; q < 512; q++)
  80025c:	e03ffa15 	stw	zero,-24(fp)
  800260:	00002506 	br	8002f8 <main+0xf8>
	  {

		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));
  800264:	e0bffb17 	ldw	r2,-20(fp)
  800268:	1006927a 	slli	r3,r2,9
  80026c:	e0bffa17 	ldw	r2,-24(fp)
  800270:	1885883a 	add	r2,r3,r2
  800274:	1085883a 	add	r2,r2,r2
  800278:	1007883a 	mov	r3,r2
  80027c:	00804034 	movhi	r2,256
  800280:	1889883a 	add	r4,r3,r2
  800284:	e0bffb17 	ldw	r2,-20(fp)
  800288:	1006927a 	slli	r3,r2,9
  80028c:	e0bffa17 	ldw	r2,-24(fp)
  800290:	1885883a 	add	r2,r3,r2
  800294:	1085883a 	add	r2,r2,r2
  800298:	10c00044 	addi	r3,r2,1
  80029c:	00802074 	movhi	r2,129
  8002a0:	10bc9804 	addi	r2,r2,-3488
  8002a4:	10c5883a 	add	r2,r2,r3
  8002a8:	10800003 	ldbu	r2,0(r2)
  8002ac:	10803fcc 	andi	r2,r2,255
  8002b0:	100a923a 	slli	r5,r2,8
  8002b4:	e0bffb17 	ldw	r2,-20(fp)
  8002b8:	1006927a 	slli	r3,r2,9
  8002bc:	e0bffa17 	ldw	r2,-24(fp)
  8002c0:	1885883a 	add	r2,r3,r2
  8002c4:	1085883a 	add	r2,r2,r2
  8002c8:	1007883a 	mov	r3,r2
  8002cc:	00802074 	movhi	r2,129
  8002d0:	10bc9804 	addi	r2,r2,-3488
  8002d4:	10c5883a 	add	r2,r2,r3
  8002d8:	10800003 	ldbu	r2,0(r2)
  8002dc:	10803fcc 	andi	r2,r2,255
  8002e0:	2887883a 	add	r3,r5,r2
  8002e4:	2005883a 	mov	r2,r4
  8002e8:	10c0002d 	sthio	r3,0(r2)


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
	  for(q = 0; q < 512; q++)
  8002ec:	e0bffa17 	ldw	r2,-24(fp)
  8002f0:	10800044 	addi	r2,r2,1
  8002f4:	e0bffa15 	stw	r2,-24(fp)
  8002f8:	e0bffa17 	ldw	r2,-24(fp)
  8002fc:	10808010 	cmplti	r2,r2,512
  800300:	103fd81e 	bne	r2,zero,800264 <main+0x64>
  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
  800304:	e0bffb17 	ldw	r2,-20(fp)
  800308:	10800044 	addi	r2,r2,1
  80030c:	e0bffb15 	stw	r2,-20(fp)
  800310:	e0bffb17 	ldw	r2,-20(fp)
  800314:	10807810 	cmplti	r2,r2,480
  800318:	103fd01e 	bne	r2,zero,80025c <main+0x5c>
		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));

	  }
  }

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  80031c:	00c04234 	movhi	r3,264
  800320:	18ffff84 	addi	r3,r3,-2
  800324:	008003c4 	movi	r2,15
  800328:	1880002d 	sthio	r2,0(r3)
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  80032c:	e03ffc15 	stw	zero,-16(fp)
  800330:	00009906 	br	800598 <main+0x398>
	{
			//calculate ray position and direction

		sine_temp = sin(x*RAD + HALF_RAD);
  800334:	e13ffc17 	ldw	r4,-16(fp)
  800338:	0803cb80 	call	803cb8 <__floatsidf>
  80033c:	100b883a 	mov	r5,r2
  800340:	180d883a 	mov	r6,r3
  800344:	2809883a 	mov	r4,r5
  800348:	300b883a 	mov	r5,r6
  80034c:	01b5ed74 	movhi	r6,55221
  800350:	31b85344 	addi	r6,r6,-7859
  800354:	01cfd7b4 	movhi	r7,16222
  800358:	39e53784 	addi	r7,r7,-27426
  80035c:	080375c0 	call	80375c <__muldf3>
  800360:	1009883a 	mov	r4,r2
  800364:	180b883a 	mov	r5,r3
  800368:	2005883a 	mov	r2,r4
  80036c:	2807883a 	mov	r3,r5
  800370:	1009883a 	mov	r4,r2
  800374:	180b883a 	mov	r5,r3
  800378:	01b5ed74 	movhi	r6,55221
  80037c:	31b85344 	addi	r6,r6,-7859
  800380:	01cfd3b4 	movhi	r7,16206
  800384:	39e53784 	addi	r7,r7,-27426
  800388:	08036e80 	call	8036e8 <__adddf3>
  80038c:	1009883a 	mov	r4,r2
  800390:	180b883a 	mov	r5,r3
  800394:	2005883a 	mov	r2,r4
  800398:	2807883a 	mov	r3,r5
  80039c:	1009883a 	mov	r4,r2
  8003a0:	180b883a 	mov	r5,r3
  8003a4:	0800dc40 	call	800dc4 <sin>
  8003a8:	1009883a 	mov	r4,r2
  8003ac:	180b883a 	mov	r5,r3
  8003b0:	e13ff815 	stw	r4,-32(fp)
  8003b4:	e17ff915 	stw	r5,-28(fp)
		cosine_temp = cos(x*RAD + HALF_RAD);
  8003b8:	e13ffc17 	ldw	r4,-16(fp)
  8003bc:	0803cb80 	call	803cb8 <__floatsidf>
  8003c0:	100b883a 	mov	r5,r2
  8003c4:	180d883a 	mov	r6,r3
  8003c8:	2809883a 	mov	r4,r5
  8003cc:	300b883a 	mov	r5,r6
  8003d0:	01b5ed74 	movhi	r6,55221
  8003d4:	31b85344 	addi	r6,r6,-7859
  8003d8:	01cfd7b4 	movhi	r7,16222
  8003dc:	39e53784 	addi	r7,r7,-27426
  8003e0:	080375c0 	call	80375c <__muldf3>
  8003e4:	1009883a 	mov	r4,r2
  8003e8:	180b883a 	mov	r5,r3
  8003ec:	2005883a 	mov	r2,r4
  8003f0:	2807883a 	mov	r3,r5
  8003f4:	1009883a 	mov	r4,r2
  8003f8:	180b883a 	mov	r5,r3
  8003fc:	01b5ed74 	movhi	r6,55221
  800400:	31b85344 	addi	r6,r6,-7859
  800404:	01cfd3b4 	movhi	r7,16206
  800408:	39e53784 	addi	r7,r7,-27426
  80040c:	08036e80 	call	8036e8 <__adddf3>
  800410:	1009883a 	mov	r4,r2
  800414:	180b883a 	mov	r5,r3
  800418:	2005883a 	mov	r2,r4
  80041c:	2807883a 	mov	r3,r5
  800420:	1009883a 	mov	r4,r2
  800424:	180b883a 	mov	r5,r3
  800428:	0800c5c0 	call	800c5c <cos>
  80042c:	1009883a 	mov	r4,r2
  800430:	180b883a 	mov	r5,r3
  800434:	e13ff615 	stw	r4,-40(fp)
  800438:	e17ff715 	stw	r5,-36(fp)

		dirsine[x] = doubleToInt(sin(x*RAD));
  80043c:	e43ffc17 	ldw	r16,-16(fp)
  800440:	e13ffc17 	ldw	r4,-16(fp)
  800444:	0803cb80 	call	803cb8 <__floatsidf>
  800448:	100b883a 	mov	r5,r2
  80044c:	180d883a 	mov	r6,r3
  800450:	2809883a 	mov	r4,r5
  800454:	300b883a 	mov	r5,r6
  800458:	01b5ed74 	movhi	r6,55221
  80045c:	31b85344 	addi	r6,r6,-7859
  800460:	01cfd7b4 	movhi	r7,16222
  800464:	39e53784 	addi	r7,r7,-27426
  800468:	080375c0 	call	80375c <__muldf3>
  80046c:	1009883a 	mov	r4,r2
  800470:	180b883a 	mov	r5,r3
  800474:	2005883a 	mov	r2,r4
  800478:	2807883a 	mov	r3,r5
  80047c:	1009883a 	mov	r4,r2
  800480:	180b883a 	mov	r5,r3
  800484:	0800dc40 	call	800dc4 <sin>
  800488:	100b883a 	mov	r5,r2
  80048c:	180d883a 	mov	r6,r3
  800490:	2809883a 	mov	r4,r5
  800494:	300b883a 	mov	r5,r6
  800498:	0800a440 	call	800a44 <doubleToInt>
  80049c:	1009883a 	mov	r4,r2
  8004a0:	00c02274 	movhi	r3,137
  8004a4:	18ec4604 	addi	r3,r3,-20200
  8004a8:	8405883a 	add	r2,r16,r16
  8004ac:	1085883a 	add	r2,r2,r2
  8004b0:	10c5883a 	add	r2,r2,r3
  8004b4:	11000015 	stw	r4,0(r2)
		dircosine[x] = doubleToInt(cos(x*RAD));
  8004b8:	e43ffc17 	ldw	r16,-16(fp)
  8004bc:	e13ffc17 	ldw	r4,-16(fp)
  8004c0:	0803cb80 	call	803cb8 <__floatsidf>
  8004c4:	100b883a 	mov	r5,r2
  8004c8:	180d883a 	mov	r6,r3
  8004cc:	2809883a 	mov	r4,r5
  8004d0:	300b883a 	mov	r5,r6
  8004d4:	01b5ed74 	movhi	r6,55221
  8004d8:	31b85344 	addi	r6,r6,-7859
  8004dc:	01cfd7b4 	movhi	r7,16222
  8004e0:	39e53784 	addi	r7,r7,-27426
  8004e4:	080375c0 	call	80375c <__muldf3>
  8004e8:	1009883a 	mov	r4,r2
  8004ec:	180b883a 	mov	r5,r3
  8004f0:	2005883a 	mov	r2,r4
  8004f4:	2807883a 	mov	r3,r5
  8004f8:	1009883a 	mov	r4,r2
  8004fc:	180b883a 	mov	r5,r3
  800500:	0800c5c0 	call	800c5c <cos>
  800504:	100b883a 	mov	r5,r2
  800508:	180d883a 	mov	r6,r3
  80050c:	2809883a 	mov	r4,r5
  800510:	300b883a 	mov	r5,r6
  800514:	0800a440 	call	800a44 <doubleToInt>
  800518:	1009883a 	mov	r4,r2
  80051c:	00c02274 	movhi	r3,137
  800520:	18da0e04 	addi	r3,r3,26680
  800524:	8405883a 	add	r2,r16,r16
  800528:	1085883a 	add	r2,r2,r2
  80052c:	10c5883a 	add	r2,r2,r3
  800530:	11000015 	stw	r4,0(r2)
		sine[x] = doubleToInt(sine_temp);
  800534:	e43ffc17 	ldw	r16,-16(fp)
  800538:	e13ff817 	ldw	r4,-32(fp)
  80053c:	e17ff917 	ldw	r5,-28(fp)
  800540:	0800a440 	call	800a44 <doubleToInt>
  800544:	1009883a 	mov	r4,r2
  800548:	00c02274 	movhi	r3,137
  80054c:	18f9de04 	addi	r3,r3,-6280
  800550:	8405883a 	add	r2,r16,r16
  800554:	1085883a 	add	r2,r2,r2
  800558:	10c5883a 	add	r2,r2,r3
  80055c:	11000015 	stw	r4,0(r2)
		cosine[x] = doubleToInt(cosine_temp);
  800560:	e43ffc17 	ldw	r16,-16(fp)
  800564:	e13ff617 	ldw	r4,-40(fp)
  800568:	e17ff717 	ldw	r5,-36(fp)
  80056c:	0800a440 	call	800a44 <doubleToInt>
  800570:	1009883a 	mov	r4,r2
  800574:	00c02274 	movhi	r3,137
  800578:	18c77604 	addi	r3,r3,7640
  80057c:	8405883a 	add	r2,r16,r16
  800580:	1085883a 	add	r2,r2,r2
  800584:	10c5883a 	add	r2,r2,r3
  800588:	11000015 	stw	r4,0(r2)

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  80058c:	e0bffc17 	ldw	r2,-16(fp)
  800590:	10800044 	addi	r2,r2,1
  800594:	e0bffc15 	stw	r2,-16(fp)
  800598:	e0bffc17 	ldw	r2,-16(fp)
  80059c:	10836610 	cmplti	r2,r2,3480
  8005a0:	103f641e 	bne	r2,zero,800334 <main+0x134>
  int k;
  int k2;
  //char key[] = { 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d',
//		  'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d'};

  unsigned char code = 0;
  8005a4:	e03ff005 	stb	zero,-64(fp)
  //char key[] = {'d'};
  k2 = 0;
  8005a8:	e03ff115 	stw	zero,-60(fp)
  //start the main loop
  //for (k2 = 0; k2 < sizeof(key); k2++)

  int hardwareData = 0;
  8005ac:	e03fef15 	stw	zero,-68(fp)
  8005b0:	00000006 	br	8005b4 <main+0x3b4>

  while(1)
  {

	  code = 0;
  8005b4:	e03ff005 	stb	zero,-64(fp)

		//while (!IORD_8DIRECT(DE2_PS2_0_BASE, 0)) ; /* Poll the status */

		code = IORD_8DIRECT(DE2_PS2_0_BASE, 0);
  8005b8:	00804234 	movhi	r2,264
  8005bc:	10842204 	addi	r2,r2,4232
  8005c0:	10800023 	ldbuio	r2,0(r2)
  8005c4:	e0bff005 	stb	r2,-64(fp)

		if (code)
  8005c8:	e0bff003 	ldbu	r2,-64(fp)
  8005cc:	1005003a 	cmpeq	r2,r2,zero
  8005d0:	1000041e 	bne	r2,zero,8005e4 <main+0x3e4>
			code = IORD_8DIRECT(DE2_PS2_0_BASE, 1);
  8005d4:	00804234 	movhi	r2,264
  8005d8:	10842244 	addi	r2,r2,4233
  8005dc:	10800023 	ldbuio	r2,0(r2)
  8005e0:	e0bff005 	stb	r2,-64(fp)

		printf("%c, %x, %d\n", code, code, code);
  8005e4:	e17ff003 	ldbu	r5,-64(fp)
  8005e8:	e1bff003 	ldbu	r6,-64(fp)
  8005ec:	e1fff003 	ldbu	r7,-64(fp)
  8005f0:	01002234 	movhi	r4,136
  8005f4:	211c9804 	addi	r4,r4,29280
  8005f8:	08046000 	call	804600 <printf>

	  //hardwareData = IORD_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1);
	  //printf("%d\n", hardwareData >> 4);


     x = 1;
  8005fc:	00800044 	movi	r2,1
  800600:	e0bffc15 	stw	r2,-16(fp)
    for(k = -screenWidth/2; k < (screenWidth/2 - 1); k++)
  800604:	00bfb004 	movi	r2,-320
  800608:	e0bff215 	stw	r2,-56(fp)
  80060c:	00005a06 	br	800778 <main+0x578>
    {
        angle = dir + k;
  800610:	e0ffff17 	ldw	r3,-4(fp)
  800614:	e0bff217 	ldw	r2,-56(fp)
  800618:	1885883a 	add	r2,r3,r2
  80061c:	e0bff515 	stw	r2,-44(fp)

        if ( angle < 0)
  800620:	e0bff517 	ldw	r2,-44(fp)
  800624:	1004403a 	cmpge	r2,r2,zero
  800628:	1000031e 	bne	r2,zero,800638 <main+0x438>
                angle += lookupLength;
  80062c:	e0bff517 	ldw	r2,-44(fp)
  800630:	10836604 	addi	r2,r2,3480
  800634:	e0bff515 	stw	r2,-44(fp)

        if (angle >= lookupLength)
  800638:	e0bff517 	ldw	r2,-44(fp)
  80063c:	10836610 	cmplti	r2,r2,3480
  800640:	1000031e 	bne	r2,zero,800650 <main+0x450>
                angle -= lookupLength;
  800644:	e0bff517 	ldw	r2,-44(fp)
  800648:	10bc9a04 	addi	r2,r2,-3480
  80064c:	e0bff515 	stw	r2,-44(fp)

        fish_angle = k;
  800650:	e0bff217 	ldw	r2,-56(fp)
  800654:	e0bff415 	stw	r2,-48(fp)

        if ( fish_angle < 0)
  800658:	e0bff417 	ldw	r2,-48(fp)
  80065c:	1004403a 	cmpge	r2,r2,zero
  800660:	1000031e 	bne	r2,zero,800670 <main+0x470>
            fish_angle += lookupLength;
  800664:	e0bff417 	ldw	r2,-48(fp)
  800668:	10836604 	addi	r2,r2,3480
  80066c:	e0bff415 	stw	r2,-48(fp)

        if (fish_angle >= lookupLength)
  800670:	e0bff417 	ldw	r2,-48(fp)
  800674:	10836610 	cmplti	r2,r2,3480
  800678:	1000031e 	bne	r2,zero,800688 <main+0x488>
             fish_angle -= lookupLength;
  80067c:	e0bff417 	ldw	r2,-48(fp)
  800680:	10bc9a04 	addi	r2,r2,-3480
  800684:	e0bff415 	stw	r2,-48(fp)


      //calculate ray position and direction
      //double cameraX = 2*x/double(w)-1; //x-coordinate in camera space
      int rayDirX = cosine[angle]>>4;
  800688:	e0bff517 	ldw	r2,-44(fp)
  80068c:	00c02274 	movhi	r3,137
  800690:	18c77604 	addi	r3,r3,7640
  800694:	1085883a 	add	r2,r2,r2
  800698:	1085883a 	add	r2,r2,r2
  80069c:	10c5883a 	add	r2,r2,r3
  8006a0:	10800017 	ldw	r2,0(r2)
  8006a4:	1005d13a 	srai	r2,r2,4
  8006a8:	e0bfee15 	stw	r2,-72(fp)
      int rayDirY = sine[angle]>>4;
  8006ac:	e0bff517 	ldw	r2,-44(fp)
  8006b0:	00c02274 	movhi	r3,137
  8006b4:	18f9de04 	addi	r3,r3,-6280
  8006b8:	1085883a 	add	r2,r2,r2
  8006bc:	1085883a 	add	r2,r2,r2
  8006c0:	10c5883a 	add	r2,r2,r3
  8006c4:	10800017 	ldw	r2,0(r2)
  8006c8:	1005d13a 	srai	r2,r2,4
  8006cc:	e0bfed15 	stw	r2,-76(fp)
      int count_step = cosine[fish_angle]>>4;
  8006d0:	e0bff417 	ldw	r2,-48(fp)
  8006d4:	00c02274 	movhi	r3,137
  8006d8:	18c77604 	addi	r3,r3,7640
  8006dc:	1085883a 	add	r2,r2,r2
  8006e0:	1085883a 	add	r2,r2,r2
  8006e4:	10c5883a 	add	r2,r2,r3
  8006e8:	10800017 	ldw	r2,0(r2)
  8006ec:	1005d13a 	srai	r2,r2,4
  8006f0:	e0bfec15 	stw	r2,-80(fp)

 //     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
 //     printf("%d\n", hardwareData);

     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  8006f4:	00804234 	movhi	r2,264
  8006f8:	10840044 	addi	r2,r2,4097
  8006fc:	10800037 	ldwio	r2,0(r2)
  800700:	e0bfef15 	stw	r2,-68(fp)
	 while (!(hardwareData & 1)){
  800704:	00000406 	br	800718 <main+0x518>
		 hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  800708:	00804234 	movhi	r2,264
  80070c:	10840044 	addi	r2,r2,4097
  800710:	10800037 	ldwio	r2,0(r2)
  800714:	e0bfef15 	stw	r2,-68(fp)

 //     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
 //     printf("%d\n", hardwareData);

     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
	 while (!(hardwareData & 1)){
  800718:	e0bfef17 	ldw	r2,-68(fp)
  80071c:	1080004c 	andi	r2,r2,1
  800720:	1005003a 	cmpeq	r2,r2,zero
  800724:	103ff81e 	bne	r2,zero,800708 <main+0x508>
		 hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
	  }

      DrawAccelerate(angle, posX, posY, count_step, rayDirX, rayDirY, x);
  800728:	e0fffc17 	ldw	r3,-16(fp)
  80072c:	e0bfee17 	ldw	r2,-72(fp)
  800730:	d8800015 	stw	r2,0(sp)
  800734:	e0bfed17 	ldw	r2,-76(fp)
  800738:	d8800115 	stw	r2,4(sp)
  80073c:	d8c00215 	stw	r3,8(sp)
  800740:	e13ff517 	ldw	r4,-44(fp)
  800744:	e17ffe17 	ldw	r5,-8(fp)
  800748:	e1bffd17 	ldw	r6,-12(fp)
  80074c:	e1ffec17 	ldw	r7,-80(fp)
  800750:	0800b980 	call	800b98 <DrawAccelerate>
      IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800754:	00804234 	movhi	r2,264
  800758:	10840004 	addi	r2,r2,4096
  80075c:	10000035 	stwio	zero,0(r2)
      //draw the pixels of the stripe as a vertical line
      //DrawColumn(x, color, drawStart, drawEnd, side);
      //DrawColumn(x, color, lineHeight, side);
      //verLine(x, drawStart, drawEnd, color);

      x++;
  800760:	e0bffc17 	ldw	r2,-16(fp)
  800764:	10800044 	addi	r2,r2,1
  800768:	e0bffc15 	stw	r2,-16(fp)
	  //hardwareData = IORD_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1);
	  //printf("%d\n", hardwareData >> 4);


     x = 1;
    for(k = -screenWidth/2; k < (screenWidth/2 - 1); k++)
  80076c:	e0bff217 	ldw	r2,-56(fp)
  800770:	10800044 	addi	r2,r2,1
  800774:	e0bff215 	stw	r2,-56(fp)
  800778:	e0bff217 	ldw	r2,-56(fp)
  80077c:	10804fd0 	cmplti	r2,r2,319
  800780:	103fa31e 	bne	r2,zero,800610 <main+0x410>
    }



    //move forward if no wall in front of you
    if (code =='u')
  800784:	e0bff003 	ldbu	r2,-64(fp)
  800788:	10801d58 	cmpnei	r2,r2,117
  80078c:	10003c1e 	bne	r2,zero,800880 <main+0x680>
    {
        move = dircosine[dir]>>4;
  800790:	e0bfff17 	ldw	r2,-4(fp)
  800794:	00c02274 	movhi	r3,137
  800798:	18da0e04 	addi	r3,r3,26680
  80079c:	1085883a 	add	r2,r2,r2
  8007a0:	1085883a 	add	r2,r2,r2
  8007a4:	10c5883a 	add	r2,r2,r3
  8007a8:	10800017 	ldw	r2,0(r2)
  8007ac:	1005d13a 	srai	r2,r2,4
  8007b0:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[(posX + move)>>posShift][posY>>posShift] == 0)
  8007b4:	e0fffe17 	ldw	r3,-8(fp)
  8007b8:	e0bff317 	ldw	r2,-52(fp)
  8007bc:	1885883a 	add	r2,r3,r2
  8007c0:	1009d5ba 	srai	r4,r2,22
  8007c4:	e0bffd17 	ldw	r2,-12(fp)
  8007c8:	100bd5ba 	srai	r5,r2,22
  8007cc:	00c02234 	movhi	r3,136
  8007d0:	18dde104 	addi	r3,r3,30596
  8007d4:	20800624 	muli	r2,r4,24
  8007d8:	10c5883a 	add	r2,r2,r3
  8007dc:	1145883a 	add	r2,r2,r5
  8007e0:	10800003 	ldbu	r2,0(r2)
  8007e4:	10803fcc 	andi	r2,r2,255
  8007e8:	1080201c 	xori	r2,r2,128
  8007ec:	10bfe004 	addi	r2,r2,-128
  8007f0:	1004c03a 	cmpne	r2,r2,zero
  8007f4:	1000041e 	bne	r2,zero,800808 <main+0x608>
                posX += move;
  8007f8:	e0bffe17 	ldw	r2,-8(fp)
  8007fc:	e0fff317 	ldw	r3,-52(fp)
  800800:	10c5883a 	add	r2,r2,r3
  800804:	e0bffe15 	stw	r2,-8(fp)

        move = dirsine[dir]>>4;
  800808:	e0bfff17 	ldw	r2,-4(fp)
  80080c:	00c02274 	movhi	r3,137
  800810:	18ec4604 	addi	r3,r3,-20200
  800814:	1085883a 	add	r2,r2,r2
  800818:	1085883a 	add	r2,r2,r2
  80081c:	10c5883a 	add	r2,r2,r3
  800820:	10800017 	ldw	r2,0(r2)
  800824:	1005d13a 	srai	r2,r2,4
  800828:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[posX>>posShift][(posY+move)>>posShift] == 0)
  80082c:	e0bffe17 	ldw	r2,-8(fp)
  800830:	100bd5ba 	srai	r5,r2,22
  800834:	e0fffd17 	ldw	r3,-12(fp)
  800838:	e0bff317 	ldw	r2,-52(fp)
  80083c:	1885883a 	add	r2,r3,r2
  800840:	1009d5ba 	srai	r4,r2,22
  800844:	00c02234 	movhi	r3,136
  800848:	18dde104 	addi	r3,r3,30596
  80084c:	28800624 	muli	r2,r5,24
  800850:	10c5883a 	add	r2,r2,r3
  800854:	1105883a 	add	r2,r2,r4
  800858:	10800003 	ldbu	r2,0(r2)
  80085c:	10803fcc 	andi	r2,r2,255
  800860:	1080201c 	xori	r2,r2,128
  800864:	10bfe004 	addi	r2,r2,-128
  800868:	1004c03a 	cmpne	r2,r2,zero
  80086c:	1000041e 	bne	r2,zero,800880 <main+0x680>
                posY += move;
  800870:	e0bffd17 	ldw	r2,-12(fp)
  800874:	e0fff317 	ldw	r3,-52(fp)
  800878:	10c5883a 	add	r2,r2,r3
  80087c:	e0bffd15 	stw	r2,-12(fp)
    }
    //move backwards if no wall behind you
    if (code =='r')
  800880:	e0bff003 	ldbu	r2,-64(fp)
  800884:	10801c98 	cmpnei	r2,r2,114
  800888:	10003c1e 	bne	r2,zero,80097c <main+0x77c>
    {
        move = dircosine[dir]>>4;
  80088c:	e0bfff17 	ldw	r2,-4(fp)
  800890:	00c02274 	movhi	r3,137
  800894:	18da0e04 	addi	r3,r3,26680
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	10c5883a 	add	r2,r2,r3
  8008a4:	10800017 	ldw	r2,0(r2)
  8008a8:	1005d13a 	srai	r2,r2,4
  8008ac:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[(posX - move)>>posShift][posY>>posShift] == 0)
  8008b0:	e0fffe17 	ldw	r3,-8(fp)
  8008b4:	e0bff317 	ldw	r2,-52(fp)
  8008b8:	1885c83a 	sub	r2,r3,r2
  8008bc:	1009d5ba 	srai	r4,r2,22
  8008c0:	e0bffd17 	ldw	r2,-12(fp)
  8008c4:	100bd5ba 	srai	r5,r2,22
  8008c8:	00c02234 	movhi	r3,136
  8008cc:	18dde104 	addi	r3,r3,30596
  8008d0:	20800624 	muli	r2,r4,24
  8008d4:	10c5883a 	add	r2,r2,r3
  8008d8:	1145883a 	add	r2,r2,r5
  8008dc:	10800003 	ldbu	r2,0(r2)
  8008e0:	10803fcc 	andi	r2,r2,255
  8008e4:	1080201c 	xori	r2,r2,128
  8008e8:	10bfe004 	addi	r2,r2,-128
  8008ec:	1004c03a 	cmpne	r2,r2,zero
  8008f0:	1000041e 	bne	r2,zero,800904 <main+0x704>
                posX -= move;
  8008f4:	e0bffe17 	ldw	r2,-8(fp)
  8008f8:	e0fff317 	ldw	r3,-52(fp)
  8008fc:	10c5c83a 	sub	r2,r2,r3
  800900:	e0bffe15 	stw	r2,-8(fp)

        move = dirsine[dir]>>4;
  800904:	e0bfff17 	ldw	r2,-4(fp)
  800908:	00c02274 	movhi	r3,137
  80090c:	18ec4604 	addi	r3,r3,-20200
  800910:	1085883a 	add	r2,r2,r2
  800914:	1085883a 	add	r2,r2,r2
  800918:	10c5883a 	add	r2,r2,r3
  80091c:	10800017 	ldw	r2,0(r2)
  800920:	1005d13a 	srai	r2,r2,4
  800924:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[posX>>posShift][(posY - move)>>posShift] == 0)
  800928:	e0bffe17 	ldw	r2,-8(fp)
  80092c:	100bd5ba 	srai	r5,r2,22
  800930:	e0fffd17 	ldw	r3,-12(fp)
  800934:	e0bff317 	ldw	r2,-52(fp)
  800938:	1885c83a 	sub	r2,r3,r2
  80093c:	1009d5ba 	srai	r4,r2,22
  800940:	00c02234 	movhi	r3,136
  800944:	18dde104 	addi	r3,r3,30596
  800948:	28800624 	muli	r2,r5,24
  80094c:	10c5883a 	add	r2,r2,r3
  800950:	1105883a 	add	r2,r2,r4
  800954:	10800003 	ldbu	r2,0(r2)
  800958:	10803fcc 	andi	r2,r2,255
  80095c:	1080201c 	xori	r2,r2,128
  800960:	10bfe004 	addi	r2,r2,-128
  800964:	1004c03a 	cmpne	r2,r2,zero
  800968:	1000041e 	bne	r2,zero,80097c <main+0x77c>
                posY -= move;
  80096c:	e0bffd17 	ldw	r2,-12(fp)
  800970:	e0fff317 	ldw	r3,-52(fp)
  800974:	10c5c83a 	sub	r2,r2,r3
  800978:	e0bffd15 	stw	r2,-12(fp)
    }
    //rotate to the right
    if (code == 't')
  80097c:	e0bff003 	ldbu	r2,-64(fp)
  800980:	10801d18 	cmpnei	r2,r2,116
  800984:	1000091e 	bne	r2,zero,8009ac <main+0x7ac>
    {
      //both camera direction and camera plane must be rotated
       dir += 1;
  800988:	e0bfff17 	ldw	r2,-4(fp)
  80098c:	10800044 	addi	r2,r2,1
  800990:	e0bfff15 	stw	r2,-4(fp)

       if(dir >= lookupLength)
  800994:	e0bfff17 	ldw	r2,-4(fp)
  800998:	10836610 	cmplti	r2,r2,3480
  80099c:	1000031e 	bne	r2,zero,8009ac <main+0x7ac>
           dir -= lookupLength;
  8009a0:	e0bfff17 	ldw	r2,-4(fp)
  8009a4:	10bc9a04 	addi	r2,r2,-3480
  8009a8:	e0bfff15 	stw	r2,-4(fp)
    }
    //rotate to the left
    if (code =='k')
  8009ac:	e0bff003 	ldbu	r2,-64(fp)
  8009b0:	10801ad8 	cmpnei	r2,r2,107
  8009b4:	103eff1e 	bne	r2,zero,8005b4 <main+0x3b4>
    {
      //both camera direction and camera plane must be rotated
        dir -= 1;
  8009b8:	e0bfff17 	ldw	r2,-4(fp)
  8009bc:	10bfffc4 	addi	r2,r2,-1
  8009c0:	e0bfff15 	stw	r2,-4(fp)

        if (dir <0)
  8009c4:	e0bfff17 	ldw	r2,-4(fp)
  8009c8:	1004403a 	cmpge	r2,r2,zero
  8009cc:	103ef91e 	bne	r2,zero,8005b4 <main+0x3b4>
            dir += lookupLength;
  8009d0:	e0bfff17 	ldw	r2,-4(fp)
  8009d4:	10836604 	addi	r2,r2,3480
  8009d8:	e0bfff15 	stw	r2,-4(fp)
    }


  }
  8009dc:	003ef506 	br	8005b4 <main+0x3b4>

008009e0 <absVal>:

    return 0;
}

int absVal(int v)
{
  8009e0:	defffe04 	addi	sp,sp,-8
  8009e4:	df000115 	stw	fp,4(sp)
  8009e8:	df000104 	addi	fp,sp,4
  8009ec:	e13fff15 	stw	r4,-4(fp)
  return v * ((v>0) - (v<0));
  8009f0:	e0bfff17 	ldw	r2,-4(fp)
  8009f4:	10c00048 	cmpgei	r3,r2,1
  8009f8:	e0bfff17 	ldw	r2,-4(fp)
  8009fc:	1004d7fa 	srli	r2,r2,31
  800a00:	1887c83a 	sub	r3,r3,r2
  800a04:	e0bfff17 	ldw	r2,-4(fp)
  800a08:	1885383a 	mul	r2,r3,r2
}
  800a0c:	e037883a 	mov	sp,fp
  800a10:	df000017 	ldw	fp,0(sp)
  800a14:	dec00104 	addi	sp,sp,4
  800a18:	f800283a 	ret

00800a1c <intToDouble>:

int intToDouble(int a)
{
  800a1c:	defffe04 	addi	sp,sp,-8
  800a20:	df000115 	stw	fp,4(sp)
  800a24:	df000104 	addi	fp,sp,4
  800a28:	e13fff15 	stw	r4,-4(fp)

    return a>>posShift;
  800a2c:	e0bfff17 	ldw	r2,-4(fp)
  800a30:	1005d5ba 	srai	r2,r2,22

}
  800a34:	e037883a 	mov	sp,fp
  800a38:	df000017 	ldw	fp,0(sp)
  800a3c:	dec00104 	addi	sp,sp,4
  800a40:	f800283a 	ret

00800a44 <doubleToInt>:


int doubleToInt(double a)
{
  800a44:	defffc04 	addi	sp,sp,-16
  800a48:	dfc00315 	stw	ra,12(sp)
  800a4c:	df000215 	stw	fp,8(sp)
  800a50:	df000204 	addi	fp,sp,8
  800a54:	e13ffe15 	stw	r4,-8(fp)
  800a58:	e17fff15 	stw	r5,-4(fp)
    return (int)(a*(1<<posShift));
  800a5c:	e13ffe17 	ldw	r4,-8(fp)
  800a60:	e17fff17 	ldw	r5,-4(fp)
  800a64:	000d883a 	mov	r6,zero
  800a68:	01d05434 	movhi	r7,16720
  800a6c:	080375c0 	call	80375c <__muldf3>
  800a70:	1009883a 	mov	r4,r2
  800a74:	180b883a 	mov	r5,r3
  800a78:	2005883a 	mov	r2,r4
  800a7c:	2807883a 	mov	r3,r5
  800a80:	1009883a 	mov	r4,r2
  800a84:	180b883a 	mov	r5,r3
  800a88:	0803db00 	call	803db0 <__fixdfsi>
}
  800a8c:	e037883a 	mov	sp,fp
  800a90:	dfc00117 	ldw	ra,4(sp)
  800a94:	df000017 	ldw	fp,0(sp)
  800a98:	dec00204 	addi	sp,sp,8
  800a9c:	f800283a 	ret

00800aa0 <DrawTexture>:


void DrawTexture(unsigned int columnIndex, unsigned int texX, unsigned int rowStart, unsigned int rowEnd, unsigned int side, unsigned int texNum, unsigned int invLineHeight , unsigned int line_minus_h)
{
  800aa0:	defffb04 	addi	sp,sp,-20
  800aa4:	df000415 	stw	fp,16(sp)
  800aa8:	df000404 	addi	fp,sp,16
  800aac:	e13ffc15 	stw	r4,-16(fp)
  800ab0:	e17ffd15 	stw	r5,-12(fp)
  800ab4:	e1bffe15 	stw	r6,-8(fp)
  800ab8:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex  << 22));
  800abc:	e0bffc17 	ldw	r2,-16(fp)
  800ac0:	100495ba 	slli	r2,r2,22
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	00804234 	movhi	r2,264
  800acc:	10840804 	addi	r2,r2,4128
  800ad0:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, ((texNum & 3) + (texX <<2) + (rowEnd<< 8) + (rowStart<<17)+ ((invLineHeight & 0x3F)<<26)));
  800ad4:	e0800217 	ldw	r2,8(fp)
  800ad8:	10c000cc 	andi	r3,r2,3
  800adc:	e0bffd17 	ldw	r2,-12(fp)
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1085883a 	add	r2,r2,r2
  800ae8:	1887883a 	add	r3,r3,r2
  800aec:	e0bfff17 	ldw	r2,-4(fp)
  800af0:	1004923a 	slli	r2,r2,8
  800af4:	1887883a 	add	r3,r3,r2
  800af8:	e0bffe17 	ldw	r2,-8(fp)
  800afc:	1004947a 	slli	r2,r2,17
  800b00:	1887883a 	add	r3,r3,r2
  800b04:	e0800317 	ldw	r2,12(fp)
  800b08:	10800fcc 	andi	r2,r2,63
  800b0c:	100496ba 	slli	r2,r2,26
  800b10:	1885883a 	add	r2,r3,r2
  800b14:	1007883a 	mov	r3,r2
  800b18:	00804234 	movhi	r2,264
  800b1c:	10840104 	addi	r2,r2,4100
  800b20:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, ((invLineHeight & 0x3FFFF) >> 6) + ((line_minus_h & 0x3FFFF) << 12 ) + (side << 31));
  800b24:	e0c00317 	ldw	r3,12(fp)
  800b28:	00800134 	movhi	r2,4
  800b2c:	10bfffc4 	addi	r2,r2,-1
  800b30:	1884703a 	and	r2,r3,r2
  800b34:	1008d1ba 	srli	r4,r2,6
  800b38:	e0c00417 	ldw	r3,16(fp)
  800b3c:	00800134 	movhi	r2,4
  800b40:	10bfffc4 	addi	r2,r2,-1
  800b44:	1884703a 	and	r2,r3,r2
  800b48:	1004933a 	slli	r2,r2,12
  800b4c:	2087883a 	add	r3,r4,r2
  800b50:	e0800117 	ldw	r2,4(fp)
  800b54:	100497fa 	slli	r2,r2,31
  800b58:	1885883a 	add	r2,r3,r2
  800b5c:	1007883a 	mov	r3,r2
  800b60:	00804234 	movhi	r2,264
  800b64:	10840204 	addi	r2,r2,4104
  800b68:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 1);
  800b6c:	00c04234 	movhi	r3,264
  800b70:	18c40004 	addi	r3,r3,4096
  800b74:	00800044 	movi	r2,1
  800b78:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800b7c:	00804234 	movhi	r2,264
  800b80:	10840004 	addi	r2,r2,4096
  800b84:	10000035 	stwio	zero,0(r2)

	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800b88:	e037883a 	mov	sp,fp
  800b8c:	df000017 	ldw	fp,0(sp)
  800b90:	dec00104 	addi	sp,sp,4
  800b94:	f800283a 	ret

00800b98 <DrawAccelerate>:

void DrawAccelerate(int angle, int posX, int posY, int countstep, int rayDirX, int rayDirY, unsigned int columnIndex)
{
  800b98:	defffb04 	addi	sp,sp,-20
  800b9c:	df000415 	stw	fp,16(sp)
  800ba0:	df000404 	addi	fp,sp,16
  800ba4:	e13ffc15 	stw	r4,-16(fp)
  800ba8:	e17ffd15 	stw	r5,-12(fp)
  800bac:	e1bffe15 	stw	r6,-8(fp)
  800bb0:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex << 22));
  800bb4:	e0800317 	ldw	r2,12(fp)
  800bb8:	100495ba 	slli	r2,r2,22
  800bbc:	1007883a 	mov	r3,r2
  800bc0:	00804234 	movhi	r2,264
  800bc4:	10840804 	addi	r2,r2,4128
  800bc8:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, posX);
  800bcc:	00c04234 	movhi	r3,264
  800bd0:	18c40104 	addi	r3,r3,4100
  800bd4:	e0bffd17 	ldw	r2,-12(fp)
  800bd8:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, posY );
  800bdc:	00c04234 	movhi	r3,264
  800be0:	18c40204 	addi	r3,r3,4104
  800be4:	e0bffe17 	ldw	r2,-8(fp)
  800be8:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 3, countstep );
  800bec:	00c04234 	movhi	r3,264
  800bf0:	18c40304 	addi	r3,r3,4108
  800bf4:	e0bfff17 	ldw	r2,-4(fp)
  800bf8:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 4, rayDirX);
  800bfc:	00c04234 	movhi	r3,264
  800c00:	18c40404 	addi	r3,r3,4112
  800c04:	e0800117 	ldw	r2,4(fp)
  800c08:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 5, rayDirY );
  800c0c:	00c04234 	movhi	r3,264
  800c10:	18c40504 	addi	r3,r3,4116
  800c14:	e0800217 	ldw	r2,8(fp)
  800c18:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 6, angle & 0x03FF);
  800c1c:	e0bffc17 	ldw	r2,-16(fp)
  800c20:	10c0ffcc 	andi	r3,r2,1023
  800c24:	00804234 	movhi	r2,264
  800c28:	10840604 	addi	r2,r2,4120
  800c2c:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800c30:	00804234 	movhi	r2,264
  800c34:	10840004 	addi	r2,r2,4096
  800c38:	10000035 	stwio	zero,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0xFFFFFFFF);
  800c3c:	00c04234 	movhi	r3,264
  800c40:	18c40004 	addi	r3,r3,4096
  800c44:	00bfffc4 	movi	r2,-1
  800c48:	18800035 	stwio	r2,0(r3)


	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800c4c:	e037883a 	mov	sp,fp
  800c50:	df000017 	ldw	fp,0(sp)
  800c54:	dec00104 	addi	sp,sp,4
  800c58:	f800283a 	ret

00800c5c <cos>:
  800c5c:	00a00034 	movhi	r2,32768
  800c60:	10bfffc4 	addi	r2,r2,-1
  800c64:	defffa04 	addi	sp,sp,-24
  800c68:	114c703a 	and	r6,r2,r5
  800c6c:	008ffa74 	movhi	r2,16361
  800c70:	10887ec4 	addi	r2,r2,8699
  800c74:	dfc00515 	stw	ra,20(sp)
  800c78:	2011883a 	mov	r8,r4
  800c7c:	1180210e 	bge	r2,r6,800d04 <cos+0xa8>
  800c80:	009ffc34 	movhi	r2,32752
  800c84:	10bfffc4 	addi	r2,r2,-1
  800c88:	11800a0e 	bge	r2,r6,800cb4 <cos+0x58>
  800c8c:	280f883a 	mov	r7,r5
  800c90:	400d883a 	mov	r6,r8
  800c94:	08036680 	call	803668 <__subdf3>
  800c98:	100d883a 	mov	r6,r2
  800c9c:	180f883a 	mov	r7,r3
  800ca0:	3005883a 	mov	r2,r6
  800ca4:	3807883a 	mov	r3,r7
  800ca8:	dfc00517 	ldw	ra,20(sp)
  800cac:	dec00604 	addi	sp,sp,24
  800cb0:	f800283a 	ret
  800cb4:	d9800104 	addi	r6,sp,4
  800cb8:	0800f300 	call	800f30 <__ieee754_rem_pio2>
  800cbc:	10c000cc 	andi	r3,r2,3
  800cc0:	01000044 	movi	r4,1
  800cc4:	19001926 	beq	r3,r4,800d2c <cos+0xd0>
  800cc8:	00800084 	movi	r2,2
  800ccc:	18803126 	beq	r3,r2,800d94 <cos+0x138>
  800cd0:	1800231e 	bne	r3,zero,800d60 <cos+0x104>
  800cd4:	d8800117 	ldw	r2,4(sp)
  800cd8:	da000317 	ldw	r8,12(sp)
  800cdc:	d8c00217 	ldw	r3,8(sp)
  800ce0:	da400417 	ldw	r9,16(sp)
  800ce4:	400d883a 	mov	r6,r8
  800ce8:	180b883a 	mov	r5,r3
  800cec:	480f883a 	mov	r7,r9
  800cf0:	1009883a 	mov	r4,r2
  800cf4:	08017580 	call	801758 <__kernel_cos>
  800cf8:	100d883a 	mov	r6,r2
  800cfc:	180f883a 	mov	r7,r3
  800d00:	003fe706 	br	800ca0 <cos+0x44>
  800d04:	000d883a 	mov	r6,zero
  800d08:	000f883a 	mov	r7,zero
  800d0c:	08017580 	call	801758 <__kernel_cos>
  800d10:	100d883a 	mov	r6,r2
  800d14:	180f883a 	mov	r7,r3
  800d18:	3005883a 	mov	r2,r6
  800d1c:	3807883a 	mov	r3,r7
  800d20:	dfc00517 	ldw	ra,20(sp)
  800d24:	dec00604 	addi	sp,sp,24
  800d28:	f800283a 	ret
  800d2c:	d8800117 	ldw	r2,4(sp)
  800d30:	da000317 	ldw	r8,12(sp)
  800d34:	d8c00217 	ldw	r3,8(sp)
  800d38:	da400417 	ldw	r9,16(sp)
  800d3c:	d9000015 	stw	r4,0(sp)
  800d40:	400d883a 	mov	r6,r8
  800d44:	480f883a 	mov	r7,r9
  800d48:	180b883a 	mov	r5,r3
  800d4c:	1009883a 	mov	r4,r2
  800d50:	0802b000 	call	802b00 <__kernel_sin>
  800d54:	100d883a 	mov	r6,r2
  800d58:	19e0003c 	xorhi	r7,r3,32768
  800d5c:	003fd006 	br	800ca0 <cos+0x44>
  800d60:	d8800117 	ldw	r2,4(sp)
  800d64:	da000317 	ldw	r8,12(sp)
  800d68:	d8c00217 	ldw	r3,8(sp)
  800d6c:	da400417 	ldw	r9,16(sp)
  800d70:	d9000015 	stw	r4,0(sp)
  800d74:	400d883a 	mov	r6,r8
  800d78:	480f883a 	mov	r7,r9
  800d7c:	180b883a 	mov	r5,r3
  800d80:	1009883a 	mov	r4,r2
  800d84:	0802b000 	call	802b00 <__kernel_sin>
  800d88:	100d883a 	mov	r6,r2
  800d8c:	180f883a 	mov	r7,r3
  800d90:	003fc306 	br	800ca0 <cos+0x44>
  800d94:	d8800117 	ldw	r2,4(sp)
  800d98:	da000317 	ldw	r8,12(sp)
  800d9c:	d8c00217 	ldw	r3,8(sp)
  800da0:	da400417 	ldw	r9,16(sp)
  800da4:	400d883a 	mov	r6,r8
  800da8:	180b883a 	mov	r5,r3
  800dac:	480f883a 	mov	r7,r9
  800db0:	1009883a 	mov	r4,r2
  800db4:	08017580 	call	801758 <__kernel_cos>
  800db8:	100d883a 	mov	r6,r2
  800dbc:	19e0003c 	xorhi	r7,r3,32768
  800dc0:	003fb706 	br	800ca0 <cos+0x44>

00800dc4 <sin>:
  800dc4:	00a00034 	movhi	r2,32768
  800dc8:	10bfffc4 	addi	r2,r2,-1
  800dcc:	defffa04 	addi	sp,sp,-24
  800dd0:	114c703a 	and	r6,r2,r5
  800dd4:	008ffa74 	movhi	r2,16361
  800dd8:	10887ec4 	addi	r2,r2,8699
  800ddc:	dfc00515 	stw	ra,20(sp)
  800de0:	2011883a 	mov	r8,r4
  800de4:	1180220e 	bge	r2,r6,800e70 <sin+0xac>
  800de8:	009ffc34 	movhi	r2,32752
  800dec:	10bfffc4 	addi	r2,r2,-1
  800df0:	11800a0e 	bge	r2,r6,800e1c <sin+0x58>
  800df4:	280f883a 	mov	r7,r5
  800df8:	400d883a 	mov	r6,r8
  800dfc:	08036680 	call	803668 <__subdf3>
  800e00:	100d883a 	mov	r6,r2
  800e04:	180f883a 	mov	r7,r3
  800e08:	3005883a 	mov	r2,r6
  800e0c:	3807883a 	mov	r3,r7
  800e10:	dfc00517 	ldw	ra,20(sp)
  800e14:	dec00604 	addi	sp,sp,24
  800e18:	f800283a 	ret
  800e1c:	d9800104 	addi	r6,sp,4
  800e20:	0800f300 	call	800f30 <__ieee754_rem_pio2>
  800e24:	10c000cc 	andi	r3,r2,3
  800e28:	01000044 	movi	r4,1
  800e2c:	19001b26 	beq	r3,r4,800e9c <sin+0xd8>
  800e30:	00800084 	movi	r2,2
  800e34:	18803126 	beq	r3,r2,800efc <sin+0x138>
  800e38:	1800241e 	bne	r3,zero,800ecc <sin+0x108>
  800e3c:	d8800117 	ldw	r2,4(sp)
  800e40:	da000317 	ldw	r8,12(sp)
  800e44:	d8c00217 	ldw	r3,8(sp)
  800e48:	da400417 	ldw	r9,16(sp)
  800e4c:	d9000015 	stw	r4,0(sp)
  800e50:	400d883a 	mov	r6,r8
  800e54:	480f883a 	mov	r7,r9
  800e58:	180b883a 	mov	r5,r3
  800e5c:	1009883a 	mov	r4,r2
  800e60:	0802b000 	call	802b00 <__kernel_sin>
  800e64:	100d883a 	mov	r6,r2
  800e68:	180f883a 	mov	r7,r3
  800e6c:	003fe606 	br	800e08 <sin+0x44>
  800e70:	000d883a 	mov	r6,zero
  800e74:	000f883a 	mov	r7,zero
  800e78:	d8000015 	stw	zero,0(sp)
  800e7c:	0802b000 	call	802b00 <__kernel_sin>
  800e80:	100d883a 	mov	r6,r2
  800e84:	180f883a 	mov	r7,r3
  800e88:	3005883a 	mov	r2,r6
  800e8c:	3807883a 	mov	r3,r7
  800e90:	dfc00517 	ldw	ra,20(sp)
  800e94:	dec00604 	addi	sp,sp,24
  800e98:	f800283a 	ret
  800e9c:	d8800117 	ldw	r2,4(sp)
  800ea0:	da000317 	ldw	r8,12(sp)
  800ea4:	d8c00217 	ldw	r3,8(sp)
  800ea8:	da400417 	ldw	r9,16(sp)
  800eac:	400d883a 	mov	r6,r8
  800eb0:	180b883a 	mov	r5,r3
  800eb4:	480f883a 	mov	r7,r9
  800eb8:	1009883a 	mov	r4,r2
  800ebc:	08017580 	call	801758 <__kernel_cos>
  800ec0:	100d883a 	mov	r6,r2
  800ec4:	180f883a 	mov	r7,r3
  800ec8:	003fcf06 	br	800e08 <sin+0x44>
  800ecc:	d8800117 	ldw	r2,4(sp)
  800ed0:	da000317 	ldw	r8,12(sp)
  800ed4:	d8c00217 	ldw	r3,8(sp)
  800ed8:	da400417 	ldw	r9,16(sp)
  800edc:	400d883a 	mov	r6,r8
  800ee0:	180b883a 	mov	r5,r3
  800ee4:	480f883a 	mov	r7,r9
  800ee8:	1009883a 	mov	r4,r2
  800eec:	08017580 	call	801758 <__kernel_cos>
  800ef0:	100d883a 	mov	r6,r2
  800ef4:	19e0003c 	xorhi	r7,r3,32768
  800ef8:	003fc306 	br	800e08 <sin+0x44>
  800efc:	d8800117 	ldw	r2,4(sp)
  800f00:	da000317 	ldw	r8,12(sp)
  800f04:	d8c00217 	ldw	r3,8(sp)
  800f08:	da400417 	ldw	r9,16(sp)
  800f0c:	d9000015 	stw	r4,0(sp)
  800f10:	400d883a 	mov	r6,r8
  800f14:	480f883a 	mov	r7,r9
  800f18:	180b883a 	mov	r5,r3
  800f1c:	1009883a 	mov	r4,r2
  800f20:	0802b000 	call	802b00 <__kernel_sin>
  800f24:	100d883a 	mov	r6,r2
  800f28:	19e0003c 	xorhi	r7,r3,32768
  800f2c:	003fb606 	br	800e08 <sin+0x44>

00800f30 <__ieee754_rem_pio2>:
  800f30:	deffe304 	addi	sp,sp,-116
  800f34:	00a00034 	movhi	r2,32768
  800f38:	10bfffc4 	addi	r2,r2,-1
  800f3c:	dd801915 	stw	r22,100(sp)
  800f40:	28ac703a 	and	r22,r5,r2
  800f44:	008ffa74 	movhi	r2,16361
  800f48:	10887ec4 	addi	r2,r2,8699
  800f4c:	df001b15 	stw	fp,108(sp)
  800f50:	dfc01c15 	stw	ra,112(sp)
  800f54:	ddc01a15 	stw	r23,104(sp)
  800f58:	dd401815 	stw	r21,96(sp)
  800f5c:	dd001715 	stw	r20,92(sp)
  800f60:	dcc01615 	stw	r19,88(sp)
  800f64:	dc801515 	stw	r18,84(sp)
  800f68:	dc401415 	stw	r17,80(sp)
  800f6c:	dc001315 	stw	r16,76(sp)
  800f70:	2013883a 	mov	r9,r4
  800f74:	d9400a15 	stw	r5,40(sp)
  800f78:	3039883a 	mov	fp,r6
  800f7c:	15801216 	blt	r2,r22,800fc8 <__ieee754_rem_pio2+0x98>
  800f80:	e1400115 	stw	r5,4(fp)
  800f84:	30000315 	stw	zero,12(r6)
  800f88:	e1000015 	stw	r4,0(fp)
  800f8c:	d8000b15 	stw	zero,44(sp)
  800f90:	30000215 	stw	zero,8(r6)
  800f94:	d8800b17 	ldw	r2,44(sp)
  800f98:	dfc01c17 	ldw	ra,112(sp)
  800f9c:	df001b17 	ldw	fp,108(sp)
  800fa0:	ddc01a17 	ldw	r23,104(sp)
  800fa4:	dd801917 	ldw	r22,100(sp)
  800fa8:	dd401817 	ldw	r21,96(sp)
  800fac:	dd001717 	ldw	r20,92(sp)
  800fb0:	dcc01617 	ldw	r19,88(sp)
  800fb4:	dc801517 	ldw	r18,84(sp)
  800fb8:	dc401417 	ldw	r17,80(sp)
  800fbc:	dc001317 	ldw	r16,76(sp)
  800fc0:	dec01d04 	addi	sp,sp,116
  800fc4:	f800283a 	ret
  800fc8:	009000f4 	movhi	r2,16387
  800fcc:	10b65ec4 	addi	r2,r2,-9861
  800fd0:	15800f0e 	bge	r2,r22,801010 <__ieee754_rem_pio2+0xe0>
  800fd4:	00904e74 	movhi	r2,16697
  800fd8:	10887ec4 	addi	r2,r2,8699
  800fdc:	1580330e 	bge	r2,r22,8010ac <__ieee754_rem_pio2+0x17c>
  800fe0:	009ffc34 	movhi	r2,32752
  800fe4:	10bfffc4 	addi	r2,r2,-1
  800fe8:	1580fe0e 	bge	r2,r22,8013e4 <__ieee754_rem_pio2+0x4b4>
  800fec:	280f883a 	mov	r7,r5
  800ff0:	480d883a 	mov	r6,r9
  800ff4:	08036680 	call	803668 <__subdf3>
  800ff8:	e0c00115 	stw	r3,4(fp)
  800ffc:	d8000b15 	stw	zero,44(sp)
  801000:	e0800015 	stw	r2,0(fp)
  801004:	e0800215 	stw	r2,8(fp)
  801008:	e0c00315 	stw	r3,12(fp)
  80100c:	003fe106 	br	800f94 <__ieee754_rem_pio2+0x64>
  801010:	d9000a17 	ldw	r4,40(sp)
  801014:	0100ce0e 	bge	zero,r4,801350 <__ieee754_rem_pio2+0x420>
  801018:	04151034 	movhi	r16,21568
  80101c:	044ffe74 	movhi	r17,16377
  801020:	8c487ec4 	addi	r17,r17,8699
  801024:	4809883a 	mov	r4,r9
  801028:	800d883a 	mov	r6,r16
  80102c:	880f883a 	mov	r7,r17
  801030:	08036680 	call	803668 <__subdf3>
  801034:	1025883a 	mov	r18,r2
  801038:	1827883a 	mov	r19,r3
  80103c:	b4413c26 	beq	r22,r17,801530 <__ieee754_rem_pio2+0x600>
  801040:	040698b4 	movhi	r16,6754
  801044:	8418cc44 	addi	r16,r16,25393
  801048:	044f7474 	movhi	r17,15825
  80104c:	8c6d1844 	addi	r17,r17,-19359
  801050:	1009883a 	mov	r4,r2
  801054:	180b883a 	mov	r5,r3
  801058:	800d883a 	mov	r6,r16
  80105c:	880f883a 	mov	r7,r17
  801060:	08036680 	call	803668 <__subdf3>
  801064:	100d883a 	mov	r6,r2
  801068:	9009883a 	mov	r4,r18
  80106c:	980b883a 	mov	r5,r19
  801070:	180f883a 	mov	r7,r3
  801074:	e0800015 	stw	r2,0(fp)
  801078:	e0c00115 	stw	r3,4(fp)
  80107c:	08036680 	call	803668 <__subdf3>
  801080:	1009883a 	mov	r4,r2
  801084:	800d883a 	mov	r6,r16
  801088:	880f883a 	mov	r7,r17
  80108c:	180b883a 	mov	r5,r3
  801090:	08036680 	call	803668 <__subdf3>
  801094:	1009883a 	mov	r4,r2
  801098:	00800044 	movi	r2,1
  80109c:	d8800b15 	stw	r2,44(sp)
  8010a0:	e0c00315 	stw	r3,12(fp)
  8010a4:	e1000215 	stw	r4,8(fp)
  8010a8:	003fba06 	br	800f94 <__ieee754_rem_pio2+0x64>
  8010ac:	0802e180 	call	802e18 <fabs>
  8010b0:	021b72b4 	movhi	r8,28106
  8010b4:	423220c4 	addi	r8,r8,-14205
  8010b8:	024ff934 	movhi	r9,16356
  8010bc:	4a57cc04 	addi	r9,r9,24368
  8010c0:	480f883a 	mov	r7,r9
  8010c4:	400d883a 	mov	r6,r8
  8010c8:	1009883a 	mov	r4,r2
  8010cc:	180b883a 	mov	r5,r3
  8010d0:	1025883a 	mov	r18,r2
  8010d4:	1827883a 	mov	r19,r3
  8010d8:	080375c0 	call	80375c <__muldf3>
  8010dc:	0011883a 	mov	r8,zero
  8010e0:	024ff834 	movhi	r9,16352
  8010e4:	480f883a 	mov	r7,r9
  8010e8:	400d883a 	mov	r6,r8
  8010ec:	180b883a 	mov	r5,r3
  8010f0:	1009883a 	mov	r4,r2
  8010f4:	08036e80 	call	8036e8 <__adddf3>
  8010f8:	180b883a 	mov	r5,r3
  8010fc:	1009883a 	mov	r4,r2
  801100:	0803db00 	call	803db0 <__fixdfsi>
  801104:	1009883a 	mov	r4,r2
  801108:	d8800b15 	stw	r2,44(sp)
  80110c:	0803cb80 	call	803cb8 <__floatsidf>
  801110:	1823883a 	mov	r17,r3
  801114:	1009883a 	mov	r4,r2
  801118:	d8800c15 	stw	r2,48(sp)
  80111c:	00effe74 	movhi	r3,49145
  801120:	18c87ec4 	addi	r3,r3,8699
  801124:	00951034 	movhi	r2,21568
  801128:	880b883a 	mov	r5,r17
  80112c:	180f883a 	mov	r7,r3
  801130:	100d883a 	mov	r6,r2
  801134:	dc400d15 	stw	r17,52(sp)
  801138:	080375c0 	call	80375c <__muldf3>
  80113c:	180f883a 	mov	r7,r3
  801140:	980b883a 	mov	r5,r19
  801144:	9009883a 	mov	r4,r18
  801148:	100d883a 	mov	r6,r2
  80114c:	08036e80 	call	8036e8 <__adddf3>
  801150:	d9000c17 	ldw	r4,48(sp)
  801154:	020698b4 	movhi	r8,6754
  801158:	4218cc44 	addi	r8,r8,25393
  80115c:	024f7474 	movhi	r9,15825
  801160:	4a6d1844 	addi	r9,r9,-19359
  801164:	880b883a 	mov	r5,r17
  801168:	480f883a 	mov	r7,r9
  80116c:	400d883a 	mov	r6,r8
  801170:	1025883a 	mov	r18,r2
  801174:	1827883a 	mov	r19,r3
  801178:	080375c0 	call	80375c <__muldf3>
  80117c:	d9000b17 	ldw	r4,44(sp)
  801180:	100f883a 	mov	r7,r2
  801184:	1811883a 	mov	r8,r3
  801188:	008007c4 	movi	r2,31
  80118c:	dc800e15 	stw	r18,56(sp)
  801190:	3821883a 	mov	r16,r7
  801194:	dcc00f15 	stw	r19,60(sp)
  801198:	4023883a 	mov	r17,r8
  80119c:	11010a0e 	bge	r2,r4,8015c8 <__ieee754_rem_pio2+0x698>
  8011a0:	d9000e17 	ldw	r4,56(sp)
  8011a4:	d9400f17 	ldw	r5,60(sp)
  8011a8:	800d883a 	mov	r6,r16
  8011ac:	880f883a 	mov	r7,r17
  8011b0:	08036680 	call	803668 <__subdf3>
  8011b4:	1810d53a 	srli	r8,r3,20
  8011b8:	b02dd53a 	srai	r22,r22,20
  8011bc:	1009883a 	mov	r4,r2
  8011c0:	4201ffcc 	andi	r8,r8,2047
  8011c4:	180b883a 	mov	r5,r3
  8011c8:	b211c83a 	sub	r8,r22,r8
  8011cc:	00800404 	movi	r2,16
  8011d0:	dd801015 	stw	r22,64(sp)
  8011d4:	e1000015 	stw	r4,0(fp)
  8011d8:	e1400115 	stw	r5,4(fp)
  8011dc:	1200430e 	bge	r2,r8,8012ec <__ieee754_rem_pio2+0x3bc>
  8011e0:	d9000c17 	ldw	r4,48(sp)
  8011e4:	d9400d17 	ldw	r5,52(sp)
  8011e8:	00869834 	movhi	r2,6752
  8011ec:	00cf7474 	movhi	r3,15825
  8011f0:	18ed1844 	addi	r3,r3,-19359
  8011f4:	180f883a 	mov	r7,r3
  8011f8:	100d883a 	mov	r6,r2
  8011fc:	080375c0 	call	80375c <__muldf3>
  801200:	d9000e17 	ldw	r4,56(sp)
  801204:	d9400f17 	ldw	r5,60(sp)
  801208:	100d883a 	mov	r6,r2
  80120c:	180f883a 	mov	r7,r3
  801210:	1025883a 	mov	r18,r2
  801214:	1827883a 	mov	r19,r3
  801218:	08036680 	call	803668 <__subdf3>
  80121c:	d9000c17 	ldw	r4,48(sp)
  801220:	d9400d17 	ldw	r5,52(sp)
  801224:	058b80f4 	movhi	r22,11779
  801228:	b59c1cc4 	addi	r22,r22,28787
  80122c:	05cee8f4 	movhi	r23,15267
  801230:	bdc66284 	addi	r23,r23,6538
  801234:	b00d883a 	mov	r6,r22
  801238:	b80f883a 	mov	r7,r23
  80123c:	d8801115 	stw	r2,68(sp)
  801240:	d8c01215 	stw	r3,72(sp)
  801244:	d8800815 	stw	r2,32(sp)
  801248:	080375c0 	call	80375c <__muldf3>
  80124c:	d9001217 	ldw	r4,72(sp)
  801250:	d9400f17 	ldw	r5,60(sp)
  801254:	d9800817 	ldw	r6,32(sp)
  801258:	d9000915 	stw	r4,36(sp)
  80125c:	d9c01217 	ldw	r7,72(sp)
  801260:	d9000e17 	ldw	r4,56(sp)
  801264:	1021883a 	mov	r16,r2
  801268:	1823883a 	mov	r17,r3
  80126c:	08036680 	call	803668 <__subdf3>
  801270:	180b883a 	mov	r5,r3
  801274:	900d883a 	mov	r6,r18
  801278:	980f883a 	mov	r7,r19
  80127c:	1009883a 	mov	r4,r2
  801280:	08036680 	call	803668 <__subdf3>
  801284:	180f883a 	mov	r7,r3
  801288:	880b883a 	mov	r5,r17
  80128c:	8009883a 	mov	r4,r16
  801290:	100d883a 	mov	r6,r2
  801294:	08036680 	call	803668 <__subdf3>
  801298:	d9000817 	ldw	r4,32(sp)
  80129c:	d9401217 	ldw	r5,72(sp)
  8012a0:	180f883a 	mov	r7,r3
  8012a4:	100d883a 	mov	r6,r2
  8012a8:	1021883a 	mov	r16,r2
  8012ac:	1823883a 	mov	r17,r3
  8012b0:	08036680 	call	803668 <__subdf3>
  8012b4:	1810d53a 	srli	r8,r3,20
  8012b8:	1009883a 	mov	r4,r2
  8012bc:	d8801017 	ldw	r2,64(sp)
  8012c0:	4201ffcc 	andi	r8,r8,2047
  8012c4:	180b883a 	mov	r5,r3
  8012c8:	1211c83a 	sub	r8,r2,r8
  8012cc:	00800c44 	movi	r2,49
  8012d0:	e1000015 	stw	r4,0(fp)
  8012d4:	e1400115 	stw	r5,4(fp)
  8012d8:	1200f016 	blt	r2,r8,80169c <__ieee754_rem_pio2+0x76c>
  8012dc:	d8c00817 	ldw	r3,32(sp)
  8012e0:	d9001217 	ldw	r4,72(sp)
  8012e4:	d8c00e15 	stw	r3,56(sp)
  8012e8:	d9000f15 	stw	r4,60(sp)
  8012ec:	e1800017 	ldw	r6,0(fp)
  8012f0:	e1c00117 	ldw	r7,4(fp)
  8012f4:	d9400f17 	ldw	r5,60(sp)
  8012f8:	d9000e17 	ldw	r4,56(sp)
  8012fc:	08036680 	call	803668 <__subdf3>
  801300:	180b883a 	mov	r5,r3
  801304:	800d883a 	mov	r6,r16
  801308:	880f883a 	mov	r7,r17
  80130c:	1009883a 	mov	r4,r2
  801310:	08036680 	call	803668 <__subdf3>
  801314:	d9400a17 	ldw	r5,40(sp)
  801318:	e0800215 	stw	r2,8(fp)
  80131c:	e1800204 	addi	r6,fp,8
  801320:	30c00115 	stw	r3,4(r6)
  801324:	283f1b0e 	bge	r5,zero,800f94 <__ieee754_rem_pio2+0x64>
  801328:	e0c00117 	ldw	r3,4(fp)
  80132c:	d8800b17 	ldw	r2,44(sp)
  801330:	18e0003c 	xorhi	r3,r3,32768
  801334:	0085c83a 	sub	r2,zero,r2
  801338:	e0c00115 	stw	r3,4(fp)
  80133c:	d8800b15 	stw	r2,44(sp)
  801340:	30800117 	ldw	r2,4(r6)
  801344:	10a0003c 	xorhi	r2,r2,32768
  801348:	30800115 	stw	r2,4(r6)
  80134c:	003f1106 	br	800f94 <__ieee754_rem_pio2+0x64>
  801350:	04151034 	movhi	r16,21568
  801354:	044ffe74 	movhi	r17,16377
  801358:	8c487ec4 	addi	r17,r17,8699
  80135c:	4809883a 	mov	r4,r9
  801360:	800d883a 	mov	r6,r16
  801364:	880f883a 	mov	r7,r17
  801368:	08036e80 	call	8036e8 <__adddf3>
  80136c:	1025883a 	mov	r18,r2
  801370:	1827883a 	mov	r19,r3
  801374:	b440a326 	beq	r22,r17,801604 <__ieee754_rem_pio2+0x6d4>
  801378:	040698b4 	movhi	r16,6754
  80137c:	8418cc44 	addi	r16,r16,25393
  801380:	044f7474 	movhi	r17,15825
  801384:	8c6d1844 	addi	r17,r17,-19359
  801388:	1009883a 	mov	r4,r2
  80138c:	180b883a 	mov	r5,r3
  801390:	800d883a 	mov	r6,r16
  801394:	880f883a 	mov	r7,r17
  801398:	08036e80 	call	8036e8 <__adddf3>
  80139c:	100d883a 	mov	r6,r2
  8013a0:	9009883a 	mov	r4,r18
  8013a4:	980b883a 	mov	r5,r19
  8013a8:	180f883a 	mov	r7,r3
  8013ac:	e0800015 	stw	r2,0(fp)
  8013b0:	e0c00115 	stw	r3,4(fp)
  8013b4:	08036680 	call	803668 <__subdf3>
  8013b8:	1009883a 	mov	r4,r2
  8013bc:	800d883a 	mov	r6,r16
  8013c0:	880f883a 	mov	r7,r17
  8013c4:	180b883a 	mov	r5,r3
  8013c8:	08036e80 	call	8036e8 <__adddf3>
  8013cc:	1009883a 	mov	r4,r2
  8013d0:	00bfffc4 	movi	r2,-1
  8013d4:	d8800b15 	stw	r2,44(sp)
  8013d8:	e0c00315 	stw	r3,12(fp)
  8013dc:	e1000215 	stw	r4,8(fp)
  8013e0:	003eec06 	br	800f94 <__ieee754_rem_pio2+0x64>
  8013e4:	b005d53a 	srai	r2,r22,20
  8013e8:	4821883a 	mov	r16,r9
  8013ec:	05505c34 	movhi	r21,16752
  8013f0:	15fefa84 	addi	r23,r2,-1046
  8013f4:	b826953a 	slli	r19,r23,20
  8013f8:	0029883a 	mov	r20,zero
  8013fc:	048000c4 	movi	r18,3
  801400:	b4e7c83a 	sub	r19,r22,r19
  801404:	980b883a 	mov	r5,r19
  801408:	0803db00 	call	803db0 <__fixdfsi>
  80140c:	1009883a 	mov	r4,r2
  801410:	0803cb80 	call	803cb8 <__floatsidf>
  801414:	980b883a 	mov	r5,r19
  801418:	8009883a 	mov	r4,r16
  80141c:	180f883a 	mov	r7,r3
  801420:	100d883a 	mov	r6,r2
  801424:	d8800215 	stw	r2,8(sp)
  801428:	d8c00315 	stw	r3,12(sp)
  80142c:	08036680 	call	803668 <__subdf3>
  801430:	180b883a 	mov	r5,r3
  801434:	a00d883a 	mov	r6,r20
  801438:	a80f883a 	mov	r7,r21
  80143c:	1009883a 	mov	r4,r2
  801440:	080375c0 	call	80375c <__muldf3>
  801444:	180b883a 	mov	r5,r3
  801448:	1009883a 	mov	r4,r2
  80144c:	1823883a 	mov	r17,r3
  801450:	1021883a 	mov	r16,r2
  801454:	0803db00 	call	803db0 <__fixdfsi>
  801458:	1009883a 	mov	r4,r2
  80145c:	0803cb80 	call	803cb8 <__floatsidf>
  801460:	880b883a 	mov	r5,r17
  801464:	8009883a 	mov	r4,r16
  801468:	180f883a 	mov	r7,r3
  80146c:	100d883a 	mov	r6,r2
  801470:	d8800415 	stw	r2,16(sp)
  801474:	d8c00515 	stw	r3,20(sp)
  801478:	08036680 	call	803668 <__subdf3>
  80147c:	180b883a 	mov	r5,r3
  801480:	000d883a 	mov	r6,zero
  801484:	a80f883a 	mov	r7,r21
  801488:	1009883a 	mov	r4,r2
  80148c:	080375c0 	call	80375c <__muldf3>
  801490:	d8c00715 	stw	r3,28(sp)
  801494:	d8800615 	stw	r2,24(sp)
  801498:	00000106 	br	8014a0 <__ieee754_rem_pio2+0x570>
  80149c:	8025883a 	mov	r18,r16
  8014a0:	943fffc4 	addi	r16,r18,-1
  8014a4:	800890fa 	slli	r4,r16,3
  8014a8:	d9400204 	addi	r5,sp,8
  8014ac:	000d883a 	mov	r6,zero
  8014b0:	2149883a 	add	r4,r4,r5
  8014b4:	20c00117 	ldw	r3,4(r4)
  8014b8:	20800017 	ldw	r2,0(r4)
  8014bc:	000f883a 	mov	r7,zero
  8014c0:	180b883a 	mov	r5,r3
  8014c4:	1009883a 	mov	r4,r2
  8014c8:	0803b200 	call	803b20 <__eqdf2>
  8014cc:	103ff326 	beq	r2,zero,80149c <__ieee754_rem_pio2+0x56c>
  8014d0:	00800084 	movi	r2,2
  8014d4:	00c02234 	movhi	r3,136
  8014d8:	18dcbb04 	addi	r3,r3,29420
  8014dc:	b80d883a 	mov	r6,r23
  8014e0:	900f883a 	mov	r7,r18
  8014e4:	d9000204 	addi	r4,sp,8
  8014e8:	e00b883a 	mov	r5,fp
  8014ec:	d8800015 	stw	r2,0(sp)
  8014f0:	d8c00115 	stw	r3,4(sp)
  8014f4:	0801c840 	call	801c84 <__kernel_rem_pio2>
  8014f8:	d8800b15 	stw	r2,44(sp)
  8014fc:	d8800a17 	ldw	r2,40(sp)
  801500:	103ea40e 	bge	r2,zero,800f94 <__ieee754_rem_pio2+0x64>
  801504:	e0800117 	ldw	r2,4(fp)
  801508:	d8c00b17 	ldw	r3,44(sp)
  80150c:	e1000204 	addi	r4,fp,8
  801510:	10a0003c 	xorhi	r2,r2,32768
  801514:	00c7c83a 	sub	r3,zero,r3
  801518:	e0800115 	stw	r2,4(fp)
  80151c:	d8c00b15 	stw	r3,44(sp)
  801520:	20c00117 	ldw	r3,4(r4)
  801524:	18e0003c 	xorhi	r3,r3,32768
  801528:	20c00115 	stw	r3,4(r4)
  80152c:	003e9906 	br	800f94 <__ieee754_rem_pio2+0x64>
  801530:	00869834 	movhi	r2,6752
  801534:	00cf7474 	movhi	r3,15825
  801538:	18ed1844 	addi	r3,r3,-19359
  80153c:	9009883a 	mov	r4,r18
  801540:	980b883a 	mov	r5,r19
  801544:	180f883a 	mov	r7,r3
  801548:	100d883a 	mov	r6,r2
  80154c:	08036680 	call	803668 <__subdf3>
  801550:	048b80f4 	movhi	r18,11779
  801554:	949c1cc4 	addi	r18,r18,28787
  801558:	04cee8f4 	movhi	r19,15267
  80155c:	9cc66284 	addi	r19,r19,6538
  801560:	1009883a 	mov	r4,r2
  801564:	180b883a 	mov	r5,r3
  801568:	900d883a 	mov	r6,r18
  80156c:	980f883a 	mov	r7,r19
  801570:	1021883a 	mov	r16,r2
  801574:	1823883a 	mov	r17,r3
  801578:	08036680 	call	803668 <__subdf3>
  80157c:	100d883a 	mov	r6,r2
  801580:	8009883a 	mov	r4,r16
  801584:	880b883a 	mov	r5,r17
  801588:	180f883a 	mov	r7,r3
  80158c:	e0800015 	stw	r2,0(fp)
  801590:	e0c00115 	stw	r3,4(fp)
  801594:	08036680 	call	803668 <__subdf3>
  801598:	180b883a 	mov	r5,r3
  80159c:	1009883a 	mov	r4,r2
  8015a0:	900d883a 	mov	r6,r18
  8015a4:	980f883a 	mov	r7,r19
  8015a8:	08036680 	call	803668 <__subdf3>
  8015ac:	180b883a 	mov	r5,r3
  8015b0:	1009883a 	mov	r4,r2
  8015b4:	00c00044 	movi	r3,1
  8015b8:	d8c00b15 	stw	r3,44(sp)
  8015bc:	e1400315 	stw	r5,12(fp)
  8015c0:	e1000215 	stw	r4,8(fp)
  8015c4:	003e7306 	br	800f94 <__ieee754_rem_pio2+0x64>
  8015c8:	2105883a 	add	r2,r4,r4
  8015cc:	1085883a 	add	r2,r2,r2
  8015d0:	00c02234 	movhi	r3,136
  8015d4:	18dc9b04 	addi	r3,r3,29292
  8015d8:	10c5883a 	add	r2,r2,r3
  8015dc:	113fff17 	ldw	r4,-4(r2)
  8015e0:	b13eef26 	beq	r22,r4,8011a0 <__ieee754_rem_pio2+0x270>
  8015e4:	980b883a 	mov	r5,r19
  8015e8:	400f883a 	mov	r7,r8
  8015ec:	9009883a 	mov	r4,r18
  8015f0:	800d883a 	mov	r6,r16
  8015f4:	08036680 	call	803668 <__subdf3>
  8015f8:	e0c00115 	stw	r3,4(fp)
  8015fc:	e0800015 	stw	r2,0(fp)
  801600:	003f3a06 	br	8012ec <__ieee754_rem_pio2+0x3bc>
  801604:	00869834 	movhi	r2,6752
  801608:	00cf7474 	movhi	r3,15825
  80160c:	18ed1844 	addi	r3,r3,-19359
  801610:	9009883a 	mov	r4,r18
  801614:	980b883a 	mov	r5,r19
  801618:	180f883a 	mov	r7,r3
  80161c:	100d883a 	mov	r6,r2
  801620:	08036e80 	call	8036e8 <__adddf3>
  801624:	048b80f4 	movhi	r18,11779
  801628:	949c1cc4 	addi	r18,r18,28787
  80162c:	04cee8f4 	movhi	r19,15267
  801630:	9cc66284 	addi	r19,r19,6538
  801634:	1009883a 	mov	r4,r2
  801638:	180b883a 	mov	r5,r3
  80163c:	900d883a 	mov	r6,r18
  801640:	980f883a 	mov	r7,r19
  801644:	1021883a 	mov	r16,r2
  801648:	1823883a 	mov	r17,r3
  80164c:	08036e80 	call	8036e8 <__adddf3>
  801650:	100d883a 	mov	r6,r2
  801654:	8009883a 	mov	r4,r16
  801658:	880b883a 	mov	r5,r17
  80165c:	180f883a 	mov	r7,r3
  801660:	e0800015 	stw	r2,0(fp)
  801664:	e0c00115 	stw	r3,4(fp)
  801668:	08036680 	call	803668 <__subdf3>
  80166c:	180b883a 	mov	r5,r3
  801670:	1009883a 	mov	r4,r2
  801674:	900d883a 	mov	r6,r18
  801678:	980f883a 	mov	r7,r19
  80167c:	08036e80 	call	8036e8 <__adddf3>
  801680:	180b883a 	mov	r5,r3
  801684:	1009883a 	mov	r4,r2
  801688:	00ffffc4 	movi	r3,-1
  80168c:	d8c00b15 	stw	r3,44(sp)
  801690:	e1400315 	stw	r5,12(fp)
  801694:	e1000215 	stw	r4,8(fp)
  801698:	003e3e06 	br	800f94 <__ieee754_rem_pio2+0x64>
  80169c:	d9000c17 	ldw	r4,48(sp)
  8016a0:	d9400d17 	ldw	r5,52(sp)
  8016a4:	018b8034 	movhi	r6,11776
  8016a8:	b80f883a 	mov	r7,r23
  8016ac:	080375c0 	call	80375c <__muldf3>
  8016b0:	d9000817 	ldw	r4,32(sp)
  8016b4:	d9401217 	ldw	r5,72(sp)
  8016b8:	100d883a 	mov	r6,r2
  8016bc:	180f883a 	mov	r7,r3
  8016c0:	1025883a 	mov	r18,r2
  8016c4:	1827883a 	mov	r19,r3
  8016c8:	08036680 	call	803668 <__subdf3>
  8016cc:	d9400d17 	ldw	r5,52(sp)
  8016d0:	d9000c17 	ldw	r4,48(sp)
  8016d4:	02094834 	movhi	r8,9504
  8016d8:	42127044 	addi	r8,r8,18881
  8016dc:	024e5f34 	movhi	r9,14716
  8016e0:	4a60e684 	addi	r9,r9,-31846
  8016e4:	480f883a 	mov	r7,r9
  8016e8:	400d883a 	mov	r6,r8
  8016ec:	182b883a 	mov	r21,r3
  8016f0:	d8800e15 	stw	r2,56(sp)
  8016f4:	080375c0 	call	80375c <__muldf3>
  8016f8:	d9000817 	ldw	r4,32(sp)
  8016fc:	d9401217 	ldw	r5,72(sp)
  801700:	d9800e17 	ldw	r6,56(sp)
  801704:	a80f883a 	mov	r7,r21
  801708:	1021883a 	mov	r16,r2
  80170c:	1823883a 	mov	r17,r3
  801710:	dd400f15 	stw	r21,60(sp)
  801714:	08036680 	call	803668 <__subdf3>
  801718:	180b883a 	mov	r5,r3
  80171c:	900d883a 	mov	r6,r18
  801720:	980f883a 	mov	r7,r19
  801724:	1009883a 	mov	r4,r2
  801728:	08036680 	call	803668 <__subdf3>
  80172c:	180f883a 	mov	r7,r3
  801730:	880b883a 	mov	r5,r17
  801734:	8009883a 	mov	r4,r16
  801738:	100d883a 	mov	r6,r2
  80173c:	08036680 	call	803668 <__subdf3>
  801740:	d9000e17 	ldw	r4,56(sp)
  801744:	1021883a 	mov	r16,r2
  801748:	1823883a 	mov	r17,r3
  80174c:	a80b883a 	mov	r5,r21
  801750:	180f883a 	mov	r7,r3
  801754:	003fa606 	br	8015f0 <__ieee754_rem_pio2+0x6c0>

00801758 <__kernel_cos>:
  801758:	defff104 	addi	sp,sp,-60
  80175c:	00a00034 	movhi	r2,32768
  801760:	10bfffc4 	addi	r2,r2,-1
  801764:	dd800c15 	stw	r22,48(sp)
  801768:	116c703a 	and	r22,r2,r5
  80176c:	0005883a 	mov	r2,zero
  801770:	dd000a15 	stw	r20,40(sp)
  801774:	d8800215 	stw	r2,8(sp)
  801778:	2029883a 	mov	r20,r4
  80177c:	008f9034 	movhi	r2,15936
  801780:	10bfffc4 	addi	r2,r2,-1
  801784:	0009883a 	mov	r4,zero
  801788:	dd400b15 	stw	r21,44(sp)
  80178c:	dfc00e15 	stw	ra,56(sp)
  801790:	ddc00d15 	stw	r23,52(sp)
  801794:	dcc00915 	stw	r19,36(sp)
  801798:	dc800815 	stw	r18,32(sp)
  80179c:	dc400715 	stw	r17,28(sp)
  8017a0:	dc000615 	stw	r16,24(sp)
  8017a4:	282b883a 	mov	r21,r5
  8017a8:	d9800415 	stw	r6,16(sp)
  8017ac:	d9c00515 	stw	r7,20(sp)
  8017b0:	d9000315 	stw	r4,12(sp)
  8017b4:	15809216 	blt	r2,r22,801a00 <__kernel_cos+0x2a8>
  8017b8:	a009883a 	mov	r4,r20
  8017bc:	0803db00 	call	803db0 <__fixdfsi>
  8017c0:	10011c26 	beq	r2,zero,801c34 <__kernel_cos+0x4dc>
  8017c4:	a009883a 	mov	r4,r20
  8017c8:	a80b883a 	mov	r5,r21
  8017cc:	a00d883a 	mov	r6,r20
  8017d0:	a80f883a 	mov	r7,r21
  8017d4:	080375c0 	call	80375c <__muldf3>
  8017d8:	1021883a 	mov	r16,r2
  8017dc:	1823883a 	mov	r17,r3
  8017e0:	1025883a 	mov	r18,r2
  8017e4:	1827883a 	mov	r19,r3
  8017e8:	00afa234 	movhi	r2,48776
  8017ec:	108e3504 	addi	r2,r2,14548
  8017f0:	00ef6a74 	movhi	r3,48553
  8017f4:	18feba44 	addi	r3,r3,-1303
  8017f8:	8009883a 	mov	r4,r16
  8017fc:	880b883a 	mov	r5,r17
  801800:	180f883a 	mov	r7,r3
  801804:	100d883a 	mov	r6,r2
  801808:	080375c0 	call	80375c <__muldf3>
  80180c:	022f6d74 	movhi	r8,48565
  801810:	422c7104 	addi	r8,r8,-20028
  801814:	024f88b4 	movhi	r9,15906
  801818:	4a7ba784 	addi	r9,r9,-4450
  80181c:	480f883a 	mov	r7,r9
  801820:	400d883a 	mov	r6,r8
  801824:	180b883a 	mov	r5,r3
  801828:	1009883a 	mov	r4,r2
  80182c:	08036e80 	call	8036e8 <__adddf3>
  801830:	180f883a 	mov	r7,r3
  801834:	8009883a 	mov	r4,r16
  801838:	880b883a 	mov	r5,r17
  80183c:	100d883a 	mov	r6,r2
  801840:	080375c0 	call	80375c <__muldf3>
  801844:	02202734 	movhi	r8,32924
  801848:	4214ab44 	addi	r8,r8,21165
  80184c:	024fa4b4 	movhi	r9,16018
  801850:	4a5f93c4 	addi	r9,r9,32335
  801854:	480f883a 	mov	r7,r9
  801858:	400d883a 	mov	r6,r8
  80185c:	180b883a 	mov	r5,r3
  801860:	1009883a 	mov	r4,r2
  801864:	08036680 	call	803668 <__subdf3>
  801868:	180f883a 	mov	r7,r3
  80186c:	8009883a 	mov	r4,r16
  801870:	880b883a 	mov	r5,r17
  801874:	100d883a 	mov	r6,r2
  801878:	080375c0 	call	80375c <__muldf3>
  80187c:	020672f4 	movhi	r8,6603
  801880:	42056404 	addi	r8,r8,5520
  801884:	024fbeb4 	movhi	r9,16122
  801888:	4a406804 	addi	r9,r9,416
  80188c:	480f883a 	mov	r7,r9
  801890:	400d883a 	mov	r6,r8
  801894:	180b883a 	mov	r5,r3
  801898:	1009883a 	mov	r4,r2
  80189c:	08036e80 	call	8036e8 <__adddf3>
  8018a0:	180f883a 	mov	r7,r3
  8018a4:	8009883a 	mov	r4,r16
  8018a8:	880b883a 	mov	r5,r17
  8018ac:	100d883a 	mov	r6,r2
  8018b0:	080375c0 	call	80375c <__muldf3>
  8018b4:	0205b074 	movhi	r8,5825
  8018b8:	42145dc4 	addi	r8,r8,20855
  8018bc:	024fd5f4 	movhi	r9,16215
  8018c0:	4a705b04 	addi	r9,r9,-16020
  8018c4:	480f883a 	mov	r7,r9
  8018c8:	400d883a 	mov	r6,r8
  8018cc:	180b883a 	mov	r5,r3
  8018d0:	1009883a 	mov	r4,r2
  8018d4:	08036680 	call	803668 <__subdf3>
  8018d8:	180f883a 	mov	r7,r3
  8018dc:	8009883a 	mov	r4,r16
  8018e0:	880b883a 	mov	r5,r17
  8018e4:	100d883a 	mov	r6,r2
  8018e8:	080375c0 	call	80375c <__muldf3>
  8018ec:	02155574 	movhi	r8,21845
  8018f0:	42155304 	addi	r8,r8,21836
  8018f4:	024fe974 	movhi	r9,16293
  8018f8:	4a555544 	addi	r9,r9,21845
  8018fc:	480f883a 	mov	r7,r9
  801900:	400d883a 	mov	r6,r8
  801904:	180b883a 	mov	r5,r3
  801908:	1009883a 	mov	r4,r2
  80190c:	08036e80 	call	8036e8 <__adddf3>
  801910:	180f883a 	mov	r7,r3
  801914:	880b883a 	mov	r5,r17
  801918:	8009883a 	mov	r4,r16
  80191c:	100d883a 	mov	r6,r2
  801920:	080375c0 	call	80375c <__muldf3>
  801924:	1021883a 	mov	r16,r2
  801928:	1823883a 	mov	r17,r3
  80192c:	0005883a 	mov	r2,zero
  801930:	00cff834 	movhi	r3,16352
  801934:	9009883a 	mov	r4,r18
  801938:	980b883a 	mov	r5,r19
  80193c:	180f883a 	mov	r7,r3
  801940:	100d883a 	mov	r6,r2
  801944:	080375c0 	call	80375c <__muldf3>
  801948:	980b883a 	mov	r5,r19
  80194c:	880f883a 	mov	r7,r17
  801950:	9009883a 	mov	r4,r18
  801954:	800d883a 	mov	r6,r16
  801958:	1025883a 	mov	r18,r2
  80195c:	1827883a 	mov	r19,r3
  801960:	080375c0 	call	80375c <__muldf3>
  801964:	d9c00517 	ldw	r7,20(sp)
  801968:	d9800417 	ldw	r6,16(sp)
  80196c:	a80b883a 	mov	r5,r21
  801970:	a009883a 	mov	r4,r20
  801974:	1021883a 	mov	r16,r2
  801978:	1823883a 	mov	r17,r3
  80197c:	080375c0 	call	80375c <__muldf3>
  801980:	180f883a 	mov	r7,r3
  801984:	880b883a 	mov	r5,r17
  801988:	8009883a 	mov	r4,r16
  80198c:	100d883a 	mov	r6,r2
  801990:	08036680 	call	803668 <__subdf3>
  801994:	180f883a 	mov	r7,r3
  801998:	980b883a 	mov	r5,r19
  80199c:	9009883a 	mov	r4,r18
  8019a0:	100d883a 	mov	r6,r2
  8019a4:	08036680 	call	803668 <__subdf3>
  8019a8:	0011883a 	mov	r8,zero
  8019ac:	024ffc34 	movhi	r9,16368
  8019b0:	480b883a 	mov	r5,r9
  8019b4:	180f883a 	mov	r7,r3
  8019b8:	4009883a 	mov	r4,r8
  8019bc:	100d883a 	mov	r6,r2
  8019c0:	08036680 	call	803668 <__subdf3>
  8019c4:	100d883a 	mov	r6,r2
  8019c8:	180f883a 	mov	r7,r3
  8019cc:	3005883a 	mov	r2,r6
  8019d0:	3807883a 	mov	r3,r7
  8019d4:	dfc00e17 	ldw	ra,56(sp)
  8019d8:	ddc00d17 	ldw	r23,52(sp)
  8019dc:	dd800c17 	ldw	r22,48(sp)
  8019e0:	dd400b17 	ldw	r21,44(sp)
  8019e4:	dd000a17 	ldw	r20,40(sp)
  8019e8:	dcc00917 	ldw	r19,36(sp)
  8019ec:	dc800817 	ldw	r18,32(sp)
  8019f0:	dc400717 	ldw	r17,28(sp)
  8019f4:	dc000617 	ldw	r16,24(sp)
  8019f8:	dec00f04 	addi	sp,sp,60
  8019fc:	f800283a 	ret
  801a00:	280f883a 	mov	r7,r5
  801a04:	a009883a 	mov	r4,r20
  801a08:	a00d883a 	mov	r6,r20
  801a0c:	080375c0 	call	80375c <__muldf3>
  801a10:	1021883a 	mov	r16,r2
  801a14:	1823883a 	mov	r17,r3
  801a18:	1025883a 	mov	r18,r2
  801a1c:	1827883a 	mov	r19,r3
  801a20:	00afa234 	movhi	r2,48776
  801a24:	108e3504 	addi	r2,r2,14548
  801a28:	00ef6a74 	movhi	r3,48553
  801a2c:	18feba44 	addi	r3,r3,-1303
  801a30:	8009883a 	mov	r4,r16
  801a34:	880b883a 	mov	r5,r17
  801a38:	180f883a 	mov	r7,r3
  801a3c:	100d883a 	mov	r6,r2
  801a40:	080375c0 	call	80375c <__muldf3>
  801a44:	022f6d74 	movhi	r8,48565
  801a48:	422c7104 	addi	r8,r8,-20028
  801a4c:	024f88b4 	movhi	r9,15906
  801a50:	4a7ba784 	addi	r9,r9,-4450
  801a54:	480f883a 	mov	r7,r9
  801a58:	400d883a 	mov	r6,r8
  801a5c:	180b883a 	mov	r5,r3
  801a60:	1009883a 	mov	r4,r2
  801a64:	08036e80 	call	8036e8 <__adddf3>
  801a68:	180f883a 	mov	r7,r3
  801a6c:	8009883a 	mov	r4,r16
  801a70:	880b883a 	mov	r5,r17
  801a74:	100d883a 	mov	r6,r2
  801a78:	080375c0 	call	80375c <__muldf3>
  801a7c:	02202734 	movhi	r8,32924
  801a80:	4214ab44 	addi	r8,r8,21165
  801a84:	024fa4b4 	movhi	r9,16018
  801a88:	4a5f93c4 	addi	r9,r9,32335
  801a8c:	480f883a 	mov	r7,r9
  801a90:	400d883a 	mov	r6,r8
  801a94:	180b883a 	mov	r5,r3
  801a98:	1009883a 	mov	r4,r2
  801a9c:	08036680 	call	803668 <__subdf3>
  801aa0:	180f883a 	mov	r7,r3
  801aa4:	8009883a 	mov	r4,r16
  801aa8:	880b883a 	mov	r5,r17
  801aac:	100d883a 	mov	r6,r2
  801ab0:	080375c0 	call	80375c <__muldf3>
  801ab4:	020672f4 	movhi	r8,6603
  801ab8:	42056404 	addi	r8,r8,5520
  801abc:	024fbeb4 	movhi	r9,16122
  801ac0:	4a406804 	addi	r9,r9,416
  801ac4:	480f883a 	mov	r7,r9
  801ac8:	400d883a 	mov	r6,r8
  801acc:	180b883a 	mov	r5,r3
  801ad0:	1009883a 	mov	r4,r2
  801ad4:	08036e80 	call	8036e8 <__adddf3>
  801ad8:	180f883a 	mov	r7,r3
  801adc:	8009883a 	mov	r4,r16
  801ae0:	880b883a 	mov	r5,r17
  801ae4:	100d883a 	mov	r6,r2
  801ae8:	080375c0 	call	80375c <__muldf3>
  801aec:	0205b074 	movhi	r8,5825
  801af0:	42145dc4 	addi	r8,r8,20855
  801af4:	024fd5f4 	movhi	r9,16215
  801af8:	4a705b04 	addi	r9,r9,-16020
  801afc:	480f883a 	mov	r7,r9
  801b00:	400d883a 	mov	r6,r8
  801b04:	180b883a 	mov	r5,r3
  801b08:	1009883a 	mov	r4,r2
  801b0c:	08036680 	call	803668 <__subdf3>
  801b10:	180f883a 	mov	r7,r3
  801b14:	8009883a 	mov	r4,r16
  801b18:	880b883a 	mov	r5,r17
  801b1c:	100d883a 	mov	r6,r2
  801b20:	080375c0 	call	80375c <__muldf3>
  801b24:	02155574 	movhi	r8,21845
  801b28:	42155304 	addi	r8,r8,21836
  801b2c:	024fe974 	movhi	r9,16293
  801b30:	4a555544 	addi	r9,r9,21845
  801b34:	480f883a 	mov	r7,r9
  801b38:	400d883a 	mov	r6,r8
  801b3c:	180b883a 	mov	r5,r3
  801b40:	1009883a 	mov	r4,r2
  801b44:	08036e80 	call	8036e8 <__adddf3>
  801b48:	180f883a 	mov	r7,r3
  801b4c:	880b883a 	mov	r5,r17
  801b50:	8009883a 	mov	r4,r16
  801b54:	100d883a 	mov	r6,r2
  801b58:	080375c0 	call	80375c <__muldf3>
  801b5c:	1021883a 	mov	r16,r2
  801b60:	008ff4f4 	movhi	r2,16339
  801b64:	108ccc84 	addi	r2,r2,13106
  801b68:	1823883a 	mov	r17,r3
  801b6c:	15bf6f0e 	bge	r2,r22,80192c <__kernel_cos+0x1d4>
  801b70:	008ffa74 	movhi	r2,16361
  801b74:	1580320e 	bge	r2,r22,801c40 <__kernel_cos+0x4e8>
  801b78:	0005883a 	mov	r2,zero
  801b7c:	010ff9f4 	movhi	r4,16359
  801b80:	002d883a 	mov	r22,zero
  801b84:	d8800015 	stw	r2,0(sp)
  801b88:	05cff4b4 	movhi	r23,16338
  801b8c:	d9000115 	stw	r4,4(sp)
  801b90:	0005883a 	mov	r2,zero
  801b94:	00cff834 	movhi	r3,16352
  801b98:	9009883a 	mov	r4,r18
  801b9c:	980b883a 	mov	r5,r19
  801ba0:	180f883a 	mov	r7,r3
  801ba4:	100d883a 	mov	r6,r2
  801ba8:	080375c0 	call	80375c <__muldf3>
  801bac:	180b883a 	mov	r5,r3
  801bb0:	b80f883a 	mov	r7,r23
  801bb4:	1009883a 	mov	r4,r2
  801bb8:	b00d883a 	mov	r6,r22
  801bbc:	08036680 	call	803668 <__subdf3>
  801bc0:	980b883a 	mov	r5,r19
  801bc4:	880f883a 	mov	r7,r17
  801bc8:	9009883a 	mov	r4,r18
  801bcc:	800d883a 	mov	r6,r16
  801bd0:	1025883a 	mov	r18,r2
  801bd4:	1827883a 	mov	r19,r3
  801bd8:	080375c0 	call	80375c <__muldf3>
  801bdc:	d9c00517 	ldw	r7,20(sp)
  801be0:	d9800417 	ldw	r6,16(sp)
  801be4:	a80b883a 	mov	r5,r21
  801be8:	a009883a 	mov	r4,r20
  801bec:	1021883a 	mov	r16,r2
  801bf0:	1823883a 	mov	r17,r3
  801bf4:	080375c0 	call	80375c <__muldf3>
  801bf8:	180f883a 	mov	r7,r3
  801bfc:	880b883a 	mov	r5,r17
  801c00:	8009883a 	mov	r4,r16
  801c04:	100d883a 	mov	r6,r2
  801c08:	08036680 	call	803668 <__subdf3>
  801c0c:	180f883a 	mov	r7,r3
  801c10:	980b883a 	mov	r5,r19
  801c14:	9009883a 	mov	r4,r18
  801c18:	100d883a 	mov	r6,r2
  801c1c:	08036680 	call	803668 <__subdf3>
  801c20:	d9400117 	ldw	r5,4(sp)
  801c24:	d9000017 	ldw	r4,0(sp)
  801c28:	180f883a 	mov	r7,r3
  801c2c:	100d883a 	mov	r6,r2
  801c30:	003f6306 	br	8019c0 <__kernel_cos+0x268>
  801c34:	000d883a 	mov	r6,zero
  801c38:	01cffc34 	movhi	r7,16368
  801c3c:	003f6306 	br	8019cc <__kernel_cos+0x274>
  801c40:	00bff834 	movhi	r2,65504
  801c44:	b0ad883a 	add	r22,r22,r2
  801c48:	dd800315 	stw	r22,12(sp)
  801c4c:	d9000317 	ldw	r4,12(sp)
  801c50:	0005883a 	mov	r2,zero
  801c54:	00cffc34 	movhi	r3,16368
  801c58:	002d883a 	mov	r22,zero
  801c5c:	200f883a 	mov	r7,r4
  801c60:	202f883a 	mov	r23,r4
  801c64:	180b883a 	mov	r5,r3
  801c68:	1009883a 	mov	r4,r2
  801c6c:	b00d883a 	mov	r6,r22
  801c70:	d8800215 	stw	r2,8(sp)
  801c74:	08036680 	call	803668 <__subdf3>
  801c78:	d8800015 	stw	r2,0(sp)
  801c7c:	d8c00115 	stw	r3,4(sp)
  801c80:	003fc306 	br	801b90 <__kernel_cos+0x438>

00801c84 <__kernel_rem_pio2>:
  801c84:	deff5304 	addi	sp,sp,-692
  801c88:	d880ad17 	ldw	r2,692(sp)
  801c8c:	d9009615 	stw	r4,600(sp)
  801c90:	d9409715 	stw	r5,604(sp)
  801c94:	1087883a 	add	r3,r2,r2
  801c98:	18c7883a 	add	r3,r3,r3
  801c9c:	00802234 	movhi	r2,136
  801ca0:	109cfd04 	addi	r2,r2,29684
  801ca4:	1887883a 	add	r3,r3,r2
  801ca8:	18c00017 	ldw	r3,0(r3)
  801cac:	313fff44 	addi	r4,r6,-3
  801cb0:	01400604 	movi	r5,24
  801cb4:	df00ab15 	stw	fp,684(sp)
  801cb8:	dc00a315 	stw	r16,652(sp)
  801cbc:	d8c09515 	stw	r3,596(sp)
  801cc0:	dfc0ac15 	stw	ra,688(sp)
  801cc4:	ddc0aa15 	stw	r23,680(sp)
  801cc8:	dd80a915 	stw	r22,676(sp)
  801ccc:	dd40a815 	stw	r21,672(sp)
  801cd0:	dd00a715 	stw	r20,668(sp)
  801cd4:	dcc0a615 	stw	r19,664(sp)
  801cd8:	dc80a515 	stw	r18,660(sp)
  801cdc:	dc40a415 	stw	r17,656(sp)
  801ce0:	3021883a 	mov	r16,r6
  801ce4:	d9c09815 	stw	r7,608(sp)
  801ce8:	0803f040 	call	803f04 <__divsi3>
  801cec:	d8c09817 	ldw	r3,608(sp)
  801cf0:	d8808c15 	stw	r2,560(sp)
  801cf4:	1f3fffc4 	addi	fp,r3,-1
  801cf8:	10031816 	blt	r2,zero,80295c <__kernel_rem_pio2+0xcd8>
  801cfc:	d9008c17 	ldw	r4,560(sp)
  801d00:	d9409517 	ldw	r5,596(sp)
  801d04:	20bffa24 	muli	r2,r4,-24
  801d08:	2f07883a 	add	r3,r5,fp
  801d0c:	8085883a 	add	r2,r16,r2
  801d10:	10bffa04 	addi	r2,r2,-24
  801d14:	d8809315 	stw	r2,588(sp)
  801d18:	18001516 	blt	r3,zero,801d70 <__kernel_rem_pio2+0xec>
  801d1c:	2721c83a 	sub	r16,r4,fp
  801d20:	d980ae17 	ldw	r6,696(sp)
  801d24:	8405883a 	add	r2,r16,r16
  801d28:	1085883a 	add	r2,r2,r2
  801d2c:	30a3883a 	add	r17,r6,r2
  801d30:	80e7883a 	add	r19,r16,r3
  801d34:	dc801404 	addi	r18,sp,80
  801d38:	00000106 	br	801d40 <__kernel_rem_pio2+0xbc>
  801d3c:	84000044 	addi	r16,r16,1
  801d40:	0009883a 	mov	r4,zero
  801d44:	000b883a 	mov	r5,zero
  801d48:	80000416 	blt	r16,zero,801d5c <__kernel_rem_pio2+0xd8>
  801d4c:	89000017 	ldw	r4,0(r17)
  801d50:	0803cb80 	call	803cb8 <__floatsidf>
  801d54:	1009883a 	mov	r4,r2
  801d58:	180b883a 	mov	r5,r3
  801d5c:	91400115 	stw	r5,4(r18)
  801d60:	91000015 	stw	r4,0(r18)
  801d64:	8c400104 	addi	r17,r17,4
  801d68:	94800204 	addi	r18,r18,8
  801d6c:	84fff31e 	bne	r16,r19,801d3c <__kernel_rem_pio2+0xb8>
  801d70:	d9c09517 	ldw	r7,596(sp)
  801d74:	38002416 	blt	r7,zero,801e08 <__kernel_rem_pio2+0x184>
  801d78:	da809817 	ldw	r10,608(sp)
  801d7c:	e029883a 	mov	r20,fp
  801d80:	dd406404 	addi	r21,sp,400
  801d84:	3aaf883a 	add	r23,r7,r10
  801d88:	e02c403a 	cmpge	r22,fp,zero
  801d8c:	b0023e26 	beq	r22,zero,802688 <__kernel_rem_pio2+0xa04>
  801d90:	dcc09617 	ldw	r19,600(sp)
  801d94:	0021883a 	mov	r16,zero
  801d98:	0025883a 	mov	r18,zero
  801d9c:	0023883a 	mov	r17,zero
  801da0:	a489c83a 	sub	r4,r20,r18
  801da4:	200890fa 	slli	r4,r4,3
  801da8:	99800017 	ldw	r6,0(r19)
  801dac:	99c00117 	ldw	r7,4(r19)
  801db0:	26c9883a 	add	r4,r4,sp
  801db4:	20c01517 	ldw	r3,84(r4)
  801db8:	20801417 	ldw	r2,80(r4)
  801dbc:	94800044 	addi	r18,r18,1
  801dc0:	180b883a 	mov	r5,r3
  801dc4:	1009883a 	mov	r4,r2
  801dc8:	080375c0 	call	80375c <__muldf3>
  801dcc:	180f883a 	mov	r7,r3
  801dd0:	880b883a 	mov	r5,r17
  801dd4:	8009883a 	mov	r4,r16
  801dd8:	100d883a 	mov	r6,r2
  801ddc:	08036e80 	call	8036e8 <__adddf3>
  801de0:	1021883a 	mov	r16,r2
  801de4:	d8809817 	ldw	r2,608(sp)
  801de8:	9cc00204 	addi	r19,r19,8
  801dec:	1823883a 	mov	r17,r3
  801df0:	14bfeb1e 	bne	r2,r18,801da0 <__kernel_rem_pio2+0x11c>
  801df4:	a5000044 	addi	r20,r20,1
  801df8:	ac400115 	stw	r17,4(r21)
  801dfc:	ac000015 	stw	r16,0(r21)
  801e00:	ad400204 	addi	r21,r21,8
  801e04:	a5ffe11e 	bne	r20,r23,801d8c <__kernel_rem_pio2+0x108>
  801e08:	d8c09517 	ldw	r3,596(sp)
  801e0c:	d9409317 	ldw	r5,588(sp)
  801e10:	e038403a 	cmpge	fp,fp,zero
  801e14:	d8c08d15 	stw	r3,564(sp)
  801e18:	d9008d17 	ldw	r4,564(sp)
  801e1c:	18c5883a 	add	r2,r3,r3
  801e20:	10c7883a 	add	r3,r2,r3
  801e24:	1907883a 	add	r3,r3,r4
  801e28:	1085883a 	add	r2,r2,r2
  801e2c:	16c5883a 	add	r2,r2,sp
  801e30:	1ec7883a 	add	r3,r3,sp
  801e34:	29400050 	cmplti	r5,r5,1
  801e38:	df00a215 	stw	fp,648(sp)
  801e3c:	d8809915 	stw	r2,612(sp)
  801e40:	d8c0a115 	stw	r3,644(sp)
  801e44:	d940a015 	stw	r5,640(sp)
  801e48:	d9808d17 	ldw	r6,564(sp)
  801e4c:	300490fa 	slli	r2,r6,3
  801e50:	16c5883a 	add	r2,r2,sp
  801e54:	15006417 	ldw	r20,400(r2)
  801e58:	15406517 	ldw	r21,404(r2)
  801e5c:	01802e0e 	bge	zero,r6,801f18 <__kernel_rem_pio2+0x294>
  801e60:	102d883a 	mov	r22,r2
  801e64:	302f883a 	mov	r23,r6
  801e68:	d839883a 	mov	fp,sp
  801e6c:	0005883a 	mov	r2,zero
  801e70:	00cf9c34 	movhi	r3,15984
  801e74:	180f883a 	mov	r7,r3
  801e78:	100d883a 	mov	r6,r2
  801e7c:	a009883a 	mov	r4,r20
  801e80:	a80b883a 	mov	r5,r21
  801e84:	080375c0 	call	80375c <__muldf3>
  801e88:	180b883a 	mov	r5,r3
  801e8c:	1009883a 	mov	r4,r2
  801e90:	0803db00 	call	803db0 <__fixdfsi>
  801e94:	1009883a 	mov	r4,r2
  801e98:	0803cb80 	call	803cb8 <__floatsidf>
  801e9c:	1021883a 	mov	r16,r2
  801ea0:	1823883a 	mov	r17,r3
  801ea4:	0005883a 	mov	r2,zero
  801ea8:	00f05c34 	movhi	r3,49520
  801eac:	180f883a 	mov	r7,r3
  801eb0:	8009883a 	mov	r4,r16
  801eb4:	880b883a 	mov	r5,r17
  801eb8:	100d883a 	mov	r6,r2
  801ebc:	080375c0 	call	80375c <__muldf3>
  801ec0:	180b883a 	mov	r5,r3
  801ec4:	a80f883a 	mov	r7,r21
  801ec8:	a00d883a 	mov	r6,r20
  801ecc:	1009883a 	mov	r4,r2
  801ed0:	08036e80 	call	8036e8 <__adddf3>
  801ed4:	180b883a 	mov	r5,r3
  801ed8:	1009883a 	mov	r4,r2
  801edc:	0803db00 	call	803db0 <__fixdfsi>
  801ee0:	e0800015 	stw	r2,0(fp)
  801ee4:	b5bffe04 	addi	r22,r22,-8
  801ee8:	b0806417 	ldw	r2,400(r22)
  801eec:	b0c06517 	ldw	r3,404(r22)
  801ef0:	8009883a 	mov	r4,r16
  801ef4:	880b883a 	mov	r5,r17
  801ef8:	180f883a 	mov	r7,r3
  801efc:	100d883a 	mov	r6,r2
  801f00:	08036e80 	call	8036e8 <__adddf3>
  801f04:	bdffffc4 	addi	r23,r23,-1
  801f08:	e7000104 	addi	fp,fp,4
  801f0c:	1029883a 	mov	r20,r2
  801f10:	182b883a 	mov	r21,r3
  801f14:	b83fd51e 	bne	r23,zero,801e6c <__kernel_rem_pio2+0x1e8>
  801f18:	d9809317 	ldw	r6,588(sp)
  801f1c:	a80b883a 	mov	r5,r21
  801f20:	a009883a 	mov	r4,r20
  801f24:	08030540 	call	803054 <scalbn>
  801f28:	0009883a 	mov	r4,zero
  801f2c:	014ff034 	movhi	r5,16320
  801f30:	280f883a 	mov	r7,r5
  801f34:	200d883a 	mov	r6,r4
  801f38:	180b883a 	mov	r5,r3
  801f3c:	1009883a 	mov	r4,r2
  801f40:	1021883a 	mov	r16,r2
  801f44:	1823883a 	mov	r17,r3
  801f48:	080375c0 	call	80375c <__muldf3>
  801f4c:	180b883a 	mov	r5,r3
  801f50:	1009883a 	mov	r4,r2
  801f54:	0802e300 	call	802e30 <floor>
  801f58:	0011883a 	mov	r8,zero
  801f5c:	02700834 	movhi	r9,49184
  801f60:	480f883a 	mov	r7,r9
  801f64:	400d883a 	mov	r6,r8
  801f68:	180b883a 	mov	r5,r3
  801f6c:	1009883a 	mov	r4,r2
  801f70:	080375c0 	call	80375c <__muldf3>
  801f74:	180f883a 	mov	r7,r3
  801f78:	100d883a 	mov	r6,r2
  801f7c:	880b883a 	mov	r5,r17
  801f80:	8009883a 	mov	r4,r16
  801f84:	08036e80 	call	8036e8 <__adddf3>
  801f88:	180b883a 	mov	r5,r3
  801f8c:	1009883a 	mov	r4,r2
  801f90:	1823883a 	mov	r17,r3
  801f94:	1021883a 	mov	r16,r2
  801f98:	0803db00 	call	803db0 <__fixdfsi>
  801f9c:	1009883a 	mov	r4,r2
  801fa0:	d8809415 	stw	r2,592(sp)
  801fa4:	0803cb80 	call	803cb8 <__floatsidf>
  801fa8:	880b883a 	mov	r5,r17
  801fac:	8009883a 	mov	r4,r16
  801fb0:	180f883a 	mov	r7,r3
  801fb4:	100d883a 	mov	r6,r2
  801fb8:	08036680 	call	803668 <__subdf3>
  801fbc:	d9c0a017 	ldw	r7,640(sp)
  801fc0:	180d883a 	mov	r6,r3
  801fc4:	1021883a 	mov	r16,r2
  801fc8:	1823883a 	mov	r17,r3
  801fcc:	38017d1e 	bne	r7,zero,8025c4 <__kernel_rem_pio2+0x940>
  801fd0:	da808d17 	ldw	r10,564(sp)
  801fd4:	d9009317 	ldw	r4,588(sp)
  801fd8:	00c00604 	movi	r3,24
  801fdc:	50bfffc4 	addi	r2,r10,-1
  801fe0:	1085883a 	add	r2,r2,r2
  801fe4:	1085883a 	add	r2,r2,r2
  801fe8:	16c5883a 	add	r2,r2,sp
  801fec:	11400017 	ldw	r5,0(r2)
  801ff0:	1907c83a 	sub	r3,r3,r4
  801ff4:	d9c09317 	ldw	r7,588(sp)
  801ff8:	28cdd83a 	sra	r6,r5,r3
  801ffc:	010005c4 	movi	r4,23
  802000:	da809417 	ldw	r10,592(sp)
  802004:	30c6983a 	sll	r3,r6,r3
  802008:	21c9c83a 	sub	r4,r4,r7
  80200c:	5195883a 	add	r10,r10,r6
  802010:	28cbc83a 	sub	r5,r5,r3
  802014:	2909d83a 	sra	r4,r5,r4
  802018:	da809415 	stw	r10,592(sp)
  80201c:	11400015 	stw	r5,0(r2)
  802020:	d9009215 	stw	r4,584(sp)
  802024:	d9409217 	ldw	r5,584(sp)
  802028:	0140270e 	bge	zero,r5,8020c8 <__kernel_rem_pio2+0x444>
  80202c:	d9809417 	ldw	r6,592(sp)
  802030:	d9c08d17 	ldw	r7,564(sp)
  802034:	31800044 	addi	r6,r6,1
  802038:	d9809415 	stw	r6,592(sp)
  80203c:	01c1a50e 	bge	zero,r7,8026d4 <__kernel_rem_pio2+0xa50>
  802040:	002d883a 	mov	r22,zero
  802044:	000b883a 	mov	r5,zero
  802048:	d809883a 	mov	r4,sp
  80204c:	01c04034 	movhi	r7,256
  802050:	01804034 	movhi	r6,256
  802054:	31bfffc4 	addi	r6,r6,-1
  802058:	00000806 	br	80207c <__kernel_rem_pio2+0x3f8>
  80205c:	38c5c83a 	sub	r2,r7,r3
  802060:	18000226 	beq	r3,zero,80206c <__kernel_rem_pio2+0x3e8>
  802064:	05800044 	movi	r22,1
  802068:	20800015 	stw	r2,0(r4)
  80206c:	da808d17 	ldw	r10,564(sp)
  802070:	29400044 	addi	r5,r5,1
  802074:	21000104 	addi	r4,r4,4
  802078:	51400926 	beq	r10,r5,8020a0 <__kernel_rem_pio2+0x41c>
  80207c:	b004c03a 	cmpne	r2,r22,zero
  802080:	20c00017 	ldw	r3,0(r4)
  802084:	103ff526 	beq	r2,zero,80205c <__kernel_rem_pio2+0x3d8>
  802088:	da808d17 	ldw	r10,564(sp)
  80208c:	30c5c83a 	sub	r2,r6,r3
  802090:	29400044 	addi	r5,r5,1
  802094:	20800015 	stw	r2,0(r4)
  802098:	21000104 	addi	r4,r4,4
  80209c:	517ff71e 	bne	r10,r5,80207c <__kernel_rem_pio2+0x3f8>
  8020a0:	d880a017 	ldw	r2,640(sp)
  8020a4:	1000051e 	bne	r2,zero,8020bc <__kernel_rem_pio2+0x438>
  8020a8:	d8c09317 	ldw	r3,588(sp)
  8020ac:	00800044 	movi	r2,1
  8020b0:	18814e26 	beq	r3,r2,8025ec <__kernel_rem_pio2+0x968>
  8020b4:	00800084 	movi	r2,2
  8020b8:	18815826 	beq	r3,r2,80261c <__kernel_rem_pio2+0x998>
  8020bc:	d9c09217 	ldw	r7,584(sp)
  8020c0:	00800084 	movi	r2,2
  8020c4:	38806926 	beq	r7,r2,80226c <__kernel_rem_pio2+0x5e8>
  8020c8:	000d883a 	mov	r6,zero
  8020cc:	000f883a 	mov	r7,zero
  8020d0:	8009883a 	mov	r4,r16
  8020d4:	880b883a 	mov	r5,r17
  8020d8:	0803b200 	call	803b20 <__eqdf2>
  8020dc:	1000811e 	bne	r2,zero,8022e4 <__kernel_rem_pio2+0x660>
  8020e0:	da808d17 	ldw	r10,564(sp)
  8020e4:	d8809517 	ldw	r2,596(sp)
  8020e8:	51bfffc4 	addi	r6,r10,-1
  8020ec:	30800c16 	blt	r6,r2,802120 <__kernel_rem_pio2+0x49c>
  8020f0:	3185883a 	add	r2,r6,r6
  8020f4:	1085883a 	add	r2,r2,r2
  8020f8:	16c9883a 	add	r4,r2,sp
  8020fc:	3007883a 	mov	r3,r6
  802100:	000b883a 	mov	r5,zero
  802104:	20800017 	ldw	r2,0(r4)
  802108:	d9c09517 	ldw	r7,596(sp)
  80210c:	18ffffc4 	addi	r3,r3,-1
  802110:	213fff04 	addi	r4,r4,-4
  802114:	288ab03a 	or	r5,r5,r2
  802118:	19fffa0e 	bge	r3,r7,802104 <__kernel_rem_pio2+0x480>
  80211c:	2800791e 	bne	r5,zero,802304 <__kernel_rem_pio2+0x680>
  802120:	da809917 	ldw	r10,612(sp)
  802124:	50bfff17 	ldw	r2,-4(r10)
  802128:	1001511e 	bne	r2,zero,802670 <__kernel_rem_pio2+0x9ec>
  80212c:	d880a117 	ldw	r2,644(sp)
  802130:	01000044 	movi	r4,1
  802134:	10ffff04 	addi	r3,r2,-4
  802138:	18ffff04 	addi	r3,r3,-4
  80213c:	18800017 	ldw	r2,0(r3)
  802140:	21000044 	addi	r4,r4,1
  802144:	103ffc26 	beq	r2,zero,802138 <__kernel_rem_pio2+0x4b4>
  802148:	d8c08d17 	ldw	r3,564(sp)
  80214c:	192f883a 	add	r23,r3,r4
  802150:	1f000044 	addi	fp,r3,1
  802154:	bf00020e 	bge	r23,fp,802160 <__kernel_rem_pio2+0x4dc>
  802158:	ddc08d15 	stw	r23,564(sp)
  80215c:	003f3a06 	br	801e48 <__kernel_rem_pio2+0x1c4>
  802160:	d9408c17 	ldw	r5,560(sp)
  802164:	d9009817 	ldw	r4,608(sp)
  802168:	da80ae17 	ldw	r10,696(sp)
  80216c:	1945883a 	add	r2,r3,r5
  802170:	190f883a 	add	r7,r3,r4
  802174:	1085883a 	add	r2,r2,r2
  802178:	380a90fa 	slli	r5,r7,3
  80217c:	e00c90fa 	slli	r6,fp,3
  802180:	1085883a 	add	r2,r2,r2
  802184:	5085883a 	add	r2,r10,r2
  802188:	d8c01404 	addi	r3,sp,80
  80218c:	d9006404 	addi	r4,sp,400
  802190:	10800104 	addi	r2,r2,4
  802194:	196b883a 	add	r21,r3,r5
  802198:	21a1883a 	add	r16,r4,r6
  80219c:	d8809115 	stw	r2,580(sp)
  8021a0:	d9c09015 	stw	r7,576(sp)
  8021a4:	d8809117 	ldw	r2,580(sp)
  8021a8:	11000017 	ldw	r4,0(r2)
  8021ac:	0803cb80 	call	803cb8 <__floatsidf>
  8021b0:	a8c00115 	stw	r3,4(r21)
  8021b4:	d8c0a217 	ldw	r3,648(sp)
  8021b8:	a8800015 	stw	r2,0(r21)
  8021bc:	18002826 	beq	r3,zero,802260 <__kernel_rem_pio2+0x5dc>
  8021c0:	d9009017 	ldw	r4,576(sp)
  8021c4:	dd009617 	ldw	r20,600(sp)
  8021c8:	0023883a 	mov	r17,zero
  8021cc:	200490fa 	slli	r2,r4,3
  8021d0:	002d883a 	mov	r22,zero
  8021d4:	0025883a 	mov	r18,zero
  8021d8:	16e7883a 	add	r19,r2,sp
  8021dc:	98801417 	ldw	r2,80(r19)
  8021e0:	98c01517 	ldw	r3,84(r19)
  8021e4:	a1800017 	ldw	r6,0(r20)
  8021e8:	a1c00117 	ldw	r7,4(r20)
  8021ec:	180b883a 	mov	r5,r3
  8021f0:	1009883a 	mov	r4,r2
  8021f4:	080375c0 	call	80375c <__muldf3>
  8021f8:	180f883a 	mov	r7,r3
  8021fc:	900b883a 	mov	r5,r18
  802200:	8809883a 	mov	r4,r17
  802204:	100d883a 	mov	r6,r2
  802208:	08036e80 	call	8036e8 <__adddf3>
  80220c:	d9409817 	ldw	r5,608(sp)
  802210:	b5800044 	addi	r22,r22,1
  802214:	9cfffe04 	addi	r19,r19,-8
  802218:	1023883a 	mov	r17,r2
  80221c:	1825883a 	mov	r18,r3
  802220:	a5000204 	addi	r20,r20,8
  802224:	2dbfed1e 	bne	r5,r22,8021dc <__kernel_rem_pio2+0x558>
  802228:	d9809117 	ldw	r6,580(sp)
  80222c:	d9c09017 	ldw	r7,576(sp)
  802230:	e7000044 	addi	fp,fp,1
  802234:	31800104 	addi	r6,r6,4
  802238:	39c00044 	addi	r7,r7,1
  80223c:	84800115 	stw	r18,4(r16)
  802240:	84400015 	stw	r17,0(r16)
  802244:	d9809115 	stw	r6,580(sp)
  802248:	ad400204 	addi	r21,r21,8
  80224c:	84000204 	addi	r16,r16,8
  802250:	d9c09015 	stw	r7,576(sp)
  802254:	bf3fd30e 	bge	r23,fp,8021a4 <__kernel_rem_pio2+0x520>
  802258:	ddc08d15 	stw	r23,564(sp)
  80225c:	003efa06 	br	801e48 <__kernel_rem_pio2+0x1c4>
  802260:	0023883a 	mov	r17,zero
  802264:	0025883a 	mov	r18,zero
  802268:	003fef06 	br	802228 <__kernel_rem_pio2+0x5a4>
  80226c:	0029883a 	mov	r20,zero
  802270:	054ffc34 	movhi	r21,16368
  802274:	880f883a 	mov	r7,r17
  802278:	800d883a 	mov	r6,r16
  80227c:	a009883a 	mov	r4,r20
  802280:	a80b883a 	mov	r5,r21
  802284:	08036680 	call	803668 <__subdf3>
  802288:	1025883a 	mov	r18,r2
  80228c:	b005003a 	cmpeq	r2,r22,zero
  802290:	1827883a 	mov	r19,r3
  802294:	9021883a 	mov	r16,r18
  802298:	1823883a 	mov	r17,r3
  80229c:	103f8a1e 	bne	r2,zero,8020c8 <__kernel_rem_pio2+0x444>
  8022a0:	d9809317 	ldw	r6,588(sp)
  8022a4:	0009883a 	mov	r4,zero
  8022a8:	a80b883a 	mov	r5,r21
  8022ac:	08030540 	call	803054 <scalbn>
  8022b0:	180f883a 	mov	r7,r3
  8022b4:	9009883a 	mov	r4,r18
  8022b8:	980b883a 	mov	r5,r19
  8022bc:	100d883a 	mov	r6,r2
  8022c0:	08036680 	call	803668 <__subdf3>
  8022c4:	1021883a 	mov	r16,r2
  8022c8:	1823883a 	mov	r17,r3
  8022cc:	000d883a 	mov	r6,zero
  8022d0:	000f883a 	mov	r7,zero
  8022d4:	8009883a 	mov	r4,r16
  8022d8:	880b883a 	mov	r5,r17
  8022dc:	0803b200 	call	803b20 <__eqdf2>
  8022e0:	103f7f26 	beq	r2,zero,8020e0 <__kernel_rem_pio2+0x45c>
  8022e4:	000d883a 	mov	r6,zero
  8022e8:	000f883a 	mov	r7,zero
  8022ec:	8009883a 	mov	r4,r16
  8022f0:	880b883a 	mov	r5,r17
  8022f4:	0803b200 	call	803b20 <__eqdf2>
  8022f8:	10019a1e 	bne	r2,zero,802964 <__kernel_rem_pio2+0xce0>
  8022fc:	da808d17 	ldw	r10,564(sp)
  802300:	51bfffc4 	addi	r6,r10,-1
  802304:	3185883a 	add	r2,r6,r6
  802308:	1085883a 	add	r2,r2,r2
  80230c:	d9009317 	ldw	r4,588(sp)
  802310:	16c5883a 	add	r2,r2,sp
  802314:	10c00017 	ldw	r3,0(r2)
  802318:	213ffa04 	addi	r4,r4,-24
  80231c:	d9009315 	stw	r4,588(sp)
  802320:	1801d41e 	bne	r3,zero,802a74 <__kernel_rem_pio2+0xdf0>
  802324:	d9808d15 	stw	r6,564(sp)
  802328:	1007883a 	mov	r3,r2
  80232c:	d9408d17 	ldw	r5,564(sp)
  802330:	d9809317 	ldw	r6,588(sp)
  802334:	18ffff04 	addi	r3,r3,-4
  802338:	18800017 	ldw	r2,0(r3)
  80233c:	297fffc4 	addi	r5,r5,-1
  802340:	31bffa04 	addi	r6,r6,-24
  802344:	d9408d15 	stw	r5,564(sp)
  802348:	d9809315 	stw	r6,588(sp)
  80234c:	103ff726 	beq	r2,zero,80232c <__kernel_rem_pio2+0x6a8>
  802350:	d9809317 	ldw	r6,588(sp)
  802354:	0005883a 	mov	r2,zero
  802358:	00cffc34 	movhi	r3,16368
  80235c:	180b883a 	mov	r5,r3
  802360:	1009883a 	mov	r4,r2
  802364:	08030540 	call	803054 <scalbn>
  802368:	d9808d17 	ldw	r6,564(sp)
  80236c:	1021883a 	mov	r16,r2
  802370:	1823883a 	mov	r17,r3
  802374:	30004616 	blt	r6,zero,802490 <__kernel_rem_pio2+0x80c>
  802378:	300690fa 	slli	r3,r6,3
  80237c:	3185883a 	add	r2,r6,r6
  802380:	1085883a 	add	r2,r2,r2
  802384:	16e9883a 	add	r20,r2,sp
  802388:	1ee5883a 	add	r18,r3,sp
  80238c:	3027883a 	mov	r19,r6
  802390:	057fffc4 	movi	r21,-1
  802394:	a1000017 	ldw	r4,0(r20)
  802398:	9cffffc4 	addi	r19,r19,-1
  80239c:	a53fff04 	addi	r20,r20,-4
  8023a0:	0803cb80 	call	803cb8 <__floatsidf>
  8023a4:	800d883a 	mov	r6,r16
  8023a8:	880f883a 	mov	r7,r17
  8023ac:	180b883a 	mov	r5,r3
  8023b0:	1009883a 	mov	r4,r2
  8023b4:	080375c0 	call	80375c <__muldf3>
  8023b8:	0015883a 	mov	r10,zero
  8023bc:	02cf9c34 	movhi	r11,15984
  8023c0:	880b883a 	mov	r5,r17
  8023c4:	8009883a 	mov	r4,r16
  8023c8:	90c06515 	stw	r3,404(r18)
  8023cc:	90806415 	stw	r2,400(r18)
  8023d0:	580f883a 	mov	r7,r11
  8023d4:	500d883a 	mov	r6,r10
  8023d8:	080375c0 	call	80375c <__muldf3>
  8023dc:	1021883a 	mov	r16,r2
  8023e0:	1823883a 	mov	r17,r3
  8023e4:	94bffe04 	addi	r18,r18,-8
  8023e8:	9d7fea1e 	bne	r19,r21,802394 <__kernel_rem_pio2+0x710>
  8023ec:	d9c09517 	ldw	r7,596(sp)
  8023f0:	dd808d17 	ldw	r22,564(sp)
  8023f4:	002b883a 	mov	r21,zero
  8023f8:	382e403a 	cmpge	r23,r7,zero
  8023fc:	b800aa26 	beq	r23,zero,8026a8 <__kernel_rem_pio2+0xa24>
  802400:	a800a916 	blt	r21,zero,8026a8 <__kernel_rem_pio2+0xa24>
  802404:	b00690fa 	slli	r3,r22,3
  802408:	d8806404 	addi	r2,sp,400
  80240c:	0021883a 	mov	r16,zero
  802410:	10e9883a 	add	r20,r2,r3
  802414:	0027883a 	mov	r19,zero
  802418:	0023883a 	mov	r17,zero
  80241c:	04802234 	movhi	r18,136
  802420:	949d0104 	addi	r18,r18,29700
  802424:	00000106 	br	80242c <__kernel_rem_pio2+0x7a8>
  802428:	acc01116 	blt	r21,r19,802470 <__kernel_rem_pio2+0x7ec>
  80242c:	91000017 	ldw	r4,0(r18)
  802430:	91400117 	ldw	r5,4(r18)
  802434:	a1800017 	ldw	r6,0(r20)
  802438:	a1c00117 	ldw	r7,4(r20)
  80243c:	9cc00044 	addi	r19,r19,1
  802440:	94800204 	addi	r18,r18,8
  802444:	080375c0 	call	80375c <__muldf3>
  802448:	180f883a 	mov	r7,r3
  80244c:	880b883a 	mov	r5,r17
  802450:	8009883a 	mov	r4,r16
  802454:	100d883a 	mov	r6,r2
  802458:	08036e80 	call	8036e8 <__adddf3>
  80245c:	da809517 	ldw	r10,596(sp)
  802460:	a5000204 	addi	r20,r20,8
  802464:	1021883a 	mov	r16,r2
  802468:	1823883a 	mov	r17,r3
  80246c:	54ffee0e 	bge	r10,r19,802428 <__kernel_rem_pio2+0x7a4>
  802470:	a80490fa 	slli	r2,r21,3
  802474:	b5bfffc4 	addi	r22,r22,-1
  802478:	ad400044 	addi	r21,r21,1
  80247c:	16c5883a 	add	r2,r2,sp
  802480:	14403d15 	stw	r17,244(r2)
  802484:	14003c15 	stw	r16,240(r2)
  802488:	00bfffc4 	movi	r2,-1
  80248c:	b0bfdb1e 	bne	r22,r2,8023fc <__kernel_rem_pio2+0x778>
  802490:	d8c0ad17 	ldw	r3,692(sp)
  802494:	00800084 	movi	r2,2
  802498:	10c09316 	blt	r2,r3,8026e8 <__kernel_rem_pio2+0xa64>
  80249c:	00c1120e 	bge	zero,r3,8028e8 <__kernel_rem_pio2+0xc64>
  8024a0:	d9808d17 	ldw	r6,564(sp)
  8024a4:	30018d16 	blt	r6,zero,802adc <__kernel_rem_pio2+0xe58>
  8024a8:	d8c08d17 	ldw	r3,564(sp)
  8024ac:	0011883a 	mov	r8,zero
  8024b0:	0013883a 	mov	r9,zero
  8024b4:	180490fa 	slli	r2,r3,3
  8024b8:	1823883a 	mov	r17,r3
  8024bc:	04bfffc4 	movi	r18,-1
  8024c0:	16e1883a 	add	r16,r2,sp
  8024c4:	80803c17 	ldw	r2,240(r16)
  8024c8:	80c03d17 	ldw	r3,244(r16)
  8024cc:	480b883a 	mov	r5,r9
  8024d0:	4009883a 	mov	r4,r8
  8024d4:	180f883a 	mov	r7,r3
  8024d8:	100d883a 	mov	r6,r2
  8024dc:	08036e80 	call	8036e8 <__adddf3>
  8024e0:	8c7fffc4 	addi	r17,r17,-1
  8024e4:	843ffe04 	addi	r16,r16,-8
  8024e8:	1011883a 	mov	r8,r2
  8024ec:	1813883a 	mov	r9,r3
  8024f0:	8cbff41e 	bne	r17,r18,8024c4 <__kernel_rem_pio2+0x840>
  8024f4:	d9009217 	ldw	r4,584(sp)
  8024f8:	20015b1e 	bne	r4,zero,802a68 <__kernel_rem_pio2+0xde4>
  8024fc:	4009883a 	mov	r4,r8
  802500:	480b883a 	mov	r5,r9
  802504:	d9809717 	ldw	r6,604(sp)
  802508:	d8803c17 	ldw	r2,240(sp)
  80250c:	480f883a 	mov	r7,r9
  802510:	31400115 	stw	r5,4(r6)
  802514:	31000015 	stw	r4,0(r6)
  802518:	d8c03d17 	ldw	r3,244(sp)
  80251c:	400d883a 	mov	r6,r8
  802520:	1009883a 	mov	r4,r2
  802524:	180b883a 	mov	r5,r3
  802528:	08036680 	call	803668 <__subdf3>
  80252c:	d9c08d17 	ldw	r7,564(sp)
  802530:	1011883a 	mov	r8,r2
  802534:	1813883a 	mov	r9,r3
  802538:	01c00d0e 	bge	zero,r7,802570 <__kernel_rem_pio2+0x8ec>
  80253c:	0023883a 	mov	r17,zero
  802540:	dc003e04 	addi	r16,sp,248
  802544:	81800017 	ldw	r6,0(r16)
  802548:	81c00117 	ldw	r7,4(r16)
  80254c:	480b883a 	mov	r5,r9
  802550:	4009883a 	mov	r4,r8
  802554:	08036e80 	call	8036e8 <__adddf3>
  802558:	da808d17 	ldw	r10,564(sp)
  80255c:	8c400044 	addi	r17,r17,1
  802560:	1011883a 	mov	r8,r2
  802564:	1813883a 	mov	r9,r3
  802568:	84000204 	addi	r16,r16,8
  80256c:	8abff51e 	bne	r17,r10,802544 <__kernel_rem_pio2+0x8c0>
  802570:	d8809217 	ldw	r2,584(sp)
  802574:	10000226 	beq	r2,zero,802580 <__kernel_rem_pio2+0x8fc>
  802578:	48e0003c 	xorhi	r3,r9,32768
  80257c:	1813883a 	mov	r9,r3
  802580:	d8c09717 	ldw	r3,604(sp)
  802584:	1a400315 	stw	r9,12(r3)
  802588:	1a000215 	stw	r8,8(r3)
  80258c:	d8c09417 	ldw	r3,592(sp)
  802590:	188001cc 	andi	r2,r3,7
  802594:	dfc0ac17 	ldw	ra,688(sp)
  802598:	df00ab17 	ldw	fp,684(sp)
  80259c:	ddc0aa17 	ldw	r23,680(sp)
  8025a0:	dd80a917 	ldw	r22,676(sp)
  8025a4:	dd40a817 	ldw	r21,672(sp)
  8025a8:	dd00a717 	ldw	r20,668(sp)
  8025ac:	dcc0a617 	ldw	r19,664(sp)
  8025b0:	dc80a517 	ldw	r18,660(sp)
  8025b4:	dc40a417 	ldw	r17,656(sp)
  8025b8:	dc00a317 	ldw	r16,652(sp)
  8025bc:	dec0ad04 	addi	sp,sp,692
  8025c0:	f800283a 	ret
  8025c4:	d8809317 	ldw	r2,588(sp)
  8025c8:	10001f1e 	bne	r2,zero,802648 <__kernel_rem_pio2+0x9c4>
  8025cc:	d8c08d17 	ldw	r3,564(sp)
  8025d0:	18c5883a 	add	r2,r3,r3
  8025d4:	1085883a 	add	r2,r2,r2
  8025d8:	16c5883a 	add	r2,r2,sp
  8025dc:	10ffff17 	ldw	r3,-4(r2)
  8025e0:	1807d5fa 	srai	r3,r3,23
  8025e4:	d8c09215 	stw	r3,584(sp)
  8025e8:	003e8e06 	br	802024 <__kernel_rem_pio2+0x3a0>
  8025ec:	d9008d17 	ldw	r4,564(sp)
  8025f0:	d9409317 	ldw	r5,588(sp)
  8025f4:	2145c83a 	sub	r2,r4,r5
  8025f8:	1085883a 	add	r2,r2,r2
  8025fc:	1085883a 	add	r2,r2,r2
  802600:	16c5883a 	add	r2,r2,sp
  802604:	10c00017 	ldw	r3,0(r2)
  802608:	01002034 	movhi	r4,128
  80260c:	213fffc4 	addi	r4,r4,-1
  802610:	1906703a 	and	r3,r3,r4
  802614:	10c00015 	stw	r3,0(r2)
  802618:	003ea806 	br	8020bc <__kernel_rem_pio2+0x438>
  80261c:	d9808d17 	ldw	r6,564(sp)
  802620:	01001034 	movhi	r4,64
  802624:	213fffc4 	addi	r4,r4,-1
  802628:	30bfffc4 	addi	r2,r6,-1
  80262c:	1085883a 	add	r2,r2,r2
  802630:	1085883a 	add	r2,r2,r2
  802634:	16c5883a 	add	r2,r2,sp
  802638:	10c00017 	ldw	r3,0(r2)
  80263c:	1906703a 	and	r3,r3,r4
  802640:	10c00015 	stw	r3,0(r2)
  802644:	003e9d06 	br	8020bc <__kernel_rem_pio2+0x438>
  802648:	0005883a 	mov	r2,zero
  80264c:	00cff834 	movhi	r3,16352
  802650:	300b883a 	mov	r5,r6
  802654:	180f883a 	mov	r7,r3
  802658:	8009883a 	mov	r4,r16
  80265c:	100d883a 	mov	r6,r2
  802660:	0803c300 	call	803c30 <__gedf2>
  802664:	10001d0e 	bge	r2,zero,8026dc <__kernel_rem_pio2+0xa58>
  802668:	d8009215 	stw	zero,584(sp)
  80266c:	003e9606 	br	8020c8 <__kernel_rem_pio2+0x444>
  802670:	d8c08d17 	ldw	r3,564(sp)
  802674:	01000044 	movi	r4,1
  802678:	192f883a 	add	r23,r3,r4
  80267c:	1f000044 	addi	fp,r3,1
  802680:	bf3eb516 	blt	r23,fp,802158 <__kernel_rem_pio2+0x4d4>
  802684:	003eb606 	br	802160 <__kernel_rem_pio2+0x4dc>
  802688:	0021883a 	mov	r16,zero
  80268c:	0023883a 	mov	r17,zero
  802690:	a5000044 	addi	r20,r20,1
  802694:	ac400115 	stw	r17,4(r21)
  802698:	ac000015 	stw	r16,0(r21)
  80269c:	ad400204 	addi	r21,r21,8
  8026a0:	a5fdba1e 	bne	r20,r23,801d8c <__kernel_rem_pio2+0x108>
  8026a4:	003dd806 	br	801e08 <__kernel_rem_pio2+0x184>
  8026a8:	a80490fa 	slli	r2,r21,3
  8026ac:	0021883a 	mov	r16,zero
  8026b0:	0023883a 	mov	r17,zero
  8026b4:	16c5883a 	add	r2,r2,sp
  8026b8:	14403d15 	stw	r17,244(r2)
  8026bc:	14003c15 	stw	r16,240(r2)
  8026c0:	b5bfffc4 	addi	r22,r22,-1
  8026c4:	00bfffc4 	movi	r2,-1
  8026c8:	ad400044 	addi	r21,r21,1
  8026cc:	b0bf4b1e 	bne	r22,r2,8023fc <__kernel_rem_pio2+0x778>
  8026d0:	003f6f06 	br	802490 <__kernel_rem_pio2+0x80c>
  8026d4:	002d883a 	mov	r22,zero
  8026d8:	003e7106 	br	8020a0 <__kernel_rem_pio2+0x41c>
  8026dc:	01000084 	movi	r4,2
  8026e0:	d9009215 	stw	r4,584(sp)
  8026e4:	003e5106 	br	80202c <__kernel_rem_pio2+0x3a8>
  8026e8:	d900ad17 	ldw	r4,692(sp)
  8026ec:	008000c4 	movi	r2,3
  8026f0:	20bfa61e 	bne	r4,r2,80258c <__kernel_rem_pio2+0x908>
  8026f4:	d9c08d17 	ldw	r7,564(sp)
  8026f8:	01c02c0e 	bge	zero,r7,8027ac <__kernel_rem_pio2+0xb28>
  8026fc:	3805883a 	mov	r2,r7
  802700:	00000106 	br	802708 <__kernel_rem_pio2+0xa84>
  802704:	d8808e17 	ldw	r2,568(sp)
  802708:	113fffc4 	addi	r4,r2,-1
  80270c:	100690fa 	slli	r3,r2,3
  802710:	200490fa 	slli	r2,r4,3
  802714:	d9008e15 	stw	r4,568(sp)
  802718:	1ef9883a 	add	fp,r3,sp
  80271c:	16c5883a 	add	r2,r2,sp
  802720:	d8809a15 	stw	r2,616(sp)
  802724:	11403c04 	addi	r5,r2,240
  802728:	e1803c04 	addi	r6,fp,240
  80272c:	14003c17 	ldw	r16,240(r2)
  802730:	e5003c17 	ldw	r20,240(fp)
  802734:	d9409b15 	stw	r5,620(sp)
  802738:	d9809c15 	stw	r6,624(sp)
  80273c:	35400117 	ldw	r21,4(r6)
  802740:	2c400117 	ldw	r17,4(r5)
  802744:	8009883a 	mov	r4,r16
  802748:	a00d883a 	mov	r6,r20
  80274c:	880b883a 	mov	r5,r17
  802750:	a80f883a 	mov	r7,r21
  802754:	08036e80 	call	8036e8 <__adddf3>
  802758:	100d883a 	mov	r6,r2
  80275c:	880b883a 	mov	r5,r17
  802760:	8009883a 	mov	r4,r16
  802764:	180f883a 	mov	r7,r3
  802768:	1025883a 	mov	r18,r2
  80276c:	1827883a 	mov	r19,r3
  802770:	08036680 	call	803668 <__subdf3>
  802774:	180f883a 	mov	r7,r3
  802778:	a80b883a 	mov	r5,r21
  80277c:	a009883a 	mov	r4,r20
  802780:	100d883a 	mov	r6,r2
  802784:	08036e80 	call	8036e8 <__adddf3>
  802788:	e0803c15 	stw	r2,240(fp)
  80278c:	d9c09c17 	ldw	r7,624(sp)
  802790:	38c00115 	stw	r3,4(r7)
  802794:	da809a17 	ldw	r10,616(sp)
  802798:	54803c15 	stw	r18,240(r10)
  80279c:	d8809b17 	ldw	r2,620(sp)
  8027a0:	14c00115 	stw	r19,4(r2)
  8027a4:	d8c08e17 	ldw	r3,568(sp)
  8027a8:	183fd61e 	bne	r3,zero,802704 <__kernel_rem_pio2+0xa80>
  8027ac:	d9008d17 	ldw	r4,564(sp)
  8027b0:	00800044 	movi	r2,1
  8027b4:	1100cc0e 	bge	r2,r4,802ae8 <__kernel_rem_pio2+0xe64>
  8027b8:	d8808d17 	ldw	r2,564(sp)
  8027bc:	117fffc4 	addi	r5,r2,-1
  8027c0:	100690fa 	slli	r3,r2,3
  8027c4:	280490fa 	slli	r2,r5,3
  8027c8:	d9408f15 	stw	r5,572(sp)
  8027cc:	1ef9883a 	add	fp,r3,sp
  8027d0:	16c5883a 	add	r2,r2,sp
  8027d4:	d8809d15 	stw	r2,628(sp)
  8027d8:	11803c04 	addi	r6,r2,240
  8027dc:	e1c03c04 	addi	r7,fp,240
  8027e0:	14003c17 	ldw	r16,240(r2)
  8027e4:	e5003c17 	ldw	r20,240(fp)
  8027e8:	d9809e15 	stw	r6,632(sp)
  8027ec:	d9c09f15 	stw	r7,636(sp)
  8027f0:	34400117 	ldw	r17,4(r6)
  8027f4:	3d400117 	ldw	r21,4(r7)
  8027f8:	8009883a 	mov	r4,r16
  8027fc:	880b883a 	mov	r5,r17
  802800:	a00d883a 	mov	r6,r20
  802804:	a80f883a 	mov	r7,r21
  802808:	08036e80 	call	8036e8 <__adddf3>
  80280c:	100d883a 	mov	r6,r2
  802810:	880b883a 	mov	r5,r17
  802814:	8009883a 	mov	r4,r16
  802818:	180f883a 	mov	r7,r3
  80281c:	1025883a 	mov	r18,r2
  802820:	1827883a 	mov	r19,r3
  802824:	08036680 	call	803668 <__subdf3>
  802828:	180f883a 	mov	r7,r3
  80282c:	a80b883a 	mov	r5,r21
  802830:	a009883a 	mov	r4,r20
  802834:	100d883a 	mov	r6,r2
  802838:	08036e80 	call	8036e8 <__adddf3>
  80283c:	e0803c15 	stw	r2,240(fp)
  802840:	da809f17 	ldw	r10,636(sp)
  802844:	50c00115 	stw	r3,4(r10)
  802848:	d8c09d17 	ldw	r3,628(sp)
  80284c:	d8808f17 	ldw	r2,572(sp)
  802850:	1c803c15 	stw	r18,240(r3)
  802854:	d9009e17 	ldw	r4,632(sp)
  802858:	00c00044 	movi	r3,1
  80285c:	24c00115 	stw	r19,4(r4)
  802860:	d9408f17 	ldw	r5,572(sp)
  802864:	28ffd51e 	bne	r5,r3,8027bc <__kernel_rem_pio2+0xb38>
  802868:	dc008d17 	ldw	r16,564(sp)
  80286c:	0011883a 	mov	r8,zero
  802870:	1825883a 	mov	r18,r3
  802874:	800490fa 	slli	r2,r16,3
  802878:	0013883a 	mov	r9,zero
  80287c:	16e3883a 	add	r17,r2,sp
  802880:	88803c17 	ldw	r2,240(r17)
  802884:	88c03d17 	ldw	r3,244(r17)
  802888:	480b883a 	mov	r5,r9
  80288c:	4009883a 	mov	r4,r8
  802890:	180f883a 	mov	r7,r3
  802894:	100d883a 	mov	r6,r2
  802898:	08036e80 	call	8036e8 <__adddf3>
  80289c:	843fffc4 	addi	r16,r16,-1
  8028a0:	8c7ffe04 	addi	r17,r17,-8
  8028a4:	1011883a 	mov	r8,r2
  8028a8:	1813883a 	mov	r9,r3
  8028ac:	84bff41e 	bne	r16,r18,802880 <__kernel_rem_pio2+0xbfc>
  8028b0:	d9809217 	ldw	r6,584(sp)
  8028b4:	30007a1e 	bne	r6,zero,802aa0 <__kernel_rem_pio2+0xe1c>
  8028b8:	d9c09717 	ldw	r7,604(sp)
  8028bc:	d8803c17 	ldw	r2,240(sp)
  8028c0:	d9003e17 	ldw	r4,248(sp)
  8028c4:	3a400515 	stw	r9,20(r7)
  8028c8:	d8c03d17 	ldw	r3,244(sp)
  8028cc:	d9403f17 	ldw	r5,252(sp)
  8028d0:	3a000415 	stw	r8,16(r7)
  8028d4:	38c00115 	stw	r3,4(r7)
  8028d8:	39400315 	stw	r5,12(r7)
  8028dc:	38800015 	stw	r2,0(r7)
  8028e0:	39000215 	stw	r4,8(r7)
  8028e4:	003f2906 	br	80258c <__kernel_rem_pio2+0x908>
  8028e8:	183f281e 	bne	r3,zero,80258c <__kernel_rem_pio2+0x908>
  8028ec:	d9408d17 	ldw	r5,564(sp)
  8028f0:	28008016 	blt	r5,zero,802af4 <__kernel_rem_pio2+0xe70>
  8028f4:	dc008d17 	ldw	r16,564(sp)
  8028f8:	000d883a 	mov	r6,zero
  8028fc:	000f883a 	mov	r7,zero
  802900:	800490fa 	slli	r2,r16,3
  802904:	04bfffc4 	movi	r18,-1
  802908:	16e3883a 	add	r17,r2,sp
  80290c:	88803c17 	ldw	r2,240(r17)
  802910:	88c03d17 	ldw	r3,244(r17)
  802914:	380b883a 	mov	r5,r7
  802918:	3009883a 	mov	r4,r6
  80291c:	180f883a 	mov	r7,r3
  802920:	100d883a 	mov	r6,r2
  802924:	08036e80 	call	8036e8 <__adddf3>
  802928:	843fffc4 	addi	r16,r16,-1
  80292c:	8c7ffe04 	addi	r17,r17,-8
  802930:	100d883a 	mov	r6,r2
  802934:	180f883a 	mov	r7,r3
  802938:	84bff41e 	bne	r16,r18,80290c <__kernel_rem_pio2+0xc88>
  80293c:	da809217 	ldw	r10,584(sp)
  802940:	50000226 	beq	r10,zero,80294c <__kernel_rem_pio2+0xcc8>
  802944:	38e0003c 	xorhi	r3,r7,32768
  802948:	180f883a 	mov	r7,r3
  80294c:	d8809717 	ldw	r2,604(sp)
  802950:	11c00115 	stw	r7,4(r2)
  802954:	11800015 	stw	r6,0(r2)
  802958:	003f0c06 	br	80258c <__kernel_rem_pio2+0x908>
  80295c:	d8008c15 	stw	zero,560(sp)
  802960:	003ce606 	br	801cfc <__kernel_rem_pio2+0x78>
  802964:	d9c09317 	ldw	r7,588(sp)
  802968:	880b883a 	mov	r5,r17
  80296c:	8009883a 	mov	r4,r16
  802970:	01cdc83a 	sub	r6,zero,r7
  802974:	08030540 	call	803054 <scalbn>
  802978:	0011883a 	mov	r8,zero
  80297c:	02505c34 	movhi	r9,16752
  802980:	480f883a 	mov	r7,r9
  802984:	1009883a 	mov	r4,r2
  802988:	180b883a 	mov	r5,r3
  80298c:	400d883a 	mov	r6,r8
  802990:	102d883a 	mov	r22,r2
  802994:	182f883a 	mov	r23,r3
  802998:	0803c300 	call	803c30 <__gedf2>
  80299c:	10003716 	blt	r2,zero,802a7c <__kernel_rem_pio2+0xdf8>
  8029a0:	0005883a 	mov	r2,zero
  8029a4:	00cf9c34 	movhi	r3,15984
  8029a8:	180f883a 	mov	r7,r3
  8029ac:	100d883a 	mov	r6,r2
  8029b0:	b009883a 	mov	r4,r22
  8029b4:	b80b883a 	mov	r5,r23
  8029b8:	080375c0 	call	80375c <__muldf3>
  8029bc:	180b883a 	mov	r5,r3
  8029c0:	1009883a 	mov	r4,r2
  8029c4:	0803db00 	call	803db0 <__fixdfsi>
  8029c8:	1009883a 	mov	r4,r2
  8029cc:	0803cb80 	call	803cb8 <__floatsidf>
  8029d0:	da808d17 	ldw	r10,564(sp)
  8029d4:	1023883a 	mov	r17,r2
  8029d8:	1825883a 	mov	r18,r3
  8029dc:	0005883a 	mov	r2,zero
  8029e0:	00f05c34 	movhi	r3,49520
  8029e4:	180f883a 	mov	r7,r3
  8029e8:	8809883a 	mov	r4,r17
  8029ec:	900b883a 	mov	r5,r18
  8029f0:	100d883a 	mov	r6,r2
  8029f4:	52ab883a 	add	r21,r10,r10
  8029f8:	080375c0 	call	80375c <__muldf3>
  8029fc:	180f883a 	mov	r7,r3
  802a00:	b80b883a 	mov	r5,r23
  802a04:	100d883a 	mov	r6,r2
  802a08:	b009883a 	mov	r4,r22
  802a0c:	08036e80 	call	8036e8 <__adddf3>
  802a10:	100d883a 	mov	r6,r2
  802a14:	d8808d17 	ldw	r2,564(sp)
  802a18:	180b883a 	mov	r5,r3
  802a1c:	3009883a 	mov	r4,r6
  802a20:	10800044 	addi	r2,r2,1
  802a24:	ad6b883a 	add	r21,r21,r21
  802a28:	d8808d15 	stw	r2,564(sp)
  802a2c:	0803db00 	call	803db0 <__fixdfsi>
  802a30:	d8c08d17 	ldw	r3,564(sp)
  802a34:	aeeb883a 	add	r21,r21,sp
  802a38:	8809883a 	mov	r4,r17
  802a3c:	900b883a 	mov	r5,r18
  802a40:	a8800015 	stw	r2,0(r21)
  802a44:	18e1883a 	add	r16,r3,r3
  802a48:	0803db00 	call	803db0 <__fixdfsi>
  802a4c:	d9009317 	ldw	r4,588(sp)
  802a50:	8421883a 	add	r16,r16,r16
  802a54:	86e1883a 	add	r16,r16,sp
  802a58:	21000604 	addi	r4,r4,24
  802a5c:	d9009315 	stw	r4,588(sp)
  802a60:	80800015 	stw	r2,0(r16)
  802a64:	003e3a06 	br	802350 <__kernel_rem_pio2+0x6cc>
  802a68:	4009883a 	mov	r4,r8
  802a6c:	4960003c 	xorhi	r5,r9,32768
  802a70:	003ea406 	br	802504 <__kernel_rem_pio2+0x880>
  802a74:	d9808d15 	stw	r6,564(sp)
  802a78:	003e3506 	br	802350 <__kernel_rem_pio2+0x6cc>
  802a7c:	d9408d17 	ldw	r5,564(sp)
  802a80:	b009883a 	mov	r4,r22
  802a84:	2961883a 	add	r16,r5,r5
  802a88:	8421883a 	add	r16,r16,r16
  802a8c:	b80b883a 	mov	r5,r23
  802a90:	86e1883a 	add	r16,r16,sp
  802a94:	0803db00 	call	803db0 <__fixdfsi>
  802a98:	80800015 	stw	r2,0(r16)
  802a9c:	003e2c06 	br	802350 <__kernel_rem_pio2+0x6cc>
  802aa0:	d8c03d17 	ldw	r3,244(sp)
  802aa4:	d9403f17 	ldw	r5,252(sp)
  802aa8:	da809717 	ldw	r10,604(sp)
  802aac:	d8803c17 	ldw	r2,240(sp)
  802ab0:	d9003e17 	ldw	r4,248(sp)
  802ab4:	49e0003c 	xorhi	r7,r9,32768
  802ab8:	51c00515 	stw	r7,20(r10)
  802abc:	19a0003c 	xorhi	r6,r3,32768
  802ac0:	29e0003c 	xorhi	r7,r5,32768
  802ac4:	51800115 	stw	r6,4(r10)
  802ac8:	51c00315 	stw	r7,12(r10)
  802acc:	50800015 	stw	r2,0(r10)
  802ad0:	51000215 	stw	r4,8(r10)
  802ad4:	52000415 	stw	r8,16(r10)
  802ad8:	003eac06 	br	80258c <__kernel_rem_pio2+0x908>
  802adc:	0011883a 	mov	r8,zero
  802ae0:	0013883a 	mov	r9,zero
  802ae4:	003e8306 	br	8024f4 <__kernel_rem_pio2+0x870>
  802ae8:	0011883a 	mov	r8,zero
  802aec:	0013883a 	mov	r9,zero
  802af0:	003f6f06 	br	8028b0 <__kernel_rem_pio2+0xc2c>
  802af4:	000d883a 	mov	r6,zero
  802af8:	000f883a 	mov	r7,zero
  802afc:	003f8f06 	br	80293c <__kernel_rem_pio2+0xcb8>

00802b00 <__kernel_sin>:
  802b00:	00a00034 	movhi	r2,32768
  802b04:	10bfffc4 	addi	r2,r2,-1
  802b08:	deffef04 	addi	sp,sp,-68
  802b0c:	1144703a 	and	r2,r2,r5
  802b10:	00cf9034 	movhi	r3,15936
  802b14:	18ffffc4 	addi	r3,r3,-1
  802b18:	dd400d15 	stw	r21,52(sp)
  802b1c:	dd000c15 	stw	r20,48(sp)
  802b20:	dfc01015 	stw	ra,64(sp)
  802b24:	ddc00f15 	stw	r23,60(sp)
  802b28:	dd800e15 	stw	r22,56(sp)
  802b2c:	dcc00b15 	stw	r19,44(sp)
  802b30:	dc800a15 	stw	r18,40(sp)
  802b34:	dc400915 	stw	r17,36(sp)
  802b38:	dc000815 	stw	r16,32(sp)
  802b3c:	2029883a 	mov	r20,r4
  802b40:	282b883a 	mov	r21,r5
  802b44:	d9800415 	stw	r6,16(sp)
  802b48:	d9c00515 	stw	r7,20(sp)
  802b4c:	18800216 	blt	r3,r2,802b58 <__kernel_sin+0x58>
  802b50:	0803db00 	call	803db0 <__fixdfsi>
  802b54:	10008826 	beq	r2,zero,802d78 <__kernel_sin+0x278>
  802b58:	a009883a 	mov	r4,r20
  802b5c:	a80b883a 	mov	r5,r21
  802b60:	a00d883a 	mov	r6,r20
  802b64:	a80f883a 	mov	r7,r21
  802b68:	080375c0 	call	80375c <__muldf3>
  802b6c:	102d883a 	mov	r22,r2
  802b70:	a009883a 	mov	r4,r20
  802b74:	a80b883a 	mov	r5,r21
  802b78:	b00d883a 	mov	r6,r22
  802b7c:	180f883a 	mov	r7,r3
  802b80:	182f883a 	mov	r23,r3
  802b84:	d8800215 	stw	r2,8(sp)
  802b88:	d8c00315 	stw	r3,12(sp)
  802b8c:	080375c0 	call	80375c <__muldf3>
  802b90:	d9000217 	ldw	r4,8(sp)
  802b94:	0216b434 	movhi	r8,23248
  802b98:	42355f04 	addi	r8,r8,-10884
  802b9c:	024f79b4 	movhi	r9,15846
  802ba0:	4a764e84 	addi	r9,r9,-9926
  802ba4:	480f883a 	mov	r7,r9
  802ba8:	400d883a 	mov	r6,r8
  802bac:	b80b883a 	mov	r5,r23
  802bb0:	d8800615 	stw	r2,24(sp)
  802bb4:	d8c00715 	stw	r3,28(sp)
  802bb8:	080375c0 	call	80375c <__muldf3>
  802bbc:	02228b34 	movhi	r8,35372
  802bc0:	42273ac4 	addi	r8,r8,-25365
  802bc4:	024f96f4 	movhi	r9,15963
  802bc8:	4a797984 	addi	r9,r9,-6682
  802bcc:	480f883a 	mov	r7,r9
  802bd0:	400d883a 	mov	r6,r8
  802bd4:	180b883a 	mov	r5,r3
  802bd8:	1009883a 	mov	r4,r2
  802bdc:	08036680 	call	803668 <__subdf3>
  802be0:	d9000217 	ldw	r4,8(sp)
  802be4:	180f883a 	mov	r7,r3
  802be8:	b80b883a 	mov	r5,r23
  802bec:	100d883a 	mov	r6,r2
  802bf0:	080375c0 	call	80375c <__muldf3>
  802bf4:	0215ecb4 	movhi	r8,22450
  802bf8:	423f9f44 	addi	r8,r8,-387
  802bfc:	024fb1f4 	movhi	r9,16071
  802c00:	4a4778c4 	addi	r9,r9,7651
  802c04:	480f883a 	mov	r7,r9
  802c08:	400d883a 	mov	r6,r8
  802c0c:	180b883a 	mov	r5,r3
  802c10:	1009883a 	mov	r4,r2
  802c14:	08036e80 	call	8036e8 <__adddf3>
  802c18:	d9000217 	ldw	r4,8(sp)
  802c1c:	180f883a 	mov	r7,r3
  802c20:	b80b883a 	mov	r5,r23
  802c24:	100d883a 	mov	r6,r2
  802c28:	080375c0 	call	80375c <__muldf3>
  802c2c:	02067074 	movhi	r8,6593
  802c30:	42187544 	addi	r8,r8,25045
  802c34:	024fcab4 	movhi	r9,16170
  802c38:	4a406804 	addi	r9,r9,416
  802c3c:	480f883a 	mov	r7,r9
  802c40:	400d883a 	mov	r6,r8
  802c44:	180b883a 	mov	r5,r3
  802c48:	1009883a 	mov	r4,r2
  802c4c:	08036680 	call	803668 <__subdf3>
  802c50:	d9000217 	ldw	r4,8(sp)
  802c54:	180f883a 	mov	r7,r3
  802c58:	b80b883a 	mov	r5,r23
  802c5c:	100d883a 	mov	r6,r2
  802c60:	080375c0 	call	80375c <__muldf3>
  802c64:	02044474 	movhi	r8,4369
  802c68:	423e2984 	addi	r8,r8,-1882
  802c6c:	024fe074 	movhi	r9,16257
  802c70:	4a444444 	addi	r9,r9,4369
  802c74:	180b883a 	mov	r5,r3
  802c78:	480f883a 	mov	r7,r9
  802c7c:	1009883a 	mov	r4,r2
  802c80:	400d883a 	mov	r6,r8
  802c84:	08036e80 	call	8036e8 <__adddf3>
  802c88:	1021883a 	mov	r16,r2
  802c8c:	d8800617 	ldw	r2,24(sp)
  802c90:	1823883a 	mov	r17,r3
  802c94:	d8800015 	stw	r2,0(sp)
  802c98:	d8800717 	ldw	r2,28(sp)
  802c9c:	d8800115 	stw	r2,4(sp)
  802ca0:	d8801117 	ldw	r2,68(sp)
  802ca4:	10004126 	beq	r2,zero,802dac <__kernel_sin+0x2ac>
  802ca8:	d9000417 	ldw	r4,16(sp)
  802cac:	d9400517 	ldw	r5,20(sp)
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	00cff834 	movhi	r3,16352
  802cb8:	180f883a 	mov	r7,r3
  802cbc:	100d883a 	mov	r6,r2
  802cc0:	080375c0 	call	80375c <__muldf3>
  802cc4:	d9000017 	ldw	r4,0(sp)
  802cc8:	d9400717 	ldw	r5,28(sp)
  802ccc:	800d883a 	mov	r6,r16
  802cd0:	880f883a 	mov	r7,r17
  802cd4:	1021883a 	mov	r16,r2
  802cd8:	1823883a 	mov	r17,r3
  802cdc:	080375c0 	call	80375c <__muldf3>
  802ce0:	180f883a 	mov	r7,r3
  802ce4:	880b883a 	mov	r5,r17
  802ce8:	8009883a 	mov	r4,r16
  802cec:	100d883a 	mov	r6,r2
  802cf0:	08036680 	call	803668 <__subdf3>
  802cf4:	d9000217 	ldw	r4,8(sp)
  802cf8:	b80b883a 	mov	r5,r23
  802cfc:	180f883a 	mov	r7,r3
  802d00:	100d883a 	mov	r6,r2
  802d04:	080375c0 	call	80375c <__muldf3>
  802d08:	d9c00517 	ldw	r7,20(sp)
  802d0c:	d9800417 	ldw	r6,16(sp)
  802d10:	180b883a 	mov	r5,r3
  802d14:	1009883a 	mov	r4,r2
  802d18:	08036680 	call	803668 <__subdf3>
  802d1c:	d9000017 	ldw	r4,0(sp)
  802d20:	d9400717 	ldw	r5,28(sp)
  802d24:	02155574 	movhi	r8,21845
  802d28:	42155244 	addi	r8,r8,21833
  802d2c:	024ff174 	movhi	r9,16325
  802d30:	4a555544 	addi	r9,r9,21845
  802d34:	480f883a 	mov	r7,r9
  802d38:	400d883a 	mov	r6,r8
  802d3c:	1021883a 	mov	r16,r2
  802d40:	1823883a 	mov	r17,r3
  802d44:	080375c0 	call	80375c <__muldf3>
  802d48:	180f883a 	mov	r7,r3
  802d4c:	880b883a 	mov	r5,r17
  802d50:	8009883a 	mov	r4,r16
  802d54:	100d883a 	mov	r6,r2
  802d58:	08036e80 	call	8036e8 <__adddf3>
  802d5c:	180f883a 	mov	r7,r3
  802d60:	a80b883a 	mov	r5,r21
  802d64:	a009883a 	mov	r4,r20
  802d68:	100d883a 	mov	r6,r2
  802d6c:	08036680 	call	803668 <__subdf3>
  802d70:	1029883a 	mov	r20,r2
  802d74:	182b883a 	mov	r21,r3
  802d78:	a005883a 	mov	r2,r20
  802d7c:	a807883a 	mov	r3,r21
  802d80:	dfc01017 	ldw	ra,64(sp)
  802d84:	ddc00f17 	ldw	r23,60(sp)
  802d88:	dd800e17 	ldw	r22,56(sp)
  802d8c:	dd400d17 	ldw	r21,52(sp)
  802d90:	dd000c17 	ldw	r20,48(sp)
  802d94:	dcc00b17 	ldw	r19,44(sp)
  802d98:	dc800a17 	ldw	r18,40(sp)
  802d9c:	dc400917 	ldw	r17,36(sp)
  802da0:	dc000817 	ldw	r16,32(sp)
  802da4:	dec01104 	addi	sp,sp,68
  802da8:	f800283a 	ret
  802dac:	d9000217 	ldw	r4,8(sp)
  802db0:	b80b883a 	mov	r5,r23
  802db4:	800d883a 	mov	r6,r16
  802db8:	180f883a 	mov	r7,r3
  802dbc:	080375c0 	call	80375c <__muldf3>
  802dc0:	02155574 	movhi	r8,21845
  802dc4:	42155244 	addi	r8,r8,21833
  802dc8:	024ff174 	movhi	r9,16325
  802dcc:	4a555544 	addi	r9,r9,21845
  802dd0:	480f883a 	mov	r7,r9
  802dd4:	400d883a 	mov	r6,r8
  802dd8:	180b883a 	mov	r5,r3
  802ddc:	1009883a 	mov	r4,r2
  802de0:	08036680 	call	803668 <__subdf3>
  802de4:	d9000017 	ldw	r4,0(sp)
  802de8:	d9400717 	ldw	r5,28(sp)
  802dec:	180f883a 	mov	r7,r3
  802df0:	100d883a 	mov	r6,r2
  802df4:	080375c0 	call	80375c <__muldf3>
  802df8:	180f883a 	mov	r7,r3
  802dfc:	a80b883a 	mov	r5,r21
  802e00:	a009883a 	mov	r4,r20
  802e04:	100d883a 	mov	r6,r2
  802e08:	08036e80 	call	8036e8 <__adddf3>
  802e0c:	1029883a 	mov	r20,r2
  802e10:	182b883a 	mov	r21,r3
  802e14:	003fd806 	br	802d78 <__kernel_sin+0x278>

00802e18 <fabs>:
  802e18:	01e00034 	movhi	r7,32768
  802e1c:	39ffffc4 	addi	r7,r7,-1
  802e20:	394e703a 	and	r7,r7,r5
  802e24:	2005883a 	mov	r2,r4
  802e28:	3807883a 	mov	r3,r7
  802e2c:	f800283a 	ret

00802e30 <floor>:
  802e30:	2805d53a 	srai	r2,r5,20
  802e34:	defff604 	addi	sp,sp,-40
  802e38:	dd800615 	stw	r22,24(sp)
  802e3c:	10c1ffcc 	andi	r3,r2,2047
  802e40:	1dbf0044 	addi	r22,r3,-1023
  802e44:	008004c4 	movi	r2,19
  802e48:	ddc00715 	stw	r23,28(sp)
  802e4c:	dc800215 	stw	r18,8(sp)
  802e50:	dc400115 	stw	r17,4(sp)
  802e54:	dc000015 	stw	r16,0(sp)
  802e58:	dfc00915 	stw	ra,36(sp)
  802e5c:	df000815 	stw	fp,32(sp)
  802e60:	dd400515 	stw	r21,20(sp)
  802e64:	dd000415 	stw	r20,16(sp)
  802e68:	dcc00315 	stw	r19,12(sp)
  802e6c:	2021883a 	mov	r16,r4
  802e70:	2823883a 	mov	r17,r5
  802e74:	282f883a 	mov	r23,r5
  802e78:	2025883a 	mov	r18,r4
  802e7c:	15802916 	blt	r2,r22,802f24 <floor+0xf4>
  802e80:	b0004816 	blt	r22,zero,802fa4 <floor+0x174>
  802e84:	00800434 	movhi	r2,16
  802e88:	10bfffc4 	addi	r2,r2,-1
  802e8c:	15b9d83a 	sra	fp,r2,r22
  802e90:	282f883a 	mov	r23,r5
  802e94:	e144703a 	and	r2,fp,r5
  802e98:	1104b03a 	or	r2,r2,r4
  802e9c:	10001326 	beq	r2,zero,802eec <floor+0xbc>
  802ea0:	00a20034 	movhi	r2,34816
  802ea4:	109d6704 	addi	r2,r2,30108
  802ea8:	00df8e34 	movhi	r3,32312
  802eac:	18f90f04 	addi	r3,r3,-7108
  802eb0:	180f883a 	mov	r7,r3
  802eb4:	100d883a 	mov	r6,r2
  802eb8:	08036e80 	call	8036e8 <__adddf3>
  802ebc:	180b883a 	mov	r5,r3
  802ec0:	000d883a 	mov	r6,zero
  802ec4:	000f883a 	mov	r7,zero
  802ec8:	1009883a 	mov	r4,r2
  802ecc:	0803ba80 	call	803ba8 <__gtdf2>
  802ed0:	0080040e 	bge	zero,r2,802ee4 <floor+0xb4>
  802ed4:	88004416 	blt	r17,zero,802fe8 <floor+0x1b8>
  802ed8:	0704303a 	nor	r2,zero,fp
  802edc:	b8ae703a 	and	r23,r23,r2
  802ee0:	0025883a 	mov	r18,zero
  802ee4:	9021883a 	mov	r16,r18
  802ee8:	b823883a 	mov	r17,r23
  802eec:	8005883a 	mov	r2,r16
  802ef0:	8807883a 	mov	r3,r17
  802ef4:	dfc00917 	ldw	ra,36(sp)
  802ef8:	df000817 	ldw	fp,32(sp)
  802efc:	ddc00717 	ldw	r23,28(sp)
  802f00:	dd800617 	ldw	r22,24(sp)
  802f04:	dd400517 	ldw	r21,20(sp)
  802f08:	dd000417 	ldw	r20,16(sp)
  802f0c:	dcc00317 	ldw	r19,12(sp)
  802f10:	dc800217 	ldw	r18,8(sp)
  802f14:	dc400117 	ldw	r17,4(sp)
  802f18:	dc000017 	ldw	r16,0(sp)
  802f1c:	dec00a04 	addi	sp,sp,40
  802f20:	f800283a 	ret
  802f24:	00800cc4 	movi	r2,51
  802f28:	15801616 	blt	r2,r22,802f84 <floor+0x154>
  802f2c:	18befb44 	addi	r2,r3,-1043
  802f30:	00ffffc4 	movi	r3,-1
  802f34:	18b8d83a 	srl	fp,r3,r2
  802f38:	e104703a 	and	r2,fp,r4
  802f3c:	103feb26 	beq	r2,zero,802eec <floor+0xbc>
  802f40:	00a20034 	movhi	r2,34816
  802f44:	109d6704 	addi	r2,r2,30108
  802f48:	00df8e34 	movhi	r3,32312
  802f4c:	18f90f04 	addi	r3,r3,-7108
  802f50:	180f883a 	mov	r7,r3
  802f54:	100d883a 	mov	r6,r2
  802f58:	08036e80 	call	8036e8 <__adddf3>
  802f5c:	180b883a 	mov	r5,r3
  802f60:	000d883a 	mov	r6,zero
  802f64:	000f883a 	mov	r7,zero
  802f68:	1009883a 	mov	r4,r2
  802f6c:	0803ba80 	call	803ba8 <__gtdf2>
  802f70:	0080210e 	bge	zero,r2,802ff8 <floor+0x1c8>
  802f74:	88002216 	blt	r17,zero,803000 <floor+0x1d0>
  802f78:	0704303a 	nor	r2,zero,fp
  802f7c:	90a4703a 	and	r18,r18,r2
  802f80:	003fd806 	br	802ee4 <floor+0xb4>
  802f84:	00810004 	movi	r2,1024
  802f88:	b0bfd81e 	bne	r22,r2,802eec <floor+0xbc>
  802f8c:	800d883a 	mov	r6,r16
  802f90:	280f883a 	mov	r7,r5
  802f94:	08036e80 	call	8036e8 <__adddf3>
  802f98:	1021883a 	mov	r16,r2
  802f9c:	1823883a 	mov	r17,r3
  802fa0:	003fd206 	br	802eec <floor+0xbc>
  802fa4:	00a20034 	movhi	r2,34816
  802fa8:	109d6704 	addi	r2,r2,30108
  802fac:	00df8e34 	movhi	r3,32312
  802fb0:	18f90f04 	addi	r3,r3,-7108
  802fb4:	180f883a 	mov	r7,r3
  802fb8:	100d883a 	mov	r6,r2
  802fbc:	08036e80 	call	8036e8 <__adddf3>
  802fc0:	180b883a 	mov	r5,r3
  802fc4:	000d883a 	mov	r6,zero
  802fc8:	000f883a 	mov	r7,zero
  802fcc:	1009883a 	mov	r4,r2
  802fd0:	0803ba80 	call	803ba8 <__gtdf2>
  802fd4:	00bfc30e 	bge	zero,r2,802ee4 <floor+0xb4>
  802fd8:	88001416 	blt	r17,zero,80302c <floor+0x1fc>
  802fdc:	002f883a 	mov	r23,zero
  802fe0:	0025883a 	mov	r18,zero
  802fe4:	003fbf06 	br	802ee4 <floor+0xb4>
  802fe8:	00800434 	movhi	r2,16
  802fec:	1585d83a 	sra	r2,r2,r22
  802ff0:	88af883a 	add	r23,r17,r2
  802ff4:	003fb806 	br	802ed8 <floor+0xa8>
  802ff8:	882f883a 	mov	r23,r17
  802ffc:	003fb906 	br	802ee4 <floor+0xb4>
  803000:	00800504 	movi	r2,20
  803004:	b0801126 	beq	r22,r2,80304c <floor+0x21c>
  803008:	00c00d04 	movi	r3,52
  80300c:	1d87c83a 	sub	r3,r3,r22
  803010:	00800044 	movi	r2,1
  803014:	10c4983a 	sll	r2,r2,r3
  803018:	8085883a 	add	r2,r16,r2
  80301c:	1400012e 	bgeu	r2,r16,803024 <floor+0x1f4>
  803020:	8dc00044 	addi	r23,r17,1
  803024:	1025883a 	mov	r18,r2
  803028:	003fd306 	br	802f78 <floor+0x148>
  80302c:	00a00034 	movhi	r2,32768
  803030:	10bfffc4 	addi	r2,r2,-1
  803034:	8884703a 	and	r2,r17,r2
  803038:	8084b03a 	or	r2,r16,r2
  80303c:	103fee26 	beq	r2,zero,802ff8 <floor+0x1c8>
  803040:	05effc34 	movhi	r23,49136
  803044:	0025883a 	mov	r18,zero
  803048:	003fa606 	br	802ee4 <floor+0xb4>
  80304c:	8dc00044 	addi	r23,r17,1
  803050:	003fc906 	br	802f78 <floor+0x148>

00803054 <scalbn>:
  803054:	2011883a 	mov	r8,r4
  803058:	291ffc2c 	andhi	r4,r5,32752
  80305c:	2009d53a 	srai	r4,r4,20
  803060:	defffd04 	addi	sp,sp,-12
  803064:	dc000015 	stw	r16,0(sp)
  803068:	dfc00215 	stw	ra,8(sp)
  80306c:	dc400115 	stw	r17,4(sp)
  803070:	2813883a 	mov	r9,r5
  803074:	2815883a 	mov	r10,r5
  803078:	3021883a 	mov	r16,r6
  80307c:	2000281e 	bne	r4,zero,803120 <scalbn+0xcc>
  803080:	00a00034 	movhi	r2,32768
  803084:	10bfffc4 	addi	r2,r2,-1
  803088:	2884703a 	and	r2,r5,r2
  80308c:	4084b03a 	or	r2,r8,r2
  803090:	10001826 	beq	r2,zero,8030f4 <scalbn+0xa0>
  803094:	0005883a 	mov	r2,zero
  803098:	00d0d434 	movhi	r3,17232
  80309c:	4009883a 	mov	r4,r8
  8030a0:	100d883a 	mov	r6,r2
  8030a4:	180f883a 	mov	r7,r3
  8030a8:	080375c0 	call	80375c <__muldf3>
  8030ac:	100b883a 	mov	r5,r2
  8030b0:	1011883a 	mov	r8,r2
  8030b4:	00bffff4 	movhi	r2,65535
  8030b8:	108f2c04 	addi	r2,r2,15536
  8030bc:	180d883a 	mov	r6,r3
  8030c0:	1813883a 	mov	r9,r3
  8030c4:	8080120e 	bge	r16,r2,803110 <scalbn+0xbc>
  8030c8:	00b0be74 	movhi	r2,49913
  8030cc:	10bcd644 	addi	r2,r2,-3239
  8030d0:	00c06974 	movhi	r3,421
  8030d4:	18db87c4 	addi	r3,r3,28191
  8030d8:	2809883a 	mov	r4,r5
  8030dc:	180f883a 	mov	r7,r3
  8030e0:	300b883a 	mov	r5,r6
  8030e4:	100d883a 	mov	r6,r2
  8030e8:	080375c0 	call	80375c <__muldf3>
  8030ec:	1011883a 	mov	r8,r2
  8030f0:	1813883a 	mov	r9,r3
  8030f4:	4005883a 	mov	r2,r8
  8030f8:	4807883a 	mov	r3,r9
  8030fc:	dfc00217 	ldw	ra,8(sp)
  803100:	dc400117 	ldw	r17,4(sp)
  803104:	dc000017 	ldw	r16,0(sp)
  803108:	dec00304 	addi	sp,sp,12
  80310c:	f800283a 	ret
  803110:	189ffc2c 	andhi	r2,r3,32752
  803114:	1005d53a 	srai	r2,r2,20
  803118:	1815883a 	mov	r10,r3
  80311c:	113ff284 	addi	r4,r2,-54
  803120:	0081ffc4 	movi	r2,2047
  803124:	20801126 	beq	r4,r2,80316c <scalbn+0x118>
  803128:	2409883a 	add	r4,r4,r16
  80312c:	0081ff84 	movi	r2,2046
  803130:	11001c16 	blt	r2,r4,8031a4 <scalbn+0x150>
  803134:	0100290e 	bge	zero,r4,8031dc <scalbn+0x188>
  803138:	200a953a 	slli	r5,r4,20
  80313c:	01200434 	movhi	r4,32784
  803140:	213fffc4 	addi	r4,r4,-1
  803144:	5108703a 	and	r4,r10,r4
  803148:	2148b03a 	or	r4,r4,r5
  80314c:	2013883a 	mov	r9,r4
  803150:	4005883a 	mov	r2,r8
  803154:	4807883a 	mov	r3,r9
  803158:	dfc00217 	ldw	ra,8(sp)
  80315c:	dc400117 	ldw	r17,4(sp)
  803160:	dc000017 	ldw	r16,0(sp)
  803164:	dec00304 	addi	sp,sp,12
  803168:	f800283a 	ret
  80316c:	480f883a 	mov	r7,r9
  803170:	4009883a 	mov	r4,r8
  803174:	480b883a 	mov	r5,r9
  803178:	400d883a 	mov	r6,r8
  80317c:	08036e80 	call	8036e8 <__adddf3>
  803180:	1011883a 	mov	r8,r2
  803184:	1813883a 	mov	r9,r3
  803188:	4005883a 	mov	r2,r8
  80318c:	4807883a 	mov	r3,r9
  803190:	dfc00217 	ldw	ra,8(sp)
  803194:	dc400117 	ldw	r17,4(sp)
  803198:	dc000017 	ldw	r16,0(sp)
  80319c:	dec00304 	addi	sp,sp,12
  8031a0:	f800283a 	ret
  8031a4:	04220034 	movhi	r16,34816
  8031a8:	841d6704 	addi	r16,r16,30108
  8031ac:	045f8e34 	movhi	r17,32312
  8031b0:	8c790f04 	addi	r17,r17,-7108
  8031b4:	480f883a 	mov	r7,r9
  8031b8:	400d883a 	mov	r6,r8
  8031bc:	8009883a 	mov	r4,r16
  8031c0:	880b883a 	mov	r5,r17
  8031c4:	08032340 	call	803234 <copysign>
  8031c8:	180b883a 	mov	r5,r3
  8031cc:	800d883a 	mov	r6,r16
  8031d0:	880f883a 	mov	r7,r17
  8031d4:	1009883a 	mov	r4,r2
  8031d8:	003fc306 	br	8030e8 <scalbn+0x94>
  8031dc:	00bff284 	movi	r2,-54
  8031e0:	11000716 	blt	r2,r4,803200 <scalbn+0x1ac>
  8031e4:	00b0d414 	movui	r2,50000
  8031e8:	143fee16 	blt	r2,r16,8031a4 <scalbn+0x150>
  8031ec:	0430be74 	movhi	r16,49913
  8031f0:	843cd644 	addi	r16,r16,-3239
  8031f4:	04406974 	movhi	r17,421
  8031f8:	8c5b87c4 	addi	r17,r17,28191
  8031fc:	003fed06 	br	8031b4 <scalbn+0x160>
  803200:	21000d84 	addi	r4,r4,54
  803204:	2008953a 	slli	r4,r4,20
  803208:	01e00434 	movhi	r7,32784
  80320c:	39ffffc4 	addi	r7,r7,-1
  803210:	51ce703a 	and	r7,r10,r7
  803214:	390eb03a 	or	r7,r7,r4
  803218:	024f2434 	movhi	r9,15504
  80321c:	4009883a 	mov	r4,r8
  803220:	0011883a 	mov	r8,zero
  803224:	380b883a 	mov	r5,r7
  803228:	400d883a 	mov	r6,r8
  80322c:	480f883a 	mov	r7,r9
  803230:	003fad06 	br	8030e8 <scalbn+0x94>

00803234 <copysign>:
  803234:	3813883a 	mov	r9,r7
  803238:	01e00034 	movhi	r7,32768
  80323c:	39ffffc4 	addi	r7,r7,-1
  803240:	394e703a 	and	r7,r7,r5
  803244:	4aa0002c 	andhi	r10,r9,32768
  803248:	3a8eb03a 	or	r7,r7,r10
  80324c:	2005883a 	mov	r2,r4
  803250:	3807883a 	mov	r3,r7
  803254:	f800283a 	ret

00803258 <_fpadd_parts>:
  803258:	defff804 	addi	sp,sp,-32
  80325c:	dcc00315 	stw	r19,12(sp)
  803260:	2027883a 	mov	r19,r4
  803264:	21000017 	ldw	r4,0(r4)
  803268:	00c00044 	movi	r3,1
  80326c:	dd400515 	stw	r21,20(sp)
  803270:	dd000415 	stw	r20,16(sp)
  803274:	ddc00715 	stw	r23,28(sp)
  803278:	dd800615 	stw	r22,24(sp)
  80327c:	dc800215 	stw	r18,8(sp)
  803280:	dc400115 	stw	r17,4(sp)
  803284:	dc000015 	stw	r16,0(sp)
  803288:	282b883a 	mov	r21,r5
  80328c:	3029883a 	mov	r20,r6
  803290:	1900632e 	bgeu	r3,r4,803420 <_fpadd_parts+0x1c8>
  803294:	28800017 	ldw	r2,0(r5)
  803298:	1880812e 	bgeu	r3,r2,8034a0 <_fpadd_parts+0x248>
  80329c:	00c00104 	movi	r3,4
  8032a0:	20c0dc26 	beq	r4,r3,803614 <_fpadd_parts+0x3bc>
  8032a4:	10c07e26 	beq	r2,r3,8034a0 <_fpadd_parts+0x248>
  8032a8:	00c00084 	movi	r3,2
  8032ac:	10c06726 	beq	r2,r3,80344c <_fpadd_parts+0x1f4>
  8032b0:	20c07b26 	beq	r4,r3,8034a0 <_fpadd_parts+0x248>
  8032b4:	9dc00217 	ldw	r23,8(r19)
  8032b8:	28c00217 	ldw	r3,8(r5)
  8032bc:	9c400317 	ldw	r17,12(r19)
  8032c0:	2bc00317 	ldw	r15,12(r5)
  8032c4:	b8cdc83a 	sub	r6,r23,r3
  8032c8:	9c800417 	ldw	r18,16(r19)
  8032cc:	2c000417 	ldw	r16,16(r5)
  8032d0:	3009883a 	mov	r4,r6
  8032d4:	30009716 	blt	r6,zero,803534 <_fpadd_parts+0x2dc>
  8032d8:	00800fc4 	movi	r2,63
  8032dc:	11806b16 	blt	r2,r6,80348c <_fpadd_parts+0x234>
  8032e0:	0100a40e 	bge	zero,r4,803574 <_fpadd_parts+0x31c>
  8032e4:	35bff804 	addi	r22,r6,-32
  8032e8:	b000bc16 	blt	r22,zero,8035dc <_fpadd_parts+0x384>
  8032ec:	8596d83a 	srl	r11,r16,r22
  8032f0:	0019883a 	mov	r12,zero
  8032f4:	0013883a 	mov	r9,zero
  8032f8:	01000044 	movi	r4,1
  8032fc:	0015883a 	mov	r10,zero
  803300:	b000be16 	blt	r22,zero,8035fc <_fpadd_parts+0x3a4>
  803304:	2590983a 	sll	r8,r4,r22
  803308:	000f883a 	mov	r7,zero
  80330c:	00bfffc4 	movi	r2,-1
  803310:	3889883a 	add	r4,r7,r2
  803314:	408b883a 	add	r5,r8,r2
  803318:	21cd803a 	cmpltu	r6,r4,r7
  80331c:	314b883a 	add	r5,r6,r5
  803320:	7904703a 	and	r2,r15,r4
  803324:	8146703a 	and	r3,r16,r5
  803328:	10c4b03a 	or	r2,r2,r3
  80332c:	10000226 	beq	r2,zero,803338 <_fpadd_parts+0xe0>
  803330:	02400044 	movi	r9,1
  803334:	0015883a 	mov	r10,zero
  803338:	5a5eb03a 	or	r15,r11,r9
  80333c:	62a0b03a 	or	r16,r12,r10
  803340:	99400117 	ldw	r5,4(r19)
  803344:	a8800117 	ldw	r2,4(r21)
  803348:	28806e26 	beq	r5,r2,803504 <_fpadd_parts+0x2ac>
  80334c:	28006626 	beq	r5,zero,8034e8 <_fpadd_parts+0x290>
  803350:	7c45c83a 	sub	r2,r15,r17
  803354:	7889803a 	cmpltu	r4,r15,r2
  803358:	8487c83a 	sub	r3,r16,r18
  80335c:	1909c83a 	sub	r4,r3,r4
  803360:	100d883a 	mov	r6,r2
  803364:	200f883a 	mov	r7,r4
  803368:	38007716 	blt	r7,zero,803548 <_fpadd_parts+0x2f0>
  80336c:	a5c00215 	stw	r23,8(r20)
  803370:	a1c00415 	stw	r7,16(r20)
  803374:	a0000115 	stw	zero,4(r20)
  803378:	a1800315 	stw	r6,12(r20)
  80337c:	a2000317 	ldw	r8,12(r20)
  803380:	a2400417 	ldw	r9,16(r20)
  803384:	00bfffc4 	movi	r2,-1
  803388:	408b883a 	add	r5,r8,r2
  80338c:	2a09803a 	cmpltu	r4,r5,r8
  803390:	488d883a 	add	r6,r9,r2
  803394:	01c40034 	movhi	r7,4096
  803398:	39ffffc4 	addi	r7,r7,-1
  80339c:	218d883a 	add	r6,r4,r6
  8033a0:	39801736 	bltu	r7,r6,803400 <_fpadd_parts+0x1a8>
  8033a4:	31c06526 	beq	r6,r7,80353c <_fpadd_parts+0x2e4>
  8033a8:	a3000217 	ldw	r12,8(r20)
  8033ac:	4209883a 	add	r4,r8,r8
  8033b0:	00bfffc4 	movi	r2,-1
  8033b4:	220f803a 	cmpltu	r7,r4,r8
  8033b8:	4a4b883a 	add	r5,r9,r9
  8033bc:	394f883a 	add	r7,r7,r5
  8033c0:	2095883a 	add	r10,r4,r2
  8033c4:	3897883a 	add	r11,r7,r2
  8033c8:	510d803a 	cmpltu	r6,r10,r4
  8033cc:	6099883a 	add	r12,r12,r2
  8033d0:	32d7883a 	add	r11,r6,r11
  8033d4:	00840034 	movhi	r2,4096
  8033d8:	10bfffc4 	addi	r2,r2,-1
  8033dc:	2011883a 	mov	r8,r4
  8033e0:	3813883a 	mov	r9,r7
  8033e4:	a1000315 	stw	r4,12(r20)
  8033e8:	a1c00415 	stw	r7,16(r20)
  8033ec:	a3000215 	stw	r12,8(r20)
  8033f0:	12c00336 	bltu	r2,r11,803400 <_fpadd_parts+0x1a8>
  8033f4:	58bfed1e 	bne	r11,r2,8033ac <_fpadd_parts+0x154>
  8033f8:	00bfff84 	movi	r2,-2
  8033fc:	12bfeb2e 	bgeu	r2,r10,8033ac <_fpadd_parts+0x154>
  803400:	a2800417 	ldw	r10,16(r20)
  803404:	008000c4 	movi	r2,3
  803408:	00c80034 	movhi	r3,8192
  80340c:	18ffffc4 	addi	r3,r3,-1
  803410:	a2400317 	ldw	r9,12(r20)
  803414:	a0800015 	stw	r2,0(r20)
  803418:	1a802336 	bltu	r3,r10,8034a8 <_fpadd_parts+0x250>
  80341c:	a027883a 	mov	r19,r20
  803420:	9805883a 	mov	r2,r19
  803424:	ddc00717 	ldw	r23,28(sp)
  803428:	dd800617 	ldw	r22,24(sp)
  80342c:	dd400517 	ldw	r21,20(sp)
  803430:	dd000417 	ldw	r20,16(sp)
  803434:	dcc00317 	ldw	r19,12(sp)
  803438:	dc800217 	ldw	r18,8(sp)
  80343c:	dc400117 	ldw	r17,4(sp)
  803440:	dc000017 	ldw	r16,0(sp)
  803444:	dec00804 	addi	sp,sp,32
  803448:	f800283a 	ret
  80344c:	20fff41e 	bne	r4,r3,803420 <_fpadd_parts+0x1c8>
  803450:	31000015 	stw	r4,0(r6)
  803454:	98800117 	ldw	r2,4(r19)
  803458:	30800115 	stw	r2,4(r6)
  80345c:	98c00217 	ldw	r3,8(r19)
  803460:	30c00215 	stw	r3,8(r6)
  803464:	98800317 	ldw	r2,12(r19)
  803468:	30800315 	stw	r2,12(r6)
  80346c:	98c00417 	ldw	r3,16(r19)
  803470:	30c00415 	stw	r3,16(r6)
  803474:	98800117 	ldw	r2,4(r19)
  803478:	28c00117 	ldw	r3,4(r5)
  80347c:	3027883a 	mov	r19,r6
  803480:	10c4703a 	and	r2,r2,r3
  803484:	30800115 	stw	r2,4(r6)
  803488:	003fe506 	br	803420 <_fpadd_parts+0x1c8>
  80348c:	1dc02616 	blt	r3,r23,803528 <_fpadd_parts+0x2d0>
  803490:	0023883a 	mov	r17,zero
  803494:	182f883a 	mov	r23,r3
  803498:	0025883a 	mov	r18,zero
  80349c:	003fa806 	br	803340 <_fpadd_parts+0xe8>
  8034a0:	a827883a 	mov	r19,r21
  8034a4:	003fde06 	br	803420 <_fpadd_parts+0x1c8>
  8034a8:	01800044 	movi	r6,1
  8034ac:	500497fa 	slli	r2,r10,31
  8034b0:	4808d07a 	srli	r4,r9,1
  8034b4:	518ad83a 	srl	r5,r10,r6
  8034b8:	a2000217 	ldw	r8,8(r20)
  8034bc:	1108b03a 	or	r4,r2,r4
  8034c0:	0007883a 	mov	r3,zero
  8034c4:	4984703a 	and	r2,r9,r6
  8034c8:	208cb03a 	or	r6,r4,r2
  8034cc:	28ceb03a 	or	r7,r5,r3
  8034d0:	42000044 	addi	r8,r8,1
  8034d4:	a027883a 	mov	r19,r20
  8034d8:	a1c00415 	stw	r7,16(r20)
  8034dc:	a2000215 	stw	r8,8(r20)
  8034e0:	a1800315 	stw	r6,12(r20)
  8034e4:	003fce06 	br	803420 <_fpadd_parts+0x1c8>
  8034e8:	8bc5c83a 	sub	r2,r17,r15
  8034ec:	8889803a 	cmpltu	r4,r17,r2
  8034f0:	9407c83a 	sub	r3,r18,r16
  8034f4:	1909c83a 	sub	r4,r3,r4
  8034f8:	100d883a 	mov	r6,r2
  8034fc:	200f883a 	mov	r7,r4
  803500:	003f9906 	br	803368 <_fpadd_parts+0x110>
  803504:	7c45883a 	add	r2,r15,r17
  803508:	13c9803a 	cmpltu	r4,r2,r15
  80350c:	8487883a 	add	r3,r16,r18
  803510:	20c9883a 	add	r4,r4,r3
  803514:	a1400115 	stw	r5,4(r20)
  803518:	a5c00215 	stw	r23,8(r20)
  80351c:	a0800315 	stw	r2,12(r20)
  803520:	a1000415 	stw	r4,16(r20)
  803524:	003fb606 	br	803400 <_fpadd_parts+0x1a8>
  803528:	001f883a 	mov	r15,zero
  80352c:	0021883a 	mov	r16,zero
  803530:	003f8306 	br	803340 <_fpadd_parts+0xe8>
  803534:	018dc83a 	sub	r6,zero,r6
  803538:	003f6706 	br	8032d8 <_fpadd_parts+0x80>
  80353c:	00bfff84 	movi	r2,-2
  803540:	117faf36 	bltu	r2,r5,803400 <_fpadd_parts+0x1a8>
  803544:	003f9806 	br	8033a8 <_fpadd_parts+0x150>
  803548:	0005883a 	mov	r2,zero
  80354c:	1189c83a 	sub	r4,r2,r6
  803550:	1105803a 	cmpltu	r2,r2,r4
  803554:	01cbc83a 	sub	r5,zero,r7
  803558:	2885c83a 	sub	r2,r5,r2
  80355c:	01800044 	movi	r6,1
  803560:	a1800115 	stw	r6,4(r20)
  803564:	a5c00215 	stw	r23,8(r20)
  803568:	a1000315 	stw	r4,12(r20)
  80356c:	a0800415 	stw	r2,16(r20)
  803570:	003f8206 	br	80337c <_fpadd_parts+0x124>
  803574:	203f7226 	beq	r4,zero,803340 <_fpadd_parts+0xe8>
  803578:	35bff804 	addi	r22,r6,-32
  80357c:	b9af883a 	add	r23,r23,r6
  803580:	b0003116 	blt	r22,zero,803648 <_fpadd_parts+0x3f0>
  803584:	959ad83a 	srl	r13,r18,r22
  803588:	001d883a 	mov	r14,zero
  80358c:	000f883a 	mov	r7,zero
  803590:	01000044 	movi	r4,1
  803594:	0011883a 	mov	r8,zero
  803598:	b0002516 	blt	r22,zero,803630 <_fpadd_parts+0x3d8>
  80359c:	2594983a 	sll	r10,r4,r22
  8035a0:	0013883a 	mov	r9,zero
  8035a4:	00bfffc4 	movi	r2,-1
  8035a8:	4889883a 	add	r4,r9,r2
  8035ac:	508b883a 	add	r5,r10,r2
  8035b0:	224d803a 	cmpltu	r6,r4,r9
  8035b4:	314b883a 	add	r5,r6,r5
  8035b8:	8904703a 	and	r2,r17,r4
  8035bc:	9146703a 	and	r3,r18,r5
  8035c0:	10c4b03a 	or	r2,r2,r3
  8035c4:	10000226 	beq	r2,zero,8035d0 <_fpadd_parts+0x378>
  8035c8:	01c00044 	movi	r7,1
  8035cc:	0011883a 	mov	r8,zero
  8035d0:	69e2b03a 	or	r17,r13,r7
  8035d4:	7224b03a 	or	r18,r14,r8
  8035d8:	003f5906 	br	803340 <_fpadd_parts+0xe8>
  8035dc:	8407883a 	add	r3,r16,r16
  8035e0:	008007c4 	movi	r2,31
  8035e4:	1185c83a 	sub	r2,r2,r6
  8035e8:	1886983a 	sll	r3,r3,r2
  8035ec:	7996d83a 	srl	r11,r15,r6
  8035f0:	8198d83a 	srl	r12,r16,r6
  8035f4:	1ad6b03a 	or	r11,r3,r11
  8035f8:	003f3e06 	br	8032f4 <_fpadd_parts+0x9c>
  8035fc:	2006d07a 	srli	r3,r4,1
  803600:	008007c4 	movi	r2,31
  803604:	1185c83a 	sub	r2,r2,r6
  803608:	1890d83a 	srl	r8,r3,r2
  80360c:	218e983a 	sll	r7,r4,r6
  803610:	003f3e06 	br	80330c <_fpadd_parts+0xb4>
  803614:	113f821e 	bne	r2,r4,803420 <_fpadd_parts+0x1c8>
  803618:	28c00117 	ldw	r3,4(r5)
  80361c:	98800117 	ldw	r2,4(r19)
  803620:	10ff7f26 	beq	r2,r3,803420 <_fpadd_parts+0x1c8>
  803624:	04c02234 	movhi	r19,136
  803628:	9cdd1104 	addi	r19,r19,29764
  80362c:	003f7c06 	br	803420 <_fpadd_parts+0x1c8>
  803630:	2006d07a 	srli	r3,r4,1
  803634:	008007c4 	movi	r2,31
  803638:	1185c83a 	sub	r2,r2,r6
  80363c:	1894d83a 	srl	r10,r3,r2
  803640:	2192983a 	sll	r9,r4,r6
  803644:	003fd706 	br	8035a4 <_fpadd_parts+0x34c>
  803648:	9487883a 	add	r3,r18,r18
  80364c:	008007c4 	movi	r2,31
  803650:	1185c83a 	sub	r2,r2,r6
  803654:	1886983a 	sll	r3,r3,r2
  803658:	899ad83a 	srl	r13,r17,r6
  80365c:	919cd83a 	srl	r14,r18,r6
  803660:	1b5ab03a 	or	r13,r3,r13
  803664:	003fc906 	br	80358c <_fpadd_parts+0x334>

00803668 <__subdf3>:
  803668:	deffea04 	addi	sp,sp,-88
  80366c:	dcc01415 	stw	r19,80(sp)
  803670:	dcc00404 	addi	r19,sp,16
  803674:	2011883a 	mov	r8,r4
  803678:	2813883a 	mov	r9,r5
  80367c:	dc401315 	stw	r17,76(sp)
  803680:	d809883a 	mov	r4,sp
  803684:	980b883a 	mov	r5,r19
  803688:	dc400904 	addi	r17,sp,36
  80368c:	dfc01515 	stw	ra,84(sp)
  803690:	da400115 	stw	r9,4(sp)
  803694:	d9c00315 	stw	r7,12(sp)
  803698:	da000015 	stw	r8,0(sp)
  80369c:	d9800215 	stw	r6,8(sp)
  8036a0:	08044000 	call	804400 <__unpack_d>
  8036a4:	d9000204 	addi	r4,sp,8
  8036a8:	880b883a 	mov	r5,r17
  8036ac:	08044000 	call	804400 <__unpack_d>
  8036b0:	d8800a17 	ldw	r2,40(sp)
  8036b4:	880b883a 	mov	r5,r17
  8036b8:	9809883a 	mov	r4,r19
  8036bc:	d9800e04 	addi	r6,sp,56
  8036c0:	1080005c 	xori	r2,r2,1
  8036c4:	d8800a15 	stw	r2,40(sp)
  8036c8:	08032580 	call	803258 <_fpadd_parts>
  8036cc:	1009883a 	mov	r4,r2
  8036d0:	08040ec0 	call	8040ec <__pack_d>
  8036d4:	dfc01517 	ldw	ra,84(sp)
  8036d8:	dcc01417 	ldw	r19,80(sp)
  8036dc:	dc401317 	ldw	r17,76(sp)
  8036e0:	dec01604 	addi	sp,sp,88
  8036e4:	f800283a 	ret

008036e8 <__adddf3>:
  8036e8:	deffea04 	addi	sp,sp,-88
  8036ec:	dcc01415 	stw	r19,80(sp)
  8036f0:	dcc00404 	addi	r19,sp,16
  8036f4:	2011883a 	mov	r8,r4
  8036f8:	2813883a 	mov	r9,r5
  8036fc:	dc401315 	stw	r17,76(sp)
  803700:	d809883a 	mov	r4,sp
  803704:	980b883a 	mov	r5,r19
  803708:	dc400904 	addi	r17,sp,36
  80370c:	dfc01515 	stw	ra,84(sp)
  803710:	da400115 	stw	r9,4(sp)
  803714:	d9c00315 	stw	r7,12(sp)
  803718:	da000015 	stw	r8,0(sp)
  80371c:	d9800215 	stw	r6,8(sp)
  803720:	08044000 	call	804400 <__unpack_d>
  803724:	d9000204 	addi	r4,sp,8
  803728:	880b883a 	mov	r5,r17
  80372c:	08044000 	call	804400 <__unpack_d>
  803730:	d9800e04 	addi	r6,sp,56
  803734:	9809883a 	mov	r4,r19
  803738:	880b883a 	mov	r5,r17
  80373c:	08032580 	call	803258 <_fpadd_parts>
  803740:	1009883a 	mov	r4,r2
  803744:	08040ec0 	call	8040ec <__pack_d>
  803748:	dfc01517 	ldw	ra,84(sp)
  80374c:	dcc01417 	ldw	r19,80(sp)
  803750:	dc401317 	ldw	r17,76(sp)
  803754:	dec01604 	addi	sp,sp,88
  803758:	f800283a 	ret

0080375c <__muldf3>:
  80375c:	deffe004 	addi	sp,sp,-128
  803760:	dc401815 	stw	r17,96(sp)
  803764:	dc400404 	addi	r17,sp,16
  803768:	2011883a 	mov	r8,r4
  80376c:	2813883a 	mov	r9,r5
  803770:	dc001715 	stw	r16,92(sp)
  803774:	d809883a 	mov	r4,sp
  803778:	880b883a 	mov	r5,r17
  80377c:	dc000904 	addi	r16,sp,36
  803780:	dfc01f15 	stw	ra,124(sp)
  803784:	da400115 	stw	r9,4(sp)
  803788:	d9c00315 	stw	r7,12(sp)
  80378c:	da000015 	stw	r8,0(sp)
  803790:	d9800215 	stw	r6,8(sp)
  803794:	ddc01e15 	stw	r23,120(sp)
  803798:	dd801d15 	stw	r22,116(sp)
  80379c:	dd401c15 	stw	r21,112(sp)
  8037a0:	dd001b15 	stw	r20,108(sp)
  8037a4:	dcc01a15 	stw	r19,104(sp)
  8037a8:	dc801915 	stw	r18,100(sp)
  8037ac:	08044000 	call	804400 <__unpack_d>
  8037b0:	d9000204 	addi	r4,sp,8
  8037b4:	800b883a 	mov	r5,r16
  8037b8:	08044000 	call	804400 <__unpack_d>
  8037bc:	d9000417 	ldw	r4,16(sp)
  8037c0:	00800044 	movi	r2,1
  8037c4:	1100102e 	bgeu	r2,r4,803808 <__muldf3+0xac>
  8037c8:	d8c00917 	ldw	r3,36(sp)
  8037cc:	10c0062e 	bgeu	r2,r3,8037e8 <__muldf3+0x8c>
  8037d0:	00800104 	movi	r2,4
  8037d4:	20800a26 	beq	r4,r2,803800 <__muldf3+0xa4>
  8037d8:	1880cc26 	beq	r3,r2,803b0c <__muldf3+0x3b0>
  8037dc:	00800084 	movi	r2,2
  8037e0:	20800926 	beq	r4,r2,803808 <__muldf3+0xac>
  8037e4:	1880191e 	bne	r3,r2,80384c <__muldf3+0xf0>
  8037e8:	d8c00a17 	ldw	r3,40(sp)
  8037ec:	d8800517 	ldw	r2,20(sp)
  8037f0:	8009883a 	mov	r4,r16
  8037f4:	10c4c03a 	cmpne	r2,r2,r3
  8037f8:	d8800a15 	stw	r2,40(sp)
  8037fc:	00000706 	br	80381c <__muldf3+0xc0>
  803800:	00800084 	movi	r2,2
  803804:	1880c326 	beq	r3,r2,803b14 <__muldf3+0x3b8>
  803808:	d8800517 	ldw	r2,20(sp)
  80380c:	d8c00a17 	ldw	r3,40(sp)
  803810:	8809883a 	mov	r4,r17
  803814:	10c4c03a 	cmpne	r2,r2,r3
  803818:	d8800515 	stw	r2,20(sp)
  80381c:	08040ec0 	call	8040ec <__pack_d>
  803820:	dfc01f17 	ldw	ra,124(sp)
  803824:	ddc01e17 	ldw	r23,120(sp)
  803828:	dd801d17 	ldw	r22,116(sp)
  80382c:	dd401c17 	ldw	r21,112(sp)
  803830:	dd001b17 	ldw	r20,108(sp)
  803834:	dcc01a17 	ldw	r19,104(sp)
  803838:	dc801917 	ldw	r18,100(sp)
  80383c:	dc401817 	ldw	r17,96(sp)
  803840:	dc001717 	ldw	r16,92(sp)
  803844:	dec02004 	addi	sp,sp,128
  803848:	f800283a 	ret
  80384c:	dd800717 	ldw	r22,28(sp)
  803850:	dc800c17 	ldw	r18,48(sp)
  803854:	002b883a 	mov	r21,zero
  803858:	0023883a 	mov	r17,zero
  80385c:	a80b883a 	mov	r5,r21
  803860:	b00d883a 	mov	r6,r22
  803864:	880f883a 	mov	r7,r17
  803868:	ddc00817 	ldw	r23,32(sp)
  80386c:	dcc00d17 	ldw	r19,52(sp)
  803870:	9009883a 	mov	r4,r18
  803874:	0803fd40 	call	803fd4 <__muldi3>
  803878:	001b883a 	mov	r13,zero
  80387c:	680f883a 	mov	r7,r13
  803880:	b009883a 	mov	r4,r22
  803884:	000b883a 	mov	r5,zero
  803888:	980d883a 	mov	r6,r19
  80388c:	b82d883a 	mov	r22,r23
  803890:	002f883a 	mov	r23,zero
  803894:	db401615 	stw	r13,88(sp)
  803898:	d8801315 	stw	r2,76(sp)
  80389c:	d8c01415 	stw	r3,80(sp)
  8038a0:	dcc01515 	stw	r19,84(sp)
  8038a4:	0803fd40 	call	803fd4 <__muldi3>
  8038a8:	b00d883a 	mov	r6,r22
  8038ac:	000b883a 	mov	r5,zero
  8038b0:	9009883a 	mov	r4,r18
  8038b4:	b80f883a 	mov	r7,r23
  8038b8:	1021883a 	mov	r16,r2
  8038bc:	1823883a 	mov	r17,r3
  8038c0:	0803fd40 	call	803fd4 <__muldi3>
  8038c4:	8085883a 	add	r2,r16,r2
  8038c8:	140d803a 	cmpltu	r6,r2,r16
  8038cc:	88c7883a 	add	r3,r17,r3
  8038d0:	30cd883a 	add	r6,r6,r3
  8038d4:	1029883a 	mov	r20,r2
  8038d8:	302b883a 	mov	r21,r6
  8038dc:	da801317 	ldw	r10,76(sp)
  8038e0:	dac01417 	ldw	r11,80(sp)
  8038e4:	db001517 	ldw	r12,84(sp)
  8038e8:	db401617 	ldw	r13,88(sp)
  8038ec:	3440612e 	bgeu	r6,r17,803a74 <__muldf3+0x318>
  8038f0:	0009883a 	mov	r4,zero
  8038f4:	5105883a 	add	r2,r10,r4
  8038f8:	128d803a 	cmpltu	r6,r2,r10
  8038fc:	5d07883a 	add	r3,r11,r20
  803900:	30cd883a 	add	r6,r6,r3
  803904:	0021883a 	mov	r16,zero
  803908:	04400044 	movi	r17,1
  80390c:	1025883a 	mov	r18,r2
  803910:	3027883a 	mov	r19,r6
  803914:	32c06236 	bltu	r6,r11,803aa0 <__muldf3+0x344>
  803918:	59807a26 	beq	r11,r6,803b04 <__muldf3+0x3a8>
  80391c:	680b883a 	mov	r5,r13
  803920:	b80f883a 	mov	r7,r23
  803924:	6009883a 	mov	r4,r12
  803928:	b00d883a 	mov	r6,r22
  80392c:	0803fd40 	call	803fd4 <__muldi3>
  803930:	1009883a 	mov	r4,r2
  803934:	000f883a 	mov	r7,zero
  803938:	1545883a 	add	r2,r2,r21
  80393c:	1111803a 	cmpltu	r8,r2,r4
  803940:	19c7883a 	add	r3,r3,r7
  803944:	40c7883a 	add	r3,r8,r3
  803948:	88cb883a 	add	r5,r17,r3
  80394c:	d8c00617 	ldw	r3,24(sp)
  803950:	8089883a 	add	r4,r16,r2
  803954:	d8800b17 	ldw	r2,44(sp)
  803958:	18c00104 	addi	r3,r3,4
  80395c:	240d803a 	cmpltu	r6,r4,r16
  803960:	10c7883a 	add	r3,r2,r3
  803964:	2013883a 	mov	r9,r4
  803968:	d8800a17 	ldw	r2,40(sp)
  80396c:	d9000517 	ldw	r4,20(sp)
  803970:	314d883a 	add	r6,r6,r5
  803974:	3015883a 	mov	r10,r6
  803978:	2088c03a 	cmpne	r4,r4,r2
  80397c:	00880034 	movhi	r2,8192
  803980:	10bfffc4 	addi	r2,r2,-1
  803984:	d9000f15 	stw	r4,60(sp)
  803988:	d8c01015 	stw	r3,64(sp)
  80398c:	1180162e 	bgeu	r2,r6,8039e8 <__muldf3+0x28c>
  803990:	1811883a 	mov	r8,r3
  803994:	101f883a 	mov	r15,r2
  803998:	980497fa 	slli	r2,r19,31
  80399c:	9016d07a 	srli	r11,r18,1
  8039a0:	500697fa 	slli	r3,r10,31
  8039a4:	480cd07a 	srli	r6,r9,1
  8039a8:	500ed07a 	srli	r7,r10,1
  8039ac:	12d6b03a 	or	r11,r2,r11
  8039b0:	00800044 	movi	r2,1
  8039b4:	198cb03a 	or	r6,r3,r6
  8039b8:	4888703a 	and	r4,r9,r2
  8039bc:	9818d07a 	srli	r12,r19,1
  8039c0:	001b883a 	mov	r13,zero
  8039c4:	03a00034 	movhi	r14,32768
  8039c8:	3013883a 	mov	r9,r6
  8039cc:	3815883a 	mov	r10,r7
  8039d0:	4091883a 	add	r8,r8,r2
  8039d4:	20000226 	beq	r4,zero,8039e0 <__muldf3+0x284>
  8039d8:	5b64b03a 	or	r18,r11,r13
  8039dc:	63a6b03a 	or	r19,r12,r14
  8039e0:	7abfed36 	bltu	r15,r10,803998 <__muldf3+0x23c>
  8039e4:	da001015 	stw	r8,64(sp)
  8039e8:	00840034 	movhi	r2,4096
  8039ec:	10bfffc4 	addi	r2,r2,-1
  8039f0:	12801436 	bltu	r2,r10,803a44 <__muldf3+0x2e8>
  8039f4:	da001017 	ldw	r8,64(sp)
  8039f8:	101f883a 	mov	r15,r2
  8039fc:	4a45883a 	add	r2,r9,r9
  803a00:	124d803a 	cmpltu	r6,r2,r9
  803a04:	5287883a 	add	r3,r10,r10
  803a08:	9497883a 	add	r11,r18,r18
  803a0c:	5c8f803a 	cmpltu	r7,r11,r18
  803a10:	9cd9883a 	add	r12,r19,r19
  803a14:	01000044 	movi	r4,1
  803a18:	30cd883a 	add	r6,r6,r3
  803a1c:	3b0f883a 	add	r7,r7,r12
  803a20:	423fffc4 	addi	r8,r8,-1
  803a24:	1013883a 	mov	r9,r2
  803a28:	3015883a 	mov	r10,r6
  803a2c:	111ab03a 	or	r13,r2,r4
  803a30:	98003016 	blt	r19,zero,803af4 <__muldf3+0x398>
  803a34:	5825883a 	mov	r18,r11
  803a38:	3827883a 	mov	r19,r7
  803a3c:	7abfef2e 	bgeu	r15,r10,8039fc <__muldf3+0x2a0>
  803a40:	da001015 	stw	r8,64(sp)
  803a44:	00803fc4 	movi	r2,255
  803a48:	488e703a 	and	r7,r9,r2
  803a4c:	00802004 	movi	r2,128
  803a50:	0007883a 	mov	r3,zero
  803a54:	0011883a 	mov	r8,zero
  803a58:	38801826 	beq	r7,r2,803abc <__muldf3+0x360>
  803a5c:	008000c4 	movi	r2,3
  803a60:	d9000e04 	addi	r4,sp,56
  803a64:	da801215 	stw	r10,72(sp)
  803a68:	d8800e15 	stw	r2,56(sp)
  803a6c:	da401115 	stw	r9,68(sp)
  803a70:	003f6a06 	br	80381c <__muldf3+0xc0>
  803a74:	89802126 	beq	r17,r6,803afc <__muldf3+0x3a0>
  803a78:	0009883a 	mov	r4,zero
  803a7c:	5105883a 	add	r2,r10,r4
  803a80:	128d803a 	cmpltu	r6,r2,r10
  803a84:	5d07883a 	add	r3,r11,r20
  803a88:	30cd883a 	add	r6,r6,r3
  803a8c:	0021883a 	mov	r16,zero
  803a90:	0023883a 	mov	r17,zero
  803a94:	1025883a 	mov	r18,r2
  803a98:	3027883a 	mov	r19,r6
  803a9c:	32ff9e2e 	bgeu	r6,r11,803918 <__muldf3+0x1bc>
  803aa0:	00800044 	movi	r2,1
  803aa4:	8089883a 	add	r4,r16,r2
  803aa8:	240d803a 	cmpltu	r6,r4,r16
  803aac:	344d883a 	add	r6,r6,r17
  803ab0:	2021883a 	mov	r16,r4
  803ab4:	3023883a 	mov	r17,r6
  803ab8:	003f9806 	br	80391c <__muldf3+0x1c0>
  803abc:	403fe71e 	bne	r8,zero,803a5c <__muldf3+0x300>
  803ac0:	01004004 	movi	r4,256
  803ac4:	4904703a 	and	r2,r9,r4
  803ac8:	10c4b03a 	or	r2,r2,r3
  803acc:	103fe31e 	bne	r2,zero,803a5c <__muldf3+0x300>
  803ad0:	94c4b03a 	or	r2,r18,r19
  803ad4:	103fe126 	beq	r2,zero,803a5c <__muldf3+0x300>
  803ad8:	49c5883a 	add	r2,r9,r7
  803adc:	1251803a 	cmpltu	r8,r2,r9
  803ae0:	4291883a 	add	r8,r8,r10
  803ae4:	013fc004 	movi	r4,-256
  803ae8:	1112703a 	and	r9,r2,r4
  803aec:	4015883a 	mov	r10,r8
  803af0:	003fda06 	br	803a5c <__muldf3+0x300>
  803af4:	6813883a 	mov	r9,r13
  803af8:	003fce06 	br	803a34 <__muldf3+0x2d8>
  803afc:	143f7c36 	bltu	r2,r16,8038f0 <__muldf3+0x194>
  803b00:	003fdd06 	br	803a78 <__muldf3+0x31c>
  803b04:	12bf852e 	bgeu	r2,r10,80391c <__muldf3+0x1c0>
  803b08:	003fe506 	br	803aa0 <__muldf3+0x344>
  803b0c:	00800084 	movi	r2,2
  803b10:	20bf351e 	bne	r4,r2,8037e8 <__muldf3+0x8c>
  803b14:	01002234 	movhi	r4,136
  803b18:	211d1104 	addi	r4,r4,29764
  803b1c:	003f3f06 	br	80381c <__muldf3+0xc0>

00803b20 <__eqdf2>:
  803b20:	deffef04 	addi	sp,sp,-68
  803b24:	dc400f15 	stw	r17,60(sp)
  803b28:	dc400404 	addi	r17,sp,16
  803b2c:	2005883a 	mov	r2,r4
  803b30:	2807883a 	mov	r3,r5
  803b34:	dc000e15 	stw	r16,56(sp)
  803b38:	d809883a 	mov	r4,sp
  803b3c:	880b883a 	mov	r5,r17
  803b40:	dc000904 	addi	r16,sp,36
  803b44:	d8c00115 	stw	r3,4(sp)
  803b48:	d8800015 	stw	r2,0(sp)
  803b4c:	d9800215 	stw	r6,8(sp)
  803b50:	dfc01015 	stw	ra,64(sp)
  803b54:	d9c00315 	stw	r7,12(sp)
  803b58:	08044000 	call	804400 <__unpack_d>
  803b5c:	d9000204 	addi	r4,sp,8
  803b60:	800b883a 	mov	r5,r16
  803b64:	08044000 	call	804400 <__unpack_d>
  803b68:	d8800417 	ldw	r2,16(sp)
  803b6c:	00c00044 	movi	r3,1
  803b70:	180d883a 	mov	r6,r3
  803b74:	1880062e 	bgeu	r3,r2,803b90 <__eqdf2+0x70>
  803b78:	d8800917 	ldw	r2,36(sp)
  803b7c:	8809883a 	mov	r4,r17
  803b80:	800b883a 	mov	r5,r16
  803b84:	1880022e 	bgeu	r3,r2,803b90 <__eqdf2+0x70>
  803b88:	08045380 	call	804538 <__fpcmp_parts_d>
  803b8c:	100d883a 	mov	r6,r2
  803b90:	3005883a 	mov	r2,r6
  803b94:	dfc01017 	ldw	ra,64(sp)
  803b98:	dc400f17 	ldw	r17,60(sp)
  803b9c:	dc000e17 	ldw	r16,56(sp)
  803ba0:	dec01104 	addi	sp,sp,68
  803ba4:	f800283a 	ret

00803ba8 <__gtdf2>:
  803ba8:	deffef04 	addi	sp,sp,-68
  803bac:	dc400f15 	stw	r17,60(sp)
  803bb0:	dc400404 	addi	r17,sp,16
  803bb4:	2005883a 	mov	r2,r4
  803bb8:	2807883a 	mov	r3,r5
  803bbc:	dc000e15 	stw	r16,56(sp)
  803bc0:	d809883a 	mov	r4,sp
  803bc4:	880b883a 	mov	r5,r17
  803bc8:	dc000904 	addi	r16,sp,36
  803bcc:	d8c00115 	stw	r3,4(sp)
  803bd0:	d8800015 	stw	r2,0(sp)
  803bd4:	d9800215 	stw	r6,8(sp)
  803bd8:	dfc01015 	stw	ra,64(sp)
  803bdc:	d9c00315 	stw	r7,12(sp)
  803be0:	08044000 	call	804400 <__unpack_d>
  803be4:	d9000204 	addi	r4,sp,8
  803be8:	800b883a 	mov	r5,r16
  803bec:	08044000 	call	804400 <__unpack_d>
  803bf0:	d8800417 	ldw	r2,16(sp)
  803bf4:	00c00044 	movi	r3,1
  803bf8:	01bfffc4 	movi	r6,-1
  803bfc:	1880062e 	bgeu	r3,r2,803c18 <__gtdf2+0x70>
  803c00:	d8800917 	ldw	r2,36(sp)
  803c04:	8809883a 	mov	r4,r17
  803c08:	800b883a 	mov	r5,r16
  803c0c:	1880022e 	bgeu	r3,r2,803c18 <__gtdf2+0x70>
  803c10:	08045380 	call	804538 <__fpcmp_parts_d>
  803c14:	100d883a 	mov	r6,r2
  803c18:	3005883a 	mov	r2,r6
  803c1c:	dfc01017 	ldw	ra,64(sp)
  803c20:	dc400f17 	ldw	r17,60(sp)
  803c24:	dc000e17 	ldw	r16,56(sp)
  803c28:	dec01104 	addi	sp,sp,68
  803c2c:	f800283a 	ret

00803c30 <__gedf2>:
  803c30:	deffef04 	addi	sp,sp,-68
  803c34:	dc400f15 	stw	r17,60(sp)
  803c38:	dc400404 	addi	r17,sp,16
  803c3c:	2005883a 	mov	r2,r4
  803c40:	2807883a 	mov	r3,r5
  803c44:	dc000e15 	stw	r16,56(sp)
  803c48:	d809883a 	mov	r4,sp
  803c4c:	880b883a 	mov	r5,r17
  803c50:	dc000904 	addi	r16,sp,36
  803c54:	d8c00115 	stw	r3,4(sp)
  803c58:	d8800015 	stw	r2,0(sp)
  803c5c:	d9800215 	stw	r6,8(sp)
  803c60:	dfc01015 	stw	ra,64(sp)
  803c64:	d9c00315 	stw	r7,12(sp)
  803c68:	08044000 	call	804400 <__unpack_d>
  803c6c:	d9000204 	addi	r4,sp,8
  803c70:	800b883a 	mov	r5,r16
  803c74:	08044000 	call	804400 <__unpack_d>
  803c78:	d8800417 	ldw	r2,16(sp)
  803c7c:	00c00044 	movi	r3,1
  803c80:	01bfffc4 	movi	r6,-1
  803c84:	1880062e 	bgeu	r3,r2,803ca0 <__gedf2+0x70>
  803c88:	d8800917 	ldw	r2,36(sp)
  803c8c:	8809883a 	mov	r4,r17
  803c90:	800b883a 	mov	r5,r16
  803c94:	1880022e 	bgeu	r3,r2,803ca0 <__gedf2+0x70>
  803c98:	08045380 	call	804538 <__fpcmp_parts_d>
  803c9c:	100d883a 	mov	r6,r2
  803ca0:	3005883a 	mov	r2,r6
  803ca4:	dfc01017 	ldw	ra,64(sp)
  803ca8:	dc400f17 	ldw	r17,60(sp)
  803cac:	dc000e17 	ldw	r16,56(sp)
  803cb0:	dec01104 	addi	sp,sp,68
  803cb4:	f800283a 	ret

00803cb8 <__floatsidf>:
  803cb8:	2006d7fa 	srli	r3,r4,31
  803cbc:	defff604 	addi	sp,sp,-40
  803cc0:	008000c4 	movi	r2,3
  803cc4:	dfc00915 	stw	ra,36(sp)
  803cc8:	dcc00815 	stw	r19,32(sp)
  803ccc:	dc800715 	stw	r18,28(sp)
  803cd0:	dc400615 	stw	r17,24(sp)
  803cd4:	dc000515 	stw	r16,20(sp)
  803cd8:	d8800015 	stw	r2,0(sp)
  803cdc:	d8c00115 	stw	r3,4(sp)
  803ce0:	20000f1e 	bne	r4,zero,803d20 <__floatsidf+0x68>
  803ce4:	00800084 	movi	r2,2
  803ce8:	d8800015 	stw	r2,0(sp)
  803cec:	d809883a 	mov	r4,sp
  803cf0:	08040ec0 	call	8040ec <__pack_d>
  803cf4:	1009883a 	mov	r4,r2
  803cf8:	180b883a 	mov	r5,r3
  803cfc:	2005883a 	mov	r2,r4
  803d00:	2807883a 	mov	r3,r5
  803d04:	dfc00917 	ldw	ra,36(sp)
  803d08:	dcc00817 	ldw	r19,32(sp)
  803d0c:	dc800717 	ldw	r18,28(sp)
  803d10:	dc400617 	ldw	r17,24(sp)
  803d14:	dc000517 	ldw	r16,20(sp)
  803d18:	dec00a04 	addi	sp,sp,40
  803d1c:	f800283a 	ret
  803d20:	00800f04 	movi	r2,60
  803d24:	1807003a 	cmpeq	r3,r3,zero
  803d28:	d8800215 	stw	r2,8(sp)
  803d2c:	18001126 	beq	r3,zero,803d74 <__floatsidf+0xbc>
  803d30:	0027883a 	mov	r19,zero
  803d34:	2025883a 	mov	r18,r4
  803d38:	d9000315 	stw	r4,12(sp)
  803d3c:	dcc00415 	stw	r19,16(sp)
  803d40:	080406c0 	call	80406c <__clzsi2>
  803d44:	11000744 	addi	r4,r2,29
  803d48:	013fe80e 	bge	zero,r4,803cec <__floatsidf+0x34>
  803d4c:	10bfff44 	addi	r2,r2,-3
  803d50:	10000c16 	blt	r2,zero,803d84 <__floatsidf+0xcc>
  803d54:	90a2983a 	sll	r17,r18,r2
  803d58:	0021883a 	mov	r16,zero
  803d5c:	d8800217 	ldw	r2,8(sp)
  803d60:	dc400415 	stw	r17,16(sp)
  803d64:	dc000315 	stw	r16,12(sp)
  803d68:	1105c83a 	sub	r2,r2,r4
  803d6c:	d8800215 	stw	r2,8(sp)
  803d70:	003fde06 	br	803cec <__floatsidf+0x34>
  803d74:	00a00034 	movhi	r2,32768
  803d78:	20800a26 	beq	r4,r2,803da4 <__floatsidf+0xec>
  803d7c:	0109c83a 	sub	r4,zero,r4
  803d80:	003feb06 	br	803d30 <__floatsidf+0x78>
  803d84:	9006d07a 	srli	r3,r18,1
  803d88:	008007c4 	movi	r2,31
  803d8c:	1105c83a 	sub	r2,r2,r4
  803d90:	1886d83a 	srl	r3,r3,r2
  803d94:	9922983a 	sll	r17,r19,r4
  803d98:	9120983a 	sll	r16,r18,r4
  803d9c:	1c62b03a 	or	r17,r3,r17
  803da0:	003fee06 	br	803d5c <__floatsidf+0xa4>
  803da4:	0009883a 	mov	r4,zero
  803da8:	01707834 	movhi	r5,49632
  803dac:	003fd306 	br	803cfc <__floatsidf+0x44>

00803db0 <__fixdfsi>:
  803db0:	defff804 	addi	sp,sp,-32
  803db4:	2005883a 	mov	r2,r4
  803db8:	2807883a 	mov	r3,r5
  803dbc:	d809883a 	mov	r4,sp
  803dc0:	d9400204 	addi	r5,sp,8
  803dc4:	d8c00115 	stw	r3,4(sp)
  803dc8:	d8800015 	stw	r2,0(sp)
  803dcc:	dfc00715 	stw	ra,28(sp)
  803dd0:	08044000 	call	804400 <__unpack_d>
  803dd4:	d8c00217 	ldw	r3,8(sp)
  803dd8:	00800084 	movi	r2,2
  803ddc:	1880051e 	bne	r3,r2,803df4 <__fixdfsi+0x44>
  803de0:	0007883a 	mov	r3,zero
  803de4:	1805883a 	mov	r2,r3
  803de8:	dfc00717 	ldw	ra,28(sp)
  803dec:	dec00804 	addi	sp,sp,32
  803df0:	f800283a 	ret
  803df4:	00800044 	movi	r2,1
  803df8:	10fff92e 	bgeu	r2,r3,803de0 <__fixdfsi+0x30>
  803dfc:	00800104 	movi	r2,4
  803e00:	18800426 	beq	r3,r2,803e14 <__fixdfsi+0x64>
  803e04:	d8c00417 	ldw	r3,16(sp)
  803e08:	183ff516 	blt	r3,zero,803de0 <__fixdfsi+0x30>
  803e0c:	00800784 	movi	r2,30
  803e10:	10c0080e 	bge	r2,r3,803e34 <__fixdfsi+0x84>
  803e14:	d8800317 	ldw	r2,12(sp)
  803e18:	1000121e 	bne	r2,zero,803e64 <__fixdfsi+0xb4>
  803e1c:	00e00034 	movhi	r3,32768
  803e20:	18ffffc4 	addi	r3,r3,-1
  803e24:	1805883a 	mov	r2,r3
  803e28:	dfc00717 	ldw	ra,28(sp)
  803e2c:	dec00804 	addi	sp,sp,32
  803e30:	f800283a 	ret
  803e34:	00800f04 	movi	r2,60
  803e38:	10d1c83a 	sub	r8,r2,r3
  803e3c:	40bff804 	addi	r2,r8,-32
  803e40:	d9800517 	ldw	r6,20(sp)
  803e44:	d9c00617 	ldw	r7,24(sp)
  803e48:	10000816 	blt	r2,zero,803e6c <__fixdfsi+0xbc>
  803e4c:	3888d83a 	srl	r4,r7,r2
  803e50:	d8800317 	ldw	r2,12(sp)
  803e54:	2007883a 	mov	r3,r4
  803e58:	103fe226 	beq	r2,zero,803de4 <__fixdfsi+0x34>
  803e5c:	0107c83a 	sub	r3,zero,r4
  803e60:	003fe006 	br	803de4 <__fixdfsi+0x34>
  803e64:	00e00034 	movhi	r3,32768
  803e68:	003fde06 	br	803de4 <__fixdfsi+0x34>
  803e6c:	39c7883a 	add	r3,r7,r7
  803e70:	008007c4 	movi	r2,31
  803e74:	1205c83a 	sub	r2,r2,r8
  803e78:	1886983a 	sll	r3,r3,r2
  803e7c:	3208d83a 	srl	r4,r6,r8
  803e80:	1908b03a 	or	r4,r3,r4
  803e84:	003ff206 	br	803e50 <__fixdfsi+0xa0>

00803e88 <udivmodsi4>:
  803e88:	29001b2e 	bgeu	r5,r4,803ef8 <udivmodsi4+0x70>
  803e8c:	28001a16 	blt	r5,zero,803ef8 <udivmodsi4+0x70>
  803e90:	00800044 	movi	r2,1
  803e94:	0007883a 	mov	r3,zero
  803e98:	01c007c4 	movi	r7,31
  803e9c:	00000306 	br	803eac <udivmodsi4+0x24>
  803ea0:	19c01326 	beq	r3,r7,803ef0 <udivmodsi4+0x68>
  803ea4:	18c00044 	addi	r3,r3,1
  803ea8:	28000416 	blt	r5,zero,803ebc <udivmodsi4+0x34>
  803eac:	294b883a 	add	r5,r5,r5
  803eb0:	1085883a 	add	r2,r2,r2
  803eb4:	293ffa36 	bltu	r5,r4,803ea0 <udivmodsi4+0x18>
  803eb8:	10000d26 	beq	r2,zero,803ef0 <udivmodsi4+0x68>
  803ebc:	0007883a 	mov	r3,zero
  803ec0:	21400236 	bltu	r4,r5,803ecc <udivmodsi4+0x44>
  803ec4:	2149c83a 	sub	r4,r4,r5
  803ec8:	1886b03a 	or	r3,r3,r2
  803ecc:	1004d07a 	srli	r2,r2,1
  803ed0:	280ad07a 	srli	r5,r5,1
  803ed4:	103ffa1e 	bne	r2,zero,803ec0 <udivmodsi4+0x38>
  803ed8:	30000226 	beq	r6,zero,803ee4 <udivmodsi4+0x5c>
  803edc:	2005883a 	mov	r2,r4
  803ee0:	f800283a 	ret
  803ee4:	1809883a 	mov	r4,r3
  803ee8:	2005883a 	mov	r2,r4
  803eec:	f800283a 	ret
  803ef0:	0007883a 	mov	r3,zero
  803ef4:	003ff806 	br	803ed8 <udivmodsi4+0x50>
  803ef8:	00800044 	movi	r2,1
  803efc:	0007883a 	mov	r3,zero
  803f00:	003fef06 	br	803ec0 <udivmodsi4+0x38>

00803f04 <__divsi3>:
  803f04:	defffe04 	addi	sp,sp,-8
  803f08:	dc000015 	stw	r16,0(sp)
  803f0c:	dfc00115 	stw	ra,4(sp)
  803f10:	0021883a 	mov	r16,zero
  803f14:	20000c16 	blt	r4,zero,803f48 <__divsi3+0x44>
  803f18:	000d883a 	mov	r6,zero
  803f1c:	28000e16 	blt	r5,zero,803f58 <__divsi3+0x54>
  803f20:	0803e880 	call	803e88 <udivmodsi4>
  803f24:	1007883a 	mov	r3,r2
  803f28:	8005003a 	cmpeq	r2,r16,zero
  803f2c:	1000011e 	bne	r2,zero,803f34 <__divsi3+0x30>
  803f30:	00c7c83a 	sub	r3,zero,r3
  803f34:	1805883a 	mov	r2,r3
  803f38:	dfc00117 	ldw	ra,4(sp)
  803f3c:	dc000017 	ldw	r16,0(sp)
  803f40:	dec00204 	addi	sp,sp,8
  803f44:	f800283a 	ret
  803f48:	0109c83a 	sub	r4,zero,r4
  803f4c:	04000044 	movi	r16,1
  803f50:	000d883a 	mov	r6,zero
  803f54:	283ff20e 	bge	r5,zero,803f20 <__divsi3+0x1c>
  803f58:	014bc83a 	sub	r5,zero,r5
  803f5c:	8021003a 	cmpeq	r16,r16,zero
  803f60:	003fef06 	br	803f20 <__divsi3+0x1c>

00803f64 <__modsi3>:
  803f64:	deffff04 	addi	sp,sp,-4
  803f68:	dfc00015 	stw	ra,0(sp)
  803f6c:	01800044 	movi	r6,1
  803f70:	2807883a 	mov	r3,r5
  803f74:	20000416 	blt	r4,zero,803f88 <__modsi3+0x24>
  803f78:	28000c16 	blt	r5,zero,803fac <__modsi3+0x48>
  803f7c:	dfc00017 	ldw	ra,0(sp)
  803f80:	dec00104 	addi	sp,sp,4
  803f84:	0803e881 	jmpi	803e88 <udivmodsi4>
  803f88:	0109c83a 	sub	r4,zero,r4
  803f8c:	28000b16 	blt	r5,zero,803fbc <__modsi3+0x58>
  803f90:	180b883a 	mov	r5,r3
  803f94:	01800044 	movi	r6,1
  803f98:	0803e880 	call	803e88 <udivmodsi4>
  803f9c:	0085c83a 	sub	r2,zero,r2
  803fa0:	dfc00017 	ldw	ra,0(sp)
  803fa4:	dec00104 	addi	sp,sp,4
  803fa8:	f800283a 	ret
  803fac:	014bc83a 	sub	r5,zero,r5
  803fb0:	dfc00017 	ldw	ra,0(sp)
  803fb4:	dec00104 	addi	sp,sp,4
  803fb8:	0803e881 	jmpi	803e88 <udivmodsi4>
  803fbc:	0147c83a 	sub	r3,zero,r5
  803fc0:	003ff306 	br	803f90 <__modsi3+0x2c>

00803fc4 <__udivsi3>:
  803fc4:	000d883a 	mov	r6,zero
  803fc8:	0803e881 	jmpi	803e88 <udivmodsi4>

00803fcc <__umodsi3>:
  803fcc:	01800044 	movi	r6,1
  803fd0:	0803e881 	jmpi	803e88 <udivmodsi4>

00803fd4 <__muldi3>:
  803fd4:	2011883a 	mov	r8,r4
  803fd8:	427fffcc 	andi	r9,r8,65535
  803fdc:	4018d43a 	srli	r12,r8,16
  803fe0:	32bfffcc 	andi	r10,r6,65535
  803fe4:	3016d43a 	srli	r11,r6,16
  803fe8:	4a85383a 	mul	r2,r9,r10
  803fec:	6295383a 	mul	r10,r12,r10
  803ff0:	4ad3383a 	mul	r9,r9,r11
  803ff4:	113fffcc 	andi	r4,r2,65535
  803ff8:	1004d43a 	srli	r2,r2,16
  803ffc:	4a93883a 	add	r9,r9,r10
  804000:	3807883a 	mov	r3,r7
  804004:	1245883a 	add	r2,r2,r9
  804008:	280f883a 	mov	r7,r5
  80400c:	180b883a 	mov	r5,r3
  804010:	1006943a 	slli	r3,r2,16
  804014:	defffd04 	addi	sp,sp,-12
  804018:	dc800215 	stw	r18,8(sp)
  80401c:	1907883a 	add	r3,r3,r4
  804020:	dc400115 	stw	r17,4(sp)
  804024:	dc000015 	stw	r16,0(sp)
  804028:	4165383a 	mul	r18,r8,r5
  80402c:	31e3383a 	mul	r17,r6,r7
  804030:	1012d43a 	srli	r9,r2,16
  804034:	62d9383a 	mul	r12,r12,r11
  804038:	181f883a 	mov	r15,r3
  80403c:	1280022e 	bgeu	r2,r10,804048 <__muldi3+0x74>
  804040:	00800074 	movhi	r2,1
  804044:	6099883a 	add	r12,r12,r2
  804048:	624d883a 	add	r6,r12,r9
  80404c:	9187883a 	add	r3,r18,r6
  804050:	88c7883a 	add	r3,r17,r3
  804054:	7805883a 	mov	r2,r15
  804058:	dc800217 	ldw	r18,8(sp)
  80405c:	dc400117 	ldw	r17,4(sp)
  804060:	dc000017 	ldw	r16,0(sp)
  804064:	dec00304 	addi	sp,sp,12
  804068:	f800283a 	ret

0080406c <__clzsi2>:
  80406c:	00bfffd4 	movui	r2,65535
  804070:	11000e36 	bltu	r2,r4,8040ac <__clzsi2+0x40>
  804074:	00803fc4 	movi	r2,255
  804078:	01400204 	movi	r5,8
  80407c:	0007883a 	mov	r3,zero
  804080:	11001036 	bltu	r2,r4,8040c4 <__clzsi2+0x58>
  804084:	000b883a 	mov	r5,zero
  804088:	20c6d83a 	srl	r3,r4,r3
  80408c:	00802234 	movhi	r2,136
  804090:	109d1604 	addi	r2,r2,29784
  804094:	1887883a 	add	r3,r3,r2
  804098:	18800003 	ldbu	r2,0(r3)
  80409c:	00c00804 	movi	r3,32
  8040a0:	2885883a 	add	r2,r5,r2
  8040a4:	1885c83a 	sub	r2,r3,r2
  8040a8:	f800283a 	ret
  8040ac:	01400404 	movi	r5,16
  8040b0:	00804034 	movhi	r2,256
  8040b4:	10bfffc4 	addi	r2,r2,-1
  8040b8:	2807883a 	mov	r3,r5
  8040bc:	113ff22e 	bgeu	r2,r4,804088 <__clzsi2+0x1c>
  8040c0:	01400604 	movi	r5,24
  8040c4:	2807883a 	mov	r3,r5
  8040c8:	20c6d83a 	srl	r3,r4,r3
  8040cc:	00802234 	movhi	r2,136
  8040d0:	109d1604 	addi	r2,r2,29784
  8040d4:	1887883a 	add	r3,r3,r2
  8040d8:	18800003 	ldbu	r2,0(r3)
  8040dc:	00c00804 	movi	r3,32
  8040e0:	2885883a 	add	r2,r5,r2
  8040e4:	1885c83a 	sub	r2,r3,r2
  8040e8:	f800283a 	ret

008040ec <__pack_d>:
  8040ec:	20c00017 	ldw	r3,0(r4)
  8040f0:	defffd04 	addi	sp,sp,-12
  8040f4:	dc000015 	stw	r16,0(sp)
  8040f8:	dc800215 	stw	r18,8(sp)
  8040fc:	dc400115 	stw	r17,4(sp)
  804100:	00800044 	movi	r2,1
  804104:	22000317 	ldw	r8,12(r4)
  804108:	001f883a 	mov	r15,zero
  80410c:	22400417 	ldw	r9,16(r4)
  804110:	24000117 	ldw	r16,4(r4)
  804114:	10c0552e 	bgeu	r2,r3,80426c <__pack_d+0x180>
  804118:	00800104 	movi	r2,4
  80411c:	18804f26 	beq	r3,r2,80425c <__pack_d+0x170>
  804120:	00800084 	movi	r2,2
  804124:	18800226 	beq	r3,r2,804130 <__pack_d+0x44>
  804128:	4244b03a 	or	r2,r8,r9
  80412c:	10001a1e 	bne	r2,zero,804198 <__pack_d+0xac>
  804130:	000d883a 	mov	r6,zero
  804134:	000f883a 	mov	r7,zero
  804138:	0011883a 	mov	r8,zero
  80413c:	00800434 	movhi	r2,16
  804140:	10bfffc4 	addi	r2,r2,-1
  804144:	301d883a 	mov	r14,r6
  804148:	3884703a 	and	r2,r7,r2
  80414c:	400a953a 	slli	r5,r8,20
  804150:	79bffc2c 	andhi	r6,r15,65520
  804154:	308cb03a 	or	r6,r6,r2
  804158:	00e00434 	movhi	r3,32784
  80415c:	18ffffc4 	addi	r3,r3,-1
  804160:	800497fa 	slli	r2,r16,31
  804164:	30c6703a 	and	r3,r6,r3
  804168:	1946b03a 	or	r3,r3,r5
  80416c:	01600034 	movhi	r5,32768
  804170:	297fffc4 	addi	r5,r5,-1
  804174:	194a703a 	and	r5,r3,r5
  804178:	288ab03a 	or	r5,r5,r2
  80417c:	2807883a 	mov	r3,r5
  804180:	7005883a 	mov	r2,r14
  804184:	dc800217 	ldw	r18,8(sp)
  804188:	dc400117 	ldw	r17,4(sp)
  80418c:	dc000017 	ldw	r16,0(sp)
  804190:	dec00304 	addi	sp,sp,12
  804194:	f800283a 	ret
  804198:	21000217 	ldw	r4,8(r4)
  80419c:	00bf0084 	movi	r2,-1022
  8041a0:	20803f16 	blt	r4,r2,8042a0 <__pack_d+0x1b4>
  8041a4:	0080ffc4 	movi	r2,1023
  8041a8:	11002c16 	blt	r2,r4,80425c <__pack_d+0x170>
  8041ac:	00803fc4 	movi	r2,255
  8041b0:	408c703a 	and	r6,r8,r2
  8041b4:	00802004 	movi	r2,128
  8041b8:	0007883a 	mov	r3,zero
  8041bc:	000f883a 	mov	r7,zero
  8041c0:	2280ffc4 	addi	r10,r4,1023
  8041c4:	30801e26 	beq	r6,r2,804240 <__pack_d+0x154>
  8041c8:	00801fc4 	movi	r2,127
  8041cc:	4089883a 	add	r4,r8,r2
  8041d0:	220d803a 	cmpltu	r6,r4,r8
  8041d4:	324d883a 	add	r6,r6,r9
  8041d8:	2011883a 	mov	r8,r4
  8041dc:	3013883a 	mov	r9,r6
  8041e0:	00880034 	movhi	r2,8192
  8041e4:	10bfffc4 	addi	r2,r2,-1
  8041e8:	12400d36 	bltu	r2,r9,804220 <__pack_d+0x134>
  8041ec:	4804963a 	slli	r2,r9,24
  8041f0:	400cd23a 	srli	r6,r8,8
  8041f4:	480ed23a 	srli	r7,r9,8
  8041f8:	013fffc4 	movi	r4,-1
  8041fc:	118cb03a 	or	r6,r2,r6
  804200:	01400434 	movhi	r5,16
  804204:	297fffc4 	addi	r5,r5,-1
  804208:	3104703a 	and	r2,r6,r4
  80420c:	3946703a 	and	r3,r7,r5
  804210:	5201ffcc 	andi	r8,r10,2047
  804214:	100d883a 	mov	r6,r2
  804218:	180f883a 	mov	r7,r3
  80421c:	003fc706 	br	80413c <__pack_d+0x50>
  804220:	480897fa 	slli	r4,r9,31
  804224:	4004d07a 	srli	r2,r8,1
  804228:	4806d07a 	srli	r3,r9,1
  80422c:	52800044 	addi	r10,r10,1
  804230:	2084b03a 	or	r2,r4,r2
  804234:	1011883a 	mov	r8,r2
  804238:	1813883a 	mov	r9,r3
  80423c:	003feb06 	br	8041ec <__pack_d+0x100>
  804240:	383fe11e 	bne	r7,zero,8041c8 <__pack_d+0xdc>
  804244:	01004004 	movi	r4,256
  804248:	4104703a 	and	r2,r8,r4
  80424c:	10c4b03a 	or	r2,r2,r3
  804250:	103fe326 	beq	r2,zero,8041e0 <__pack_d+0xf4>
  804254:	3005883a 	mov	r2,r6
  804258:	003fdc06 	br	8041cc <__pack_d+0xe0>
  80425c:	000d883a 	mov	r6,zero
  804260:	000f883a 	mov	r7,zero
  804264:	0201ffc4 	movi	r8,2047
  804268:	003fb406 	br	80413c <__pack_d+0x50>
  80426c:	0005883a 	mov	r2,zero
  804270:	00c00234 	movhi	r3,8
  804274:	408cb03a 	or	r6,r8,r2
  804278:	48ceb03a 	or	r7,r9,r3
  80427c:	013fffc4 	movi	r4,-1
  804280:	01400434 	movhi	r5,16
  804284:	297fffc4 	addi	r5,r5,-1
  804288:	3104703a 	and	r2,r6,r4
  80428c:	3946703a 	and	r3,r7,r5
  804290:	100d883a 	mov	r6,r2
  804294:	180f883a 	mov	r7,r3
  804298:	0201ffc4 	movi	r8,2047
  80429c:	003fa706 	br	80413c <__pack_d+0x50>
  8042a0:	1109c83a 	sub	r4,r2,r4
  8042a4:	00800e04 	movi	r2,56
  8042a8:	11004316 	blt	r2,r4,8043b8 <__pack_d+0x2cc>
  8042ac:	21fff804 	addi	r7,r4,-32
  8042b0:	38004516 	blt	r7,zero,8043c8 <__pack_d+0x2dc>
  8042b4:	49d8d83a 	srl	r12,r9,r7
  8042b8:	001b883a 	mov	r13,zero
  8042bc:	0023883a 	mov	r17,zero
  8042c0:	01400044 	movi	r5,1
  8042c4:	0025883a 	mov	r18,zero
  8042c8:	38004716 	blt	r7,zero,8043e8 <__pack_d+0x2fc>
  8042cc:	29d6983a 	sll	r11,r5,r7
  8042d0:	0015883a 	mov	r10,zero
  8042d4:	00bfffc4 	movi	r2,-1
  8042d8:	5089883a 	add	r4,r10,r2
  8042dc:	588b883a 	add	r5,r11,r2
  8042e0:	228d803a 	cmpltu	r6,r4,r10
  8042e4:	314b883a 	add	r5,r6,r5
  8042e8:	4104703a 	and	r2,r8,r4
  8042ec:	4946703a 	and	r3,r9,r5
  8042f0:	10c4b03a 	or	r2,r2,r3
  8042f4:	10000226 	beq	r2,zero,804300 <__pack_d+0x214>
  8042f8:	04400044 	movi	r17,1
  8042fc:	0025883a 	mov	r18,zero
  804300:	00803fc4 	movi	r2,255
  804304:	644eb03a 	or	r7,r12,r17
  804308:	3892703a 	and	r9,r7,r2
  80430c:	00802004 	movi	r2,128
  804310:	6c90b03a 	or	r8,r13,r18
  804314:	0015883a 	mov	r10,zero
  804318:	48801626 	beq	r9,r2,804374 <__pack_d+0x288>
  80431c:	01001fc4 	movi	r4,127
  804320:	3905883a 	add	r2,r7,r4
  804324:	11cd803a 	cmpltu	r6,r2,r7
  804328:	320d883a 	add	r6,r6,r8
  80432c:	100f883a 	mov	r7,r2
  804330:	00840034 	movhi	r2,4096
  804334:	10bfffc4 	addi	r2,r2,-1
  804338:	3011883a 	mov	r8,r6
  80433c:	0007883a 	mov	r3,zero
  804340:	11801b36 	bltu	r2,r6,8043b0 <__pack_d+0x2c4>
  804344:	4004963a 	slli	r2,r8,24
  804348:	3808d23a 	srli	r4,r7,8
  80434c:	400ad23a 	srli	r5,r8,8
  804350:	1813883a 	mov	r9,r3
  804354:	1108b03a 	or	r4,r2,r4
  804358:	00bfffc4 	movi	r2,-1
  80435c:	00c00434 	movhi	r3,16
  804360:	18ffffc4 	addi	r3,r3,-1
  804364:	208c703a 	and	r6,r4,r2
  804368:	28ce703a 	and	r7,r5,r3
  80436c:	4a01ffcc 	andi	r8,r9,2047
  804370:	003f7206 	br	80413c <__pack_d+0x50>
  804374:	503fe91e 	bne	r10,zero,80431c <__pack_d+0x230>
  804378:	01004004 	movi	r4,256
  80437c:	3904703a 	and	r2,r7,r4
  804380:	0007883a 	mov	r3,zero
  804384:	10c4b03a 	or	r2,r2,r3
  804388:	10000626 	beq	r2,zero,8043a4 <__pack_d+0x2b8>
  80438c:	3a45883a 	add	r2,r7,r9
  804390:	11cd803a 	cmpltu	r6,r2,r7
  804394:	320d883a 	add	r6,r6,r8
  804398:	100f883a 	mov	r7,r2
  80439c:	3011883a 	mov	r8,r6
  8043a0:	0007883a 	mov	r3,zero
  8043a4:	00840034 	movhi	r2,4096
  8043a8:	10bfffc4 	addi	r2,r2,-1
  8043ac:	123fe52e 	bgeu	r2,r8,804344 <__pack_d+0x258>
  8043b0:	00c00044 	movi	r3,1
  8043b4:	003fe306 	br	804344 <__pack_d+0x258>
  8043b8:	0009883a 	mov	r4,zero
  8043bc:	0013883a 	mov	r9,zero
  8043c0:	000b883a 	mov	r5,zero
  8043c4:	003fe406 	br	804358 <__pack_d+0x26c>
  8043c8:	4a47883a 	add	r3,r9,r9
  8043cc:	008007c4 	movi	r2,31
  8043d0:	1105c83a 	sub	r2,r2,r4
  8043d4:	1886983a 	sll	r3,r3,r2
  8043d8:	4118d83a 	srl	r12,r8,r4
  8043dc:	491ad83a 	srl	r13,r9,r4
  8043e0:	1b18b03a 	or	r12,r3,r12
  8043e4:	003fb506 	br	8042bc <__pack_d+0x1d0>
  8043e8:	2806d07a 	srli	r3,r5,1
  8043ec:	008007c4 	movi	r2,31
  8043f0:	1105c83a 	sub	r2,r2,r4
  8043f4:	1896d83a 	srl	r11,r3,r2
  8043f8:	2914983a 	sll	r10,r5,r4
  8043fc:	003fb506 	br	8042d4 <__pack_d+0x1e8>

00804400 <__unpack_d>:
  804400:	20c00117 	ldw	r3,4(r4)
  804404:	22400017 	ldw	r9,0(r4)
  804408:	00800434 	movhi	r2,16
  80440c:	10bfffc4 	addi	r2,r2,-1
  804410:	1808d53a 	srli	r4,r3,20
  804414:	180cd7fa 	srli	r6,r3,31
  804418:	1894703a 	and	r10,r3,r2
  80441c:	2201ffcc 	andi	r8,r4,2047
  804420:	281b883a 	mov	r13,r5
  804424:	4817883a 	mov	r11,r9
  804428:	29800115 	stw	r6,4(r5)
  80442c:	5019883a 	mov	r12,r10
  804430:	40001e1e 	bne	r8,zero,8044ac <__unpack_d+0xac>
  804434:	4a84b03a 	or	r2,r9,r10
  804438:	10001926 	beq	r2,zero,8044a0 <__unpack_d+0xa0>
  80443c:	4804d63a 	srli	r2,r9,24
  804440:	500c923a 	slli	r6,r10,8
  804444:	013f0084 	movi	r4,-1022
  804448:	00c40034 	movhi	r3,4096
  80444c:	18ffffc4 	addi	r3,r3,-1
  804450:	118cb03a 	or	r6,r2,r6
  804454:	008000c4 	movi	r2,3
  804458:	480a923a 	slli	r5,r9,8
  80445c:	68800015 	stw	r2,0(r13)
  804460:	69000215 	stw	r4,8(r13)
  804464:	19800b36 	bltu	r3,r6,804494 <__unpack_d+0x94>
  804468:	200f883a 	mov	r7,r4
  80446c:	1811883a 	mov	r8,r3
  804470:	2945883a 	add	r2,r5,r5
  804474:	1149803a 	cmpltu	r4,r2,r5
  804478:	3187883a 	add	r3,r6,r6
  80447c:	20c9883a 	add	r4,r4,r3
  804480:	100b883a 	mov	r5,r2
  804484:	200d883a 	mov	r6,r4
  804488:	39ffffc4 	addi	r7,r7,-1
  80448c:	413ff82e 	bgeu	r8,r4,804470 <__unpack_d+0x70>
  804490:	69c00215 	stw	r7,8(r13)
  804494:	69800415 	stw	r6,16(r13)
  804498:	69400315 	stw	r5,12(r13)
  80449c:	f800283a 	ret
  8044a0:	00800084 	movi	r2,2
  8044a4:	28800015 	stw	r2,0(r5)
  8044a8:	f800283a 	ret
  8044ac:	0081ffc4 	movi	r2,2047
  8044b0:	40800f26 	beq	r8,r2,8044f0 <__unpack_d+0xf0>
  8044b4:	480cd63a 	srli	r6,r9,24
  8044b8:	5006923a 	slli	r3,r10,8
  8044bc:	4804923a 	slli	r2,r9,8
  8044c0:	0009883a 	mov	r4,zero
  8044c4:	30c6b03a 	or	r3,r6,r3
  8044c8:	01440034 	movhi	r5,4096
  8044cc:	110cb03a 	or	r6,r2,r4
  8044d0:	423f0044 	addi	r8,r8,-1023
  8044d4:	194eb03a 	or	r7,r3,r5
  8044d8:	008000c4 	movi	r2,3
  8044dc:	69c00415 	stw	r7,16(r13)
  8044e0:	6a000215 	stw	r8,8(r13)
  8044e4:	68800015 	stw	r2,0(r13)
  8044e8:	69800315 	stw	r6,12(r13)
  8044ec:	f800283a 	ret
  8044f0:	4a84b03a 	or	r2,r9,r10
  8044f4:	1000031e 	bne	r2,zero,804504 <__unpack_d+0x104>
  8044f8:	00800104 	movi	r2,4
  8044fc:	28800015 	stw	r2,0(r5)
  804500:	f800283a 	ret
  804504:	0009883a 	mov	r4,zero
  804508:	01400234 	movhi	r5,8
  80450c:	4904703a 	and	r2,r9,r4
  804510:	5146703a 	and	r3,r10,r5
  804514:	10c4b03a 	or	r2,r2,r3
  804518:	10000526 	beq	r2,zero,804530 <__unpack_d+0x130>
  80451c:	00800044 	movi	r2,1
  804520:	68800015 	stw	r2,0(r13)
  804524:	6b000415 	stw	r12,16(r13)
  804528:	6ac00315 	stw	r11,12(r13)
  80452c:	f800283a 	ret
  804530:	68000015 	stw	zero,0(r13)
  804534:	003ffb06 	br	804524 <__unpack_d+0x124>

00804538 <__fpcmp_parts_d>:
  804538:	21800017 	ldw	r6,0(r4)
  80453c:	00c00044 	movi	r3,1
  804540:	19800a2e 	bgeu	r3,r6,80456c <__fpcmp_parts_d+0x34>
  804544:	28800017 	ldw	r2,0(r5)
  804548:	1880082e 	bgeu	r3,r2,80456c <__fpcmp_parts_d+0x34>
  80454c:	00c00104 	movi	r3,4
  804550:	30c02626 	beq	r6,r3,8045ec <__fpcmp_parts_d+0xb4>
  804554:	10c02226 	beq	r2,r3,8045e0 <__fpcmp_parts_d+0xa8>
  804558:	00c00084 	movi	r3,2
  80455c:	30c00526 	beq	r6,r3,804574 <__fpcmp_parts_d+0x3c>
  804560:	10c0071e 	bne	r2,r3,804580 <__fpcmp_parts_d+0x48>
  804564:	20800117 	ldw	r2,4(r4)
  804568:	1000091e 	bne	r2,zero,804590 <__fpcmp_parts_d+0x58>
  80456c:	00800044 	movi	r2,1
  804570:	f800283a 	ret
  804574:	10c01a1e 	bne	r2,r3,8045e0 <__fpcmp_parts_d+0xa8>
  804578:	0005883a 	mov	r2,zero
  80457c:	f800283a 	ret
  804580:	22000117 	ldw	r8,4(r4)
  804584:	28800117 	ldw	r2,4(r5)
  804588:	40800326 	beq	r8,r2,804598 <__fpcmp_parts_d+0x60>
  80458c:	403ff726 	beq	r8,zero,80456c <__fpcmp_parts_d+0x34>
  804590:	00bfffc4 	movi	r2,-1
  804594:	f800283a 	ret
  804598:	20c00217 	ldw	r3,8(r4)
  80459c:	28800217 	ldw	r2,8(r5)
  8045a0:	10fffa16 	blt	r2,r3,80458c <__fpcmp_parts_d+0x54>
  8045a4:	18800916 	blt	r3,r2,8045cc <__fpcmp_parts_d+0x94>
  8045a8:	21c00417 	ldw	r7,16(r4)
  8045ac:	28c00417 	ldw	r3,16(r5)
  8045b0:	21800317 	ldw	r6,12(r4)
  8045b4:	28800317 	ldw	r2,12(r5)
  8045b8:	19fff436 	bltu	r3,r7,80458c <__fpcmp_parts_d+0x54>
  8045bc:	38c00526 	beq	r7,r3,8045d4 <__fpcmp_parts_d+0x9c>
  8045c0:	38c00236 	bltu	r7,r3,8045cc <__fpcmp_parts_d+0x94>
  8045c4:	19ffec1e 	bne	r3,r7,804578 <__fpcmp_parts_d+0x40>
  8045c8:	30bfeb2e 	bgeu	r6,r2,804578 <__fpcmp_parts_d+0x40>
  8045cc:	403fe71e 	bne	r8,zero,80456c <__fpcmp_parts_d+0x34>
  8045d0:	003fef06 	br	804590 <__fpcmp_parts_d+0x58>
  8045d4:	11bffa2e 	bgeu	r2,r6,8045c0 <__fpcmp_parts_d+0x88>
  8045d8:	403fe426 	beq	r8,zero,80456c <__fpcmp_parts_d+0x34>
  8045dc:	003fec06 	br	804590 <__fpcmp_parts_d+0x58>
  8045e0:	28800117 	ldw	r2,4(r5)
  8045e4:	103fe11e 	bne	r2,zero,80456c <__fpcmp_parts_d+0x34>
  8045e8:	003fe906 	br	804590 <__fpcmp_parts_d+0x58>
  8045ec:	11bfdd1e 	bne	r2,r6,804564 <__fpcmp_parts_d+0x2c>
  8045f0:	28c00117 	ldw	r3,4(r5)
  8045f4:	20800117 	ldw	r2,4(r4)
  8045f8:	1885c83a 	sub	r2,r3,r2
  8045fc:	f800283a 	ret

00804600 <printf>:
  804600:	defffb04 	addi	sp,sp,-20
  804604:	dfc00115 	stw	ra,4(sp)
  804608:	d9400215 	stw	r5,8(sp)
  80460c:	d9800315 	stw	r6,12(sp)
  804610:	d9c00415 	stw	r7,16(sp)
  804614:	00802274 	movhi	r2,137
  804618:	10a4f804 	addi	r2,r2,-27680
  80461c:	10c00017 	ldw	r3,0(r2)
  804620:	200b883a 	mov	r5,r4
  804624:	d8800204 	addi	r2,sp,8
  804628:	19000217 	ldw	r4,8(r3)
  80462c:	100d883a 	mov	r6,r2
  804630:	d8800015 	stw	r2,0(sp)
  804634:	080657c0 	call	80657c <__vfprintf_internal>
  804638:	dfc00117 	ldw	ra,4(sp)
  80463c:	dec00504 	addi	sp,sp,20
  804640:	f800283a 	ret

00804644 <_printf_r>:
  804644:	defffc04 	addi	sp,sp,-16
  804648:	dfc00115 	stw	ra,4(sp)
  80464c:	d9800215 	stw	r6,8(sp)
  804650:	d9c00315 	stw	r7,12(sp)
  804654:	280d883a 	mov	r6,r5
  804658:	21400217 	ldw	r5,8(r4)
  80465c:	d8c00204 	addi	r3,sp,8
  804660:	180f883a 	mov	r7,r3
  804664:	d8c00015 	stw	r3,0(sp)
  804668:	08046d00 	call	8046d0 <___vfprintf_internal_r>
  80466c:	dfc00117 	ldw	ra,4(sp)
  804670:	dec00404 	addi	sp,sp,16
  804674:	f800283a 	ret

00804678 <__sprint_r>:
  804678:	30800217 	ldw	r2,8(r6)
  80467c:	defffe04 	addi	sp,sp,-8
  804680:	dc000015 	stw	r16,0(sp)
  804684:	dfc00115 	stw	ra,4(sp)
  804688:	3021883a 	mov	r16,r6
  80468c:	0007883a 	mov	r3,zero
  804690:	1000061e 	bne	r2,zero,8046ac <__sprint_r+0x34>
  804694:	1805883a 	mov	r2,r3
  804698:	30000115 	stw	zero,4(r6)
  80469c:	dfc00117 	ldw	ra,4(sp)
  8046a0:	dc000017 	ldw	r16,0(sp)
  8046a4:	dec00204 	addi	sp,sp,8
  8046a8:	f800283a 	ret
  8046ac:	08087d80 	call	8087d8 <__sfvwrite_r>
  8046b0:	1007883a 	mov	r3,r2
  8046b4:	1805883a 	mov	r2,r3
  8046b8:	80000115 	stw	zero,4(r16)
  8046bc:	80000215 	stw	zero,8(r16)
  8046c0:	dfc00117 	ldw	ra,4(sp)
  8046c4:	dc000017 	ldw	r16,0(sp)
  8046c8:	dec00204 	addi	sp,sp,8
  8046cc:	f800283a 	ret

008046d0 <___vfprintf_internal_r>:
  8046d0:	defea404 	addi	sp,sp,-1392
  8046d4:	dd815815 	stw	r22,1376(sp)
  8046d8:	dc015215 	stw	r16,1352(sp)
  8046dc:	d9c15115 	stw	r7,1348(sp)
  8046e0:	dfc15b15 	stw	ra,1388(sp)
  8046e4:	df015a15 	stw	fp,1384(sp)
  8046e8:	ddc15915 	stw	r23,1380(sp)
  8046ec:	dd415715 	stw	r21,1372(sp)
  8046f0:	dd015615 	stw	r20,1368(sp)
  8046f4:	dcc15515 	stw	r19,1364(sp)
  8046f8:	dc815415 	stw	r18,1360(sp)
  8046fc:	dc415315 	stw	r17,1356(sp)
  804700:	282d883a 	mov	r22,r5
  804704:	3021883a 	mov	r16,r6
  804708:	d9014f15 	stw	r4,1340(sp)
  80470c:	0808dfc0 	call	808dfc <_localeconv_r>
  804710:	10800017 	ldw	r2,0(r2)
  804714:	d9c15117 	ldw	r7,1348(sp)
  804718:	d8814915 	stw	r2,1316(sp)
  80471c:	d8814f17 	ldw	r2,1340(sp)
  804720:	10000226 	beq	r2,zero,80472c <___vfprintf_internal_r+0x5c>
  804724:	10800e17 	ldw	r2,56(r2)
  804728:	10020d26 	beq	r2,zero,804f60 <___vfprintf_internal_r+0x890>
  80472c:	b080030b 	ldhu	r2,12(r22)
  804730:	1080020c 	andi	r2,r2,8
  804734:	10020e26 	beq	r2,zero,804f70 <___vfprintf_internal_r+0x8a0>
  804738:	b0800417 	ldw	r2,16(r22)
  80473c:	10020c26 	beq	r2,zero,804f70 <___vfprintf_internal_r+0x8a0>
  804740:	b200030b 	ldhu	r8,12(r22)
  804744:	00800284 	movi	r2,10
  804748:	40c0068c 	andi	r3,r8,26
  80474c:	18802f1e 	bne	r3,r2,80480c <___vfprintf_internal_r+0x13c>
  804750:	b080038f 	ldh	r2,14(r22)
  804754:	10002d16 	blt	r2,zero,80480c <___vfprintf_internal_r+0x13c>
  804758:	b240038b 	ldhu	r9,14(r22)
  80475c:	b2800717 	ldw	r10,28(r22)
  804760:	b2c00917 	ldw	r11,36(r22)
  804764:	d9014f17 	ldw	r4,1340(sp)
  804768:	dc402904 	addi	r17,sp,164
  80476c:	d8804004 	addi	r2,sp,256
  804770:	00c10004 	movi	r3,1024
  804774:	423fff4c 	andi	r8,r8,65533
  804778:	800d883a 	mov	r6,r16
  80477c:	880b883a 	mov	r5,r17
  804780:	da002c0d 	sth	r8,176(sp)
  804784:	da402c8d 	sth	r9,178(sp)
  804788:	da803015 	stw	r10,192(sp)
  80478c:	dac03215 	stw	r11,200(sp)
  804790:	d8802d15 	stw	r2,180(sp)
  804794:	d8c02e15 	stw	r3,184(sp)
  804798:	d8802915 	stw	r2,164(sp)
  80479c:	d8c02b15 	stw	r3,172(sp)
  8047a0:	d8002f15 	stw	zero,188(sp)
  8047a4:	08046d00 	call	8046d0 <___vfprintf_internal_r>
  8047a8:	d8814b15 	stw	r2,1324(sp)
  8047ac:	10000416 	blt	r2,zero,8047c0 <___vfprintf_internal_r+0xf0>
  8047b0:	d9014f17 	ldw	r4,1340(sp)
  8047b4:	880b883a 	mov	r5,r17
  8047b8:	0807ea80 	call	807ea8 <_fflush_r>
  8047bc:	1002321e 	bne	r2,zero,805088 <___vfprintf_internal_r+0x9b8>
  8047c0:	d8802c0b 	ldhu	r2,176(sp)
  8047c4:	1080100c 	andi	r2,r2,64
  8047c8:	10000326 	beq	r2,zero,8047d8 <___vfprintf_internal_r+0x108>
  8047cc:	b080030b 	ldhu	r2,12(r22)
  8047d0:	10801014 	ori	r2,r2,64
  8047d4:	b080030d 	sth	r2,12(r22)
  8047d8:	d8814b17 	ldw	r2,1324(sp)
  8047dc:	dfc15b17 	ldw	ra,1388(sp)
  8047e0:	df015a17 	ldw	fp,1384(sp)
  8047e4:	ddc15917 	ldw	r23,1380(sp)
  8047e8:	dd815817 	ldw	r22,1376(sp)
  8047ec:	dd415717 	ldw	r21,1372(sp)
  8047f0:	dd015617 	ldw	r20,1368(sp)
  8047f4:	dcc15517 	ldw	r19,1364(sp)
  8047f8:	dc815417 	ldw	r18,1360(sp)
  8047fc:	dc415317 	ldw	r17,1356(sp)
  804800:	dc015217 	ldw	r16,1352(sp)
  804804:	dec15c04 	addi	sp,sp,1392
  804808:	f800283a 	ret
  80480c:	0005883a 	mov	r2,zero
  804810:	0007883a 	mov	r3,zero
  804814:	dd401904 	addi	r21,sp,100
  804818:	d8814215 	stw	r2,1288(sp)
  80481c:	802f883a 	mov	r23,r16
  804820:	d8c14315 	stw	r3,1292(sp)
  804824:	d8014b15 	stw	zero,1324(sp)
  804828:	d8014815 	stw	zero,1312(sp)
  80482c:	d8014415 	stw	zero,1296(sp)
  804830:	d8014715 	stw	zero,1308(sp)
  804834:	dd400c15 	stw	r21,48(sp)
  804838:	d8000e15 	stw	zero,56(sp)
  80483c:	d8000d15 	stw	zero,52(sp)
  804840:	b8800007 	ldb	r2,0(r23)
  804844:	10001926 	beq	r2,zero,8048ac <___vfprintf_internal_r+0x1dc>
  804848:	00c00944 	movi	r3,37
  80484c:	10c01726 	beq	r2,r3,8048ac <___vfprintf_internal_r+0x1dc>
  804850:	b821883a 	mov	r16,r23
  804854:	00000106 	br	80485c <___vfprintf_internal_r+0x18c>
  804858:	10c00326 	beq	r2,r3,804868 <___vfprintf_internal_r+0x198>
  80485c:	84000044 	addi	r16,r16,1
  804860:	80800007 	ldb	r2,0(r16)
  804864:	103ffc1e 	bne	r2,zero,804858 <___vfprintf_internal_r+0x188>
  804868:	85e7c83a 	sub	r19,r16,r23
  80486c:	98000e26 	beq	r19,zero,8048a8 <___vfprintf_internal_r+0x1d8>
  804870:	dc800e17 	ldw	r18,56(sp)
  804874:	dc400d17 	ldw	r17,52(sp)
  804878:	008001c4 	movi	r2,7
  80487c:	94e5883a 	add	r18,r18,r19
  804880:	8c400044 	addi	r17,r17,1
  804884:	adc00015 	stw	r23,0(r21)
  804888:	dc800e15 	stw	r18,56(sp)
  80488c:	acc00115 	stw	r19,4(r21)
  804890:	dc400d15 	stw	r17,52(sp)
  804894:	14428b16 	blt	r2,r17,8052c4 <___vfprintf_internal_r+0xbf4>
  804898:	ad400204 	addi	r21,r21,8
  80489c:	d9014b17 	ldw	r4,1324(sp)
  8048a0:	24c9883a 	add	r4,r4,r19
  8048a4:	d9014b15 	stw	r4,1324(sp)
  8048a8:	802f883a 	mov	r23,r16
  8048ac:	b8800007 	ldb	r2,0(r23)
  8048b0:	10013c26 	beq	r2,zero,804da4 <___vfprintf_internal_r+0x6d4>
  8048b4:	bdc00044 	addi	r23,r23,1
  8048b8:	d8000405 	stb	zero,16(sp)
  8048bc:	b8c00007 	ldb	r3,0(r23)
  8048c0:	04ffffc4 	movi	r19,-1
  8048c4:	d8014c15 	stw	zero,1328(sp)
  8048c8:	d8014a15 	stw	zero,1320(sp)
  8048cc:	d8c14d15 	stw	r3,1332(sp)
  8048d0:	bdc00044 	addi	r23,r23,1
  8048d4:	d9414d17 	ldw	r5,1332(sp)
  8048d8:	00801604 	movi	r2,88
  8048dc:	28fff804 	addi	r3,r5,-32
  8048e0:	10c06036 	bltu	r2,r3,804a64 <___vfprintf_internal_r+0x394>
  8048e4:	18c5883a 	add	r2,r3,r3
  8048e8:	1085883a 	add	r2,r2,r2
  8048ec:	00c02034 	movhi	r3,128
  8048f0:	18d24004 	addi	r3,r3,18688
  8048f4:	10c5883a 	add	r2,r2,r3
  8048f8:	11000017 	ldw	r4,0(r2)
  8048fc:	2000683a 	jmp	r4
  804900:	00805874 	movhi	r2,353
  804904:	00804a64 	muli	r2,zero,297
  804908:	00804a64 	muli	r2,zero,297
  80490c:	00805860 	cmpeqi	r2,zero,353
  804910:	00804a64 	muli	r2,zero,297
  804914:	00804a64 	muli	r2,zero,297
  804918:	00804a64 	muli	r2,zero,297
  80491c:	00804a64 	muli	r2,zero,297
  804920:	00804a64 	muli	r2,zero,297
  804924:	00804a64 	muli	r2,zero,297
  804928:	00805640 	call	80564 <__alt_mem_sdram_0-0x77fa9c>
  80492c:	00805850 	cmplti	r2,zero,353
  804930:	00804a64 	muli	r2,zero,297
  804934:	00805658 	cmpnei	r2,zero,345
  804938:	008058ec 	andhi	r2,zero,355
  80493c:	00804a64 	muli	r2,zero,297
  804940:	008058d8 	cmpnei	r2,zero,355
  804944:	008058a0 	cmpeqi	r2,zero,354
  804948:	008058a0 	cmpeqi	r2,zero,354
  80494c:	008058a0 	cmpeqi	r2,zero,354
  804950:	008058a0 	cmpeqi	r2,zero,354
  804954:	008058a0 	cmpeqi	r2,zero,354
  804958:	008058a0 	cmpeqi	r2,zero,354
  80495c:	008058a0 	cmpeqi	r2,zero,354
  804960:	008058a0 	cmpeqi	r2,zero,354
  804964:	008058a0 	cmpeqi	r2,zero,354
  804968:	00804a64 	muli	r2,zero,297
  80496c:	00804a64 	muli	r2,zero,297
  804970:	00804a64 	muli	r2,zero,297
  804974:	00804a64 	muli	r2,zero,297
  804978:	00804a64 	muli	r2,zero,297
  80497c:	00804a64 	muli	r2,zero,297
  804980:	00804a64 	muli	r2,zero,297
  804984:	00804a64 	muli	r2,zero,297
  804988:	00804a64 	muli	r2,zero,297
  80498c:	00804a64 	muli	r2,zero,297
  804990:	008050bc 	xorhi	r2,zero,322
  804994:	00805728 	cmpgeui	r2,zero,348
  804998:	00804a64 	muli	r2,zero,297
  80499c:	00805728 	cmpgeui	r2,zero,348
  8049a0:	00804a64 	muli	r2,zero,297
  8049a4:	00804a64 	muli	r2,zero,297
  8049a8:	00804a64 	muli	r2,zero,297
  8049ac:	00804a64 	muli	r2,zero,297
  8049b0:	0080588c 	andi	r2,zero,354
  8049b4:	00804a64 	muli	r2,zero,297
  8049b8:	00804a64 	muli	r2,zero,297
  8049bc:	00805170 	cmpltui	r2,zero,325
  8049c0:	00804a64 	muli	r2,zero,297
  8049c4:	00804a64 	muli	r2,zero,297
  8049c8:	00804a64 	muli	r2,zero,297
  8049cc:	00804a64 	muli	r2,zero,297
  8049d0:	00804a64 	muli	r2,zero,297
  8049d4:	008051bc 	xorhi	r2,zero,326
  8049d8:	00804a64 	muli	r2,zero,297
  8049dc:	00804a64 	muli	r2,zero,297
  8049e0:	008057dc 	xori	r2,zero,351
  8049e4:	00804a64 	muli	r2,zero,297
  8049e8:	00804a64 	muli	r2,zero,297
  8049ec:	00804a64 	muli	r2,zero,297
  8049f0:	00804a64 	muli	r2,zero,297
  8049f4:	00804a64 	muli	r2,zero,297
  8049f8:	00804a64 	muli	r2,zero,297
  8049fc:	00804a64 	muli	r2,zero,297
  804a00:	00804a64 	muli	r2,zero,297
  804a04:	00804a64 	muli	r2,zero,297
  804a08:	00804a64 	muli	r2,zero,297
  804a0c:	008057b0 	cmpltui	r2,zero,350
  804a10:	008050c8 	cmpgei	r2,zero,323
  804a14:	00805728 	cmpgeui	r2,zero,348
  804a18:	00805728 	cmpgeui	r2,zero,348
  804a1c:	00805728 	cmpgeui	r2,zero,348
  804a20:	00805714 	movui	r2,348
  804a24:	008050c8 	cmpgei	r2,zero,323
  804a28:	00804a64 	muli	r2,zero,297
  804a2c:	00804a64 	muli	r2,zero,297
  804a30:	0080569c 	xori	r2,zero,346
  804a34:	00804a64 	muli	r2,zero,297
  804a38:	0080566c 	andhi	r2,zero,345
  804a3c:	0080517c 	xorhi	r2,zero,325
  804a40:	008056cc 	andi	r2,zero,347
  804a44:	008056b8 	rdprs	r2,zero,346
  804a48:	00804a64 	muli	r2,zero,297
  804a4c:	00805948 	cmpgei	r2,zero,357
  804a50:	00804a64 	muli	r2,zero,297
  804a54:	008051c8 	cmpgei	r2,zero,327
  804a58:	00804a64 	muli	r2,zero,297
  804a5c:	00804a64 	muli	r2,zero,297
  804a60:	00805840 	call	80584 <__alt_mem_sdram_0-0x77fa7c>
  804a64:	d9014d17 	ldw	r4,1332(sp)
  804a68:	2000ce26 	beq	r4,zero,804da4 <___vfprintf_internal_r+0x6d4>
  804a6c:	01400044 	movi	r5,1
  804a70:	d9800f04 	addi	r6,sp,60
  804a74:	d9c14015 	stw	r7,1280(sp)
  804a78:	d9414515 	stw	r5,1300(sp)
  804a7c:	d9814115 	stw	r6,1284(sp)
  804a80:	280f883a 	mov	r7,r5
  804a84:	d9000f05 	stb	r4,60(sp)
  804a88:	d8000405 	stb	zero,16(sp)
  804a8c:	d8014615 	stw	zero,1304(sp)
  804a90:	d8c14c17 	ldw	r3,1328(sp)
  804a94:	1880008c 	andi	r2,r3,2
  804a98:	1005003a 	cmpeq	r2,r2,zero
  804a9c:	d8815015 	stw	r2,1344(sp)
  804aa0:	1000031e 	bne	r2,zero,804ab0 <___vfprintf_internal_r+0x3e0>
  804aa4:	d9014517 	ldw	r4,1300(sp)
  804aa8:	21000084 	addi	r4,r4,2
  804aac:	d9014515 	stw	r4,1300(sp)
  804ab0:	d9414c17 	ldw	r5,1328(sp)
  804ab4:	2940210c 	andi	r5,r5,132
  804ab8:	d9414e15 	stw	r5,1336(sp)
  804abc:	28002d1e 	bne	r5,zero,804b74 <___vfprintf_internal_r+0x4a4>
  804ac0:	d9814a17 	ldw	r6,1320(sp)
  804ac4:	d8814517 	ldw	r2,1300(sp)
  804ac8:	30a1c83a 	sub	r16,r6,r2
  804acc:	0400290e 	bge	zero,r16,804b74 <___vfprintf_internal_r+0x4a4>
  804ad0:	00800404 	movi	r2,16
  804ad4:	1404580e 	bge	r2,r16,805c38 <___vfprintf_internal_r+0x1568>
  804ad8:	dc800e17 	ldw	r18,56(sp)
  804adc:	dc400d17 	ldw	r17,52(sp)
  804ae0:	1027883a 	mov	r19,r2
  804ae4:	07002234 	movhi	fp,136
  804ae8:	e71d7184 	addi	fp,fp,30150
  804aec:	050001c4 	movi	r20,7
  804af0:	00000306 	br	804b00 <___vfprintf_internal_r+0x430>
  804af4:	843ffc04 	addi	r16,r16,-16
  804af8:	ad400204 	addi	r21,r21,8
  804afc:	9c00130e 	bge	r19,r16,804b4c <___vfprintf_internal_r+0x47c>
  804b00:	94800404 	addi	r18,r18,16
  804b04:	8c400044 	addi	r17,r17,1
  804b08:	af000015 	stw	fp,0(r21)
  804b0c:	acc00115 	stw	r19,4(r21)
  804b10:	dc800e15 	stw	r18,56(sp)
  804b14:	dc400d15 	stw	r17,52(sp)
  804b18:	a47ff60e 	bge	r20,r17,804af4 <___vfprintf_internal_r+0x424>
  804b1c:	d9014f17 	ldw	r4,1340(sp)
  804b20:	b00b883a 	mov	r5,r22
  804b24:	d9800c04 	addi	r6,sp,48
  804b28:	d9c15115 	stw	r7,1348(sp)
  804b2c:	08046780 	call	804678 <__sprint_r>
  804b30:	d9c15117 	ldw	r7,1348(sp)
  804b34:	10009e1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  804b38:	843ffc04 	addi	r16,r16,-16
  804b3c:	dc800e17 	ldw	r18,56(sp)
  804b40:	dc400d17 	ldw	r17,52(sp)
  804b44:	dd401904 	addi	r21,sp,100
  804b48:	9c3fed16 	blt	r19,r16,804b00 <___vfprintf_internal_r+0x430>
  804b4c:	9425883a 	add	r18,r18,r16
  804b50:	8c400044 	addi	r17,r17,1
  804b54:	008001c4 	movi	r2,7
  804b58:	af000015 	stw	fp,0(r21)
  804b5c:	ac000115 	stw	r16,4(r21)
  804b60:	dc800e15 	stw	r18,56(sp)
  804b64:	dc400d15 	stw	r17,52(sp)
  804b68:	1441f516 	blt	r2,r17,805340 <___vfprintf_internal_r+0xc70>
  804b6c:	ad400204 	addi	r21,r21,8
  804b70:	00000206 	br	804b7c <___vfprintf_internal_r+0x4ac>
  804b74:	dc800e17 	ldw	r18,56(sp)
  804b78:	dc400d17 	ldw	r17,52(sp)
  804b7c:	d8800407 	ldb	r2,16(sp)
  804b80:	10000b26 	beq	r2,zero,804bb0 <___vfprintf_internal_r+0x4e0>
  804b84:	00800044 	movi	r2,1
  804b88:	94800044 	addi	r18,r18,1
  804b8c:	8c400044 	addi	r17,r17,1
  804b90:	a8800115 	stw	r2,4(r21)
  804b94:	d8c00404 	addi	r3,sp,16
  804b98:	008001c4 	movi	r2,7
  804b9c:	a8c00015 	stw	r3,0(r21)
  804ba0:	dc800e15 	stw	r18,56(sp)
  804ba4:	dc400d15 	stw	r17,52(sp)
  804ba8:	1441da16 	blt	r2,r17,805314 <___vfprintf_internal_r+0xc44>
  804bac:	ad400204 	addi	r21,r21,8
  804bb0:	d9015017 	ldw	r4,1344(sp)
  804bb4:	20000b1e 	bne	r4,zero,804be4 <___vfprintf_internal_r+0x514>
  804bb8:	d8800444 	addi	r2,sp,17
  804bbc:	94800084 	addi	r18,r18,2
  804bc0:	8c400044 	addi	r17,r17,1
  804bc4:	a8800015 	stw	r2,0(r21)
  804bc8:	00c00084 	movi	r3,2
  804bcc:	008001c4 	movi	r2,7
  804bd0:	a8c00115 	stw	r3,4(r21)
  804bd4:	dc800e15 	stw	r18,56(sp)
  804bd8:	dc400d15 	stw	r17,52(sp)
  804bdc:	1441c216 	blt	r2,r17,8052e8 <___vfprintf_internal_r+0xc18>
  804be0:	ad400204 	addi	r21,r21,8
  804be4:	d9414e17 	ldw	r5,1336(sp)
  804be8:	00802004 	movi	r2,128
  804bec:	2880b126 	beq	r5,r2,804eb4 <___vfprintf_internal_r+0x7e4>
  804bf0:	d8c14617 	ldw	r3,1304(sp)
  804bf4:	19e1c83a 	sub	r16,r3,r7
  804bf8:	0400260e 	bge	zero,r16,804c94 <___vfprintf_internal_r+0x5c4>
  804bfc:	00800404 	movi	r2,16
  804c00:	1403c90e 	bge	r2,r16,805b28 <___vfprintf_internal_r+0x1458>
  804c04:	1027883a 	mov	r19,r2
  804c08:	07002234 	movhi	fp,136
  804c0c:	e71d6d84 	addi	fp,fp,30134
  804c10:	050001c4 	movi	r20,7
  804c14:	00000306 	br	804c24 <___vfprintf_internal_r+0x554>
  804c18:	843ffc04 	addi	r16,r16,-16
  804c1c:	ad400204 	addi	r21,r21,8
  804c20:	9c00130e 	bge	r19,r16,804c70 <___vfprintf_internal_r+0x5a0>
  804c24:	94800404 	addi	r18,r18,16
  804c28:	8c400044 	addi	r17,r17,1
  804c2c:	af000015 	stw	fp,0(r21)
  804c30:	acc00115 	stw	r19,4(r21)
  804c34:	dc800e15 	stw	r18,56(sp)
  804c38:	dc400d15 	stw	r17,52(sp)
  804c3c:	a47ff60e 	bge	r20,r17,804c18 <___vfprintf_internal_r+0x548>
  804c40:	d9014f17 	ldw	r4,1340(sp)
  804c44:	b00b883a 	mov	r5,r22
  804c48:	d9800c04 	addi	r6,sp,48
  804c4c:	d9c15115 	stw	r7,1348(sp)
  804c50:	08046780 	call	804678 <__sprint_r>
  804c54:	d9c15117 	ldw	r7,1348(sp)
  804c58:	1000551e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  804c5c:	843ffc04 	addi	r16,r16,-16
  804c60:	dc800e17 	ldw	r18,56(sp)
  804c64:	dc400d17 	ldw	r17,52(sp)
  804c68:	dd401904 	addi	r21,sp,100
  804c6c:	9c3fed16 	blt	r19,r16,804c24 <___vfprintf_internal_r+0x554>
  804c70:	9425883a 	add	r18,r18,r16
  804c74:	8c400044 	addi	r17,r17,1
  804c78:	008001c4 	movi	r2,7
  804c7c:	af000015 	stw	fp,0(r21)
  804c80:	ac000115 	stw	r16,4(r21)
  804c84:	dc800e15 	stw	r18,56(sp)
  804c88:	dc400d15 	stw	r17,52(sp)
  804c8c:	14418216 	blt	r2,r17,805298 <___vfprintf_internal_r+0xbc8>
  804c90:	ad400204 	addi	r21,r21,8
  804c94:	d9014c17 	ldw	r4,1328(sp)
  804c98:	2080400c 	andi	r2,r4,256
  804c9c:	10004a1e 	bne	r2,zero,804dc8 <___vfprintf_internal_r+0x6f8>
  804ca0:	d9414117 	ldw	r5,1284(sp)
  804ca4:	91e5883a 	add	r18,r18,r7
  804ca8:	8c400044 	addi	r17,r17,1
  804cac:	008001c4 	movi	r2,7
  804cb0:	a9400015 	stw	r5,0(r21)
  804cb4:	a9c00115 	stw	r7,4(r21)
  804cb8:	dc800e15 	stw	r18,56(sp)
  804cbc:	dc400d15 	stw	r17,52(sp)
  804cc0:	14416716 	blt	r2,r17,805260 <___vfprintf_internal_r+0xb90>
  804cc4:	a8c00204 	addi	r3,r21,8
  804cc8:	d9814c17 	ldw	r6,1328(sp)
  804ccc:	3080010c 	andi	r2,r6,4
  804cd0:	10002826 	beq	r2,zero,804d74 <___vfprintf_internal_r+0x6a4>
  804cd4:	d8814a17 	ldw	r2,1320(sp)
  804cd8:	d9014517 	ldw	r4,1300(sp)
  804cdc:	1121c83a 	sub	r16,r2,r4
  804ce0:	0400240e 	bge	zero,r16,804d74 <___vfprintf_internal_r+0x6a4>
  804ce4:	00800404 	movi	r2,16
  804ce8:	14044f0e 	bge	r2,r16,805e28 <___vfprintf_internal_r+0x1758>
  804cec:	dc400d17 	ldw	r17,52(sp)
  804cf0:	1027883a 	mov	r19,r2
  804cf4:	07002234 	movhi	fp,136
  804cf8:	e71d7184 	addi	fp,fp,30150
  804cfc:	050001c4 	movi	r20,7
  804d00:	00000306 	br	804d10 <___vfprintf_internal_r+0x640>
  804d04:	843ffc04 	addi	r16,r16,-16
  804d08:	18c00204 	addi	r3,r3,8
  804d0c:	9c00110e 	bge	r19,r16,804d54 <___vfprintf_internal_r+0x684>
  804d10:	94800404 	addi	r18,r18,16
  804d14:	8c400044 	addi	r17,r17,1
  804d18:	1f000015 	stw	fp,0(r3)
  804d1c:	1cc00115 	stw	r19,4(r3)
  804d20:	dc800e15 	stw	r18,56(sp)
  804d24:	dc400d15 	stw	r17,52(sp)
  804d28:	a47ff60e 	bge	r20,r17,804d04 <___vfprintf_internal_r+0x634>
  804d2c:	d9014f17 	ldw	r4,1340(sp)
  804d30:	b00b883a 	mov	r5,r22
  804d34:	d9800c04 	addi	r6,sp,48
  804d38:	08046780 	call	804678 <__sprint_r>
  804d3c:	10001c1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  804d40:	843ffc04 	addi	r16,r16,-16
  804d44:	dc800e17 	ldw	r18,56(sp)
  804d48:	dc400d17 	ldw	r17,52(sp)
  804d4c:	d8c01904 	addi	r3,sp,100
  804d50:	9c3fef16 	blt	r19,r16,804d10 <___vfprintf_internal_r+0x640>
  804d54:	9425883a 	add	r18,r18,r16
  804d58:	8c400044 	addi	r17,r17,1
  804d5c:	008001c4 	movi	r2,7
  804d60:	1f000015 	stw	fp,0(r3)
  804d64:	1c000115 	stw	r16,4(r3)
  804d68:	dc800e15 	stw	r18,56(sp)
  804d6c:	dc400d15 	stw	r17,52(sp)
  804d70:	1440cb16 	blt	r2,r17,8050a0 <___vfprintf_internal_r+0x9d0>
  804d74:	d8814a17 	ldw	r2,1320(sp)
  804d78:	d9414517 	ldw	r5,1300(sp)
  804d7c:	1140010e 	bge	r2,r5,804d84 <___vfprintf_internal_r+0x6b4>
  804d80:	2805883a 	mov	r2,r5
  804d84:	d9814b17 	ldw	r6,1324(sp)
  804d88:	308d883a 	add	r6,r6,r2
  804d8c:	d9814b15 	stw	r6,1324(sp)
  804d90:	90013b1e 	bne	r18,zero,805280 <___vfprintf_internal_r+0xbb0>
  804d94:	d9c14017 	ldw	r7,1280(sp)
  804d98:	dd401904 	addi	r21,sp,100
  804d9c:	d8000d15 	stw	zero,52(sp)
  804da0:	003ea706 	br	804840 <___vfprintf_internal_r+0x170>
  804da4:	d8800e17 	ldw	r2,56(sp)
  804da8:	10053f1e 	bne	r2,zero,8062a8 <___vfprintf_internal_r+0x1bd8>
  804dac:	d8000d15 	stw	zero,52(sp)
  804db0:	b080030b 	ldhu	r2,12(r22)
  804db4:	1080100c 	andi	r2,r2,64
  804db8:	103e8726 	beq	r2,zero,8047d8 <___vfprintf_internal_r+0x108>
  804dbc:	00bfffc4 	movi	r2,-1
  804dc0:	d8814b15 	stw	r2,1324(sp)
  804dc4:	003e8406 	br	8047d8 <___vfprintf_internal_r+0x108>
  804dc8:	d9814d17 	ldw	r6,1332(sp)
  804dcc:	00801944 	movi	r2,101
  804dd0:	11806e16 	blt	r2,r6,804f8c <___vfprintf_internal_r+0x8bc>
  804dd4:	d9414717 	ldw	r5,1308(sp)
  804dd8:	00c00044 	movi	r3,1
  804ddc:	1943430e 	bge	r3,r5,805aec <___vfprintf_internal_r+0x141c>
  804de0:	d8814117 	ldw	r2,1284(sp)
  804de4:	94800044 	addi	r18,r18,1
  804de8:	8c400044 	addi	r17,r17,1
  804dec:	a8800015 	stw	r2,0(r21)
  804df0:	008001c4 	movi	r2,7
  804df4:	a8c00115 	stw	r3,4(r21)
  804df8:	dc800e15 	stw	r18,56(sp)
  804dfc:	dc400d15 	stw	r17,52(sp)
  804e00:	1441ca16 	blt	r2,r17,80552c <___vfprintf_internal_r+0xe5c>
  804e04:	a8c00204 	addi	r3,r21,8
  804e08:	d9014917 	ldw	r4,1316(sp)
  804e0c:	00800044 	movi	r2,1
  804e10:	94800044 	addi	r18,r18,1
  804e14:	8c400044 	addi	r17,r17,1
  804e18:	18800115 	stw	r2,4(r3)
  804e1c:	008001c4 	movi	r2,7
  804e20:	19000015 	stw	r4,0(r3)
  804e24:	dc800e15 	stw	r18,56(sp)
  804e28:	dc400d15 	stw	r17,52(sp)
  804e2c:	1441b616 	blt	r2,r17,805508 <___vfprintf_internal_r+0xe38>
  804e30:	1cc00204 	addi	r19,r3,8
  804e34:	d9014217 	ldw	r4,1288(sp)
  804e38:	d9414317 	ldw	r5,1292(sp)
  804e3c:	000d883a 	mov	r6,zero
  804e40:	000f883a 	mov	r7,zero
  804e44:	080c6440 	call	80c644 <__nedf2>
  804e48:	10017426 	beq	r2,zero,80541c <___vfprintf_internal_r+0xd4c>
  804e4c:	d9414717 	ldw	r5,1308(sp)
  804e50:	d9814117 	ldw	r6,1284(sp)
  804e54:	8c400044 	addi	r17,r17,1
  804e58:	2c85883a 	add	r2,r5,r18
  804e5c:	14bfffc4 	addi	r18,r2,-1
  804e60:	28bfffc4 	addi	r2,r5,-1
  804e64:	30c00044 	addi	r3,r6,1
  804e68:	98800115 	stw	r2,4(r19)
  804e6c:	008001c4 	movi	r2,7
  804e70:	98c00015 	stw	r3,0(r19)
  804e74:	dc800e15 	stw	r18,56(sp)
  804e78:	dc400d15 	stw	r17,52(sp)
  804e7c:	14418e16 	blt	r2,r17,8054b8 <___vfprintf_internal_r+0xde8>
  804e80:	9cc00204 	addi	r19,r19,8
  804e84:	d9414817 	ldw	r5,1312(sp)
  804e88:	d8800804 	addi	r2,sp,32
  804e8c:	8c400044 	addi	r17,r17,1
  804e90:	9165883a 	add	r18,r18,r5
  804e94:	98800015 	stw	r2,0(r19)
  804e98:	008001c4 	movi	r2,7
  804e9c:	99400115 	stw	r5,4(r19)
  804ea0:	dc800e15 	stw	r18,56(sp)
  804ea4:	dc400d15 	stw	r17,52(sp)
  804ea8:	1440ed16 	blt	r2,r17,805260 <___vfprintf_internal_r+0xb90>
  804eac:	98c00204 	addi	r3,r19,8
  804eb0:	003f8506 	br	804cc8 <___vfprintf_internal_r+0x5f8>
  804eb4:	d9814a17 	ldw	r6,1320(sp)
  804eb8:	d8814517 	ldw	r2,1300(sp)
  804ebc:	30a1c83a 	sub	r16,r6,r2
  804ec0:	043f4b0e 	bge	zero,r16,804bf0 <___vfprintf_internal_r+0x520>
  804ec4:	00800404 	movi	r2,16
  804ec8:	1404340e 	bge	r2,r16,805f9c <___vfprintf_internal_r+0x18cc>
  804ecc:	1027883a 	mov	r19,r2
  804ed0:	07002234 	movhi	fp,136
  804ed4:	e71d6d84 	addi	fp,fp,30134
  804ed8:	050001c4 	movi	r20,7
  804edc:	00000306 	br	804eec <___vfprintf_internal_r+0x81c>
  804ee0:	843ffc04 	addi	r16,r16,-16
  804ee4:	ad400204 	addi	r21,r21,8
  804ee8:	9c00130e 	bge	r19,r16,804f38 <___vfprintf_internal_r+0x868>
  804eec:	94800404 	addi	r18,r18,16
  804ef0:	8c400044 	addi	r17,r17,1
  804ef4:	af000015 	stw	fp,0(r21)
  804ef8:	acc00115 	stw	r19,4(r21)
  804efc:	dc800e15 	stw	r18,56(sp)
  804f00:	dc400d15 	stw	r17,52(sp)
  804f04:	a47ff60e 	bge	r20,r17,804ee0 <___vfprintf_internal_r+0x810>
  804f08:	d9014f17 	ldw	r4,1340(sp)
  804f0c:	b00b883a 	mov	r5,r22
  804f10:	d9800c04 	addi	r6,sp,48
  804f14:	d9c15115 	stw	r7,1348(sp)
  804f18:	08046780 	call	804678 <__sprint_r>
  804f1c:	d9c15117 	ldw	r7,1348(sp)
  804f20:	103fa31e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  804f24:	843ffc04 	addi	r16,r16,-16
  804f28:	dc800e17 	ldw	r18,56(sp)
  804f2c:	dc400d17 	ldw	r17,52(sp)
  804f30:	dd401904 	addi	r21,sp,100
  804f34:	9c3fed16 	blt	r19,r16,804eec <___vfprintf_internal_r+0x81c>
  804f38:	9425883a 	add	r18,r18,r16
  804f3c:	8c400044 	addi	r17,r17,1
  804f40:	008001c4 	movi	r2,7
  804f44:	af000015 	stw	fp,0(r21)
  804f48:	ac000115 	stw	r16,4(r21)
  804f4c:	dc800e15 	stw	r18,56(sp)
  804f50:	dc400d15 	stw	r17,52(sp)
  804f54:	14416116 	blt	r2,r17,8054dc <___vfprintf_internal_r+0xe0c>
  804f58:	ad400204 	addi	r21,r21,8
  804f5c:	003f2406 	br	804bf0 <___vfprintf_internal_r+0x520>
  804f60:	d9014f17 	ldw	r4,1340(sp)
  804f64:	08081400 	call	808140 <__sinit>
  804f68:	d9c15117 	ldw	r7,1348(sp)
  804f6c:	003def06 	br	80472c <___vfprintf_internal_r+0x5c>
  804f70:	d9014f17 	ldw	r4,1340(sp)
  804f74:	b00b883a 	mov	r5,r22
  804f78:	d9c15115 	stw	r7,1348(sp)
  804f7c:	08065a00 	call	8065a0 <__swsetup_r>
  804f80:	d9c15117 	ldw	r7,1348(sp)
  804f84:	103dee26 	beq	r2,zero,804740 <___vfprintf_internal_r+0x70>
  804f88:	003f8c06 	br	804dbc <___vfprintf_internal_r+0x6ec>
  804f8c:	d9014217 	ldw	r4,1288(sp)
  804f90:	d9414317 	ldw	r5,1292(sp)
  804f94:	000d883a 	mov	r6,zero
  804f98:	000f883a 	mov	r7,zero
  804f9c:	0803b200 	call	803b20 <__eqdf2>
  804fa0:	1000f21e 	bne	r2,zero,80536c <___vfprintf_internal_r+0xc9c>
  804fa4:	00802234 	movhi	r2,136
  804fa8:	109d6d04 	addi	r2,r2,30132
  804fac:	94800044 	addi	r18,r18,1
  804fb0:	8c400044 	addi	r17,r17,1
  804fb4:	a8800015 	stw	r2,0(r21)
  804fb8:	00c00044 	movi	r3,1
  804fbc:	008001c4 	movi	r2,7
  804fc0:	a8c00115 	stw	r3,4(r21)
  804fc4:	dc800e15 	stw	r18,56(sp)
  804fc8:	dc400d15 	stw	r17,52(sp)
  804fcc:	1442fa16 	blt	r2,r17,805bb8 <___vfprintf_internal_r+0x14e8>
  804fd0:	a8c00204 	addi	r3,r21,8
  804fd4:	d8800517 	ldw	r2,20(sp)
  804fd8:	d9014717 	ldw	r4,1308(sp)
  804fdc:	11015c0e 	bge	r2,r4,805550 <___vfprintf_internal_r+0xe80>
  804fe0:	dc400d17 	ldw	r17,52(sp)
  804fe4:	d9814917 	ldw	r6,1316(sp)
  804fe8:	00800044 	movi	r2,1
  804fec:	94800044 	addi	r18,r18,1
  804ff0:	8c400044 	addi	r17,r17,1
  804ff4:	18800115 	stw	r2,4(r3)
  804ff8:	008001c4 	movi	r2,7
  804ffc:	19800015 	stw	r6,0(r3)
  805000:	dc800e15 	stw	r18,56(sp)
  805004:	dc400d15 	stw	r17,52(sp)
  805008:	14431016 	blt	r2,r17,805c4c <___vfprintf_internal_r+0x157c>
  80500c:	18c00204 	addi	r3,r3,8
  805010:	d8814717 	ldw	r2,1308(sp)
  805014:	143fffc4 	addi	r16,r2,-1
  805018:	043f2b0e 	bge	zero,r16,804cc8 <___vfprintf_internal_r+0x5f8>
  80501c:	00800404 	movi	r2,16
  805020:	1402a20e 	bge	r2,r16,805aac <___vfprintf_internal_r+0x13dc>
  805024:	dc400d17 	ldw	r17,52(sp)
  805028:	1027883a 	mov	r19,r2
  80502c:	07002234 	movhi	fp,136
  805030:	e71d6d84 	addi	fp,fp,30134
  805034:	050001c4 	movi	r20,7
  805038:	00000306 	br	805048 <___vfprintf_internal_r+0x978>
  80503c:	18c00204 	addi	r3,r3,8
  805040:	843ffc04 	addi	r16,r16,-16
  805044:	9c029c0e 	bge	r19,r16,805ab8 <___vfprintf_internal_r+0x13e8>
  805048:	94800404 	addi	r18,r18,16
  80504c:	8c400044 	addi	r17,r17,1
  805050:	1f000015 	stw	fp,0(r3)
  805054:	1cc00115 	stw	r19,4(r3)
  805058:	dc800e15 	stw	r18,56(sp)
  80505c:	dc400d15 	stw	r17,52(sp)
  805060:	a47ff60e 	bge	r20,r17,80503c <___vfprintf_internal_r+0x96c>
  805064:	d9014f17 	ldw	r4,1340(sp)
  805068:	b00b883a 	mov	r5,r22
  80506c:	d9800c04 	addi	r6,sp,48
  805070:	08046780 	call	804678 <__sprint_r>
  805074:	103f4e1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805078:	dc800e17 	ldw	r18,56(sp)
  80507c:	dc400d17 	ldw	r17,52(sp)
  805080:	d8c01904 	addi	r3,sp,100
  805084:	003fee06 	br	805040 <___vfprintf_internal_r+0x970>
  805088:	d8802c0b 	ldhu	r2,176(sp)
  80508c:	00ffffc4 	movi	r3,-1
  805090:	d8c14b15 	stw	r3,1324(sp)
  805094:	1080100c 	andi	r2,r2,64
  805098:	103dcc1e 	bne	r2,zero,8047cc <___vfprintf_internal_r+0xfc>
  80509c:	003dce06 	br	8047d8 <___vfprintf_internal_r+0x108>
  8050a0:	d9014f17 	ldw	r4,1340(sp)
  8050a4:	b00b883a 	mov	r5,r22
  8050a8:	d9800c04 	addi	r6,sp,48
  8050ac:	08046780 	call	804678 <__sprint_r>
  8050b0:	103f3f1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8050b4:	dc800e17 	ldw	r18,56(sp)
  8050b8:	003f2e06 	br	804d74 <___vfprintf_internal_r+0x6a4>
  8050bc:	d9414c17 	ldw	r5,1328(sp)
  8050c0:	29400414 	ori	r5,r5,16
  8050c4:	d9414c15 	stw	r5,1328(sp)
  8050c8:	d9814c17 	ldw	r6,1328(sp)
  8050cc:	3080080c 	andi	r2,r6,32
  8050d0:	10014f1e 	bne	r2,zero,805610 <___vfprintf_internal_r+0xf40>
  8050d4:	d8c14c17 	ldw	r3,1328(sp)
  8050d8:	1880040c 	andi	r2,r3,16
  8050dc:	1002ea1e 	bne	r2,zero,805c88 <___vfprintf_internal_r+0x15b8>
  8050e0:	d9014c17 	ldw	r4,1328(sp)
  8050e4:	2080100c 	andi	r2,r4,64
  8050e8:	1002e726 	beq	r2,zero,805c88 <___vfprintf_internal_r+0x15b8>
  8050ec:	3880000f 	ldh	r2,0(r7)
  8050f0:	39c00104 	addi	r7,r7,4
  8050f4:	d9c14015 	stw	r7,1280(sp)
  8050f8:	1023d7fa 	srai	r17,r2,31
  8050fc:	1021883a 	mov	r16,r2
  805100:	88037216 	blt	r17,zero,805ecc <___vfprintf_internal_r+0x17fc>
  805104:	01000044 	movi	r4,1
  805108:	98000416 	blt	r19,zero,80511c <___vfprintf_internal_r+0xa4c>
  80510c:	d8c14c17 	ldw	r3,1328(sp)
  805110:	00bfdfc4 	movi	r2,-129
  805114:	1886703a 	and	r3,r3,r2
  805118:	d8c14c15 	stw	r3,1328(sp)
  80511c:	8444b03a 	or	r2,r16,r17
  805120:	1002261e 	bne	r2,zero,8059bc <___vfprintf_internal_r+0x12ec>
  805124:	9802251e 	bne	r19,zero,8059bc <___vfprintf_internal_r+0x12ec>
  805128:	20803fcc 	andi	r2,r4,255
  80512c:	10029b26 	beq	r2,zero,805b9c <___vfprintf_internal_r+0x14cc>
  805130:	d8c01904 	addi	r3,sp,100
  805134:	dd000f04 	addi	r20,sp,60
  805138:	d8c14115 	stw	r3,1284(sp)
  80513c:	d8c14117 	ldw	r3,1284(sp)
  805140:	dcc14515 	stw	r19,1300(sp)
  805144:	a0c5c83a 	sub	r2,r20,r3
  805148:	11c00a04 	addi	r7,r2,40
  80514c:	99c0010e 	bge	r19,r7,805154 <___vfprintf_internal_r+0xa84>
  805150:	d9c14515 	stw	r7,1300(sp)
  805154:	dcc14615 	stw	r19,1304(sp)
  805158:	d8800407 	ldb	r2,16(sp)
  80515c:	103e4c26 	beq	r2,zero,804a90 <___vfprintf_internal_r+0x3c0>
  805160:	d8814517 	ldw	r2,1300(sp)
  805164:	10800044 	addi	r2,r2,1
  805168:	d8814515 	stw	r2,1300(sp)
  80516c:	003e4806 	br	804a90 <___vfprintf_internal_r+0x3c0>
  805170:	d9814c17 	ldw	r6,1328(sp)
  805174:	31800414 	ori	r6,r6,16
  805178:	d9814c15 	stw	r6,1328(sp)
  80517c:	d8c14c17 	ldw	r3,1328(sp)
  805180:	1880080c 	andi	r2,r3,32
  805184:	1001271e 	bne	r2,zero,805624 <___vfprintf_internal_r+0xf54>
  805188:	d9414c17 	ldw	r5,1328(sp)
  80518c:	2880040c 	andi	r2,r5,16
  805190:	1002b61e 	bne	r2,zero,805c6c <___vfprintf_internal_r+0x159c>
  805194:	d9814c17 	ldw	r6,1328(sp)
  805198:	3080100c 	andi	r2,r6,64
  80519c:	1002b326 	beq	r2,zero,805c6c <___vfprintf_internal_r+0x159c>
  8051a0:	3c00000b 	ldhu	r16,0(r7)
  8051a4:	0009883a 	mov	r4,zero
  8051a8:	39c00104 	addi	r7,r7,4
  8051ac:	0023883a 	mov	r17,zero
  8051b0:	d9c14015 	stw	r7,1280(sp)
  8051b4:	d8000405 	stb	zero,16(sp)
  8051b8:	003fd306 	br	805108 <___vfprintf_internal_r+0xa38>
  8051bc:	d9014c17 	ldw	r4,1328(sp)
  8051c0:	21000414 	ori	r4,r4,16
  8051c4:	d9014c15 	stw	r4,1328(sp)
  8051c8:	d9414c17 	ldw	r5,1328(sp)
  8051cc:	2880080c 	andi	r2,r5,32
  8051d0:	1001081e 	bne	r2,zero,8055f4 <___vfprintf_internal_r+0xf24>
  8051d4:	d8c14c17 	ldw	r3,1328(sp)
  8051d8:	1880040c 	andi	r2,r3,16
  8051dc:	1002b01e 	bne	r2,zero,805ca0 <___vfprintf_internal_r+0x15d0>
  8051e0:	d9014c17 	ldw	r4,1328(sp)
  8051e4:	2080100c 	andi	r2,r4,64
  8051e8:	1002ad26 	beq	r2,zero,805ca0 <___vfprintf_internal_r+0x15d0>
  8051ec:	3c00000b 	ldhu	r16,0(r7)
  8051f0:	01000044 	movi	r4,1
  8051f4:	39c00104 	addi	r7,r7,4
  8051f8:	0023883a 	mov	r17,zero
  8051fc:	d9c14015 	stw	r7,1280(sp)
  805200:	d8000405 	stb	zero,16(sp)
  805204:	003fc006 	br	805108 <___vfprintf_internal_r+0xa38>
  805208:	d9014f17 	ldw	r4,1340(sp)
  80520c:	b00b883a 	mov	r5,r22
  805210:	d9800c04 	addi	r6,sp,48
  805214:	08046780 	call	804678 <__sprint_r>
  805218:	103ee51e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  80521c:	dc800e17 	ldw	r18,56(sp)
  805220:	d8c01904 	addi	r3,sp,100
  805224:	d9814c17 	ldw	r6,1328(sp)
  805228:	3080004c 	andi	r2,r6,1
  80522c:	1005003a 	cmpeq	r2,r2,zero
  805230:	103ea51e 	bne	r2,zero,804cc8 <___vfprintf_internal_r+0x5f8>
  805234:	00800044 	movi	r2,1
  805238:	dc400d17 	ldw	r17,52(sp)
  80523c:	18800115 	stw	r2,4(r3)
  805240:	d8814917 	ldw	r2,1316(sp)
  805244:	94800044 	addi	r18,r18,1
  805248:	8c400044 	addi	r17,r17,1
  80524c:	18800015 	stw	r2,0(r3)
  805250:	008001c4 	movi	r2,7
  805254:	dc800e15 	stw	r18,56(sp)
  805258:	dc400d15 	stw	r17,52(sp)
  80525c:	14421e0e 	bge	r2,r17,805ad8 <___vfprintf_internal_r+0x1408>
  805260:	d9014f17 	ldw	r4,1340(sp)
  805264:	b00b883a 	mov	r5,r22
  805268:	d9800c04 	addi	r6,sp,48
  80526c:	08046780 	call	804678 <__sprint_r>
  805270:	103ecf1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805274:	dc800e17 	ldw	r18,56(sp)
  805278:	d8c01904 	addi	r3,sp,100
  80527c:	003e9206 	br	804cc8 <___vfprintf_internal_r+0x5f8>
  805280:	d9014f17 	ldw	r4,1340(sp)
  805284:	b00b883a 	mov	r5,r22
  805288:	d9800c04 	addi	r6,sp,48
  80528c:	08046780 	call	804678 <__sprint_r>
  805290:	103ec026 	beq	r2,zero,804d94 <___vfprintf_internal_r+0x6c4>
  805294:	003ec606 	br	804db0 <___vfprintf_internal_r+0x6e0>
  805298:	d9014f17 	ldw	r4,1340(sp)
  80529c:	b00b883a 	mov	r5,r22
  8052a0:	d9800c04 	addi	r6,sp,48
  8052a4:	d9c15115 	stw	r7,1348(sp)
  8052a8:	08046780 	call	804678 <__sprint_r>
  8052ac:	d9c15117 	ldw	r7,1348(sp)
  8052b0:	103ebf1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8052b4:	dc800e17 	ldw	r18,56(sp)
  8052b8:	dc400d17 	ldw	r17,52(sp)
  8052bc:	dd401904 	addi	r21,sp,100
  8052c0:	003e7406 	br	804c94 <___vfprintf_internal_r+0x5c4>
  8052c4:	d9014f17 	ldw	r4,1340(sp)
  8052c8:	b00b883a 	mov	r5,r22
  8052cc:	d9800c04 	addi	r6,sp,48
  8052d0:	d9c15115 	stw	r7,1348(sp)
  8052d4:	08046780 	call	804678 <__sprint_r>
  8052d8:	d9c15117 	ldw	r7,1348(sp)
  8052dc:	103eb41e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8052e0:	dd401904 	addi	r21,sp,100
  8052e4:	003d6d06 	br	80489c <___vfprintf_internal_r+0x1cc>
  8052e8:	d9014f17 	ldw	r4,1340(sp)
  8052ec:	b00b883a 	mov	r5,r22
  8052f0:	d9800c04 	addi	r6,sp,48
  8052f4:	d9c15115 	stw	r7,1348(sp)
  8052f8:	08046780 	call	804678 <__sprint_r>
  8052fc:	d9c15117 	ldw	r7,1348(sp)
  805300:	103eab1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805304:	dc800e17 	ldw	r18,56(sp)
  805308:	dc400d17 	ldw	r17,52(sp)
  80530c:	dd401904 	addi	r21,sp,100
  805310:	003e3406 	br	804be4 <___vfprintf_internal_r+0x514>
  805314:	d9014f17 	ldw	r4,1340(sp)
  805318:	b00b883a 	mov	r5,r22
  80531c:	d9800c04 	addi	r6,sp,48
  805320:	d9c15115 	stw	r7,1348(sp)
  805324:	08046780 	call	804678 <__sprint_r>
  805328:	d9c15117 	ldw	r7,1348(sp)
  80532c:	103ea01e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805330:	dc800e17 	ldw	r18,56(sp)
  805334:	dc400d17 	ldw	r17,52(sp)
  805338:	dd401904 	addi	r21,sp,100
  80533c:	003e1c06 	br	804bb0 <___vfprintf_internal_r+0x4e0>
  805340:	d9014f17 	ldw	r4,1340(sp)
  805344:	b00b883a 	mov	r5,r22
  805348:	d9800c04 	addi	r6,sp,48
  80534c:	d9c15115 	stw	r7,1348(sp)
  805350:	08046780 	call	804678 <__sprint_r>
  805354:	d9c15117 	ldw	r7,1348(sp)
  805358:	103e951e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  80535c:	dc800e17 	ldw	r18,56(sp)
  805360:	dc400d17 	ldw	r17,52(sp)
  805364:	dd401904 	addi	r21,sp,100
  805368:	003e0406 	br	804b7c <___vfprintf_internal_r+0x4ac>
  80536c:	d9000517 	ldw	r4,20(sp)
  805370:	0102520e 	bge	zero,r4,805cbc <___vfprintf_internal_r+0x15ec>
  805374:	d9814717 	ldw	r6,1308(sp)
  805378:	21807a16 	blt	r4,r6,805564 <___vfprintf_internal_r+0xe94>
  80537c:	d8814117 	ldw	r2,1284(sp)
  805380:	91a5883a 	add	r18,r18,r6
  805384:	8c400044 	addi	r17,r17,1
  805388:	a8800015 	stw	r2,0(r21)
  80538c:	008001c4 	movi	r2,7
  805390:	a9800115 	stw	r6,4(r21)
  805394:	dc800e15 	stw	r18,56(sp)
  805398:	dc400d15 	stw	r17,52(sp)
  80539c:	1442f616 	blt	r2,r17,805f78 <___vfprintf_internal_r+0x18a8>
  8053a0:	a8c00204 	addi	r3,r21,8
  8053a4:	d9414717 	ldw	r5,1308(sp)
  8053a8:	2161c83a 	sub	r16,r4,r5
  8053ac:	043f9d0e 	bge	zero,r16,805224 <___vfprintf_internal_r+0xb54>
  8053b0:	00800404 	movi	r2,16
  8053b4:	1402130e 	bge	r2,r16,805c04 <___vfprintf_internal_r+0x1534>
  8053b8:	dc400d17 	ldw	r17,52(sp)
  8053bc:	1027883a 	mov	r19,r2
  8053c0:	07002234 	movhi	fp,136
  8053c4:	e71d6d84 	addi	fp,fp,30134
  8053c8:	050001c4 	movi	r20,7
  8053cc:	00000306 	br	8053dc <___vfprintf_internal_r+0xd0c>
  8053d0:	18c00204 	addi	r3,r3,8
  8053d4:	843ffc04 	addi	r16,r16,-16
  8053d8:	9c020d0e 	bge	r19,r16,805c10 <___vfprintf_internal_r+0x1540>
  8053dc:	94800404 	addi	r18,r18,16
  8053e0:	8c400044 	addi	r17,r17,1
  8053e4:	1f000015 	stw	fp,0(r3)
  8053e8:	1cc00115 	stw	r19,4(r3)
  8053ec:	dc800e15 	stw	r18,56(sp)
  8053f0:	dc400d15 	stw	r17,52(sp)
  8053f4:	a47ff60e 	bge	r20,r17,8053d0 <___vfprintf_internal_r+0xd00>
  8053f8:	d9014f17 	ldw	r4,1340(sp)
  8053fc:	b00b883a 	mov	r5,r22
  805400:	d9800c04 	addi	r6,sp,48
  805404:	08046780 	call	804678 <__sprint_r>
  805408:	103e691e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  80540c:	dc800e17 	ldw	r18,56(sp)
  805410:	dc400d17 	ldw	r17,52(sp)
  805414:	d8c01904 	addi	r3,sp,100
  805418:	003fee06 	br	8053d4 <___vfprintf_internal_r+0xd04>
  80541c:	d8814717 	ldw	r2,1308(sp)
  805420:	143fffc4 	addi	r16,r2,-1
  805424:	043e970e 	bge	zero,r16,804e84 <___vfprintf_internal_r+0x7b4>
  805428:	00800404 	movi	r2,16
  80542c:	1400180e 	bge	r2,r16,805490 <___vfprintf_internal_r+0xdc0>
  805430:	1029883a 	mov	r20,r2
  805434:	07002234 	movhi	fp,136
  805438:	e71d6d84 	addi	fp,fp,30134
  80543c:	054001c4 	movi	r21,7
  805440:	00000306 	br	805450 <___vfprintf_internal_r+0xd80>
  805444:	9cc00204 	addi	r19,r19,8
  805448:	843ffc04 	addi	r16,r16,-16
  80544c:	a400120e 	bge	r20,r16,805498 <___vfprintf_internal_r+0xdc8>
  805450:	94800404 	addi	r18,r18,16
  805454:	8c400044 	addi	r17,r17,1
  805458:	9f000015 	stw	fp,0(r19)
  80545c:	9d000115 	stw	r20,4(r19)
  805460:	dc800e15 	stw	r18,56(sp)
  805464:	dc400d15 	stw	r17,52(sp)
  805468:	ac7ff60e 	bge	r21,r17,805444 <___vfprintf_internal_r+0xd74>
  80546c:	d9014f17 	ldw	r4,1340(sp)
  805470:	b00b883a 	mov	r5,r22
  805474:	d9800c04 	addi	r6,sp,48
  805478:	08046780 	call	804678 <__sprint_r>
  80547c:	103e4c1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805480:	dc800e17 	ldw	r18,56(sp)
  805484:	dc400d17 	ldw	r17,52(sp)
  805488:	dcc01904 	addi	r19,sp,100
  80548c:	003fee06 	br	805448 <___vfprintf_internal_r+0xd78>
  805490:	07002234 	movhi	fp,136
  805494:	e71d6d84 	addi	fp,fp,30134
  805498:	9425883a 	add	r18,r18,r16
  80549c:	8c400044 	addi	r17,r17,1
  8054a0:	008001c4 	movi	r2,7
  8054a4:	9f000015 	stw	fp,0(r19)
  8054a8:	9c000115 	stw	r16,4(r19)
  8054ac:	dc800e15 	stw	r18,56(sp)
  8054b0:	dc400d15 	stw	r17,52(sp)
  8054b4:	147e720e 	bge	r2,r17,804e80 <___vfprintf_internal_r+0x7b0>
  8054b8:	d9014f17 	ldw	r4,1340(sp)
  8054bc:	b00b883a 	mov	r5,r22
  8054c0:	d9800c04 	addi	r6,sp,48
  8054c4:	08046780 	call	804678 <__sprint_r>
  8054c8:	103e391e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8054cc:	dc800e17 	ldw	r18,56(sp)
  8054d0:	dc400d17 	ldw	r17,52(sp)
  8054d4:	dcc01904 	addi	r19,sp,100
  8054d8:	003e6a06 	br	804e84 <___vfprintf_internal_r+0x7b4>
  8054dc:	d9014f17 	ldw	r4,1340(sp)
  8054e0:	b00b883a 	mov	r5,r22
  8054e4:	d9800c04 	addi	r6,sp,48
  8054e8:	d9c15115 	stw	r7,1348(sp)
  8054ec:	08046780 	call	804678 <__sprint_r>
  8054f0:	d9c15117 	ldw	r7,1348(sp)
  8054f4:	103e2e1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8054f8:	dc800e17 	ldw	r18,56(sp)
  8054fc:	dc400d17 	ldw	r17,52(sp)
  805500:	dd401904 	addi	r21,sp,100
  805504:	003dba06 	br	804bf0 <___vfprintf_internal_r+0x520>
  805508:	d9014f17 	ldw	r4,1340(sp)
  80550c:	b00b883a 	mov	r5,r22
  805510:	d9800c04 	addi	r6,sp,48
  805514:	08046780 	call	804678 <__sprint_r>
  805518:	103e251e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  80551c:	dc800e17 	ldw	r18,56(sp)
  805520:	dc400d17 	ldw	r17,52(sp)
  805524:	dcc01904 	addi	r19,sp,100
  805528:	003e4206 	br	804e34 <___vfprintf_internal_r+0x764>
  80552c:	d9014f17 	ldw	r4,1340(sp)
  805530:	b00b883a 	mov	r5,r22
  805534:	d9800c04 	addi	r6,sp,48
  805538:	08046780 	call	804678 <__sprint_r>
  80553c:	103e1c1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805540:	dc800e17 	ldw	r18,56(sp)
  805544:	dc400d17 	ldw	r17,52(sp)
  805548:	d8c01904 	addi	r3,sp,100
  80554c:	003e2e06 	br	804e08 <___vfprintf_internal_r+0x738>
  805550:	d9414c17 	ldw	r5,1328(sp)
  805554:	2880004c 	andi	r2,r5,1
  805558:	1005003a 	cmpeq	r2,r2,zero
  80555c:	103dda1e 	bne	r2,zero,804cc8 <___vfprintf_internal_r+0x5f8>
  805560:	003e9f06 	br	804fe0 <___vfprintf_internal_r+0x910>
  805564:	d8c14117 	ldw	r3,1284(sp)
  805568:	9125883a 	add	r18,r18,r4
  80556c:	8c400044 	addi	r17,r17,1
  805570:	008001c4 	movi	r2,7
  805574:	a8c00015 	stw	r3,0(r21)
  805578:	a9000115 	stw	r4,4(r21)
  80557c:	dc800e15 	stw	r18,56(sp)
  805580:	dc400d15 	stw	r17,52(sp)
  805584:	14426616 	blt	r2,r17,805f20 <___vfprintf_internal_r+0x1850>
  805588:	a8c00204 	addi	r3,r21,8
  80558c:	d9414917 	ldw	r5,1316(sp)
  805590:	00800044 	movi	r2,1
  805594:	94800044 	addi	r18,r18,1
  805598:	8c400044 	addi	r17,r17,1
  80559c:	18800115 	stw	r2,4(r3)
  8055a0:	008001c4 	movi	r2,7
  8055a4:	19400015 	stw	r5,0(r3)
  8055a8:	dc800e15 	stw	r18,56(sp)
  8055ac:	dc400d15 	stw	r17,52(sp)
  8055b0:	2021883a 	mov	r16,r4
  8055b4:	14425016 	blt	r2,r17,805ef8 <___vfprintf_internal_r+0x1828>
  8055b8:	19400204 	addi	r5,r3,8
  8055bc:	d9814717 	ldw	r6,1308(sp)
  8055c0:	8c400044 	addi	r17,r17,1
  8055c4:	dc400d15 	stw	r17,52(sp)
  8055c8:	3107c83a 	sub	r3,r6,r4
  8055cc:	d9014117 	ldw	r4,1284(sp)
  8055d0:	90e5883a 	add	r18,r18,r3
  8055d4:	28c00115 	stw	r3,4(r5)
  8055d8:	8105883a 	add	r2,r16,r4
  8055dc:	28800015 	stw	r2,0(r5)
  8055e0:	008001c4 	movi	r2,7
  8055e4:	dc800e15 	stw	r18,56(sp)
  8055e8:	147f1d16 	blt	r2,r17,805260 <___vfprintf_internal_r+0xb90>
  8055ec:	28c00204 	addi	r3,r5,8
  8055f0:	003db506 	br	804cc8 <___vfprintf_internal_r+0x5f8>
  8055f4:	3c000017 	ldw	r16,0(r7)
  8055f8:	3c400117 	ldw	r17,4(r7)
  8055fc:	39800204 	addi	r6,r7,8
  805600:	01000044 	movi	r4,1
  805604:	d9814015 	stw	r6,1280(sp)
  805608:	d8000405 	stb	zero,16(sp)
  80560c:	003ebe06 	br	805108 <___vfprintf_internal_r+0xa38>
  805610:	3c000017 	ldw	r16,0(r7)
  805614:	3c400117 	ldw	r17,4(r7)
  805618:	38800204 	addi	r2,r7,8
  80561c:	d8814015 	stw	r2,1280(sp)
  805620:	003eb706 	br	805100 <___vfprintf_internal_r+0xa30>
  805624:	3c000017 	ldw	r16,0(r7)
  805628:	3c400117 	ldw	r17,4(r7)
  80562c:	39000204 	addi	r4,r7,8
  805630:	d9014015 	stw	r4,1280(sp)
  805634:	0009883a 	mov	r4,zero
  805638:	d8000405 	stb	zero,16(sp)
  80563c:	003eb206 	br	805108 <___vfprintf_internal_r+0xa38>
  805640:	38c00017 	ldw	r3,0(r7)
  805644:	39c00104 	addi	r7,r7,4
  805648:	d8c14a15 	stw	r3,1320(sp)
  80564c:	1800d10e 	bge	r3,zero,805994 <___vfprintf_internal_r+0x12c4>
  805650:	00c7c83a 	sub	r3,zero,r3
  805654:	d8c14a15 	stw	r3,1320(sp)
  805658:	d9014c17 	ldw	r4,1328(sp)
  80565c:	b8c00007 	ldb	r3,0(r23)
  805660:	21000114 	ori	r4,r4,4
  805664:	d9014c15 	stw	r4,1328(sp)
  805668:	003c9806 	br	8048cc <___vfprintf_internal_r+0x1fc>
  80566c:	d9814c17 	ldw	r6,1328(sp)
  805670:	3080080c 	andi	r2,r6,32
  805674:	1001f026 	beq	r2,zero,805e38 <___vfprintf_internal_r+0x1768>
  805678:	d9014b17 	ldw	r4,1324(sp)
  80567c:	38800017 	ldw	r2,0(r7)
  805680:	39c00104 	addi	r7,r7,4
  805684:	d9c14015 	stw	r7,1280(sp)
  805688:	2007d7fa 	srai	r3,r4,31
  80568c:	d9c14017 	ldw	r7,1280(sp)
  805690:	11000015 	stw	r4,0(r2)
  805694:	10c00115 	stw	r3,4(r2)
  805698:	003c6906 	br	804840 <___vfprintf_internal_r+0x170>
  80569c:	b8c00007 	ldb	r3,0(r23)
  8056a0:	00801b04 	movi	r2,108
  8056a4:	18824f26 	beq	r3,r2,805fe4 <___vfprintf_internal_r+0x1914>
  8056a8:	d9414c17 	ldw	r5,1328(sp)
  8056ac:	29400414 	ori	r5,r5,16
  8056b0:	d9414c15 	stw	r5,1328(sp)
  8056b4:	003c8506 	br	8048cc <___vfprintf_internal_r+0x1fc>
  8056b8:	d9814c17 	ldw	r6,1328(sp)
  8056bc:	b8c00007 	ldb	r3,0(r23)
  8056c0:	31800814 	ori	r6,r6,32
  8056c4:	d9814c15 	stw	r6,1328(sp)
  8056c8:	003c8006 	br	8048cc <___vfprintf_internal_r+0x1fc>
  8056cc:	d8814c17 	ldw	r2,1328(sp)
  8056d0:	3c000017 	ldw	r16,0(r7)
  8056d4:	00c01e04 	movi	r3,120
  8056d8:	10800094 	ori	r2,r2,2
  8056dc:	d8814c15 	stw	r2,1328(sp)
  8056e0:	39c00104 	addi	r7,r7,4
  8056e4:	01402234 	movhi	r5,136
  8056e8:	295d5604 	addi	r5,r5,30040
  8056ec:	00800c04 	movi	r2,48
  8056f0:	0023883a 	mov	r17,zero
  8056f4:	01000084 	movi	r4,2
  8056f8:	d9c14015 	stw	r7,1280(sp)
  8056fc:	d8c14d15 	stw	r3,1332(sp)
  805700:	d9414415 	stw	r5,1296(sp)
  805704:	d8800445 	stb	r2,17(sp)
  805708:	d8c00485 	stb	r3,18(sp)
  80570c:	d8000405 	stb	zero,16(sp)
  805710:	003e7d06 	br	805108 <___vfprintf_internal_r+0xa38>
  805714:	d8814c17 	ldw	r2,1328(sp)
  805718:	b8c00007 	ldb	r3,0(r23)
  80571c:	10801014 	ori	r2,r2,64
  805720:	d8814c15 	stw	r2,1328(sp)
  805724:	003c6906 	br	8048cc <___vfprintf_internal_r+0x1fc>
  805728:	d9414c17 	ldw	r5,1328(sp)
  80572c:	2880020c 	andi	r2,r5,8
  805730:	1001df26 	beq	r2,zero,805eb0 <___vfprintf_internal_r+0x17e0>
  805734:	39800017 	ldw	r6,0(r7)
  805738:	38800204 	addi	r2,r7,8
  80573c:	d8814015 	stw	r2,1280(sp)
  805740:	d9814215 	stw	r6,1288(sp)
  805744:	39c00117 	ldw	r7,4(r7)
  805748:	d9c14315 	stw	r7,1292(sp)
  80574c:	d9014217 	ldw	r4,1288(sp)
  805750:	d9414317 	ldw	r5,1292(sp)
  805754:	080b0700 	call	80b070 <__isinfd>
  805758:	10021726 	beq	r2,zero,805fb8 <___vfprintf_internal_r+0x18e8>
  80575c:	d9014217 	ldw	r4,1288(sp)
  805760:	d9414317 	ldw	r5,1292(sp)
  805764:	000d883a 	mov	r6,zero
  805768:	000f883a 	mov	r7,zero
  80576c:	080c6cc0 	call	80c6cc <__ltdf2>
  805770:	1002ca16 	blt	r2,zero,80629c <___vfprintf_internal_r+0x1bcc>
  805774:	d9414d17 	ldw	r5,1332(sp)
  805778:	008011c4 	movi	r2,71
  80577c:	11420a16 	blt	r2,r5,805fa8 <___vfprintf_internal_r+0x18d8>
  805780:	01802234 	movhi	r6,136
  805784:	319d5b04 	addi	r6,r6,30060
  805788:	d9814115 	stw	r6,1284(sp)
  80578c:	d9014c17 	ldw	r4,1328(sp)
  805790:	00c000c4 	movi	r3,3
  805794:	00bfdfc4 	movi	r2,-129
  805798:	2088703a 	and	r4,r4,r2
  80579c:	180f883a 	mov	r7,r3
  8057a0:	d8c14515 	stw	r3,1300(sp)
  8057a4:	d9014c15 	stw	r4,1328(sp)
  8057a8:	d8014615 	stw	zero,1304(sp)
  8057ac:	003e6a06 	br	805158 <___vfprintf_internal_r+0xa88>
  8057b0:	38800017 	ldw	r2,0(r7)
  8057b4:	00c00044 	movi	r3,1
  8057b8:	39c00104 	addi	r7,r7,4
  8057bc:	d9c14015 	stw	r7,1280(sp)
  8057c0:	d9000f04 	addi	r4,sp,60
  8057c4:	180f883a 	mov	r7,r3
  8057c8:	d8c14515 	stw	r3,1300(sp)
  8057cc:	d9014115 	stw	r4,1284(sp)
  8057d0:	d8800f05 	stb	r2,60(sp)
  8057d4:	d8000405 	stb	zero,16(sp)
  8057d8:	003cac06 	br	804a8c <___vfprintf_internal_r+0x3bc>
  8057dc:	01402234 	movhi	r5,136
  8057e0:	295d6104 	addi	r5,r5,30084
  8057e4:	d9414415 	stw	r5,1296(sp)
  8057e8:	d9814c17 	ldw	r6,1328(sp)
  8057ec:	3080080c 	andi	r2,r6,32
  8057f0:	1000f926 	beq	r2,zero,805bd8 <___vfprintf_internal_r+0x1508>
  8057f4:	3c000017 	ldw	r16,0(r7)
  8057f8:	3c400117 	ldw	r17,4(r7)
  8057fc:	38800204 	addi	r2,r7,8
  805800:	d8814015 	stw	r2,1280(sp)
  805804:	d9414c17 	ldw	r5,1328(sp)
  805808:	2880004c 	andi	r2,r5,1
  80580c:	1005003a 	cmpeq	r2,r2,zero
  805810:	1000b31e 	bne	r2,zero,805ae0 <___vfprintf_internal_r+0x1410>
  805814:	8444b03a 	or	r2,r16,r17
  805818:	1000b126 	beq	r2,zero,805ae0 <___vfprintf_internal_r+0x1410>
  80581c:	d9814d17 	ldw	r6,1332(sp)
  805820:	29400094 	ori	r5,r5,2
  805824:	00800c04 	movi	r2,48
  805828:	01000084 	movi	r4,2
  80582c:	d9414c15 	stw	r5,1328(sp)
  805830:	d8800445 	stb	r2,17(sp)
  805834:	d9800485 	stb	r6,18(sp)
  805838:	d8000405 	stb	zero,16(sp)
  80583c:	003e3206 	br	805108 <___vfprintf_internal_r+0xa38>
  805840:	01802234 	movhi	r6,136
  805844:	319d5604 	addi	r6,r6,30040
  805848:	d9814415 	stw	r6,1296(sp)
  80584c:	003fe606 	br	8057e8 <___vfprintf_internal_r+0x1118>
  805850:	00800ac4 	movi	r2,43
  805854:	d8800405 	stb	r2,16(sp)
  805858:	b8c00007 	ldb	r3,0(r23)
  80585c:	003c1b06 	br	8048cc <___vfprintf_internal_r+0x1fc>
  805860:	d8814c17 	ldw	r2,1328(sp)
  805864:	b8c00007 	ldb	r3,0(r23)
  805868:	10800054 	ori	r2,r2,1
  80586c:	d8814c15 	stw	r2,1328(sp)
  805870:	003c1606 	br	8048cc <___vfprintf_internal_r+0x1fc>
  805874:	d8800407 	ldb	r2,16(sp)
  805878:	1000461e 	bne	r2,zero,805994 <___vfprintf_internal_r+0x12c4>
  80587c:	00800804 	movi	r2,32
  805880:	d8800405 	stb	r2,16(sp)
  805884:	b8c00007 	ldb	r3,0(r23)
  805888:	003c1006 	br	8048cc <___vfprintf_internal_r+0x1fc>
  80588c:	d9814c17 	ldw	r6,1328(sp)
  805890:	b8c00007 	ldb	r3,0(r23)
  805894:	31800214 	ori	r6,r6,8
  805898:	d9814c15 	stw	r6,1328(sp)
  80589c:	003c0b06 	br	8048cc <___vfprintf_internal_r+0x1fc>
  8058a0:	0007883a 	mov	r3,zero
  8058a4:	01000244 	movi	r4,9
  8058a8:	188002a4 	muli	r2,r3,10
  8058ac:	b8c00007 	ldb	r3,0(r23)
  8058b0:	d9814d17 	ldw	r6,1332(sp)
  8058b4:	bdc00044 	addi	r23,r23,1
  8058b8:	d8c14d15 	stw	r3,1332(sp)
  8058bc:	d9414d17 	ldw	r5,1332(sp)
  8058c0:	3085883a 	add	r2,r6,r2
  8058c4:	10fff404 	addi	r3,r2,-48
  8058c8:	28bff404 	addi	r2,r5,-48
  8058cc:	20bff62e 	bgeu	r4,r2,8058a8 <___vfprintf_internal_r+0x11d8>
  8058d0:	d8c14a15 	stw	r3,1320(sp)
  8058d4:	003bff06 	br	8048d4 <___vfprintf_internal_r+0x204>
  8058d8:	d9414c17 	ldw	r5,1328(sp)
  8058dc:	b8c00007 	ldb	r3,0(r23)
  8058e0:	29402014 	ori	r5,r5,128
  8058e4:	d9414c15 	stw	r5,1328(sp)
  8058e8:	003bf806 	br	8048cc <___vfprintf_internal_r+0x1fc>
  8058ec:	b8c00007 	ldb	r3,0(r23)
  8058f0:	00800a84 	movi	r2,42
  8058f4:	bdc00044 	addi	r23,r23,1
  8058f8:	18831526 	beq	r3,r2,806550 <___vfprintf_internal_r+0x1e80>
  8058fc:	d8c14d15 	stw	r3,1332(sp)
  805900:	18bff404 	addi	r2,r3,-48
  805904:	00c00244 	movi	r3,9
  805908:	18827836 	bltu	r3,r2,8062ec <___vfprintf_internal_r+0x1c1c>
  80590c:	000d883a 	mov	r6,zero
  805910:	308002a4 	muli	r2,r6,10
  805914:	b9800007 	ldb	r6,0(r23)
  805918:	d9414d17 	ldw	r5,1332(sp)
  80591c:	bdc00044 	addi	r23,r23,1
  805920:	d9814d15 	stw	r6,1332(sp)
  805924:	d9014d17 	ldw	r4,1332(sp)
  805928:	1145883a 	add	r2,r2,r5
  80592c:	11bff404 	addi	r6,r2,-48
  805930:	20bff404 	addi	r2,r4,-48
  805934:	18bff62e 	bgeu	r3,r2,805910 <___vfprintf_internal_r+0x1240>
  805938:	3027883a 	mov	r19,r6
  80593c:	303be50e 	bge	r6,zero,8048d4 <___vfprintf_internal_r+0x204>
  805940:	04ffffc4 	movi	r19,-1
  805944:	003be306 	br	8048d4 <___vfprintf_internal_r+0x204>
  805948:	d8000405 	stb	zero,16(sp)
  80594c:	39800017 	ldw	r6,0(r7)
  805950:	39c00104 	addi	r7,r7,4
  805954:	d9c14015 	stw	r7,1280(sp)
  805958:	d9814115 	stw	r6,1284(sp)
  80595c:	3001c926 	beq	r6,zero,806084 <___vfprintf_internal_r+0x19b4>
  805960:	98000e16 	blt	r19,zero,80599c <___vfprintf_internal_r+0x12cc>
  805964:	d9014117 	ldw	r4,1284(sp)
  805968:	000b883a 	mov	r5,zero
  80596c:	980d883a 	mov	r6,r19
  805970:	080978c0 	call	80978c <memchr>
  805974:	10025926 	beq	r2,zero,8062dc <___vfprintf_internal_r+0x1c0c>
  805978:	d8c14117 	ldw	r3,1284(sp)
  80597c:	10cfc83a 	sub	r7,r2,r3
  805980:	99c19e16 	blt	r19,r7,805ffc <___vfprintf_internal_r+0x192c>
  805984:	d9c14515 	stw	r7,1300(sp)
  805988:	38000916 	blt	r7,zero,8059b0 <___vfprintf_internal_r+0x12e0>
  80598c:	d8014615 	stw	zero,1304(sp)
  805990:	003df106 	br	805158 <___vfprintf_internal_r+0xa88>
  805994:	b8c00007 	ldb	r3,0(r23)
  805998:	003bcc06 	br	8048cc <___vfprintf_internal_r+0x1fc>
  80599c:	d9014117 	ldw	r4,1284(sp)
  8059a0:	080b3580 	call	80b358 <strlen>
  8059a4:	d8814515 	stw	r2,1300(sp)
  8059a8:	100f883a 	mov	r7,r2
  8059ac:	103ff70e 	bge	r2,zero,80598c <___vfprintf_internal_r+0x12bc>
  8059b0:	d8014515 	stw	zero,1300(sp)
  8059b4:	d8014615 	stw	zero,1304(sp)
  8059b8:	003de706 	br	805158 <___vfprintf_internal_r+0xa88>
  8059bc:	20c03fcc 	andi	r3,r4,255
  8059c0:	00800044 	movi	r2,1
  8059c4:	18802d26 	beq	r3,r2,805a7c <___vfprintf_internal_r+0x13ac>
  8059c8:	18800e36 	bltu	r3,r2,805a04 <___vfprintf_internal_r+0x1334>
  8059cc:	00800084 	movi	r2,2
  8059d0:	1880fa26 	beq	r3,r2,805dbc <___vfprintf_internal_r+0x16ec>
  8059d4:	01002234 	movhi	r4,136
  8059d8:	211d6604 	addi	r4,r4,30104
  8059dc:	080b3580 	call	80b358 <strlen>
  8059e0:	100f883a 	mov	r7,r2
  8059e4:	dcc14515 	stw	r19,1300(sp)
  8059e8:	9880010e 	bge	r19,r2,8059f0 <___vfprintf_internal_r+0x1320>
  8059ec:	d8814515 	stw	r2,1300(sp)
  8059f0:	00802234 	movhi	r2,136
  8059f4:	109d6604 	addi	r2,r2,30104
  8059f8:	dcc14615 	stw	r19,1304(sp)
  8059fc:	d8814115 	stw	r2,1284(sp)
  805a00:	003dd506 	br	805158 <___vfprintf_internal_r+0xa88>
  805a04:	d9401904 	addi	r5,sp,100
  805a08:	dd000f04 	addi	r20,sp,60
  805a0c:	d9414115 	stw	r5,1284(sp)
  805a10:	880a977a 	slli	r5,r17,29
  805a14:	d9814117 	ldw	r6,1284(sp)
  805a18:	8004d0fa 	srli	r2,r16,3
  805a1c:	8806d0fa 	srli	r3,r17,3
  805a20:	810001cc 	andi	r4,r16,7
  805a24:	2884b03a 	or	r2,r5,r2
  805a28:	31bfffc4 	addi	r6,r6,-1
  805a2c:	21000c04 	addi	r4,r4,48
  805a30:	d9814115 	stw	r6,1284(sp)
  805a34:	10cab03a 	or	r5,r2,r3
  805a38:	31000005 	stb	r4,0(r6)
  805a3c:	1021883a 	mov	r16,r2
  805a40:	1823883a 	mov	r17,r3
  805a44:	283ff21e 	bne	r5,zero,805a10 <___vfprintf_internal_r+0x1340>
  805a48:	d8c14c17 	ldw	r3,1328(sp)
  805a4c:	1880004c 	andi	r2,r3,1
  805a50:	1005003a 	cmpeq	r2,r2,zero
  805a54:	103db91e 	bne	r2,zero,80513c <___vfprintf_internal_r+0xa6c>
  805a58:	20803fcc 	andi	r2,r4,255
  805a5c:	1080201c 	xori	r2,r2,128
  805a60:	10bfe004 	addi	r2,r2,-128
  805a64:	00c00c04 	movi	r3,48
  805a68:	10fdb426 	beq	r2,r3,80513c <___vfprintf_internal_r+0xa6c>
  805a6c:	31bfffc4 	addi	r6,r6,-1
  805a70:	d9814115 	stw	r6,1284(sp)
  805a74:	30c00005 	stb	r3,0(r6)
  805a78:	003db006 	br	80513c <___vfprintf_internal_r+0xa6c>
  805a7c:	88800068 	cmpgeui	r2,r17,1
  805a80:	10002c1e 	bne	r2,zero,805b34 <___vfprintf_internal_r+0x1464>
  805a84:	8800021e 	bne	r17,zero,805a90 <___vfprintf_internal_r+0x13c0>
  805a88:	00800244 	movi	r2,9
  805a8c:	14002936 	bltu	r2,r16,805b34 <___vfprintf_internal_r+0x1464>
  805a90:	d90018c4 	addi	r4,sp,99
  805a94:	dd000f04 	addi	r20,sp,60
  805a98:	d9014115 	stw	r4,1284(sp)
  805a9c:	d9014117 	ldw	r4,1284(sp)
  805aa0:	80800c04 	addi	r2,r16,48
  805aa4:	20800005 	stb	r2,0(r4)
  805aa8:	003da406 	br	80513c <___vfprintf_internal_r+0xa6c>
  805aac:	dc400d17 	ldw	r17,52(sp)
  805ab0:	07002234 	movhi	fp,136
  805ab4:	e71d6d84 	addi	fp,fp,30134
  805ab8:	9425883a 	add	r18,r18,r16
  805abc:	8c400044 	addi	r17,r17,1
  805ac0:	008001c4 	movi	r2,7
  805ac4:	1f000015 	stw	fp,0(r3)
  805ac8:	1c000115 	stw	r16,4(r3)
  805acc:	dc800e15 	stw	r18,56(sp)
  805ad0:	dc400d15 	stw	r17,52(sp)
  805ad4:	147de216 	blt	r2,r17,805260 <___vfprintf_internal_r+0xb90>
  805ad8:	18c00204 	addi	r3,r3,8
  805adc:	003c7a06 	br	804cc8 <___vfprintf_internal_r+0x5f8>
  805ae0:	01000084 	movi	r4,2
  805ae4:	d8000405 	stb	zero,16(sp)
  805ae8:	003d8706 	br	805108 <___vfprintf_internal_r+0xa38>
  805aec:	d9814c17 	ldw	r6,1328(sp)
  805af0:	30c4703a 	and	r2,r6,r3
  805af4:	1005003a 	cmpeq	r2,r2,zero
  805af8:	103cb926 	beq	r2,zero,804de0 <___vfprintf_internal_r+0x710>
  805afc:	d9014117 	ldw	r4,1284(sp)
  805b00:	94800044 	addi	r18,r18,1
  805b04:	8c400044 	addi	r17,r17,1
  805b08:	008001c4 	movi	r2,7
  805b0c:	a9000015 	stw	r4,0(r21)
  805b10:	a8c00115 	stw	r3,4(r21)
  805b14:	dc800e15 	stw	r18,56(sp)
  805b18:	dc400d15 	stw	r17,52(sp)
  805b1c:	147e6616 	blt	r2,r17,8054b8 <___vfprintf_internal_r+0xde8>
  805b20:	acc00204 	addi	r19,r21,8
  805b24:	003cd706 	br	804e84 <___vfprintf_internal_r+0x7b4>
  805b28:	07002234 	movhi	fp,136
  805b2c:	e71d6d84 	addi	fp,fp,30134
  805b30:	003c4f06 	br	804c70 <___vfprintf_internal_r+0x5a0>
  805b34:	dd000f04 	addi	r20,sp,60
  805b38:	dc801904 	addi	r18,sp,100
  805b3c:	8009883a 	mov	r4,r16
  805b40:	880b883a 	mov	r5,r17
  805b44:	01800284 	movi	r6,10
  805b48:	000f883a 	mov	r7,zero
  805b4c:	080be3c0 	call	80be3c <__umoddi3>
  805b50:	12000c04 	addi	r8,r2,48
  805b54:	94bfffc4 	addi	r18,r18,-1
  805b58:	8009883a 	mov	r4,r16
  805b5c:	880b883a 	mov	r5,r17
  805b60:	01800284 	movi	r6,10
  805b64:	000f883a 	mov	r7,zero
  805b68:	92000005 	stb	r8,0(r18)
  805b6c:	080b8600 	call	80b860 <__udivdi3>
  805b70:	1009883a 	mov	r4,r2
  805b74:	1021883a 	mov	r16,r2
  805b78:	18800068 	cmpgeui	r2,r3,1
  805b7c:	1823883a 	mov	r17,r3
  805b80:	103fee1e 	bne	r2,zero,805b3c <___vfprintf_internal_r+0x146c>
  805b84:	1800021e 	bne	r3,zero,805b90 <___vfprintf_internal_r+0x14c0>
  805b88:	00800244 	movi	r2,9
  805b8c:	113feb36 	bltu	r2,r4,805b3c <___vfprintf_internal_r+0x146c>
  805b90:	94bfffc4 	addi	r18,r18,-1
  805b94:	dc814115 	stw	r18,1284(sp)
  805b98:	003fc006 	br	805a9c <___vfprintf_internal_r+0x13cc>
  805b9c:	d9014c17 	ldw	r4,1328(sp)
  805ba0:	2080004c 	andi	r2,r4,1
  805ba4:	10009a1e 	bne	r2,zero,805e10 <___vfprintf_internal_r+0x1740>
  805ba8:	d9401904 	addi	r5,sp,100
  805bac:	dd000f04 	addi	r20,sp,60
  805bb0:	d9414115 	stw	r5,1284(sp)
  805bb4:	003d6106 	br	80513c <___vfprintf_internal_r+0xa6c>
  805bb8:	d9014f17 	ldw	r4,1340(sp)
  805bbc:	b00b883a 	mov	r5,r22
  805bc0:	d9800c04 	addi	r6,sp,48
  805bc4:	08046780 	call	804678 <__sprint_r>
  805bc8:	103c791e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805bcc:	dc800e17 	ldw	r18,56(sp)
  805bd0:	d8c01904 	addi	r3,sp,100
  805bd4:	003cff06 	br	804fd4 <___vfprintf_internal_r+0x904>
  805bd8:	d8c14c17 	ldw	r3,1328(sp)
  805bdc:	1880040c 	andi	r2,r3,16
  805be0:	1000711e 	bne	r2,zero,805da8 <___vfprintf_internal_r+0x16d8>
  805be4:	d9014c17 	ldw	r4,1328(sp)
  805be8:	2080100c 	andi	r2,r4,64
  805bec:	10006e26 	beq	r2,zero,805da8 <___vfprintf_internal_r+0x16d8>
  805bf0:	3c00000b 	ldhu	r16,0(r7)
  805bf4:	0023883a 	mov	r17,zero
  805bf8:	39c00104 	addi	r7,r7,4
  805bfc:	d9c14015 	stw	r7,1280(sp)
  805c00:	003f0006 	br	805804 <___vfprintf_internal_r+0x1134>
  805c04:	dc400d17 	ldw	r17,52(sp)
  805c08:	07002234 	movhi	fp,136
  805c0c:	e71d6d84 	addi	fp,fp,30134
  805c10:	9425883a 	add	r18,r18,r16
  805c14:	8c400044 	addi	r17,r17,1
  805c18:	008001c4 	movi	r2,7
  805c1c:	1f000015 	stw	fp,0(r3)
  805c20:	1c000115 	stw	r16,4(r3)
  805c24:	dc800e15 	stw	r18,56(sp)
  805c28:	dc400d15 	stw	r17,52(sp)
  805c2c:	147d7616 	blt	r2,r17,805208 <___vfprintf_internal_r+0xb38>
  805c30:	18c00204 	addi	r3,r3,8
  805c34:	003d7b06 	br	805224 <___vfprintf_internal_r+0xb54>
  805c38:	dc800e17 	ldw	r18,56(sp)
  805c3c:	dc400d17 	ldw	r17,52(sp)
  805c40:	07002234 	movhi	fp,136
  805c44:	e71d7184 	addi	fp,fp,30150
  805c48:	003bc006 	br	804b4c <___vfprintf_internal_r+0x47c>
  805c4c:	d9014f17 	ldw	r4,1340(sp)
  805c50:	b00b883a 	mov	r5,r22
  805c54:	d9800c04 	addi	r6,sp,48
  805c58:	08046780 	call	804678 <__sprint_r>
  805c5c:	103c541e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805c60:	dc800e17 	ldw	r18,56(sp)
  805c64:	d8c01904 	addi	r3,sp,100
  805c68:	003ce906 	br	805010 <___vfprintf_internal_r+0x940>
  805c6c:	3c000017 	ldw	r16,0(r7)
  805c70:	0009883a 	mov	r4,zero
  805c74:	39c00104 	addi	r7,r7,4
  805c78:	0023883a 	mov	r17,zero
  805c7c:	d9c14015 	stw	r7,1280(sp)
  805c80:	d8000405 	stb	zero,16(sp)
  805c84:	003d2006 	br	805108 <___vfprintf_internal_r+0xa38>
  805c88:	38800017 	ldw	r2,0(r7)
  805c8c:	39c00104 	addi	r7,r7,4
  805c90:	d9c14015 	stw	r7,1280(sp)
  805c94:	1023d7fa 	srai	r17,r2,31
  805c98:	1021883a 	mov	r16,r2
  805c9c:	003d1806 	br	805100 <___vfprintf_internal_r+0xa30>
  805ca0:	3c000017 	ldw	r16,0(r7)
  805ca4:	01000044 	movi	r4,1
  805ca8:	39c00104 	addi	r7,r7,4
  805cac:	0023883a 	mov	r17,zero
  805cb0:	d9c14015 	stw	r7,1280(sp)
  805cb4:	d8000405 	stb	zero,16(sp)
  805cb8:	003d1306 	br	805108 <___vfprintf_internal_r+0xa38>
  805cbc:	00802234 	movhi	r2,136
  805cc0:	109d6d04 	addi	r2,r2,30132
  805cc4:	94800044 	addi	r18,r18,1
  805cc8:	8c400044 	addi	r17,r17,1
  805ccc:	a8800015 	stw	r2,0(r21)
  805cd0:	00c00044 	movi	r3,1
  805cd4:	008001c4 	movi	r2,7
  805cd8:	a8c00115 	stw	r3,4(r21)
  805cdc:	dc800e15 	stw	r18,56(sp)
  805ce0:	dc400d15 	stw	r17,52(sp)
  805ce4:	1440ca16 	blt	r2,r17,806010 <___vfprintf_internal_r+0x1940>
  805ce8:	a8c00204 	addi	r3,r21,8
  805cec:	2000061e 	bne	r4,zero,805d08 <___vfprintf_internal_r+0x1638>
  805cf0:	d9414717 	ldw	r5,1308(sp)
  805cf4:	2800041e 	bne	r5,zero,805d08 <___vfprintf_internal_r+0x1638>
  805cf8:	d9814c17 	ldw	r6,1328(sp)
  805cfc:	3080004c 	andi	r2,r6,1
  805d00:	1005003a 	cmpeq	r2,r2,zero
  805d04:	103bf01e 	bne	r2,zero,804cc8 <___vfprintf_internal_r+0x5f8>
  805d08:	00800044 	movi	r2,1
  805d0c:	dc400d17 	ldw	r17,52(sp)
  805d10:	18800115 	stw	r2,4(r3)
  805d14:	d8814917 	ldw	r2,1316(sp)
  805d18:	94800044 	addi	r18,r18,1
  805d1c:	8c400044 	addi	r17,r17,1
  805d20:	18800015 	stw	r2,0(r3)
  805d24:	008001c4 	movi	r2,7
  805d28:	dc800e15 	stw	r18,56(sp)
  805d2c:	dc400d15 	stw	r17,52(sp)
  805d30:	1440ca16 	blt	r2,r17,80605c <___vfprintf_internal_r+0x198c>
  805d34:	18c00204 	addi	r3,r3,8
  805d38:	0121c83a 	sub	r16,zero,r4
  805d3c:	0400500e 	bge	zero,r16,805e80 <___vfprintf_internal_r+0x17b0>
  805d40:	00800404 	movi	r2,16
  805d44:	1400800e 	bge	r2,r16,805f48 <___vfprintf_internal_r+0x1878>
  805d48:	1027883a 	mov	r19,r2
  805d4c:	07002234 	movhi	fp,136
  805d50:	e71d6d84 	addi	fp,fp,30134
  805d54:	050001c4 	movi	r20,7
  805d58:	00000306 	br	805d68 <___vfprintf_internal_r+0x1698>
  805d5c:	18c00204 	addi	r3,r3,8
  805d60:	843ffc04 	addi	r16,r16,-16
  805d64:	9c007a0e 	bge	r19,r16,805f50 <___vfprintf_internal_r+0x1880>
  805d68:	94800404 	addi	r18,r18,16
  805d6c:	8c400044 	addi	r17,r17,1
  805d70:	1f000015 	stw	fp,0(r3)
  805d74:	1cc00115 	stw	r19,4(r3)
  805d78:	dc800e15 	stw	r18,56(sp)
  805d7c:	dc400d15 	stw	r17,52(sp)
  805d80:	a47ff60e 	bge	r20,r17,805d5c <___vfprintf_internal_r+0x168c>
  805d84:	d9014f17 	ldw	r4,1340(sp)
  805d88:	b00b883a 	mov	r5,r22
  805d8c:	d9800c04 	addi	r6,sp,48
  805d90:	08046780 	call	804678 <__sprint_r>
  805d94:	103c061e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805d98:	dc800e17 	ldw	r18,56(sp)
  805d9c:	dc400d17 	ldw	r17,52(sp)
  805da0:	d8c01904 	addi	r3,sp,100
  805da4:	003fee06 	br	805d60 <___vfprintf_internal_r+0x1690>
  805da8:	3c000017 	ldw	r16,0(r7)
  805dac:	0023883a 	mov	r17,zero
  805db0:	39c00104 	addi	r7,r7,4
  805db4:	d9c14015 	stw	r7,1280(sp)
  805db8:	003e9206 	br	805804 <___vfprintf_internal_r+0x1134>
  805dbc:	d9401904 	addi	r5,sp,100
  805dc0:	dd000f04 	addi	r20,sp,60
  805dc4:	d9414115 	stw	r5,1284(sp)
  805dc8:	d9814417 	ldw	r6,1296(sp)
  805dcc:	880a973a 	slli	r5,r17,28
  805dd0:	8004d13a 	srli	r2,r16,4
  805dd4:	810003cc 	andi	r4,r16,15
  805dd8:	3109883a 	add	r4,r6,r4
  805ddc:	2884b03a 	or	r2,r5,r2
  805de0:	21400003 	ldbu	r5,0(r4)
  805de4:	d9014117 	ldw	r4,1284(sp)
  805de8:	8806d13a 	srli	r3,r17,4
  805dec:	1021883a 	mov	r16,r2
  805df0:	213fffc4 	addi	r4,r4,-1
  805df4:	d9014115 	stw	r4,1284(sp)
  805df8:	d9814117 	ldw	r6,1284(sp)
  805dfc:	10c8b03a 	or	r4,r2,r3
  805e00:	1823883a 	mov	r17,r3
  805e04:	31400005 	stb	r5,0(r6)
  805e08:	203fef1e 	bne	r4,zero,805dc8 <___vfprintf_internal_r+0x16f8>
  805e0c:	003ccb06 	br	80513c <___vfprintf_internal_r+0xa6c>
  805e10:	00800c04 	movi	r2,48
  805e14:	d98018c4 	addi	r6,sp,99
  805e18:	dd000f04 	addi	r20,sp,60
  805e1c:	d88018c5 	stb	r2,99(sp)
  805e20:	d9814115 	stw	r6,1284(sp)
  805e24:	003cc506 	br	80513c <___vfprintf_internal_r+0xa6c>
  805e28:	dc400d17 	ldw	r17,52(sp)
  805e2c:	07002234 	movhi	fp,136
  805e30:	e71d7184 	addi	fp,fp,30150
  805e34:	003bc706 	br	804d54 <___vfprintf_internal_r+0x684>
  805e38:	d9414c17 	ldw	r5,1328(sp)
  805e3c:	2880040c 	andi	r2,r5,16
  805e40:	10007c26 	beq	r2,zero,806034 <___vfprintf_internal_r+0x1964>
  805e44:	38800017 	ldw	r2,0(r7)
  805e48:	39c00104 	addi	r7,r7,4
  805e4c:	d9c14015 	stw	r7,1280(sp)
  805e50:	d9814b17 	ldw	r6,1324(sp)
  805e54:	d9c14017 	ldw	r7,1280(sp)
  805e58:	11800015 	stw	r6,0(r2)
  805e5c:	003a7806 	br	804840 <___vfprintf_internal_r+0x170>
  805e60:	d9014f17 	ldw	r4,1340(sp)
  805e64:	b00b883a 	mov	r5,r22
  805e68:	d9800c04 	addi	r6,sp,48
  805e6c:	08046780 	call	804678 <__sprint_r>
  805e70:	103bcf1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805e74:	dc800e17 	ldw	r18,56(sp)
  805e78:	dc400d17 	ldw	r17,52(sp)
  805e7c:	d8c01904 	addi	r3,sp,100
  805e80:	d9014717 	ldw	r4,1308(sp)
  805e84:	d9414117 	ldw	r5,1284(sp)
  805e88:	8c400044 	addi	r17,r17,1
  805e8c:	9125883a 	add	r18,r18,r4
  805e90:	008001c4 	movi	r2,7
  805e94:	19400015 	stw	r5,0(r3)
  805e98:	19000115 	stw	r4,4(r3)
  805e9c:	dc800e15 	stw	r18,56(sp)
  805ea0:	dc400d15 	stw	r17,52(sp)
  805ea4:	147cee16 	blt	r2,r17,805260 <___vfprintf_internal_r+0xb90>
  805ea8:	18c00204 	addi	r3,r3,8
  805eac:	003b8606 	br	804cc8 <___vfprintf_internal_r+0x5f8>
  805eb0:	38c00017 	ldw	r3,0(r7)
  805eb4:	39000204 	addi	r4,r7,8
  805eb8:	d9014015 	stw	r4,1280(sp)
  805ebc:	d8c14215 	stw	r3,1288(sp)
  805ec0:	39c00117 	ldw	r7,4(r7)
  805ec4:	d9c14315 	stw	r7,1292(sp)
  805ec8:	003e2006 	br	80574c <___vfprintf_internal_r+0x107c>
  805ecc:	0005883a 	mov	r2,zero
  805ed0:	1409c83a 	sub	r4,r2,r16
  805ed4:	1105803a 	cmpltu	r2,r2,r4
  805ed8:	044bc83a 	sub	r5,zero,r17
  805edc:	2885c83a 	sub	r2,r5,r2
  805ee0:	2021883a 	mov	r16,r4
  805ee4:	1023883a 	mov	r17,r2
  805ee8:	01000044 	movi	r4,1
  805eec:	00800b44 	movi	r2,45
  805ef0:	d8800405 	stb	r2,16(sp)
  805ef4:	003c8406 	br	805108 <___vfprintf_internal_r+0xa38>
  805ef8:	d9014f17 	ldw	r4,1340(sp)
  805efc:	b00b883a 	mov	r5,r22
  805f00:	d9800c04 	addi	r6,sp,48
  805f04:	08046780 	call	804678 <__sprint_r>
  805f08:	103ba91e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805f0c:	dc800e17 	ldw	r18,56(sp)
  805f10:	dc400d17 	ldw	r17,52(sp)
  805f14:	d9000517 	ldw	r4,20(sp)
  805f18:	d9401904 	addi	r5,sp,100
  805f1c:	003da706 	br	8055bc <___vfprintf_internal_r+0xeec>
  805f20:	d9014f17 	ldw	r4,1340(sp)
  805f24:	b00b883a 	mov	r5,r22
  805f28:	d9800c04 	addi	r6,sp,48
  805f2c:	08046780 	call	804678 <__sprint_r>
  805f30:	103b9f1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805f34:	dc800e17 	ldw	r18,56(sp)
  805f38:	dc400d17 	ldw	r17,52(sp)
  805f3c:	d9000517 	ldw	r4,20(sp)
  805f40:	d8c01904 	addi	r3,sp,100
  805f44:	003d9106 	br	80558c <___vfprintf_internal_r+0xebc>
  805f48:	07002234 	movhi	fp,136
  805f4c:	e71d6d84 	addi	fp,fp,30134
  805f50:	9425883a 	add	r18,r18,r16
  805f54:	8c400044 	addi	r17,r17,1
  805f58:	008001c4 	movi	r2,7
  805f5c:	1f000015 	stw	fp,0(r3)
  805f60:	1c000115 	stw	r16,4(r3)
  805f64:	dc800e15 	stw	r18,56(sp)
  805f68:	dc400d15 	stw	r17,52(sp)
  805f6c:	147fbc16 	blt	r2,r17,805e60 <___vfprintf_internal_r+0x1790>
  805f70:	18c00204 	addi	r3,r3,8
  805f74:	003fc206 	br	805e80 <___vfprintf_internal_r+0x17b0>
  805f78:	d9014f17 	ldw	r4,1340(sp)
  805f7c:	b00b883a 	mov	r5,r22
  805f80:	d9800c04 	addi	r6,sp,48
  805f84:	08046780 	call	804678 <__sprint_r>
  805f88:	103b891e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  805f8c:	dc800e17 	ldw	r18,56(sp)
  805f90:	d9000517 	ldw	r4,20(sp)
  805f94:	d8c01904 	addi	r3,sp,100
  805f98:	003d0206 	br	8053a4 <___vfprintf_internal_r+0xcd4>
  805f9c:	07002234 	movhi	fp,136
  805fa0:	e71d6d84 	addi	fp,fp,30134
  805fa4:	003be406 	br	804f38 <___vfprintf_internal_r+0x868>
  805fa8:	00802234 	movhi	r2,136
  805fac:	109d5c04 	addi	r2,r2,30064
  805fb0:	d8814115 	stw	r2,1284(sp)
  805fb4:	003df506 	br	80578c <___vfprintf_internal_r+0x10bc>
  805fb8:	d9014217 	ldw	r4,1288(sp)
  805fbc:	d9414317 	ldw	r5,1292(sp)
  805fc0:	080b0b00 	call	80b0b0 <__isnand>
  805fc4:	10003926 	beq	r2,zero,8060ac <___vfprintf_internal_r+0x19dc>
  805fc8:	d9414d17 	ldw	r5,1332(sp)
  805fcc:	008011c4 	movi	r2,71
  805fd0:	1140ce16 	blt	r2,r5,80630c <___vfprintf_internal_r+0x1c3c>
  805fd4:	01802234 	movhi	r6,136
  805fd8:	319d5d04 	addi	r6,r6,30068
  805fdc:	d9814115 	stw	r6,1284(sp)
  805fe0:	003dea06 	br	80578c <___vfprintf_internal_r+0x10bc>
  805fe4:	d9014c17 	ldw	r4,1328(sp)
  805fe8:	bdc00044 	addi	r23,r23,1
  805fec:	b8c00007 	ldb	r3,0(r23)
  805ff0:	21000814 	ori	r4,r4,32
  805ff4:	d9014c15 	stw	r4,1328(sp)
  805ff8:	003a3406 	br	8048cc <___vfprintf_internal_r+0x1fc>
  805ffc:	dcc14515 	stw	r19,1300(sp)
  806000:	98011016 	blt	r19,zero,806444 <___vfprintf_internal_r+0x1d74>
  806004:	980f883a 	mov	r7,r19
  806008:	d8014615 	stw	zero,1304(sp)
  80600c:	003c5206 	br	805158 <___vfprintf_internal_r+0xa88>
  806010:	d9014f17 	ldw	r4,1340(sp)
  806014:	b00b883a 	mov	r5,r22
  806018:	d9800c04 	addi	r6,sp,48
  80601c:	08046780 	call	804678 <__sprint_r>
  806020:	103b631e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  806024:	dc800e17 	ldw	r18,56(sp)
  806028:	d9000517 	ldw	r4,20(sp)
  80602c:	d8c01904 	addi	r3,sp,100
  806030:	003f2e06 	br	805cec <___vfprintf_internal_r+0x161c>
  806034:	d8c14c17 	ldw	r3,1328(sp)
  806038:	1880100c 	andi	r2,r3,64
  80603c:	1000a026 	beq	r2,zero,8062c0 <___vfprintf_internal_r+0x1bf0>
  806040:	38800017 	ldw	r2,0(r7)
  806044:	39c00104 	addi	r7,r7,4
  806048:	d9c14015 	stw	r7,1280(sp)
  80604c:	d9014b17 	ldw	r4,1324(sp)
  806050:	d9c14017 	ldw	r7,1280(sp)
  806054:	1100000d 	sth	r4,0(r2)
  806058:	0039f906 	br	804840 <___vfprintf_internal_r+0x170>
  80605c:	d9014f17 	ldw	r4,1340(sp)
  806060:	b00b883a 	mov	r5,r22
  806064:	d9800c04 	addi	r6,sp,48
  806068:	08046780 	call	804678 <__sprint_r>
  80606c:	103b501e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  806070:	dc800e17 	ldw	r18,56(sp)
  806074:	dc400d17 	ldw	r17,52(sp)
  806078:	d9000517 	ldw	r4,20(sp)
  80607c:	d8c01904 	addi	r3,sp,100
  806080:	003f2d06 	br	805d38 <___vfprintf_internal_r+0x1668>
  806084:	00800184 	movi	r2,6
  806088:	14c09a36 	bltu	r2,r19,8062f4 <___vfprintf_internal_r+0x1c24>
  80608c:	dcc14515 	stw	r19,1300(sp)
  806090:	9800010e 	bge	r19,zero,806098 <___vfprintf_internal_r+0x19c8>
  806094:	d8014515 	stw	zero,1300(sp)
  806098:	00802234 	movhi	r2,136
  80609c:	109d5f04 	addi	r2,r2,30076
  8060a0:	980f883a 	mov	r7,r19
  8060a4:	d8814115 	stw	r2,1284(sp)
  8060a8:	003a7806 	br	804a8c <___vfprintf_internal_r+0x3bc>
  8060ac:	00bfffc4 	movi	r2,-1
  8060b0:	9880e226 	beq	r19,r2,80643c <___vfprintf_internal_r+0x1d6c>
  8060b4:	d9414d17 	ldw	r5,1332(sp)
  8060b8:	008019c4 	movi	r2,103
  8060bc:	2880dc26 	beq	r5,r2,806430 <___vfprintf_internal_r+0x1d60>
  8060c0:	008011c4 	movi	r2,71
  8060c4:	2880da26 	beq	r5,r2,806430 <___vfprintf_internal_r+0x1d60>
  8060c8:	d9414c17 	ldw	r5,1328(sp)
  8060cc:	d9014317 	ldw	r4,1292(sp)
  8060d0:	d9814217 	ldw	r6,1288(sp)
  8060d4:	29404014 	ori	r5,r5,256
  8060d8:	d9414c15 	stw	r5,1328(sp)
  8060dc:	2000cc16 	blt	r4,zero,806410 <___vfprintf_internal_r+0x1d40>
  8060e0:	3021883a 	mov	r16,r6
  8060e4:	2023883a 	mov	r17,r4
  8060e8:	0039883a 	mov	fp,zero
  8060ec:	d9414d17 	ldw	r5,1332(sp)
  8060f0:	00801984 	movi	r2,102
  8060f4:	2880b726 	beq	r5,r2,8063d4 <___vfprintf_internal_r+0x1d04>
  8060f8:	00801184 	movi	r2,70
  8060fc:	2880b526 	beq	r5,r2,8063d4 <___vfprintf_internal_r+0x1d04>
  806100:	00801944 	movi	r2,101
  806104:	2880c826 	beq	r5,r2,806428 <___vfprintf_internal_r+0x1d58>
  806108:	00801144 	movi	r2,69
  80610c:	2880c626 	beq	r5,r2,806428 <___vfprintf_internal_r+0x1d58>
  806110:	9829883a 	mov	r20,r19
  806114:	d9014f17 	ldw	r4,1340(sp)
  806118:	d8800504 	addi	r2,sp,20
  80611c:	880d883a 	mov	r6,r17
  806120:	d8800115 	stw	r2,4(sp)
  806124:	d8c00604 	addi	r3,sp,24
  806128:	d8800704 	addi	r2,sp,28
  80612c:	800b883a 	mov	r5,r16
  806130:	01c00084 	movi	r7,2
  806134:	d8c00215 	stw	r3,8(sp)
  806138:	d8800315 	stw	r2,12(sp)
  80613c:	dd000015 	stw	r20,0(sp)
  806140:	08068f40 	call	8068f4 <_dtoa_r>
  806144:	d9814d17 	ldw	r6,1332(sp)
  806148:	d8814115 	stw	r2,1284(sp)
  80614c:	008019c4 	movi	r2,103
  806150:	30809526 	beq	r6,r2,8063a8 <___vfprintf_internal_r+0x1cd8>
  806154:	d8c14d17 	ldw	r3,1332(sp)
  806158:	008011c4 	movi	r2,71
  80615c:	18809226 	beq	r3,r2,8063a8 <___vfprintf_internal_r+0x1cd8>
  806160:	d9414117 	ldw	r5,1284(sp)
  806164:	d9814d17 	ldw	r6,1332(sp)
  806168:	00801984 	movi	r2,102
  80616c:	2d25883a 	add	r18,r5,r20
  806170:	30808626 	beq	r6,r2,80638c <___vfprintf_internal_r+0x1cbc>
  806174:	00801184 	movi	r2,70
  806178:	30808426 	beq	r6,r2,80638c <___vfprintf_internal_r+0x1cbc>
  80617c:	000d883a 	mov	r6,zero
  806180:	000f883a 	mov	r7,zero
  806184:	880b883a 	mov	r5,r17
  806188:	8009883a 	mov	r4,r16
  80618c:	0803b200 	call	803b20 <__eqdf2>
  806190:	1000751e 	bne	r2,zero,806368 <___vfprintf_internal_r+0x1c98>
  806194:	9005883a 	mov	r2,r18
  806198:	dc800715 	stw	r18,28(sp)
  80619c:	d9014117 	ldw	r4,1284(sp)
  8061a0:	d9414d17 	ldw	r5,1332(sp)
  8061a4:	00c019c4 	movi	r3,103
  8061a8:	1125c83a 	sub	r18,r2,r4
  8061ac:	28c06826 	beq	r5,r3,806350 <___vfprintf_internal_r+0x1c80>
  8061b0:	008011c4 	movi	r2,71
  8061b4:	28806626 	beq	r5,r2,806350 <___vfprintf_internal_r+0x1c80>
  8061b8:	d9000517 	ldw	r4,20(sp)
  8061bc:	d8c14d17 	ldw	r3,1332(sp)
  8061c0:	00801944 	movi	r2,101
  8061c4:	10c05516 	blt	r2,r3,80631c <___vfprintf_internal_r+0x1c4c>
  8061c8:	213fffc4 	addi	r4,r4,-1
  8061cc:	d9000515 	stw	r4,20(sp)
  8061d0:	d8c00805 	stb	r3,32(sp)
  8061d4:	2021883a 	mov	r16,r4
  8061d8:	2000c116 	blt	r4,zero,8064e0 <___vfprintf_internal_r+0x1e10>
  8061dc:	00800ac4 	movi	r2,43
  8061e0:	d8800845 	stb	r2,33(sp)
  8061e4:	00800244 	movi	r2,9
  8061e8:	1400af0e 	bge	r2,r16,8064a8 <___vfprintf_internal_r+0x1dd8>
  8061ec:	1027883a 	mov	r19,r2
  8061f0:	dc400b84 	addi	r17,sp,46
  8061f4:	8009883a 	mov	r4,r16
  8061f8:	01400284 	movi	r5,10
  8061fc:	0803f640 	call	803f64 <__modsi3>
  806200:	10800c04 	addi	r2,r2,48
  806204:	8c7fffc4 	addi	r17,r17,-1
  806208:	8009883a 	mov	r4,r16
  80620c:	01400284 	movi	r5,10
  806210:	88800005 	stb	r2,0(r17)
  806214:	0803f040 	call	803f04 <__divsi3>
  806218:	1021883a 	mov	r16,r2
  80621c:	98bff516 	blt	r19,r2,8061f4 <___vfprintf_internal_r+0x1b24>
  806220:	10c00c04 	addi	r3,r2,48
  806224:	d88009c4 	addi	r2,sp,39
  806228:	108001c4 	addi	r2,r2,7
  80622c:	897fffc4 	addi	r5,r17,-1
  806230:	88ffffc5 	stb	r3,-1(r17)
  806234:	2880a72e 	bgeu	r5,r2,8064d4 <___vfprintf_internal_r+0x1e04>
  806238:	1009883a 	mov	r4,r2
  80623c:	d9800804 	addi	r6,sp,32
  806240:	d8c00884 	addi	r3,sp,34
  806244:	28800003 	ldbu	r2,0(r5)
  806248:	29400044 	addi	r5,r5,1
  80624c:	18800005 	stb	r2,0(r3)
  806250:	18c00044 	addi	r3,r3,1
  806254:	293ffb36 	bltu	r5,r4,806244 <___vfprintf_internal_r+0x1b74>
  806258:	1987c83a 	sub	r3,r3,r6
  80625c:	00800044 	movi	r2,1
  806260:	d8c14815 	stw	r3,1312(sp)
  806264:	90cf883a 	add	r7,r18,r3
  806268:	1480960e 	bge	r2,r18,8064c4 <___vfprintf_internal_r+0x1df4>
  80626c:	39c00044 	addi	r7,r7,1
  806270:	d9c14515 	stw	r7,1300(sp)
  806274:	38003416 	blt	r7,zero,806348 <___vfprintf_internal_r+0x1c78>
  806278:	e0803fcc 	andi	r2,fp,255
  80627c:	1080201c 	xori	r2,r2,128
  806280:	10bfe004 	addi	r2,r2,-128
  806284:	10004e26 	beq	r2,zero,8063c0 <___vfprintf_internal_r+0x1cf0>
  806288:	00800b44 	movi	r2,45
  80628c:	dc814715 	stw	r18,1308(sp)
  806290:	d8014615 	stw	zero,1304(sp)
  806294:	d8800405 	stb	r2,16(sp)
  806298:	003bb106 	br	805160 <___vfprintf_internal_r+0xa90>
  80629c:	00800b44 	movi	r2,45
  8062a0:	d8800405 	stb	r2,16(sp)
  8062a4:	003d3306 	br	805774 <___vfprintf_internal_r+0x10a4>
  8062a8:	d9014f17 	ldw	r4,1340(sp)
  8062ac:	b00b883a 	mov	r5,r22
  8062b0:	d9800c04 	addi	r6,sp,48
  8062b4:	08046780 	call	804678 <__sprint_r>
  8062b8:	103abd1e 	bne	r2,zero,804db0 <___vfprintf_internal_r+0x6e0>
  8062bc:	003abb06 	br	804dac <___vfprintf_internal_r+0x6dc>
  8062c0:	38800017 	ldw	r2,0(r7)
  8062c4:	39c00104 	addi	r7,r7,4
  8062c8:	d9c14015 	stw	r7,1280(sp)
  8062cc:	d9414b17 	ldw	r5,1324(sp)
  8062d0:	d9c14017 	ldw	r7,1280(sp)
  8062d4:	11400015 	stw	r5,0(r2)
  8062d8:	00395906 	br	804840 <___vfprintf_internal_r+0x170>
  8062dc:	980f883a 	mov	r7,r19
  8062e0:	dcc14515 	stw	r19,1300(sp)
  8062e4:	d8014615 	stw	zero,1304(sp)
  8062e8:	003b9b06 	br	805158 <___vfprintf_internal_r+0xa88>
  8062ec:	0027883a 	mov	r19,zero
  8062f0:	00397806 	br	8048d4 <___vfprintf_internal_r+0x204>
  8062f4:	00c02234 	movhi	r3,136
  8062f8:	18dd5f04 	addi	r3,r3,30076
  8062fc:	100f883a 	mov	r7,r2
  806300:	d8814515 	stw	r2,1300(sp)
  806304:	d8c14115 	stw	r3,1284(sp)
  806308:	0039e006 	br	804a8c <___vfprintf_internal_r+0x3bc>
  80630c:	00802234 	movhi	r2,136
  806310:	109d5e04 	addi	r2,r2,30072
  806314:	d8814115 	stw	r2,1284(sp)
  806318:	003d1c06 	br	80578c <___vfprintf_internal_r+0x10bc>
  80631c:	d9414d17 	ldw	r5,1332(sp)
  806320:	00801984 	movi	r2,102
  806324:	28804926 	beq	r5,r2,80644c <___vfprintf_internal_r+0x1d7c>
  806328:	200f883a 	mov	r7,r4
  80632c:	24805716 	blt	r4,r18,80648c <___vfprintf_internal_r+0x1dbc>
  806330:	d9414c17 	ldw	r5,1328(sp)
  806334:	2880004c 	andi	r2,r5,1
  806338:	10000126 	beq	r2,zero,806340 <___vfprintf_internal_r+0x1c70>
  80633c:	21c00044 	addi	r7,r4,1
  806340:	d9c14515 	stw	r7,1300(sp)
  806344:	383fcc0e 	bge	r7,zero,806278 <___vfprintf_internal_r+0x1ba8>
  806348:	d8014515 	stw	zero,1300(sp)
  80634c:	003fca06 	br	806278 <___vfprintf_internal_r+0x1ba8>
  806350:	d9000517 	ldw	r4,20(sp)
  806354:	00bfff04 	movi	r2,-4
  806358:	1100480e 	bge	r2,r4,80647c <___vfprintf_internal_r+0x1dac>
  80635c:	99004716 	blt	r19,r4,80647c <___vfprintf_internal_r+0x1dac>
  806360:	d8c14d15 	stw	r3,1332(sp)
  806364:	003ff006 	br	806328 <___vfprintf_internal_r+0x1c58>
  806368:	d8800717 	ldw	r2,28(sp)
  80636c:	14bf8b2e 	bgeu	r2,r18,80619c <___vfprintf_internal_r+0x1acc>
  806370:	9007883a 	mov	r3,r18
  806374:	01000c04 	movi	r4,48
  806378:	11000005 	stb	r4,0(r2)
  80637c:	10800044 	addi	r2,r2,1
  806380:	d8800715 	stw	r2,28(sp)
  806384:	18bffc1e 	bne	r3,r2,806378 <___vfprintf_internal_r+0x1ca8>
  806388:	003f8406 	br	80619c <___vfprintf_internal_r+0x1acc>
  80638c:	d8814117 	ldw	r2,1284(sp)
  806390:	10c00007 	ldb	r3,0(r2)
  806394:	00800c04 	movi	r2,48
  806398:	18805b26 	beq	r3,r2,806508 <___vfprintf_internal_r+0x1e38>
  80639c:	d9000517 	ldw	r4,20(sp)
  8063a0:	9125883a 	add	r18,r18,r4
  8063a4:	003f7506 	br	80617c <___vfprintf_internal_r+0x1aac>
  8063a8:	d9014c17 	ldw	r4,1328(sp)
  8063ac:	2080004c 	andi	r2,r4,1
  8063b0:	1005003a 	cmpeq	r2,r2,zero
  8063b4:	103f6a26 	beq	r2,zero,806160 <___vfprintf_internal_r+0x1a90>
  8063b8:	d8800717 	ldw	r2,28(sp)
  8063bc:	003f7706 	br	80619c <___vfprintf_internal_r+0x1acc>
  8063c0:	d9c14515 	stw	r7,1300(sp)
  8063c4:	38004d16 	blt	r7,zero,8064fc <___vfprintf_internal_r+0x1e2c>
  8063c8:	dc814715 	stw	r18,1308(sp)
  8063cc:	d8014615 	stw	zero,1304(sp)
  8063d0:	003b6106 	br	805158 <___vfprintf_internal_r+0xa88>
  8063d4:	d9014f17 	ldw	r4,1340(sp)
  8063d8:	d8800504 	addi	r2,sp,20
  8063dc:	d8800115 	stw	r2,4(sp)
  8063e0:	d8c00604 	addi	r3,sp,24
  8063e4:	d8800704 	addi	r2,sp,28
  8063e8:	800b883a 	mov	r5,r16
  8063ec:	880d883a 	mov	r6,r17
  8063f0:	01c000c4 	movi	r7,3
  8063f4:	d8c00215 	stw	r3,8(sp)
  8063f8:	d8800315 	stw	r2,12(sp)
  8063fc:	dcc00015 	stw	r19,0(sp)
  806400:	9829883a 	mov	r20,r19
  806404:	08068f40 	call	8068f4 <_dtoa_r>
  806408:	d8814115 	stw	r2,1284(sp)
  80640c:	003f5106 	br	806154 <___vfprintf_internal_r+0x1a84>
  806410:	d8c14217 	ldw	r3,1288(sp)
  806414:	d9014317 	ldw	r4,1292(sp)
  806418:	07000b44 	movi	fp,45
  80641c:	1821883a 	mov	r16,r3
  806420:	2460003c 	xorhi	r17,r4,32768
  806424:	003f3106 	br	8060ec <___vfprintf_internal_r+0x1a1c>
  806428:	9d000044 	addi	r20,r19,1
  80642c:	003f3906 	br	806114 <___vfprintf_internal_r+0x1a44>
  806430:	983f251e 	bne	r19,zero,8060c8 <___vfprintf_internal_r+0x19f8>
  806434:	04c00044 	movi	r19,1
  806438:	003f2306 	br	8060c8 <___vfprintf_internal_r+0x19f8>
  80643c:	04c00184 	movi	r19,6
  806440:	003f2106 	br	8060c8 <___vfprintf_internal_r+0x19f8>
  806444:	d8014515 	stw	zero,1300(sp)
  806448:	003eee06 	br	806004 <___vfprintf_internal_r+0x1934>
  80644c:	200f883a 	mov	r7,r4
  806450:	0100370e 	bge	zero,r4,806530 <___vfprintf_internal_r+0x1e60>
  806454:	9800031e 	bne	r19,zero,806464 <___vfprintf_internal_r+0x1d94>
  806458:	d9814c17 	ldw	r6,1328(sp)
  80645c:	3080004c 	andi	r2,r6,1
  806460:	103fb726 	beq	r2,zero,806340 <___vfprintf_internal_r+0x1c70>
  806464:	20800044 	addi	r2,r4,1
  806468:	98a7883a 	add	r19,r19,r2
  80646c:	dcc14515 	stw	r19,1300(sp)
  806470:	980f883a 	mov	r7,r19
  806474:	983f800e 	bge	r19,zero,806278 <___vfprintf_internal_r+0x1ba8>
  806478:	003fb306 	br	806348 <___vfprintf_internal_r+0x1c78>
  80647c:	d9814d17 	ldw	r6,1332(sp)
  806480:	31bfff84 	addi	r6,r6,-2
  806484:	d9814d15 	stw	r6,1332(sp)
  806488:	003f4c06 	br	8061bc <___vfprintf_internal_r+0x1aec>
  80648c:	0100180e 	bge	zero,r4,8064f0 <___vfprintf_internal_r+0x1e20>
  806490:	00800044 	movi	r2,1
  806494:	1485883a 	add	r2,r2,r18
  806498:	d8814515 	stw	r2,1300(sp)
  80649c:	100f883a 	mov	r7,r2
  8064a0:	103f750e 	bge	r2,zero,806278 <___vfprintf_internal_r+0x1ba8>
  8064a4:	003fa806 	br	806348 <___vfprintf_internal_r+0x1c78>
  8064a8:	80c00c04 	addi	r3,r16,48
  8064ac:	00800c04 	movi	r2,48
  8064b0:	d8c008c5 	stb	r3,35(sp)
  8064b4:	d9800804 	addi	r6,sp,32
  8064b8:	d8c00904 	addi	r3,sp,36
  8064bc:	d8800885 	stb	r2,34(sp)
  8064c0:	003f6506 	br	806258 <___vfprintf_internal_r+0x1b88>
  8064c4:	d9014c17 	ldw	r4,1328(sp)
  8064c8:	2084703a 	and	r2,r4,r2
  8064cc:	103f9c26 	beq	r2,zero,806340 <___vfprintf_internal_r+0x1c70>
  8064d0:	003f6606 	br	80626c <___vfprintf_internal_r+0x1b9c>
  8064d4:	d9800804 	addi	r6,sp,32
  8064d8:	d8c00884 	addi	r3,sp,34
  8064dc:	003f5e06 	br	806258 <___vfprintf_internal_r+0x1b88>
  8064e0:	00800b44 	movi	r2,45
  8064e4:	0121c83a 	sub	r16,zero,r4
  8064e8:	d8800845 	stb	r2,33(sp)
  8064ec:	003f3d06 	br	8061e4 <___vfprintf_internal_r+0x1b14>
  8064f0:	00800084 	movi	r2,2
  8064f4:	1105c83a 	sub	r2,r2,r4
  8064f8:	003fe606 	br	806494 <___vfprintf_internal_r+0x1dc4>
  8064fc:	d8014515 	stw	zero,1300(sp)
  806500:	dc814715 	stw	r18,1308(sp)
  806504:	003fb106 	br	8063cc <___vfprintf_internal_r+0x1cfc>
  806508:	000d883a 	mov	r6,zero
  80650c:	000f883a 	mov	r7,zero
  806510:	8009883a 	mov	r4,r16
  806514:	880b883a 	mov	r5,r17
  806518:	080c6440 	call	80c644 <__nedf2>
  80651c:	103f9f26 	beq	r2,zero,80639c <___vfprintf_internal_r+0x1ccc>
  806520:	00800044 	movi	r2,1
  806524:	1509c83a 	sub	r4,r2,r20
  806528:	d9000515 	stw	r4,20(sp)
  80652c:	003f9b06 	br	80639c <___vfprintf_internal_r+0x1ccc>
  806530:	98000d1e 	bne	r19,zero,806568 <___vfprintf_internal_r+0x1e98>
  806534:	d8c14c17 	ldw	r3,1328(sp)
  806538:	1880004c 	andi	r2,r3,1
  80653c:	10000a1e 	bne	r2,zero,806568 <___vfprintf_internal_r+0x1e98>
  806540:	01000044 	movi	r4,1
  806544:	200f883a 	mov	r7,r4
  806548:	d9014515 	stw	r4,1300(sp)
  80654c:	003f4a06 	br	806278 <___vfprintf_internal_r+0x1ba8>
  806550:	3cc00017 	ldw	r19,0(r7)
  806554:	39c00104 	addi	r7,r7,4
  806558:	983d0e0e 	bge	r19,zero,805994 <___vfprintf_internal_r+0x12c4>
  80655c:	b8c00007 	ldb	r3,0(r23)
  806560:	04ffffc4 	movi	r19,-1
  806564:	0038d906 	br	8048cc <___vfprintf_internal_r+0x1fc>
  806568:	9cc00084 	addi	r19,r19,2
  80656c:	dcc14515 	stw	r19,1300(sp)
  806570:	980f883a 	mov	r7,r19
  806574:	983f400e 	bge	r19,zero,806278 <___vfprintf_internal_r+0x1ba8>
  806578:	003f7306 	br	806348 <___vfprintf_internal_r+0x1c78>

0080657c <__vfprintf_internal>:
  80657c:	00802274 	movhi	r2,137
  806580:	10a4f804 	addi	r2,r2,-27680
  806584:	2013883a 	mov	r9,r4
  806588:	11000017 	ldw	r4,0(r2)
  80658c:	2805883a 	mov	r2,r5
  806590:	300f883a 	mov	r7,r6
  806594:	480b883a 	mov	r5,r9
  806598:	100d883a 	mov	r6,r2
  80659c:	08046d01 	jmpi	8046d0 <___vfprintf_internal_r>

008065a0 <__swsetup_r>:
  8065a0:	00802274 	movhi	r2,137
  8065a4:	10a4f804 	addi	r2,r2,-27680
  8065a8:	10c00017 	ldw	r3,0(r2)
  8065ac:	defffd04 	addi	sp,sp,-12
  8065b0:	dc400115 	stw	r17,4(sp)
  8065b4:	dc000015 	stw	r16,0(sp)
  8065b8:	dfc00215 	stw	ra,8(sp)
  8065bc:	2023883a 	mov	r17,r4
  8065c0:	2821883a 	mov	r16,r5
  8065c4:	18000226 	beq	r3,zero,8065d0 <__swsetup_r+0x30>
  8065c8:	18800e17 	ldw	r2,56(r3)
  8065cc:	10001f26 	beq	r2,zero,80664c <__swsetup_r+0xac>
  8065d0:	8100030b 	ldhu	r4,12(r16)
  8065d4:	2080020c 	andi	r2,r4,8
  8065d8:	10002826 	beq	r2,zero,80667c <__swsetup_r+0xdc>
  8065dc:	81400417 	ldw	r5,16(r16)
  8065e0:	28001d26 	beq	r5,zero,806658 <__swsetup_r+0xb8>
  8065e4:	2080004c 	andi	r2,r4,1
  8065e8:	1005003a 	cmpeq	r2,r2,zero
  8065ec:	10000b26 	beq	r2,zero,80661c <__swsetup_r+0x7c>
  8065f0:	2080008c 	andi	r2,r4,2
  8065f4:	10001226 	beq	r2,zero,806640 <__swsetup_r+0xa0>
  8065f8:	0005883a 	mov	r2,zero
  8065fc:	80800215 	stw	r2,8(r16)
  806600:	28000b26 	beq	r5,zero,806630 <__swsetup_r+0x90>
  806604:	0005883a 	mov	r2,zero
  806608:	dfc00217 	ldw	ra,8(sp)
  80660c:	dc400117 	ldw	r17,4(sp)
  806610:	dc000017 	ldw	r16,0(sp)
  806614:	dec00304 	addi	sp,sp,12
  806618:	f800283a 	ret
  80661c:	80800517 	ldw	r2,20(r16)
  806620:	80000215 	stw	zero,8(r16)
  806624:	0085c83a 	sub	r2,zero,r2
  806628:	80800615 	stw	r2,24(r16)
  80662c:	283ff51e 	bne	r5,zero,806604 <__swsetup_r+0x64>
  806630:	2080200c 	andi	r2,r4,128
  806634:	103ff326 	beq	r2,zero,806604 <__swsetup_r+0x64>
  806638:	00bfffc4 	movi	r2,-1
  80663c:	003ff206 	br	806608 <__swsetup_r+0x68>
  806640:	80800517 	ldw	r2,20(r16)
  806644:	80800215 	stw	r2,8(r16)
  806648:	003fed06 	br	806600 <__swsetup_r+0x60>
  80664c:	1809883a 	mov	r4,r3
  806650:	08081400 	call	808140 <__sinit>
  806654:	003fde06 	br	8065d0 <__swsetup_r+0x30>
  806658:	20c0a00c 	andi	r3,r4,640
  80665c:	00808004 	movi	r2,512
  806660:	18bfe026 	beq	r3,r2,8065e4 <__swsetup_r+0x44>
  806664:	8809883a 	mov	r4,r17
  806668:	800b883a 	mov	r5,r16
  80666c:	0808eb80 	call	808eb8 <__smakebuf_r>
  806670:	8100030b 	ldhu	r4,12(r16)
  806674:	81400417 	ldw	r5,16(r16)
  806678:	003fda06 	br	8065e4 <__swsetup_r+0x44>
  80667c:	2080040c 	andi	r2,r4,16
  806680:	103fed26 	beq	r2,zero,806638 <__swsetup_r+0x98>
  806684:	2080010c 	andi	r2,r4,4
  806688:	10001226 	beq	r2,zero,8066d4 <__swsetup_r+0x134>
  80668c:	81400c17 	ldw	r5,48(r16)
  806690:	28000526 	beq	r5,zero,8066a8 <__swsetup_r+0x108>
  806694:	80801004 	addi	r2,r16,64
  806698:	28800226 	beq	r5,r2,8066a4 <__swsetup_r+0x104>
  80669c:	8809883a 	mov	r4,r17
  8066a0:	08084c40 	call	8084c4 <_free_r>
  8066a4:	80000c15 	stw	zero,48(r16)
  8066a8:	8080030b 	ldhu	r2,12(r16)
  8066ac:	81400417 	ldw	r5,16(r16)
  8066b0:	80000115 	stw	zero,4(r16)
  8066b4:	10bff6cc 	andi	r2,r2,65499
  8066b8:	8080030d 	sth	r2,12(r16)
  8066bc:	81400015 	stw	r5,0(r16)
  8066c0:	8080030b 	ldhu	r2,12(r16)
  8066c4:	10800214 	ori	r2,r2,8
  8066c8:	113fffcc 	andi	r4,r2,65535
  8066cc:	8080030d 	sth	r2,12(r16)
  8066d0:	003fc306 	br	8065e0 <__swsetup_r+0x40>
  8066d4:	81400417 	ldw	r5,16(r16)
  8066d8:	003ff906 	br	8066c0 <__swsetup_r+0x120>

008066dc <quorem>:
  8066dc:	28c00417 	ldw	r3,16(r5)
  8066e0:	20800417 	ldw	r2,16(r4)
  8066e4:	defff604 	addi	sp,sp,-40
  8066e8:	ddc00715 	stw	r23,28(sp)
  8066ec:	dd400515 	stw	r21,20(sp)
  8066f0:	dfc00915 	stw	ra,36(sp)
  8066f4:	df000815 	stw	fp,32(sp)
  8066f8:	dd800615 	stw	r22,24(sp)
  8066fc:	dd000415 	stw	r20,16(sp)
  806700:	dcc00315 	stw	r19,12(sp)
  806704:	dc800215 	stw	r18,8(sp)
  806708:	dc400115 	stw	r17,4(sp)
  80670c:	dc000015 	stw	r16,0(sp)
  806710:	202f883a 	mov	r23,r4
  806714:	282b883a 	mov	r21,r5
  806718:	10c07416 	blt	r2,r3,8068ec <quorem+0x210>
  80671c:	1c7fffc4 	addi	r17,r3,-1
  806720:	8c45883a 	add	r2,r17,r17
  806724:	1085883a 	add	r2,r2,r2
  806728:	2c000504 	addi	r16,r5,20
  80672c:	24c00504 	addi	r19,r4,20
  806730:	14ed883a 	add	r22,r2,r19
  806734:	80a5883a 	add	r18,r16,r2
  806738:	b7000017 	ldw	fp,0(r22)
  80673c:	91400017 	ldw	r5,0(r18)
  806740:	e009883a 	mov	r4,fp
  806744:	29400044 	addi	r5,r5,1
  806748:	0803fc40 	call	803fc4 <__udivsi3>
  80674c:	1029883a 	mov	r20,r2
  806750:	10003c1e 	bne	r2,zero,806844 <quorem+0x168>
  806754:	a80b883a 	mov	r5,r21
  806758:	b809883a 	mov	r4,r23
  80675c:	0809be40 	call	809be4 <__mcmp>
  806760:	10002b16 	blt	r2,zero,806810 <quorem+0x134>
  806764:	a5000044 	addi	r20,r20,1
  806768:	980f883a 	mov	r7,r19
  80676c:	0011883a 	mov	r8,zero
  806770:	0009883a 	mov	r4,zero
  806774:	81400017 	ldw	r5,0(r16)
  806778:	38c00017 	ldw	r3,0(r7)
  80677c:	84000104 	addi	r16,r16,4
  806780:	28bfffcc 	andi	r2,r5,65535
  806784:	2085883a 	add	r2,r4,r2
  806788:	11bfffcc 	andi	r6,r2,65535
  80678c:	193fffcc 	andi	r4,r3,65535
  806790:	1004d43a 	srli	r2,r2,16
  806794:	280ad43a 	srli	r5,r5,16
  806798:	2189c83a 	sub	r4,r4,r6
  80679c:	2209883a 	add	r4,r4,r8
  8067a0:	1806d43a 	srli	r3,r3,16
  8067a4:	288b883a 	add	r5,r5,r2
  8067a8:	200dd43a 	srai	r6,r4,16
  8067ac:	28bfffcc 	andi	r2,r5,65535
  8067b0:	1887c83a 	sub	r3,r3,r2
  8067b4:	1987883a 	add	r3,r3,r6
  8067b8:	3900000d 	sth	r4,0(r7)
  8067bc:	38c0008d 	sth	r3,2(r7)
  8067c0:	2808d43a 	srli	r4,r5,16
  8067c4:	39c00104 	addi	r7,r7,4
  8067c8:	1811d43a 	srai	r8,r3,16
  8067cc:	943fe92e 	bgeu	r18,r16,806774 <quorem+0x98>
  8067d0:	8c45883a 	add	r2,r17,r17
  8067d4:	1085883a 	add	r2,r2,r2
  8067d8:	9885883a 	add	r2,r19,r2
  8067dc:	10c00017 	ldw	r3,0(r2)
  8067e0:	18000b1e 	bne	r3,zero,806810 <quorem+0x134>
  8067e4:	113fff04 	addi	r4,r2,-4
  8067e8:	9900082e 	bgeu	r19,r4,80680c <quorem+0x130>
  8067ec:	10bfff17 	ldw	r2,-4(r2)
  8067f0:	10000326 	beq	r2,zero,806800 <quorem+0x124>
  8067f4:	00000506 	br	80680c <quorem+0x130>
  8067f8:	20800017 	ldw	r2,0(r4)
  8067fc:	1000031e 	bne	r2,zero,80680c <quorem+0x130>
  806800:	213fff04 	addi	r4,r4,-4
  806804:	8c7fffc4 	addi	r17,r17,-1
  806808:	993ffb36 	bltu	r19,r4,8067f8 <quorem+0x11c>
  80680c:	bc400415 	stw	r17,16(r23)
  806810:	a005883a 	mov	r2,r20
  806814:	dfc00917 	ldw	ra,36(sp)
  806818:	df000817 	ldw	fp,32(sp)
  80681c:	ddc00717 	ldw	r23,28(sp)
  806820:	dd800617 	ldw	r22,24(sp)
  806824:	dd400517 	ldw	r21,20(sp)
  806828:	dd000417 	ldw	r20,16(sp)
  80682c:	dcc00317 	ldw	r19,12(sp)
  806830:	dc800217 	ldw	r18,8(sp)
  806834:	dc400117 	ldw	r17,4(sp)
  806838:	dc000017 	ldw	r16,0(sp)
  80683c:	dec00a04 	addi	sp,sp,40
  806840:	f800283a 	ret
  806844:	980f883a 	mov	r7,r19
  806848:	8011883a 	mov	r8,r16
  80684c:	0013883a 	mov	r9,zero
  806850:	000d883a 	mov	r6,zero
  806854:	40c00017 	ldw	r3,0(r8)
  806858:	39000017 	ldw	r4,0(r7)
  80685c:	42000104 	addi	r8,r8,4
  806860:	18bfffcc 	andi	r2,r3,65535
  806864:	a085383a 	mul	r2,r20,r2
  806868:	1806d43a 	srli	r3,r3,16
  80686c:	217fffcc 	andi	r5,r4,65535
  806870:	3085883a 	add	r2,r6,r2
  806874:	11bfffcc 	andi	r6,r2,65535
  806878:	a0c7383a 	mul	r3,r20,r3
  80687c:	1004d43a 	srli	r2,r2,16
  806880:	298bc83a 	sub	r5,r5,r6
  806884:	2a4b883a 	add	r5,r5,r9
  806888:	2008d43a 	srli	r4,r4,16
  80688c:	1887883a 	add	r3,r3,r2
  806890:	280dd43a 	srai	r6,r5,16
  806894:	18bfffcc 	andi	r2,r3,65535
  806898:	2089c83a 	sub	r4,r4,r2
  80689c:	2189883a 	add	r4,r4,r6
  8068a0:	3900008d 	sth	r4,2(r7)
  8068a4:	3940000d 	sth	r5,0(r7)
  8068a8:	180cd43a 	srli	r6,r3,16
  8068ac:	39c00104 	addi	r7,r7,4
  8068b0:	2013d43a 	srai	r9,r4,16
  8068b4:	923fe72e 	bgeu	r18,r8,806854 <quorem+0x178>
  8068b8:	e03fa61e 	bne	fp,zero,806754 <quorem+0x78>
  8068bc:	b0ffff04 	addi	r3,r22,-4
  8068c0:	98c0082e 	bgeu	r19,r3,8068e4 <quorem+0x208>
  8068c4:	b0bfff17 	ldw	r2,-4(r22)
  8068c8:	10000326 	beq	r2,zero,8068d8 <quorem+0x1fc>
  8068cc:	00000506 	br	8068e4 <quorem+0x208>
  8068d0:	18800017 	ldw	r2,0(r3)
  8068d4:	1000031e 	bne	r2,zero,8068e4 <quorem+0x208>
  8068d8:	18ffff04 	addi	r3,r3,-4
  8068dc:	8c7fffc4 	addi	r17,r17,-1
  8068e0:	98fffb36 	bltu	r19,r3,8068d0 <quorem+0x1f4>
  8068e4:	bc400415 	stw	r17,16(r23)
  8068e8:	003f9a06 	br	806754 <quorem+0x78>
  8068ec:	0005883a 	mov	r2,zero
  8068f0:	003fc806 	br	806814 <quorem+0x138>

008068f4 <_dtoa_r>:
  8068f4:	22001017 	ldw	r8,64(r4)
  8068f8:	deffda04 	addi	sp,sp,-152
  8068fc:	dd402115 	stw	r21,132(sp)
  806900:	dd002015 	stw	r20,128(sp)
  806904:	dc801e15 	stw	r18,120(sp)
  806908:	dc401d15 	stw	r17,116(sp)
  80690c:	dfc02515 	stw	ra,148(sp)
  806910:	df002415 	stw	fp,144(sp)
  806914:	ddc02315 	stw	r23,140(sp)
  806918:	dd802215 	stw	r22,136(sp)
  80691c:	dcc01f15 	stw	r19,124(sp)
  806920:	dc001c15 	stw	r16,112(sp)
  806924:	d9001615 	stw	r4,88(sp)
  806928:	3023883a 	mov	r17,r6
  80692c:	2829883a 	mov	r20,r5
  806930:	d9c01715 	stw	r7,92(sp)
  806934:	dc802817 	ldw	r18,160(sp)
  806938:	302b883a 	mov	r21,r6
  80693c:	40000a26 	beq	r8,zero,806968 <_dtoa_r+0x74>
  806940:	20801117 	ldw	r2,68(r4)
  806944:	400b883a 	mov	r5,r8
  806948:	40800115 	stw	r2,4(r8)
  80694c:	20c01117 	ldw	r3,68(r4)
  806950:	00800044 	movi	r2,1
  806954:	10c4983a 	sll	r2,r2,r3
  806958:	40800215 	stw	r2,8(r8)
  80695c:	0809a880 	call	809a88 <_Bfree>
  806960:	d8c01617 	ldw	r3,88(sp)
  806964:	18001015 	stw	zero,64(r3)
  806968:	8800a316 	blt	r17,zero,806bf8 <_dtoa_r+0x304>
  80696c:	90000015 	stw	zero,0(r18)
  806970:	a8dffc2c 	andhi	r3,r21,32752
  806974:	009ffc34 	movhi	r2,32752
  806978:	18809126 	beq	r3,r2,806bc0 <_dtoa_r+0x2cc>
  80697c:	000d883a 	mov	r6,zero
  806980:	000f883a 	mov	r7,zero
  806984:	a009883a 	mov	r4,r20
  806988:	a80b883a 	mov	r5,r21
  80698c:	dd001215 	stw	r20,72(sp)
  806990:	dd401315 	stw	r21,76(sp)
  806994:	080c6440 	call	80c644 <__nedf2>
  806998:	1000171e 	bne	r2,zero,8069f8 <_dtoa_r+0x104>
  80699c:	d9802717 	ldw	r6,156(sp)
  8069a0:	00800044 	movi	r2,1
  8069a4:	30800015 	stw	r2,0(r6)
  8069a8:	d8802917 	ldw	r2,164(sp)
  8069ac:	10029b26 	beq	r2,zero,80741c <_dtoa_r+0xb28>
  8069b0:	d9002917 	ldw	r4,164(sp)
  8069b4:	00802234 	movhi	r2,136
  8069b8:	109d6d44 	addi	r2,r2,30133
  8069bc:	10ffffc4 	addi	r3,r2,-1
  8069c0:	20800015 	stw	r2,0(r4)
  8069c4:	1805883a 	mov	r2,r3
  8069c8:	dfc02517 	ldw	ra,148(sp)
  8069cc:	df002417 	ldw	fp,144(sp)
  8069d0:	ddc02317 	ldw	r23,140(sp)
  8069d4:	dd802217 	ldw	r22,136(sp)
  8069d8:	dd402117 	ldw	r21,132(sp)
  8069dc:	dd002017 	ldw	r20,128(sp)
  8069e0:	dcc01f17 	ldw	r19,124(sp)
  8069e4:	dc801e17 	ldw	r18,120(sp)
  8069e8:	dc401d17 	ldw	r17,116(sp)
  8069ec:	dc001c17 	ldw	r16,112(sp)
  8069f0:	dec02604 	addi	sp,sp,152
  8069f4:	f800283a 	ret
  8069f8:	d9001617 	ldw	r4,88(sp)
  8069fc:	d9401217 	ldw	r5,72(sp)
  806a00:	d8800104 	addi	r2,sp,4
  806a04:	a80d883a 	mov	r6,r21
  806a08:	d9c00204 	addi	r7,sp,8
  806a0c:	d8800015 	stw	r2,0(sp)
  806a10:	080a0c40 	call	80a0c4 <__d2b>
  806a14:	d8800715 	stw	r2,28(sp)
  806a18:	a804d53a 	srli	r2,r21,20
  806a1c:	1101ffcc 	andi	r4,r2,2047
  806a20:	20008626 	beq	r4,zero,806c3c <_dtoa_r+0x348>
  806a24:	d8c01217 	ldw	r3,72(sp)
  806a28:	00800434 	movhi	r2,16
  806a2c:	10bfffc4 	addi	r2,r2,-1
  806a30:	ddc00117 	ldw	r23,4(sp)
  806a34:	a884703a 	and	r2,r21,r2
  806a38:	1811883a 	mov	r8,r3
  806a3c:	124ffc34 	orhi	r9,r2,16368
  806a40:	25bf0044 	addi	r22,r4,-1023
  806a44:	d8000815 	stw	zero,32(sp)
  806a48:	0005883a 	mov	r2,zero
  806a4c:	00cffe34 	movhi	r3,16376
  806a50:	480b883a 	mov	r5,r9
  806a54:	4009883a 	mov	r4,r8
  806a58:	180f883a 	mov	r7,r3
  806a5c:	100d883a 	mov	r6,r2
  806a60:	08036680 	call	803668 <__subdf3>
  806a64:	0218dbf4 	movhi	r8,25455
  806a68:	4210d844 	addi	r8,r8,17249
  806a6c:	024ff4f4 	movhi	r9,16339
  806a70:	4a61e9c4 	addi	r9,r9,-30809
  806a74:	480f883a 	mov	r7,r9
  806a78:	400d883a 	mov	r6,r8
  806a7c:	180b883a 	mov	r5,r3
  806a80:	1009883a 	mov	r4,r2
  806a84:	080375c0 	call	80375c <__muldf3>
  806a88:	0222d874 	movhi	r8,35681
  806a8c:	42322cc4 	addi	r8,r8,-14157
  806a90:	024ff1f4 	movhi	r9,16327
  806a94:	4a628a04 	addi	r9,r9,-30168
  806a98:	480f883a 	mov	r7,r9
  806a9c:	400d883a 	mov	r6,r8
  806aa0:	180b883a 	mov	r5,r3
  806aa4:	1009883a 	mov	r4,r2
  806aa8:	08036e80 	call	8036e8 <__adddf3>
  806aac:	b009883a 	mov	r4,r22
  806ab0:	1021883a 	mov	r16,r2
  806ab4:	1823883a 	mov	r17,r3
  806ab8:	0803cb80 	call	803cb8 <__floatsidf>
  806abc:	021427f4 	movhi	r8,20639
  806ac0:	421e7ec4 	addi	r8,r8,31227
  806ac4:	024ff4f4 	movhi	r9,16339
  806ac8:	4a5104c4 	addi	r9,r9,17427
  806acc:	480f883a 	mov	r7,r9
  806ad0:	400d883a 	mov	r6,r8
  806ad4:	180b883a 	mov	r5,r3
  806ad8:	1009883a 	mov	r4,r2
  806adc:	080375c0 	call	80375c <__muldf3>
  806ae0:	180f883a 	mov	r7,r3
  806ae4:	880b883a 	mov	r5,r17
  806ae8:	100d883a 	mov	r6,r2
  806aec:	8009883a 	mov	r4,r16
  806af0:	08036e80 	call	8036e8 <__adddf3>
  806af4:	1009883a 	mov	r4,r2
  806af8:	180b883a 	mov	r5,r3
  806afc:	1021883a 	mov	r16,r2
  806b00:	1823883a 	mov	r17,r3
  806b04:	0803db00 	call	803db0 <__fixdfsi>
  806b08:	000d883a 	mov	r6,zero
  806b0c:	000f883a 	mov	r7,zero
  806b10:	8009883a 	mov	r4,r16
  806b14:	880b883a 	mov	r5,r17
  806b18:	d8800d15 	stw	r2,52(sp)
  806b1c:	080c6cc0 	call	80c6cc <__ltdf2>
  806b20:	10031716 	blt	r2,zero,807780 <_dtoa_r+0xe8c>
  806b24:	d8c00d17 	ldw	r3,52(sp)
  806b28:	00800584 	movi	r2,22
  806b2c:	10c1482e 	bgeu	r2,r3,807050 <_dtoa_r+0x75c>
  806b30:	01000044 	movi	r4,1
  806b34:	d9000c15 	stw	r4,48(sp)
  806b38:	bd85c83a 	sub	r2,r23,r22
  806b3c:	11bfffc4 	addi	r6,r2,-1
  806b40:	30030b16 	blt	r6,zero,807770 <_dtoa_r+0xe7c>
  806b44:	d9800a15 	stw	r6,40(sp)
  806b48:	d8001115 	stw	zero,68(sp)
  806b4c:	d8c00d17 	ldw	r3,52(sp)
  806b50:	1802ff16 	blt	r3,zero,807750 <_dtoa_r+0xe5c>
  806b54:	d9000a17 	ldw	r4,40(sp)
  806b58:	d8c00915 	stw	r3,36(sp)
  806b5c:	d8001015 	stw	zero,64(sp)
  806b60:	20c9883a 	add	r4,r4,r3
  806b64:	d9000a15 	stw	r4,40(sp)
  806b68:	d9001717 	ldw	r4,92(sp)
  806b6c:	00800244 	movi	r2,9
  806b70:	11004636 	bltu	r2,r4,806c8c <_dtoa_r+0x398>
  806b74:	00800144 	movi	r2,5
  806b78:	11020416 	blt	r2,r4,80738c <_dtoa_r+0xa98>
  806b7c:	04400044 	movi	r17,1
  806b80:	d8c01717 	ldw	r3,92(sp)
  806b84:	00800144 	movi	r2,5
  806b88:	10c1ed36 	bltu	r2,r3,807340 <_dtoa_r+0xa4c>
  806b8c:	18c5883a 	add	r2,r3,r3
  806b90:	1085883a 	add	r2,r2,r2
  806b94:	00c02034 	movhi	r3,128
  806b98:	18daea04 	addi	r3,r3,27560
  806b9c:	10c5883a 	add	r2,r2,r3
  806ba0:	11000017 	ldw	r4,0(r2)
  806ba4:	2000683a 	jmp	r4
  806ba8:	00806c94 	movui	r2,434
  806bac:	00806c94 	movui	r2,434
  806bb0:	00807694 	movui	r2,474
  806bb4:	0080766c 	andhi	r2,zero,473
  806bb8:	008076b0 	cmpltui	r2,zero,474
  806bbc:	008076bc 	xorhi	r2,zero,474
  806bc0:	d9002717 	ldw	r4,156(sp)
  806bc4:	0089c3c4 	movi	r2,9999
  806bc8:	20800015 	stw	r2,0(r4)
  806bcc:	a0001026 	beq	r20,zero,806c10 <_dtoa_r+0x31c>
  806bd0:	00c02234 	movhi	r3,136
  806bd4:	18dd7904 	addi	r3,r3,30180
  806bd8:	d9802917 	ldw	r6,164(sp)
  806bdc:	303f7926 	beq	r6,zero,8069c4 <_dtoa_r+0xd0>
  806be0:	188000c7 	ldb	r2,3(r3)
  806be4:	190000c4 	addi	r4,r3,3
  806be8:	1000101e 	bne	r2,zero,806c2c <_dtoa_r+0x338>
  806bec:	d8802917 	ldw	r2,164(sp)
  806bf0:	11000015 	stw	r4,0(r2)
  806bf4:	003f7306 	br	8069c4 <_dtoa_r+0xd0>
  806bf8:	00a00034 	movhi	r2,32768
  806bfc:	10bfffc4 	addi	r2,r2,-1
  806c00:	00c00044 	movi	r3,1
  806c04:	88aa703a 	and	r21,r17,r2
  806c08:	90c00015 	stw	r3,0(r18)
  806c0c:	003f5806 	br	806970 <_dtoa_r+0x7c>
  806c10:	00800434 	movhi	r2,16
  806c14:	10bfffc4 	addi	r2,r2,-1
  806c18:	a884703a 	and	r2,r21,r2
  806c1c:	103fec1e 	bne	r2,zero,806bd0 <_dtoa_r+0x2dc>
  806c20:	00c02234 	movhi	r3,136
  806c24:	18dd7604 	addi	r3,r3,30168
  806c28:	003feb06 	br	806bd8 <_dtoa_r+0x2e4>
  806c2c:	d8802917 	ldw	r2,164(sp)
  806c30:	19000204 	addi	r4,r3,8
  806c34:	11000015 	stw	r4,0(r2)
  806c38:	003f6206 	br	8069c4 <_dtoa_r+0xd0>
  806c3c:	ddc00117 	ldw	r23,4(sp)
  806c40:	d8800217 	ldw	r2,8(sp)
  806c44:	01000804 	movi	r4,32
  806c48:	b8c10c84 	addi	r3,r23,1074
  806c4c:	18a3883a 	add	r17,r3,r2
  806c50:	2441b80e 	bge	r4,r17,807334 <_dtoa_r+0xa40>
  806c54:	00c01004 	movi	r3,64
  806c58:	1c47c83a 	sub	r3,r3,r17
  806c5c:	88bff804 	addi	r2,r17,-32
  806c60:	a8c6983a 	sll	r3,r21,r3
  806c64:	a084d83a 	srl	r2,r20,r2
  806c68:	1888b03a 	or	r4,r3,r2
  806c6c:	080c7540 	call	80c754 <__floatunsidf>
  806c70:	1011883a 	mov	r8,r2
  806c74:	00bf8434 	movhi	r2,65040
  806c78:	01000044 	movi	r4,1
  806c7c:	10d3883a 	add	r9,r2,r3
  806c80:	8dbef344 	addi	r22,r17,-1075
  806c84:	d9000815 	stw	r4,32(sp)
  806c88:	003f6f06 	br	806a48 <_dtoa_r+0x154>
  806c8c:	d8001715 	stw	zero,92(sp)
  806c90:	04400044 	movi	r17,1
  806c94:	00bfffc4 	movi	r2,-1
  806c98:	00c00044 	movi	r3,1
  806c9c:	d8800e15 	stw	r2,56(sp)
  806ca0:	d8002615 	stw	zero,152(sp)
  806ca4:	d8800f15 	stw	r2,60(sp)
  806ca8:	d8c00b15 	stw	r3,44(sp)
  806cac:	1021883a 	mov	r16,r2
  806cb0:	d8801617 	ldw	r2,88(sp)
  806cb4:	10001115 	stw	zero,68(r2)
  806cb8:	d8801617 	ldw	r2,88(sp)
  806cbc:	11401117 	ldw	r5,68(r2)
  806cc0:	1009883a 	mov	r4,r2
  806cc4:	080a0080 	call	80a008 <_Balloc>
  806cc8:	d8c01617 	ldw	r3,88(sp)
  806ccc:	d8800515 	stw	r2,20(sp)
  806cd0:	18801015 	stw	r2,64(r3)
  806cd4:	00800384 	movi	r2,14
  806cd8:	14006836 	bltu	r2,r16,806e7c <_dtoa_r+0x588>
  806cdc:	8805003a 	cmpeq	r2,r17,zero
  806ce0:	1000661e 	bne	r2,zero,806e7c <_dtoa_r+0x588>
  806ce4:	d9000d17 	ldw	r4,52(sp)
  806ce8:	0102300e 	bge	zero,r4,8075ac <_dtoa_r+0xcb8>
  806cec:	208003cc 	andi	r2,r4,15
  806cf0:	100490fa 	slli	r2,r2,3
  806cf4:	2025d13a 	srai	r18,r4,4
  806cf8:	00c02234 	movhi	r3,136
  806cfc:	18dd8b04 	addi	r3,r3,30252
  806d00:	10c5883a 	add	r2,r2,r3
  806d04:	90c0040c 	andi	r3,r18,16
  806d08:	14000017 	ldw	r16,0(r2)
  806d0c:	14400117 	ldw	r17,4(r2)
  806d10:	18036a1e 	bne	r3,zero,807abc <_dtoa_r+0x11c8>
  806d14:	05800084 	movi	r22,2
  806d18:	90001026 	beq	r18,zero,806d5c <_dtoa_r+0x468>
  806d1c:	04c02234 	movhi	r19,136
  806d20:	9cddbd04 	addi	r19,r19,30452
  806d24:	9080004c 	andi	r2,r18,1
  806d28:	1005003a 	cmpeq	r2,r2,zero
  806d2c:	1000081e 	bne	r2,zero,806d50 <_dtoa_r+0x45c>
  806d30:	99800017 	ldw	r6,0(r19)
  806d34:	99c00117 	ldw	r7,4(r19)
  806d38:	880b883a 	mov	r5,r17
  806d3c:	8009883a 	mov	r4,r16
  806d40:	080375c0 	call	80375c <__muldf3>
  806d44:	1021883a 	mov	r16,r2
  806d48:	b5800044 	addi	r22,r22,1
  806d4c:	1823883a 	mov	r17,r3
  806d50:	9025d07a 	srai	r18,r18,1
  806d54:	9cc00204 	addi	r19,r19,8
  806d58:	903ff21e 	bne	r18,zero,806d24 <_dtoa_r+0x430>
  806d5c:	a80b883a 	mov	r5,r21
  806d60:	a009883a 	mov	r4,r20
  806d64:	880f883a 	mov	r7,r17
  806d68:	800d883a 	mov	r6,r16
  806d6c:	080c3ec0 	call	80c3ec <__divdf3>
  806d70:	1029883a 	mov	r20,r2
  806d74:	182b883a 	mov	r21,r3
  806d78:	d8c00c17 	ldw	r3,48(sp)
  806d7c:	1805003a 	cmpeq	r2,r3,zero
  806d80:	1000081e 	bne	r2,zero,806da4 <_dtoa_r+0x4b0>
  806d84:	0005883a 	mov	r2,zero
  806d88:	00cffc34 	movhi	r3,16368
  806d8c:	180f883a 	mov	r7,r3
  806d90:	a009883a 	mov	r4,r20
  806d94:	a80b883a 	mov	r5,r21
  806d98:	100d883a 	mov	r6,r2
  806d9c:	080c6cc0 	call	80c6cc <__ltdf2>
  806da0:	1003fe16 	blt	r2,zero,807d9c <_dtoa_r+0x14a8>
  806da4:	b009883a 	mov	r4,r22
  806da8:	0803cb80 	call	803cb8 <__floatsidf>
  806dac:	180b883a 	mov	r5,r3
  806db0:	1009883a 	mov	r4,r2
  806db4:	a00d883a 	mov	r6,r20
  806db8:	a80f883a 	mov	r7,r21
  806dbc:	080375c0 	call	80375c <__muldf3>
  806dc0:	0011883a 	mov	r8,zero
  806dc4:	02500734 	movhi	r9,16412
  806dc8:	1009883a 	mov	r4,r2
  806dcc:	180b883a 	mov	r5,r3
  806dd0:	480f883a 	mov	r7,r9
  806dd4:	400d883a 	mov	r6,r8
  806dd8:	08036e80 	call	8036e8 <__adddf3>
  806ddc:	d9000f17 	ldw	r4,60(sp)
  806de0:	102d883a 	mov	r22,r2
  806de4:	00bf3034 	movhi	r2,64704
  806de8:	18b9883a 	add	fp,r3,r2
  806dec:	e02f883a 	mov	r23,fp
  806df0:	20028f1e 	bne	r4,zero,807830 <_dtoa_r+0xf3c>
  806df4:	0005883a 	mov	r2,zero
  806df8:	00d00534 	movhi	r3,16404
  806dfc:	a009883a 	mov	r4,r20
  806e00:	a80b883a 	mov	r5,r21
  806e04:	180f883a 	mov	r7,r3
  806e08:	100d883a 	mov	r6,r2
  806e0c:	08036680 	call	803668 <__subdf3>
  806e10:	1009883a 	mov	r4,r2
  806e14:	e00f883a 	mov	r7,fp
  806e18:	180b883a 	mov	r5,r3
  806e1c:	b00d883a 	mov	r6,r22
  806e20:	1025883a 	mov	r18,r2
  806e24:	1827883a 	mov	r19,r3
  806e28:	0803ba80 	call	803ba8 <__gtdf2>
  806e2c:	00834f16 	blt	zero,r2,807b6c <_dtoa_r+0x1278>
  806e30:	e0e0003c 	xorhi	r3,fp,32768
  806e34:	9009883a 	mov	r4,r18
  806e38:	980b883a 	mov	r5,r19
  806e3c:	180f883a 	mov	r7,r3
  806e40:	b00d883a 	mov	r6,r22
  806e44:	080c6cc0 	call	80c6cc <__ltdf2>
  806e48:	1000080e 	bge	r2,zero,806e6c <_dtoa_r+0x578>
  806e4c:	0027883a 	mov	r19,zero
  806e50:	0025883a 	mov	r18,zero
  806e54:	d8802617 	ldw	r2,152(sp)
  806e58:	df000517 	ldw	fp,20(sp)
  806e5c:	d8000615 	stw	zero,24(sp)
  806e60:	0084303a 	nor	r2,zero,r2
  806e64:	d8800d15 	stw	r2,52(sp)
  806e68:	00019b06 	br	8074d8 <_dtoa_r+0xbe4>
  806e6c:	d9801217 	ldw	r6,72(sp)
  806e70:	d8801317 	ldw	r2,76(sp)
  806e74:	3029883a 	mov	r20,r6
  806e78:	102b883a 	mov	r21,r2
  806e7c:	d8c00217 	ldw	r3,8(sp)
  806e80:	18008516 	blt	r3,zero,807098 <_dtoa_r+0x7a4>
  806e84:	d9000d17 	ldw	r4,52(sp)
  806e88:	00800384 	movi	r2,14
  806e8c:	11008216 	blt	r2,r4,807098 <_dtoa_r+0x7a4>
  806e90:	200490fa 	slli	r2,r4,3
  806e94:	d9802617 	ldw	r6,152(sp)
  806e98:	00c02234 	movhi	r3,136
  806e9c:	18dd8b04 	addi	r3,r3,30252
  806ea0:	10c5883a 	add	r2,r2,r3
  806ea4:	14800017 	ldw	r18,0(r2)
  806ea8:	14c00117 	ldw	r19,4(r2)
  806eac:	30031e16 	blt	r6,zero,807b28 <_dtoa_r+0x1234>
  806eb0:	d9000517 	ldw	r4,20(sp)
  806eb4:	d8c00f17 	ldw	r3,60(sp)
  806eb8:	a823883a 	mov	r17,r21
  806ebc:	a021883a 	mov	r16,r20
  806ec0:	192b883a 	add	r21,r3,r4
  806ec4:	2039883a 	mov	fp,r4
  806ec8:	00000f06 	br	806f08 <_dtoa_r+0x614>
  806ecc:	0005883a 	mov	r2,zero
  806ed0:	00d00934 	movhi	r3,16420
  806ed4:	5009883a 	mov	r4,r10
  806ed8:	580b883a 	mov	r5,r11
  806edc:	180f883a 	mov	r7,r3
  806ee0:	100d883a 	mov	r6,r2
  806ee4:	080375c0 	call	80375c <__muldf3>
  806ee8:	180b883a 	mov	r5,r3
  806eec:	000d883a 	mov	r6,zero
  806ef0:	000f883a 	mov	r7,zero
  806ef4:	1009883a 	mov	r4,r2
  806ef8:	1021883a 	mov	r16,r2
  806efc:	1823883a 	mov	r17,r3
  806f00:	080c6440 	call	80c644 <__nedf2>
  806f04:	10004526 	beq	r2,zero,80701c <_dtoa_r+0x728>
  806f08:	900d883a 	mov	r6,r18
  806f0c:	980f883a 	mov	r7,r19
  806f10:	8009883a 	mov	r4,r16
  806f14:	880b883a 	mov	r5,r17
  806f18:	080c3ec0 	call	80c3ec <__divdf3>
  806f1c:	180b883a 	mov	r5,r3
  806f20:	1009883a 	mov	r4,r2
  806f24:	0803db00 	call	803db0 <__fixdfsi>
  806f28:	1009883a 	mov	r4,r2
  806f2c:	1029883a 	mov	r20,r2
  806f30:	0803cb80 	call	803cb8 <__floatsidf>
  806f34:	180f883a 	mov	r7,r3
  806f38:	9009883a 	mov	r4,r18
  806f3c:	980b883a 	mov	r5,r19
  806f40:	100d883a 	mov	r6,r2
  806f44:	080375c0 	call	80375c <__muldf3>
  806f48:	180f883a 	mov	r7,r3
  806f4c:	880b883a 	mov	r5,r17
  806f50:	8009883a 	mov	r4,r16
  806f54:	100d883a 	mov	r6,r2
  806f58:	08036680 	call	803668 <__subdf3>
  806f5c:	1015883a 	mov	r10,r2
  806f60:	a0800c04 	addi	r2,r20,48
  806f64:	e0800005 	stb	r2,0(fp)
  806f68:	e7000044 	addi	fp,fp,1
  806f6c:	1817883a 	mov	r11,r3
  806f70:	e57fd61e 	bne	fp,r21,806ecc <_dtoa_r+0x5d8>
  806f74:	500d883a 	mov	r6,r10
  806f78:	180f883a 	mov	r7,r3
  806f7c:	5009883a 	mov	r4,r10
  806f80:	180b883a 	mov	r5,r3
  806f84:	08036e80 	call	8036e8 <__adddf3>
  806f88:	100d883a 	mov	r6,r2
  806f8c:	9009883a 	mov	r4,r18
  806f90:	980b883a 	mov	r5,r19
  806f94:	180f883a 	mov	r7,r3
  806f98:	1021883a 	mov	r16,r2
  806f9c:	1823883a 	mov	r17,r3
  806fa0:	080c6cc0 	call	80c6cc <__ltdf2>
  806fa4:	10000816 	blt	r2,zero,806fc8 <_dtoa_r+0x6d4>
  806fa8:	980b883a 	mov	r5,r19
  806fac:	800d883a 	mov	r6,r16
  806fb0:	880f883a 	mov	r7,r17
  806fb4:	9009883a 	mov	r4,r18
  806fb8:	0803b200 	call	803b20 <__eqdf2>
  806fbc:	1000171e 	bne	r2,zero,80701c <_dtoa_r+0x728>
  806fc0:	a080004c 	andi	r2,r20,1
  806fc4:	10001526 	beq	r2,zero,80701c <_dtoa_r+0x728>
  806fc8:	d8800d17 	ldw	r2,52(sp)
  806fcc:	d8800415 	stw	r2,16(sp)
  806fd0:	e009883a 	mov	r4,fp
  806fd4:	213fffc4 	addi	r4,r4,-1
  806fd8:	20c00007 	ldb	r3,0(r4)
  806fdc:	00800e44 	movi	r2,57
  806fe0:	1880081e 	bne	r3,r2,807004 <_dtoa_r+0x710>
  806fe4:	d8800517 	ldw	r2,20(sp)
  806fe8:	113ffa1e 	bne	r2,r4,806fd4 <_dtoa_r+0x6e0>
  806fec:	d8c00417 	ldw	r3,16(sp)
  806ff0:	d9800517 	ldw	r6,20(sp)
  806ff4:	00800c04 	movi	r2,48
  806ff8:	18c00044 	addi	r3,r3,1
  806ffc:	d8c00415 	stw	r3,16(sp)
  807000:	30800005 	stb	r2,0(r6)
  807004:	20800003 	ldbu	r2,0(r4)
  807008:	d8c00417 	ldw	r3,16(sp)
  80700c:	27000044 	addi	fp,r4,1
  807010:	10800044 	addi	r2,r2,1
  807014:	d8c00d15 	stw	r3,52(sp)
  807018:	20800005 	stb	r2,0(r4)
  80701c:	d9001617 	ldw	r4,88(sp)
  807020:	d9400717 	ldw	r5,28(sp)
  807024:	0809a880 	call	809a88 <_Bfree>
  807028:	e0000005 	stb	zero,0(fp)
  80702c:	d9800d17 	ldw	r6,52(sp)
  807030:	d8c02717 	ldw	r3,156(sp)
  807034:	d9002917 	ldw	r4,164(sp)
  807038:	30800044 	addi	r2,r6,1
  80703c:	18800015 	stw	r2,0(r3)
  807040:	20029c26 	beq	r4,zero,807ab4 <_dtoa_r+0x11c0>
  807044:	d8c00517 	ldw	r3,20(sp)
  807048:	27000015 	stw	fp,0(r4)
  80704c:	003e5d06 	br	8069c4 <_dtoa_r+0xd0>
  807050:	d9800d17 	ldw	r6,52(sp)
  807054:	00c02234 	movhi	r3,136
  807058:	18dd8b04 	addi	r3,r3,30252
  80705c:	d9001217 	ldw	r4,72(sp)
  807060:	300490fa 	slli	r2,r6,3
  807064:	d9401317 	ldw	r5,76(sp)
  807068:	10c5883a 	add	r2,r2,r3
  80706c:	12000017 	ldw	r8,0(r2)
  807070:	12400117 	ldw	r9,4(r2)
  807074:	400d883a 	mov	r6,r8
  807078:	480f883a 	mov	r7,r9
  80707c:	080c6cc0 	call	80c6cc <__ltdf2>
  807080:	1000030e 	bge	r2,zero,807090 <_dtoa_r+0x79c>
  807084:	d8800d17 	ldw	r2,52(sp)
  807088:	10bfffc4 	addi	r2,r2,-1
  80708c:	d8800d15 	stw	r2,52(sp)
  807090:	d8000c15 	stw	zero,48(sp)
  807094:	003ea806 	br	806b38 <_dtoa_r+0x244>
  807098:	d9000b17 	ldw	r4,44(sp)
  80709c:	202cc03a 	cmpne	r22,r4,zero
  8070a0:	b000c71e 	bne	r22,zero,8073c0 <_dtoa_r+0xacc>
  8070a4:	dc001117 	ldw	r16,68(sp)
  8070a8:	dc801017 	ldw	r18,64(sp)
  8070ac:	0027883a 	mov	r19,zero
  8070b0:	04000b0e 	bge	zero,r16,8070e0 <_dtoa_r+0x7ec>
  8070b4:	d8c00a17 	ldw	r3,40(sp)
  8070b8:	00c0090e 	bge	zero,r3,8070e0 <_dtoa_r+0x7ec>
  8070bc:	8005883a 	mov	r2,r16
  8070c0:	1c011316 	blt	r3,r16,807510 <_dtoa_r+0xc1c>
  8070c4:	d9000a17 	ldw	r4,40(sp)
  8070c8:	d9801117 	ldw	r6,68(sp)
  8070cc:	80a1c83a 	sub	r16,r16,r2
  8070d0:	2089c83a 	sub	r4,r4,r2
  8070d4:	308dc83a 	sub	r6,r6,r2
  8070d8:	d9000a15 	stw	r4,40(sp)
  8070dc:	d9801115 	stw	r6,68(sp)
  8070e0:	d8801017 	ldw	r2,64(sp)
  8070e4:	0080150e 	bge	zero,r2,80713c <_dtoa_r+0x848>
  8070e8:	d8c00b17 	ldw	r3,44(sp)
  8070ec:	1805003a 	cmpeq	r2,r3,zero
  8070f0:	1001c91e 	bne	r2,zero,807818 <_dtoa_r+0xf24>
  8070f4:	04800e0e 	bge	zero,r18,807130 <_dtoa_r+0x83c>
  8070f8:	d9001617 	ldw	r4,88(sp)
  8070fc:	980b883a 	mov	r5,r19
  807100:	900d883a 	mov	r6,r18
  807104:	080a83c0 	call	80a83c <__pow5mult>
  807108:	d9001617 	ldw	r4,88(sp)
  80710c:	d9800717 	ldw	r6,28(sp)
  807110:	100b883a 	mov	r5,r2
  807114:	1027883a 	mov	r19,r2
  807118:	080a5180 	call	80a518 <__multiply>
  80711c:	d9001617 	ldw	r4,88(sp)
  807120:	d9400717 	ldw	r5,28(sp)
  807124:	1023883a 	mov	r17,r2
  807128:	0809a880 	call	809a88 <_Bfree>
  80712c:	dc400715 	stw	r17,28(sp)
  807130:	d9001017 	ldw	r4,64(sp)
  807134:	248dc83a 	sub	r6,r4,r18
  807138:	30010e1e 	bne	r6,zero,807574 <_dtoa_r+0xc80>
  80713c:	d9001617 	ldw	r4,88(sp)
  807140:	04400044 	movi	r17,1
  807144:	880b883a 	mov	r5,r17
  807148:	080a7000 	call	80a700 <__i2b>
  80714c:	d9800917 	ldw	r6,36(sp)
  807150:	1025883a 	mov	r18,r2
  807154:	0180040e 	bge	zero,r6,807168 <_dtoa_r+0x874>
  807158:	d9001617 	ldw	r4,88(sp)
  80715c:	100b883a 	mov	r5,r2
  807160:	080a83c0 	call	80a83c <__pow5mult>
  807164:	1025883a 	mov	r18,r2
  807168:	d8801717 	ldw	r2,92(sp)
  80716c:	8880f30e 	bge	r17,r2,80753c <_dtoa_r+0xc48>
  807170:	0023883a 	mov	r17,zero
  807174:	d9800917 	ldw	r6,36(sp)
  807178:	30019e1e 	bne	r6,zero,8077f4 <_dtoa_r+0xf00>
  80717c:	00c00044 	movi	r3,1
  807180:	d9000a17 	ldw	r4,40(sp)
  807184:	20c5883a 	add	r2,r4,r3
  807188:	10c007cc 	andi	r3,r2,31
  80718c:	1800841e 	bne	r3,zero,8073a0 <_dtoa_r+0xaac>
  807190:	00800704 	movi	r2,28
  807194:	d9000a17 	ldw	r4,40(sp)
  807198:	d9801117 	ldw	r6,68(sp)
  80719c:	80a1883a 	add	r16,r16,r2
  8071a0:	2089883a 	add	r4,r4,r2
  8071a4:	308d883a 	add	r6,r6,r2
  8071a8:	d9000a15 	stw	r4,40(sp)
  8071ac:	d9801115 	stw	r6,68(sp)
  8071b0:	d8801117 	ldw	r2,68(sp)
  8071b4:	0080050e 	bge	zero,r2,8071cc <_dtoa_r+0x8d8>
  8071b8:	d9400717 	ldw	r5,28(sp)
  8071bc:	d9001617 	ldw	r4,88(sp)
  8071c0:	100d883a 	mov	r6,r2
  8071c4:	080a3cc0 	call	80a3cc <__lshift>
  8071c8:	d8800715 	stw	r2,28(sp)
  8071cc:	d8c00a17 	ldw	r3,40(sp)
  8071d0:	00c0050e 	bge	zero,r3,8071e8 <_dtoa_r+0x8f4>
  8071d4:	d9001617 	ldw	r4,88(sp)
  8071d8:	900b883a 	mov	r5,r18
  8071dc:	180d883a 	mov	r6,r3
  8071e0:	080a3cc0 	call	80a3cc <__lshift>
  8071e4:	1025883a 	mov	r18,r2
  8071e8:	d9000c17 	ldw	r4,48(sp)
  8071ec:	2005003a 	cmpeq	r2,r4,zero
  8071f0:	10016f26 	beq	r2,zero,8077b0 <_dtoa_r+0xebc>
  8071f4:	d9000f17 	ldw	r4,60(sp)
  8071f8:	0102170e 	bge	zero,r4,807a58 <_dtoa_r+0x1164>
  8071fc:	d9800b17 	ldw	r6,44(sp)
  807200:	3005003a 	cmpeq	r2,r6,zero
  807204:	1000881e 	bne	r2,zero,807428 <_dtoa_r+0xb34>
  807208:	0400050e 	bge	zero,r16,807220 <_dtoa_r+0x92c>
  80720c:	d9001617 	ldw	r4,88(sp)
  807210:	980b883a 	mov	r5,r19
  807214:	800d883a 	mov	r6,r16
  807218:	080a3cc0 	call	80a3cc <__lshift>
  80721c:	1027883a 	mov	r19,r2
  807220:	8804c03a 	cmpne	r2,r17,zero
  807224:	1002541e 	bne	r2,zero,807b78 <_dtoa_r+0x1284>
  807228:	980b883a 	mov	r5,r19
  80722c:	dd800517 	ldw	r22,20(sp)
  807230:	dcc00615 	stw	r19,24(sp)
  807234:	a700004c 	andi	fp,r20,1
  807238:	2827883a 	mov	r19,r5
  80723c:	d9000717 	ldw	r4,28(sp)
  807240:	900b883a 	mov	r5,r18
  807244:	08066dc0 	call	8066dc <quorem>
  807248:	d9000717 	ldw	r4,28(sp)
  80724c:	d9400617 	ldw	r5,24(sp)
  807250:	1023883a 	mov	r17,r2
  807254:	8dc00c04 	addi	r23,r17,48
  807258:	0809be40 	call	809be4 <__mcmp>
  80725c:	d9001617 	ldw	r4,88(sp)
  807260:	900b883a 	mov	r5,r18
  807264:	980d883a 	mov	r6,r19
  807268:	1029883a 	mov	r20,r2
  80726c:	080a2400 	call	80a240 <__mdiff>
  807270:	102b883a 	mov	r21,r2
  807274:	10800317 	ldw	r2,12(r2)
  807278:	1001281e 	bne	r2,zero,80771c <_dtoa_r+0xe28>
  80727c:	d9000717 	ldw	r4,28(sp)
  807280:	a80b883a 	mov	r5,r21
  807284:	0809be40 	call	809be4 <__mcmp>
  807288:	d9001617 	ldw	r4,88(sp)
  80728c:	1021883a 	mov	r16,r2
  807290:	a80b883a 	mov	r5,r21
  807294:	0809a880 	call	809a88 <_Bfree>
  807298:	8000041e 	bne	r16,zero,8072ac <_dtoa_r+0x9b8>
  80729c:	d8801717 	ldw	r2,92(sp)
  8072a0:	1000021e 	bne	r2,zero,8072ac <_dtoa_r+0x9b8>
  8072a4:	e004c03a 	cmpne	r2,fp,zero
  8072a8:	10011726 	beq	r2,zero,807708 <_dtoa_r+0xe14>
  8072ac:	a0010616 	blt	r20,zero,8076c8 <_dtoa_r+0xdd4>
  8072b0:	a000041e 	bne	r20,zero,8072c4 <_dtoa_r+0x9d0>
  8072b4:	d8c01717 	ldw	r3,92(sp)
  8072b8:	1800021e 	bne	r3,zero,8072c4 <_dtoa_r+0x9d0>
  8072bc:	e004c03a 	cmpne	r2,fp,zero
  8072c0:	10010126 	beq	r2,zero,8076c8 <_dtoa_r+0xdd4>
  8072c4:	04023d16 	blt	zero,r16,807bbc <_dtoa_r+0x12c8>
  8072c8:	b5c00005 	stb	r23,0(r22)
  8072cc:	d9800517 	ldw	r6,20(sp)
  8072d0:	d9000f17 	ldw	r4,60(sp)
  8072d4:	b5800044 	addi	r22,r22,1
  8072d8:	3105883a 	add	r2,r6,r4
  8072dc:	b0806526 	beq	r22,r2,807474 <_dtoa_r+0xb80>
  8072e0:	d9400717 	ldw	r5,28(sp)
  8072e4:	d9001617 	ldw	r4,88(sp)
  8072e8:	01800284 	movi	r6,10
  8072ec:	000f883a 	mov	r7,zero
  8072f0:	080a73c0 	call	80a73c <__multadd>
  8072f4:	d8800715 	stw	r2,28(sp)
  8072f8:	d8800617 	ldw	r2,24(sp)
  8072fc:	14c10c26 	beq	r2,r19,807730 <_dtoa_r+0xe3c>
  807300:	d9400617 	ldw	r5,24(sp)
  807304:	d9001617 	ldw	r4,88(sp)
  807308:	01800284 	movi	r6,10
  80730c:	000f883a 	mov	r7,zero
  807310:	080a73c0 	call	80a73c <__multadd>
  807314:	d9001617 	ldw	r4,88(sp)
  807318:	980b883a 	mov	r5,r19
  80731c:	01800284 	movi	r6,10
  807320:	000f883a 	mov	r7,zero
  807324:	d8800615 	stw	r2,24(sp)
  807328:	080a73c0 	call	80a73c <__multadd>
  80732c:	1027883a 	mov	r19,r2
  807330:	003fc206 	br	80723c <_dtoa_r+0x948>
  807334:	2445c83a 	sub	r2,r4,r17
  807338:	a088983a 	sll	r4,r20,r2
  80733c:	003e4b06 	br	806c6c <_dtoa_r+0x378>
  807340:	01bfffc4 	movi	r6,-1
  807344:	00800044 	movi	r2,1
  807348:	d9800e15 	stw	r6,56(sp)
  80734c:	d9800f15 	stw	r6,60(sp)
  807350:	d8800b15 	stw	r2,44(sp)
  807354:	d8c01617 	ldw	r3,88(sp)
  807358:	008005c4 	movi	r2,23
  80735c:	18001115 	stw	zero,68(r3)
  807360:	1580082e 	bgeu	r2,r22,807384 <_dtoa_r+0xa90>
  807364:	00c00104 	movi	r3,4
  807368:	0009883a 	mov	r4,zero
  80736c:	18c7883a 	add	r3,r3,r3
  807370:	18800504 	addi	r2,r3,20
  807374:	21000044 	addi	r4,r4,1
  807378:	b0bffc2e 	bgeu	r22,r2,80736c <_dtoa_r+0xa78>
  80737c:	d9801617 	ldw	r6,88(sp)
  807380:	31001115 	stw	r4,68(r6)
  807384:	dc000f17 	ldw	r16,60(sp)
  807388:	003e4b06 	br	806cb8 <_dtoa_r+0x3c4>
  80738c:	d9801717 	ldw	r6,92(sp)
  807390:	0023883a 	mov	r17,zero
  807394:	31bfff04 	addi	r6,r6,-4
  807398:	d9801715 	stw	r6,92(sp)
  80739c:	003df806 	br	806b80 <_dtoa_r+0x28c>
  8073a0:	00800804 	movi	r2,32
  8073a4:	10c9c83a 	sub	r4,r2,r3
  8073a8:	00c00104 	movi	r3,4
  8073ac:	19005a16 	blt	r3,r4,807518 <_dtoa_r+0xc24>
  8073b0:	008000c4 	movi	r2,3
  8073b4:	113f7e16 	blt	r2,r4,8071b0 <_dtoa_r+0x8bc>
  8073b8:	20800704 	addi	r2,r4,28
  8073bc:	003f7506 	br	807194 <_dtoa_r+0x8a0>
  8073c0:	d9801717 	ldw	r6,92(sp)
  8073c4:	00800044 	movi	r2,1
  8073c8:	1180a10e 	bge	r2,r6,807650 <_dtoa_r+0xd5c>
  8073cc:	d9800f17 	ldw	r6,60(sp)
  8073d0:	d8c01017 	ldw	r3,64(sp)
  8073d4:	30bfffc4 	addi	r2,r6,-1
  8073d8:	1881c616 	blt	r3,r2,807af4 <_dtoa_r+0x1200>
  8073dc:	18a5c83a 	sub	r18,r3,r2
  8073e0:	d8800f17 	ldw	r2,60(sp)
  8073e4:	10026216 	blt	r2,zero,807d70 <_dtoa_r+0x147c>
  8073e8:	dc001117 	ldw	r16,68(sp)
  8073ec:	1007883a 	mov	r3,r2
  8073f0:	d9800a17 	ldw	r6,40(sp)
  8073f4:	d8801117 	ldw	r2,68(sp)
  8073f8:	d9001617 	ldw	r4,88(sp)
  8073fc:	30cd883a 	add	r6,r6,r3
  807400:	10c5883a 	add	r2,r2,r3
  807404:	01400044 	movi	r5,1
  807408:	d9800a15 	stw	r6,40(sp)
  80740c:	d8801115 	stw	r2,68(sp)
  807410:	080a7000 	call	80a700 <__i2b>
  807414:	1027883a 	mov	r19,r2
  807418:	003f2506 	br	8070b0 <_dtoa_r+0x7bc>
  80741c:	00c02234 	movhi	r3,136
  807420:	18dd6d04 	addi	r3,r3,30132
  807424:	003d6706 	br	8069c4 <_dtoa_r+0xd0>
  807428:	dd800517 	ldw	r22,20(sp)
  80742c:	04000044 	movi	r16,1
  807430:	00000706 	br	807450 <_dtoa_r+0xb5c>
  807434:	d9400717 	ldw	r5,28(sp)
  807438:	d9001617 	ldw	r4,88(sp)
  80743c:	01800284 	movi	r6,10
  807440:	000f883a 	mov	r7,zero
  807444:	080a73c0 	call	80a73c <__multadd>
  807448:	d8800715 	stw	r2,28(sp)
  80744c:	84000044 	addi	r16,r16,1
  807450:	d9000717 	ldw	r4,28(sp)
  807454:	900b883a 	mov	r5,r18
  807458:	08066dc0 	call	8066dc <quorem>
  80745c:	15c00c04 	addi	r23,r2,48
  807460:	b5c00005 	stb	r23,0(r22)
  807464:	d8c00f17 	ldw	r3,60(sp)
  807468:	b5800044 	addi	r22,r22,1
  80746c:	80fff116 	blt	r16,r3,807434 <_dtoa_r+0xb40>
  807470:	d8000615 	stw	zero,24(sp)
  807474:	d9400717 	ldw	r5,28(sp)
  807478:	d9001617 	ldw	r4,88(sp)
  80747c:	01800044 	movi	r6,1
  807480:	080a3cc0 	call	80a3cc <__lshift>
  807484:	1009883a 	mov	r4,r2
  807488:	900b883a 	mov	r5,r18
  80748c:	d8800715 	stw	r2,28(sp)
  807490:	0809be40 	call	809be4 <__mcmp>
  807494:	00803c0e 	bge	zero,r2,807588 <_dtoa_r+0xc94>
  807498:	b009883a 	mov	r4,r22
  80749c:	213fffc4 	addi	r4,r4,-1
  8074a0:	21400003 	ldbu	r5,0(r4)
  8074a4:	00800e44 	movi	r2,57
  8074a8:	28c03fcc 	andi	r3,r5,255
  8074ac:	18c0201c 	xori	r3,r3,128
  8074b0:	18ffe004 	addi	r3,r3,-128
  8074b4:	1881981e 	bne	r3,r2,807b18 <_dtoa_r+0x1224>
  8074b8:	d9800517 	ldw	r6,20(sp)
  8074bc:	21bff71e 	bne	r4,r6,80749c <_dtoa_r+0xba8>
  8074c0:	d8800d17 	ldw	r2,52(sp)
  8074c4:	37000044 	addi	fp,r6,1
  8074c8:	10800044 	addi	r2,r2,1
  8074cc:	d8800d15 	stw	r2,52(sp)
  8074d0:	00800c44 	movi	r2,49
  8074d4:	30800005 	stb	r2,0(r6)
  8074d8:	d9001617 	ldw	r4,88(sp)
  8074dc:	900b883a 	mov	r5,r18
  8074e0:	0809a880 	call	809a88 <_Bfree>
  8074e4:	983ecd26 	beq	r19,zero,80701c <_dtoa_r+0x728>
  8074e8:	d8c00617 	ldw	r3,24(sp)
  8074ec:	18000426 	beq	r3,zero,807500 <_dtoa_r+0xc0c>
  8074f0:	1cc00326 	beq	r3,r19,807500 <_dtoa_r+0xc0c>
  8074f4:	d9001617 	ldw	r4,88(sp)
  8074f8:	180b883a 	mov	r5,r3
  8074fc:	0809a880 	call	809a88 <_Bfree>
  807500:	d9001617 	ldw	r4,88(sp)
  807504:	980b883a 	mov	r5,r19
  807508:	0809a880 	call	809a88 <_Bfree>
  80750c:	003ec306 	br	80701c <_dtoa_r+0x728>
  807510:	1805883a 	mov	r2,r3
  807514:	003eeb06 	br	8070c4 <_dtoa_r+0x7d0>
  807518:	d9800a17 	ldw	r6,40(sp)
  80751c:	d8c01117 	ldw	r3,68(sp)
  807520:	20bfff04 	addi	r2,r4,-4
  807524:	308d883a 	add	r6,r6,r2
  807528:	1887883a 	add	r3,r3,r2
  80752c:	80a1883a 	add	r16,r16,r2
  807530:	d9800a15 	stw	r6,40(sp)
  807534:	d8c01115 	stw	r3,68(sp)
  807538:	003f1d06 	br	8071b0 <_dtoa_r+0x8bc>
  80753c:	a03f0c1e 	bne	r20,zero,807170 <_dtoa_r+0x87c>
  807540:	00800434 	movhi	r2,16
  807544:	10bfffc4 	addi	r2,r2,-1
  807548:	a884703a 	and	r2,r21,r2
  80754c:	103f081e 	bne	r2,zero,807170 <_dtoa_r+0x87c>
  807550:	a89ffc2c 	andhi	r2,r21,32752
  807554:	103f0626 	beq	r2,zero,807170 <_dtoa_r+0x87c>
  807558:	d8c01117 	ldw	r3,68(sp)
  80755c:	d9000a17 	ldw	r4,40(sp)
  807560:	18c00044 	addi	r3,r3,1
  807564:	21000044 	addi	r4,r4,1
  807568:	d8c01115 	stw	r3,68(sp)
  80756c:	d9000a15 	stw	r4,40(sp)
  807570:	003f0006 	br	807174 <_dtoa_r+0x880>
  807574:	d9400717 	ldw	r5,28(sp)
  807578:	d9001617 	ldw	r4,88(sp)
  80757c:	080a83c0 	call	80a83c <__pow5mult>
  807580:	d8800715 	stw	r2,28(sp)
  807584:	003eed06 	br	80713c <_dtoa_r+0x848>
  807588:	1000021e 	bne	r2,zero,807594 <_dtoa_r+0xca0>
  80758c:	b880004c 	andi	r2,r23,1
  807590:	103fc11e 	bne	r2,zero,807498 <_dtoa_r+0xba4>
  807594:	b5bfffc4 	addi	r22,r22,-1
  807598:	b0c00007 	ldb	r3,0(r22)
  80759c:	00800c04 	movi	r2,48
  8075a0:	18bffc26 	beq	r3,r2,807594 <_dtoa_r+0xca0>
  8075a4:	b7000044 	addi	fp,r22,1
  8075a8:	003fcb06 	br	8074d8 <_dtoa_r+0xbe4>
  8075ac:	d9800d17 	ldw	r6,52(sp)
  8075b0:	018fc83a 	sub	r7,zero,r6
  8075b4:	3801f726 	beq	r7,zero,807d94 <_dtoa_r+0x14a0>
  8075b8:	398003cc 	andi	r6,r7,15
  8075bc:	300c90fa 	slli	r6,r6,3
  8075c0:	01402234 	movhi	r5,136
  8075c4:	295d8b04 	addi	r5,r5,30252
  8075c8:	d9001217 	ldw	r4,72(sp)
  8075cc:	314d883a 	add	r6,r6,r5
  8075d0:	30c00117 	ldw	r3,4(r6)
  8075d4:	30800017 	ldw	r2,0(r6)
  8075d8:	d9401317 	ldw	r5,76(sp)
  8075dc:	3821d13a 	srai	r16,r7,4
  8075e0:	100d883a 	mov	r6,r2
  8075e4:	180f883a 	mov	r7,r3
  8075e8:	080375c0 	call	80375c <__muldf3>
  8075ec:	1011883a 	mov	r8,r2
  8075f0:	1813883a 	mov	r9,r3
  8075f4:	1029883a 	mov	r20,r2
  8075f8:	182b883a 	mov	r21,r3
  8075fc:	8001e526 	beq	r16,zero,807d94 <_dtoa_r+0x14a0>
  807600:	05800084 	movi	r22,2
  807604:	04402234 	movhi	r17,136
  807608:	8c5dbd04 	addi	r17,r17,30452
  80760c:	8080004c 	andi	r2,r16,1
  807610:	1005003a 	cmpeq	r2,r2,zero
  807614:	1000081e 	bne	r2,zero,807638 <_dtoa_r+0xd44>
  807618:	89800017 	ldw	r6,0(r17)
  80761c:	89c00117 	ldw	r7,4(r17)
  807620:	480b883a 	mov	r5,r9
  807624:	4009883a 	mov	r4,r8
  807628:	080375c0 	call	80375c <__muldf3>
  80762c:	1011883a 	mov	r8,r2
  807630:	b5800044 	addi	r22,r22,1
  807634:	1813883a 	mov	r9,r3
  807638:	8021d07a 	srai	r16,r16,1
  80763c:	8c400204 	addi	r17,r17,8
  807640:	803ff21e 	bne	r16,zero,80760c <_dtoa_r+0xd18>
  807644:	4029883a 	mov	r20,r8
  807648:	482b883a 	mov	r21,r9
  80764c:	003dca06 	br	806d78 <_dtoa_r+0x484>
  807650:	d9000817 	ldw	r4,32(sp)
  807654:	2005003a 	cmpeq	r2,r4,zero
  807658:	1001f61e 	bne	r2,zero,807e34 <_dtoa_r+0x1540>
  80765c:	dc001117 	ldw	r16,68(sp)
  807660:	dc801017 	ldw	r18,64(sp)
  807664:	18c10cc4 	addi	r3,r3,1075
  807668:	003f6106 	br	8073f0 <_dtoa_r+0xafc>
  80766c:	d8000b15 	stw	zero,44(sp)
  807670:	d9802617 	ldw	r6,152(sp)
  807674:	d8c00d17 	ldw	r3,52(sp)
  807678:	30800044 	addi	r2,r6,1
  80767c:	18ad883a 	add	r22,r3,r2
  807680:	b13fffc4 	addi	r4,r22,-1
  807684:	d9000e15 	stw	r4,56(sp)
  807688:	0581f60e 	bge	zero,r22,807e64 <_dtoa_r+0x1570>
  80768c:	dd800f15 	stw	r22,60(sp)
  807690:	003f3006 	br	807354 <_dtoa_r+0xa60>
  807694:	d8000b15 	stw	zero,44(sp)
  807698:	d9002617 	ldw	r4,152(sp)
  80769c:	0101eb0e 	bge	zero,r4,807e4c <_dtoa_r+0x1558>
  8076a0:	202d883a 	mov	r22,r4
  8076a4:	d9000e15 	stw	r4,56(sp)
  8076a8:	d9000f15 	stw	r4,60(sp)
  8076ac:	003f2906 	br	807354 <_dtoa_r+0xa60>
  8076b0:	01800044 	movi	r6,1
  8076b4:	d9800b15 	stw	r6,44(sp)
  8076b8:	003ff706 	br	807698 <_dtoa_r+0xda4>
  8076bc:	01000044 	movi	r4,1
  8076c0:	d9000b15 	stw	r4,44(sp)
  8076c4:	003fea06 	br	807670 <_dtoa_r+0xd7c>
  8076c8:	04000c0e 	bge	zero,r16,8076fc <_dtoa_r+0xe08>
  8076cc:	d9400717 	ldw	r5,28(sp)
  8076d0:	d9001617 	ldw	r4,88(sp)
  8076d4:	01800044 	movi	r6,1
  8076d8:	080a3cc0 	call	80a3cc <__lshift>
  8076dc:	1009883a 	mov	r4,r2
  8076e0:	900b883a 	mov	r5,r18
  8076e4:	d8800715 	stw	r2,28(sp)
  8076e8:	0809be40 	call	809be4 <__mcmp>
  8076ec:	0081e00e 	bge	zero,r2,807e70 <_dtoa_r+0x157c>
  8076f0:	bdc00044 	addi	r23,r23,1
  8076f4:	00800e84 	movi	r2,58
  8076f8:	b881a226 	beq	r23,r2,807d84 <_dtoa_r+0x1490>
  8076fc:	b7000044 	addi	fp,r22,1
  807700:	b5c00005 	stb	r23,0(r22)
  807704:	003f7406 	br	8074d8 <_dtoa_r+0xbe4>
  807708:	00800e44 	movi	r2,57
  80770c:	b8819d26 	beq	r23,r2,807d84 <_dtoa_r+0x1490>
  807710:	053ffa0e 	bge	zero,r20,8076fc <_dtoa_r+0xe08>
  807714:	8dc00c44 	addi	r23,r17,49
  807718:	003ff806 	br	8076fc <_dtoa_r+0xe08>
  80771c:	d9001617 	ldw	r4,88(sp)
  807720:	a80b883a 	mov	r5,r21
  807724:	04000044 	movi	r16,1
  807728:	0809a880 	call	809a88 <_Bfree>
  80772c:	003edf06 	br	8072ac <_dtoa_r+0x9b8>
  807730:	d9001617 	ldw	r4,88(sp)
  807734:	980b883a 	mov	r5,r19
  807738:	01800284 	movi	r6,10
  80773c:	000f883a 	mov	r7,zero
  807740:	080a73c0 	call	80a73c <__multadd>
  807744:	1027883a 	mov	r19,r2
  807748:	d8800615 	stw	r2,24(sp)
  80774c:	003ebb06 	br	80723c <_dtoa_r+0x948>
  807750:	d9801117 	ldw	r6,68(sp)
  807754:	d8800d17 	ldw	r2,52(sp)
  807758:	d8000915 	stw	zero,36(sp)
  80775c:	308dc83a 	sub	r6,r6,r2
  807760:	0087c83a 	sub	r3,zero,r2
  807764:	d9801115 	stw	r6,68(sp)
  807768:	d8c01015 	stw	r3,64(sp)
  80776c:	003cfe06 	br	806b68 <_dtoa_r+0x274>
  807770:	018dc83a 	sub	r6,zero,r6
  807774:	d9801115 	stw	r6,68(sp)
  807778:	d8000a15 	stw	zero,40(sp)
  80777c:	003cf306 	br	806b4c <_dtoa_r+0x258>
  807780:	d9000d17 	ldw	r4,52(sp)
  807784:	0803cb80 	call	803cb8 <__floatsidf>
  807788:	880b883a 	mov	r5,r17
  80778c:	8009883a 	mov	r4,r16
  807790:	180f883a 	mov	r7,r3
  807794:	100d883a 	mov	r6,r2
  807798:	080c6440 	call	80c644 <__nedf2>
  80779c:	103ce126 	beq	r2,zero,806b24 <_dtoa_r+0x230>
  8077a0:	d9800d17 	ldw	r6,52(sp)
  8077a4:	31bfffc4 	addi	r6,r6,-1
  8077a8:	d9800d15 	stw	r6,52(sp)
  8077ac:	003cdd06 	br	806b24 <_dtoa_r+0x230>
  8077b0:	d9000717 	ldw	r4,28(sp)
  8077b4:	900b883a 	mov	r5,r18
  8077b8:	0809be40 	call	809be4 <__mcmp>
  8077bc:	103e8d0e 	bge	r2,zero,8071f4 <_dtoa_r+0x900>
  8077c0:	d9400717 	ldw	r5,28(sp)
  8077c4:	d9001617 	ldw	r4,88(sp)
  8077c8:	01800284 	movi	r6,10
  8077cc:	000f883a 	mov	r7,zero
  8077d0:	080a73c0 	call	80a73c <__multadd>
  8077d4:	d9800d17 	ldw	r6,52(sp)
  8077d8:	d8800715 	stw	r2,28(sp)
  8077dc:	31bfffc4 	addi	r6,r6,-1
  8077e0:	d9800d15 	stw	r6,52(sp)
  8077e4:	b001a71e 	bne	r22,zero,807e84 <_dtoa_r+0x1590>
  8077e8:	d8800e17 	ldw	r2,56(sp)
  8077ec:	d8800f15 	stw	r2,60(sp)
  8077f0:	003e8006 	br	8071f4 <_dtoa_r+0x900>
  8077f4:	90800417 	ldw	r2,16(r18)
  8077f8:	1085883a 	add	r2,r2,r2
  8077fc:	1085883a 	add	r2,r2,r2
  807800:	1485883a 	add	r2,r2,r18
  807804:	11000417 	ldw	r4,16(r2)
  807808:	0809ab00 	call	809ab0 <__hi0bits>
  80780c:	00c00804 	movi	r3,32
  807810:	1887c83a 	sub	r3,r3,r2
  807814:	003e5a06 	br	807180 <_dtoa_r+0x88c>
  807818:	d9400717 	ldw	r5,28(sp)
  80781c:	d9801017 	ldw	r6,64(sp)
  807820:	d9001617 	ldw	r4,88(sp)
  807824:	080a83c0 	call	80a83c <__pow5mult>
  807828:	d8800715 	stw	r2,28(sp)
  80782c:	003e4306 	br	80713c <_dtoa_r+0x848>
  807830:	d9800f17 	ldw	r6,60(sp)
  807834:	d8800d17 	ldw	r2,52(sp)
  807838:	d9800315 	stw	r6,12(sp)
  80783c:	d8800415 	stw	r2,16(sp)
  807840:	d8c00b17 	ldw	r3,44(sp)
  807844:	1805003a 	cmpeq	r2,r3,zero
  807848:	1000e21e 	bne	r2,zero,807bd4 <_dtoa_r+0x12e0>
  80784c:	d9000317 	ldw	r4,12(sp)
  807850:	0005883a 	mov	r2,zero
  807854:	00cff834 	movhi	r3,16352
  807858:	200c90fa 	slli	r6,r4,3
  80785c:	01002234 	movhi	r4,136
  807860:	211d8b04 	addi	r4,r4,30252
  807864:	180b883a 	mov	r5,r3
  807868:	310d883a 	add	r6,r6,r4
  80786c:	327fff17 	ldw	r9,-4(r6)
  807870:	323ffe17 	ldw	r8,-8(r6)
  807874:	1009883a 	mov	r4,r2
  807878:	480f883a 	mov	r7,r9
  80787c:	400d883a 	mov	r6,r8
  807880:	080c3ec0 	call	80c3ec <__divdf3>
  807884:	180b883a 	mov	r5,r3
  807888:	b00d883a 	mov	r6,r22
  80788c:	b80f883a 	mov	r7,r23
  807890:	1009883a 	mov	r4,r2
  807894:	08036680 	call	803668 <__subdf3>
  807898:	a80b883a 	mov	r5,r21
  80789c:	a009883a 	mov	r4,r20
  8078a0:	d8c01915 	stw	r3,100(sp)
  8078a4:	d8801815 	stw	r2,96(sp)
  8078a8:	0803db00 	call	803db0 <__fixdfsi>
  8078ac:	1009883a 	mov	r4,r2
  8078b0:	1027883a 	mov	r19,r2
  8078b4:	0803cb80 	call	803cb8 <__floatsidf>
  8078b8:	a80b883a 	mov	r5,r21
  8078bc:	a009883a 	mov	r4,r20
  8078c0:	180f883a 	mov	r7,r3
  8078c4:	100d883a 	mov	r6,r2
  8078c8:	08036680 	call	803668 <__subdf3>
  8078cc:	d9801817 	ldw	r6,96(sp)
  8078d0:	1823883a 	mov	r17,r3
  8078d4:	d8801415 	stw	r2,80(sp)
  8078d8:	302d883a 	mov	r22,r6
  8078dc:	d9800517 	ldw	r6,20(sp)
  8078e0:	9cc00c04 	addi	r19,r19,48
  8078e4:	dc401515 	stw	r17,84(sp)
  8078e8:	d8c01917 	ldw	r3,100(sp)
  8078ec:	34c00005 	stb	r19,0(r6)
  8078f0:	d8800517 	ldw	r2,20(sp)
  8078f4:	d9401917 	ldw	r5,100(sp)
  8078f8:	d9801417 	ldw	r6,80(sp)
  8078fc:	b009883a 	mov	r4,r22
  807900:	880f883a 	mov	r7,r17
  807904:	182f883a 	mov	r23,r3
  807908:	17000044 	addi	fp,r2,1
  80790c:	0803ba80 	call	803ba8 <__gtdf2>
  807910:	00804e16 	blt	zero,r2,807a4c <_dtoa_r+0x1158>
  807914:	d9801417 	ldw	r6,80(sp)
  807918:	0005883a 	mov	r2,zero
  80791c:	00cffc34 	movhi	r3,16368
  807920:	180b883a 	mov	r5,r3
  807924:	880f883a 	mov	r7,r17
  807928:	1009883a 	mov	r4,r2
  80792c:	08036680 	call	803668 <__subdf3>
  807930:	d9401917 	ldw	r5,100(sp)
  807934:	180f883a 	mov	r7,r3
  807938:	b009883a 	mov	r4,r22
  80793c:	100d883a 	mov	r6,r2
  807940:	0803ba80 	call	803ba8 <__gtdf2>
  807944:	00bda216 	blt	zero,r2,806fd0 <_dtoa_r+0x6dc>
  807948:	d8c00317 	ldw	r3,12(sp)
  80794c:	00800044 	movi	r2,1
  807950:	10c01216 	blt	r2,r3,80799c <_dtoa_r+0x10a8>
  807954:	003d4506 	br	806e6c <_dtoa_r+0x578>
  807958:	d9801417 	ldw	r6,80(sp)
  80795c:	0005883a 	mov	r2,zero
  807960:	00cffc34 	movhi	r3,16368
  807964:	180b883a 	mov	r5,r3
  807968:	880f883a 	mov	r7,r17
  80796c:	1009883a 	mov	r4,r2
  807970:	08036680 	call	803668 <__subdf3>
  807974:	d9c01b17 	ldw	r7,108(sp)
  807978:	180b883a 	mov	r5,r3
  80797c:	1009883a 	mov	r4,r2
  807980:	b00d883a 	mov	r6,r22
  807984:	080c6cc0 	call	80c6cc <__ltdf2>
  807988:	103d9116 	blt	r2,zero,806fd0 <_dtoa_r+0x6dc>
  80798c:	d9800517 	ldw	r6,20(sp)
  807990:	d9000317 	ldw	r4,12(sp)
  807994:	3105883a 	add	r2,r6,r4
  807998:	e0bd3426 	beq	fp,r2,806e6c <_dtoa_r+0x578>
  80799c:	04500934 	movhi	r17,16420
  8079a0:	0021883a 	mov	r16,zero
  8079a4:	b80b883a 	mov	r5,r23
  8079a8:	b009883a 	mov	r4,r22
  8079ac:	800d883a 	mov	r6,r16
  8079b0:	880f883a 	mov	r7,r17
  8079b4:	080375c0 	call	80375c <__muldf3>
  8079b8:	d9401517 	ldw	r5,84(sp)
  8079bc:	d9001417 	ldw	r4,80(sp)
  8079c0:	880f883a 	mov	r7,r17
  8079c4:	000d883a 	mov	r6,zero
  8079c8:	d8801a15 	stw	r2,104(sp)
  8079cc:	d8c01b15 	stw	r3,108(sp)
  8079d0:	080375c0 	call	80375c <__muldf3>
  8079d4:	180b883a 	mov	r5,r3
  8079d8:	1009883a 	mov	r4,r2
  8079dc:	1823883a 	mov	r17,r3
  8079e0:	1021883a 	mov	r16,r2
  8079e4:	0803db00 	call	803db0 <__fixdfsi>
  8079e8:	1009883a 	mov	r4,r2
  8079ec:	102b883a 	mov	r21,r2
  8079f0:	0803cb80 	call	803cb8 <__floatsidf>
  8079f4:	880b883a 	mov	r5,r17
  8079f8:	8009883a 	mov	r4,r16
  8079fc:	180f883a 	mov	r7,r3
  807a00:	100d883a 	mov	r6,r2
  807a04:	08036680 	call	803668 <__subdf3>
  807a08:	1021883a 	mov	r16,r2
  807a0c:	d9001b17 	ldw	r4,108(sp)
  807a10:	1823883a 	mov	r17,r3
  807a14:	dc001415 	stw	r16,80(sp)
  807a18:	ad400c04 	addi	r21,r21,48
  807a1c:	dc401515 	stw	r17,84(sp)
  807a20:	d8801a17 	ldw	r2,104(sp)
  807a24:	e5400005 	stb	r21,0(fp)
  807a28:	202f883a 	mov	r23,r4
  807a2c:	d9c01b17 	ldw	r7,108(sp)
  807a30:	d9001417 	ldw	r4,80(sp)
  807a34:	880b883a 	mov	r5,r17
  807a38:	100d883a 	mov	r6,r2
  807a3c:	102d883a 	mov	r22,r2
  807a40:	e7000044 	addi	fp,fp,1
  807a44:	080c6cc0 	call	80c6cc <__ltdf2>
  807a48:	103fc30e 	bge	r2,zero,807958 <_dtoa_r+0x1064>
  807a4c:	d9000417 	ldw	r4,16(sp)
  807a50:	d9000d15 	stw	r4,52(sp)
  807a54:	003d7106 	br	80701c <_dtoa_r+0x728>
  807a58:	d9801717 	ldw	r6,92(sp)
  807a5c:	00800084 	movi	r2,2
  807a60:	11bde60e 	bge	r2,r6,8071fc <_dtoa_r+0x908>
  807a64:	203cfb1e 	bne	r4,zero,806e54 <_dtoa_r+0x560>
  807a68:	d9001617 	ldw	r4,88(sp)
  807a6c:	900b883a 	mov	r5,r18
  807a70:	01800144 	movi	r6,5
  807a74:	000f883a 	mov	r7,zero
  807a78:	080a73c0 	call	80a73c <__multadd>
  807a7c:	d9000717 	ldw	r4,28(sp)
  807a80:	100b883a 	mov	r5,r2
  807a84:	1025883a 	mov	r18,r2
  807a88:	0809be40 	call	809be4 <__mcmp>
  807a8c:	00bcf10e 	bge	zero,r2,806e54 <_dtoa_r+0x560>
  807a90:	d8c00d17 	ldw	r3,52(sp)
  807a94:	d9000517 	ldw	r4,20(sp)
  807a98:	d8000615 	stw	zero,24(sp)
  807a9c:	18c00044 	addi	r3,r3,1
  807aa0:	d8c00d15 	stw	r3,52(sp)
  807aa4:	00800c44 	movi	r2,49
  807aa8:	27000044 	addi	fp,r4,1
  807aac:	20800005 	stb	r2,0(r4)
  807ab0:	003e8906 	br	8074d8 <_dtoa_r+0xbe4>
  807ab4:	d8c00517 	ldw	r3,20(sp)
  807ab8:	003bc206 	br	8069c4 <_dtoa_r+0xd0>
  807abc:	01802234 	movhi	r6,136
  807ac0:	319dbd04 	addi	r6,r6,30452
  807ac4:	30c00917 	ldw	r3,36(r6)
  807ac8:	30800817 	ldw	r2,32(r6)
  807acc:	d9001217 	ldw	r4,72(sp)
  807ad0:	d9401317 	ldw	r5,76(sp)
  807ad4:	180f883a 	mov	r7,r3
  807ad8:	100d883a 	mov	r6,r2
  807adc:	080c3ec0 	call	80c3ec <__divdf3>
  807ae0:	948003cc 	andi	r18,r18,15
  807ae4:	058000c4 	movi	r22,3
  807ae8:	1029883a 	mov	r20,r2
  807aec:	182b883a 	mov	r21,r3
  807af0:	003c8906 	br	806d18 <_dtoa_r+0x424>
  807af4:	d9001017 	ldw	r4,64(sp)
  807af8:	d9800917 	ldw	r6,36(sp)
  807afc:	0025883a 	mov	r18,zero
  807b00:	1105c83a 	sub	r2,r2,r4
  807b04:	2089883a 	add	r4,r4,r2
  807b08:	308d883a 	add	r6,r6,r2
  807b0c:	d9001015 	stw	r4,64(sp)
  807b10:	d9800915 	stw	r6,36(sp)
  807b14:	003e3206 	br	8073e0 <_dtoa_r+0xaec>
  807b18:	28800044 	addi	r2,r5,1
  807b1c:	27000044 	addi	fp,r4,1
  807b20:	20800005 	stb	r2,0(r4)
  807b24:	003e6c06 	br	8074d8 <_dtoa_r+0xbe4>
  807b28:	d8800f17 	ldw	r2,60(sp)
  807b2c:	00bce016 	blt	zero,r2,806eb0 <_dtoa_r+0x5bc>
  807b30:	d9800f17 	ldw	r6,60(sp)
  807b34:	303cc51e 	bne	r6,zero,806e4c <_dtoa_r+0x558>
  807b38:	0005883a 	mov	r2,zero
  807b3c:	00d00534 	movhi	r3,16404
  807b40:	980b883a 	mov	r5,r19
  807b44:	180f883a 	mov	r7,r3
  807b48:	9009883a 	mov	r4,r18
  807b4c:	100d883a 	mov	r6,r2
  807b50:	080375c0 	call	80375c <__muldf3>
  807b54:	180b883a 	mov	r5,r3
  807b58:	a80f883a 	mov	r7,r21
  807b5c:	1009883a 	mov	r4,r2
  807b60:	a00d883a 	mov	r6,r20
  807b64:	0803c300 	call	803c30 <__gedf2>
  807b68:	103cb80e 	bge	r2,zero,806e4c <_dtoa_r+0x558>
  807b6c:	0027883a 	mov	r19,zero
  807b70:	0025883a 	mov	r18,zero
  807b74:	003fc606 	br	807a90 <_dtoa_r+0x119c>
  807b78:	99400117 	ldw	r5,4(r19)
  807b7c:	d9001617 	ldw	r4,88(sp)
  807b80:	080a0080 	call	80a008 <_Balloc>
  807b84:	99800417 	ldw	r6,16(r19)
  807b88:	11000304 	addi	r4,r2,12
  807b8c:	99400304 	addi	r5,r19,12
  807b90:	318d883a 	add	r6,r6,r6
  807b94:	318d883a 	add	r6,r6,r6
  807b98:	31800204 	addi	r6,r6,8
  807b9c:	1023883a 	mov	r17,r2
  807ba0:	08098700 	call	809870 <memcpy>
  807ba4:	d9001617 	ldw	r4,88(sp)
  807ba8:	880b883a 	mov	r5,r17
  807bac:	01800044 	movi	r6,1
  807bb0:	080a3cc0 	call	80a3cc <__lshift>
  807bb4:	100b883a 	mov	r5,r2
  807bb8:	003d9c06 	br	80722c <_dtoa_r+0x938>
  807bbc:	00800e44 	movi	r2,57
  807bc0:	b8807026 	beq	r23,r2,807d84 <_dtoa_r+0x1490>
  807bc4:	b8800044 	addi	r2,r23,1
  807bc8:	b7000044 	addi	fp,r22,1
  807bcc:	b0800005 	stb	r2,0(r22)
  807bd0:	003e4106 	br	8074d8 <_dtoa_r+0xbe4>
  807bd4:	d8800317 	ldw	r2,12(sp)
  807bd8:	01802234 	movhi	r6,136
  807bdc:	319d8b04 	addi	r6,r6,30252
  807be0:	b009883a 	mov	r4,r22
  807be4:	100e90fa 	slli	r7,r2,3
  807be8:	b80b883a 	mov	r5,r23
  807bec:	398f883a 	add	r7,r7,r6
  807bf0:	38bffe17 	ldw	r2,-8(r7)
  807bf4:	d9800517 	ldw	r6,20(sp)
  807bf8:	38ffff17 	ldw	r3,-4(r7)
  807bfc:	37000044 	addi	fp,r6,1
  807c00:	180f883a 	mov	r7,r3
  807c04:	100d883a 	mov	r6,r2
  807c08:	080375c0 	call	80375c <__muldf3>
  807c0c:	a80b883a 	mov	r5,r21
  807c10:	a009883a 	mov	r4,r20
  807c14:	182f883a 	mov	r23,r3
  807c18:	102d883a 	mov	r22,r2
  807c1c:	0803db00 	call	803db0 <__fixdfsi>
  807c20:	1009883a 	mov	r4,r2
  807c24:	1027883a 	mov	r19,r2
  807c28:	0803cb80 	call	803cb8 <__floatsidf>
  807c2c:	a80b883a 	mov	r5,r21
  807c30:	a009883a 	mov	r4,r20
  807c34:	180f883a 	mov	r7,r3
  807c38:	100d883a 	mov	r6,r2
  807c3c:	08036680 	call	803668 <__subdf3>
  807c40:	180b883a 	mov	r5,r3
  807c44:	d8c00517 	ldw	r3,20(sp)
  807c48:	9cc00c04 	addi	r19,r19,48
  807c4c:	1009883a 	mov	r4,r2
  807c50:	1cc00005 	stb	r19,0(r3)
  807c54:	2021883a 	mov	r16,r4
  807c58:	d9000317 	ldw	r4,12(sp)
  807c5c:	00800044 	movi	r2,1
  807c60:	2823883a 	mov	r17,r5
  807c64:	20802226 	beq	r4,r2,807cf0 <_dtoa_r+0x13fc>
  807c68:	1029883a 	mov	r20,r2
  807c6c:	0005883a 	mov	r2,zero
  807c70:	00d00934 	movhi	r3,16420
  807c74:	180f883a 	mov	r7,r3
  807c78:	100d883a 	mov	r6,r2
  807c7c:	880b883a 	mov	r5,r17
  807c80:	8009883a 	mov	r4,r16
  807c84:	080375c0 	call	80375c <__muldf3>
  807c88:	180b883a 	mov	r5,r3
  807c8c:	1009883a 	mov	r4,r2
  807c90:	1823883a 	mov	r17,r3
  807c94:	1021883a 	mov	r16,r2
  807c98:	0803db00 	call	803db0 <__fixdfsi>
  807c9c:	1009883a 	mov	r4,r2
  807ca0:	102b883a 	mov	r21,r2
  807ca4:	0803cb80 	call	803cb8 <__floatsidf>
  807ca8:	880b883a 	mov	r5,r17
  807cac:	8009883a 	mov	r4,r16
  807cb0:	180f883a 	mov	r7,r3
  807cb4:	100d883a 	mov	r6,r2
  807cb8:	08036680 	call	803668 <__subdf3>
  807cbc:	180b883a 	mov	r5,r3
  807cc0:	d8c00517 	ldw	r3,20(sp)
  807cc4:	1009883a 	mov	r4,r2
  807cc8:	ad400c04 	addi	r21,r21,48
  807ccc:	1d05883a 	add	r2,r3,r20
  807cd0:	15400005 	stb	r21,0(r2)
  807cd4:	2021883a 	mov	r16,r4
  807cd8:	d9000317 	ldw	r4,12(sp)
  807cdc:	a5000044 	addi	r20,r20,1
  807ce0:	2823883a 	mov	r17,r5
  807ce4:	a13fe11e 	bne	r20,r4,807c6c <_dtoa_r+0x1378>
  807ce8:	e505883a 	add	r2,fp,r20
  807cec:	173fffc4 	addi	fp,r2,-1
  807cf0:	0025883a 	mov	r18,zero
  807cf4:	04cff834 	movhi	r19,16352
  807cf8:	b009883a 	mov	r4,r22
  807cfc:	b80b883a 	mov	r5,r23
  807d00:	900d883a 	mov	r6,r18
  807d04:	980f883a 	mov	r7,r19
  807d08:	08036e80 	call	8036e8 <__adddf3>
  807d0c:	180b883a 	mov	r5,r3
  807d10:	1009883a 	mov	r4,r2
  807d14:	800d883a 	mov	r6,r16
  807d18:	880f883a 	mov	r7,r17
  807d1c:	080c6cc0 	call	80c6cc <__ltdf2>
  807d20:	103cab16 	blt	r2,zero,806fd0 <_dtoa_r+0x6dc>
  807d24:	0009883a 	mov	r4,zero
  807d28:	980b883a 	mov	r5,r19
  807d2c:	b80f883a 	mov	r7,r23
  807d30:	b00d883a 	mov	r6,r22
  807d34:	08036680 	call	803668 <__subdf3>
  807d38:	180b883a 	mov	r5,r3
  807d3c:	880f883a 	mov	r7,r17
  807d40:	1009883a 	mov	r4,r2
  807d44:	800d883a 	mov	r6,r16
  807d48:	0803ba80 	call	803ba8 <__gtdf2>
  807d4c:	00bc470e 	bge	zero,r2,806e6c <_dtoa_r+0x578>
  807d50:	00c00c04 	movi	r3,48
  807d54:	e73fffc4 	addi	fp,fp,-1
  807d58:	e0800007 	ldb	r2,0(fp)
  807d5c:	10fffd26 	beq	r2,r3,807d54 <_dtoa_r+0x1460>
  807d60:	d9800417 	ldw	r6,16(sp)
  807d64:	e7000044 	addi	fp,fp,1
  807d68:	d9800d15 	stw	r6,52(sp)
  807d6c:	003cab06 	br	80701c <_dtoa_r+0x728>
  807d70:	d8c00f17 	ldw	r3,60(sp)
  807d74:	d9001117 	ldw	r4,68(sp)
  807d78:	20e1c83a 	sub	r16,r4,r3
  807d7c:	0007883a 	mov	r3,zero
  807d80:	003d9b06 	br	8073f0 <_dtoa_r+0xafc>
  807d84:	00800e44 	movi	r2,57
  807d88:	b0800005 	stb	r2,0(r22)
  807d8c:	b5800044 	addi	r22,r22,1
  807d90:	003dc106 	br	807498 <_dtoa_r+0xba4>
  807d94:	05800084 	movi	r22,2
  807d98:	003bf706 	br	806d78 <_dtoa_r+0x484>
  807d9c:	d9000f17 	ldw	r4,60(sp)
  807da0:	013c000e 	bge	zero,r4,806da4 <_dtoa_r+0x4b0>
  807da4:	d9800e17 	ldw	r6,56(sp)
  807da8:	01bc300e 	bge	zero,r6,806e6c <_dtoa_r+0x578>
  807dac:	0005883a 	mov	r2,zero
  807db0:	00d00934 	movhi	r3,16420
  807db4:	a80b883a 	mov	r5,r21
  807db8:	180f883a 	mov	r7,r3
  807dbc:	a009883a 	mov	r4,r20
  807dc0:	100d883a 	mov	r6,r2
  807dc4:	080375c0 	call	80375c <__muldf3>
  807dc8:	b1000044 	addi	r4,r22,1
  807dcc:	1021883a 	mov	r16,r2
  807dd0:	1823883a 	mov	r17,r3
  807dd4:	0803cb80 	call	803cb8 <__floatsidf>
  807dd8:	880b883a 	mov	r5,r17
  807ddc:	8009883a 	mov	r4,r16
  807de0:	180f883a 	mov	r7,r3
  807de4:	100d883a 	mov	r6,r2
  807de8:	080375c0 	call	80375c <__muldf3>
  807dec:	0011883a 	mov	r8,zero
  807df0:	02500734 	movhi	r9,16412
  807df4:	180b883a 	mov	r5,r3
  807df8:	480f883a 	mov	r7,r9
  807dfc:	1009883a 	mov	r4,r2
  807e00:	400d883a 	mov	r6,r8
  807e04:	08036e80 	call	8036e8 <__adddf3>
  807e08:	102d883a 	mov	r22,r2
  807e0c:	00bf3034 	movhi	r2,64704
  807e10:	10ef883a 	add	r23,r2,r3
  807e14:	d8800d17 	ldw	r2,52(sp)
  807e18:	d8c00e17 	ldw	r3,56(sp)
  807e1c:	8029883a 	mov	r20,r16
  807e20:	10bfffc4 	addi	r2,r2,-1
  807e24:	882b883a 	mov	r21,r17
  807e28:	d8800415 	stw	r2,16(sp)
  807e2c:	d8c00315 	stw	r3,12(sp)
  807e30:	003e8306 	br	807840 <_dtoa_r+0xf4c>
  807e34:	d8800117 	ldw	r2,4(sp)
  807e38:	dc001117 	ldw	r16,68(sp)
  807e3c:	dc801017 	ldw	r18,64(sp)
  807e40:	00c00d84 	movi	r3,54
  807e44:	1887c83a 	sub	r3,r3,r2
  807e48:	003d6906 	br	8073f0 <_dtoa_r+0xafc>
  807e4c:	01800044 	movi	r6,1
  807e50:	3021883a 	mov	r16,r6
  807e54:	d9800f15 	stw	r6,60(sp)
  807e58:	d9802615 	stw	r6,152(sp)
  807e5c:	d9800e15 	stw	r6,56(sp)
  807e60:	003b9306 	br	806cb0 <_dtoa_r+0x3bc>
  807e64:	b021883a 	mov	r16,r22
  807e68:	dd800f15 	stw	r22,60(sp)
  807e6c:	003b9006 	br	806cb0 <_dtoa_r+0x3bc>
  807e70:	103e221e 	bne	r2,zero,8076fc <_dtoa_r+0xe08>
  807e74:	b880004c 	andi	r2,r23,1
  807e78:	1005003a 	cmpeq	r2,r2,zero
  807e7c:	103e1f1e 	bne	r2,zero,8076fc <_dtoa_r+0xe08>
  807e80:	003e1b06 	br	8076f0 <_dtoa_r+0xdfc>
  807e84:	d9001617 	ldw	r4,88(sp)
  807e88:	980b883a 	mov	r5,r19
  807e8c:	01800284 	movi	r6,10
  807e90:	000f883a 	mov	r7,zero
  807e94:	080a73c0 	call	80a73c <__multadd>
  807e98:	d8c00e17 	ldw	r3,56(sp)
  807e9c:	1027883a 	mov	r19,r2
  807ea0:	d8c00f15 	stw	r3,60(sp)
  807ea4:	003cd306 	br	8071f4 <_dtoa_r+0x900>

00807ea8 <_fflush_r>:
  807ea8:	defffb04 	addi	sp,sp,-20
  807eac:	dcc00315 	stw	r19,12(sp)
  807eb0:	dc800215 	stw	r18,8(sp)
  807eb4:	dfc00415 	stw	ra,16(sp)
  807eb8:	dc400115 	stw	r17,4(sp)
  807ebc:	dc000015 	stw	r16,0(sp)
  807ec0:	2027883a 	mov	r19,r4
  807ec4:	2825883a 	mov	r18,r5
  807ec8:	20000226 	beq	r4,zero,807ed4 <_fflush_r+0x2c>
  807ecc:	20800e17 	ldw	r2,56(r4)
  807ed0:	10005626 	beq	r2,zero,80802c <_fflush_r+0x184>
  807ed4:	9100030b 	ldhu	r4,12(r18)
  807ed8:	20ffffcc 	andi	r3,r4,65535
  807edc:	18e0001c 	xori	r3,r3,32768
  807ee0:	18e00004 	addi	r3,r3,-32768
  807ee4:	1880020c 	andi	r2,r3,8
  807ee8:	1000261e 	bne	r2,zero,807f84 <_fflush_r+0xdc>
  807eec:	90c00117 	ldw	r3,4(r18)
  807ef0:	20820014 	ori	r2,r4,2048
  807ef4:	9080030d 	sth	r2,12(r18)
  807ef8:	1009883a 	mov	r4,r2
  807efc:	00c0400e 	bge	zero,r3,808000 <_fflush_r+0x158>
  807f00:	92000a17 	ldw	r8,40(r18)
  807f04:	40004026 	beq	r8,zero,808008 <_fflush_r+0x160>
  807f08:	2084000c 	andi	r2,r4,4096
  807f0c:	10005326 	beq	r2,zero,80805c <_fflush_r+0x1b4>
  807f10:	94001417 	ldw	r16,80(r18)
  807f14:	9080030b 	ldhu	r2,12(r18)
  807f18:	1080010c 	andi	r2,r2,4
  807f1c:	1000481e 	bne	r2,zero,808040 <_fflush_r+0x198>
  807f20:	91400717 	ldw	r5,28(r18)
  807f24:	9809883a 	mov	r4,r19
  807f28:	800d883a 	mov	r6,r16
  807f2c:	000f883a 	mov	r7,zero
  807f30:	403ee83a 	callr	r8
  807f34:	8080261e 	bne	r16,r2,807fd0 <_fflush_r+0x128>
  807f38:	9080030b 	ldhu	r2,12(r18)
  807f3c:	91000417 	ldw	r4,16(r18)
  807f40:	90000115 	stw	zero,4(r18)
  807f44:	10bdffcc 	andi	r2,r2,63487
  807f48:	10ffffcc 	andi	r3,r2,65535
  807f4c:	18c4000c 	andi	r3,r3,4096
  807f50:	9080030d 	sth	r2,12(r18)
  807f54:	91000015 	stw	r4,0(r18)
  807f58:	18002b26 	beq	r3,zero,808008 <_fflush_r+0x160>
  807f5c:	0007883a 	mov	r3,zero
  807f60:	1805883a 	mov	r2,r3
  807f64:	94001415 	stw	r16,80(r18)
  807f68:	dfc00417 	ldw	ra,16(sp)
  807f6c:	dcc00317 	ldw	r19,12(sp)
  807f70:	dc800217 	ldw	r18,8(sp)
  807f74:	dc400117 	ldw	r17,4(sp)
  807f78:	dc000017 	ldw	r16,0(sp)
  807f7c:	dec00504 	addi	sp,sp,20
  807f80:	f800283a 	ret
  807f84:	94400417 	ldw	r17,16(r18)
  807f88:	88001f26 	beq	r17,zero,808008 <_fflush_r+0x160>
  807f8c:	90800017 	ldw	r2,0(r18)
  807f90:	18c000cc 	andi	r3,r3,3
  807f94:	94400015 	stw	r17,0(r18)
  807f98:	1461c83a 	sub	r16,r2,r17
  807f9c:	18002526 	beq	r3,zero,808034 <_fflush_r+0x18c>
  807fa0:	0005883a 	mov	r2,zero
  807fa4:	90800215 	stw	r2,8(r18)
  807fa8:	0400170e 	bge	zero,r16,808008 <_fflush_r+0x160>
  807fac:	90c00917 	ldw	r3,36(r18)
  807fb0:	91400717 	ldw	r5,28(r18)
  807fb4:	880d883a 	mov	r6,r17
  807fb8:	800f883a 	mov	r7,r16
  807fbc:	9809883a 	mov	r4,r19
  807fc0:	183ee83a 	callr	r3
  807fc4:	88a3883a 	add	r17,r17,r2
  807fc8:	80a1c83a 	sub	r16,r16,r2
  807fcc:	00bff616 	blt	zero,r2,807fa8 <_fflush_r+0x100>
  807fd0:	9080030b 	ldhu	r2,12(r18)
  807fd4:	00ffffc4 	movi	r3,-1
  807fd8:	10801014 	ori	r2,r2,64
  807fdc:	9080030d 	sth	r2,12(r18)
  807fe0:	1805883a 	mov	r2,r3
  807fe4:	dfc00417 	ldw	ra,16(sp)
  807fe8:	dcc00317 	ldw	r19,12(sp)
  807fec:	dc800217 	ldw	r18,8(sp)
  807ff0:	dc400117 	ldw	r17,4(sp)
  807ff4:	dc000017 	ldw	r16,0(sp)
  807ff8:	dec00504 	addi	sp,sp,20
  807ffc:	f800283a 	ret
  808000:	90800f17 	ldw	r2,60(r18)
  808004:	00bfbe16 	blt	zero,r2,807f00 <_fflush_r+0x58>
  808008:	0007883a 	mov	r3,zero
  80800c:	1805883a 	mov	r2,r3
  808010:	dfc00417 	ldw	ra,16(sp)
  808014:	dcc00317 	ldw	r19,12(sp)
  808018:	dc800217 	ldw	r18,8(sp)
  80801c:	dc400117 	ldw	r17,4(sp)
  808020:	dc000017 	ldw	r16,0(sp)
  808024:	dec00504 	addi	sp,sp,20
  808028:	f800283a 	ret
  80802c:	08081400 	call	808140 <__sinit>
  808030:	003fa806 	br	807ed4 <_fflush_r+0x2c>
  808034:	90800517 	ldw	r2,20(r18)
  808038:	90800215 	stw	r2,8(r18)
  80803c:	003fda06 	br	807fa8 <_fflush_r+0x100>
  808040:	90800117 	ldw	r2,4(r18)
  808044:	90c00c17 	ldw	r3,48(r18)
  808048:	80a1c83a 	sub	r16,r16,r2
  80804c:	183fb426 	beq	r3,zero,807f20 <_fflush_r+0x78>
  808050:	90800f17 	ldw	r2,60(r18)
  808054:	80a1c83a 	sub	r16,r16,r2
  808058:	003fb106 	br	807f20 <_fflush_r+0x78>
  80805c:	91400717 	ldw	r5,28(r18)
  808060:	9809883a 	mov	r4,r19
  808064:	000d883a 	mov	r6,zero
  808068:	01c00044 	movi	r7,1
  80806c:	403ee83a 	callr	r8
  808070:	1021883a 	mov	r16,r2
  808074:	00bfffc4 	movi	r2,-1
  808078:	80800226 	beq	r16,r2,808084 <_fflush_r+0x1dc>
  80807c:	92000a17 	ldw	r8,40(r18)
  808080:	003fa406 	br	807f14 <_fflush_r+0x6c>
  808084:	98c00017 	ldw	r3,0(r19)
  808088:	00800744 	movi	r2,29
  80808c:	18bfde26 	beq	r3,r2,808008 <_fflush_r+0x160>
  808090:	9080030b 	ldhu	r2,12(r18)
  808094:	8007883a 	mov	r3,r16
  808098:	10801014 	ori	r2,r2,64
  80809c:	9080030d 	sth	r2,12(r18)
  8080a0:	003fcf06 	br	807fe0 <_fflush_r+0x138>

008080a4 <fflush>:
  8080a4:	01402034 	movhi	r5,128
  8080a8:	295faa04 	addi	r5,r5,32424
  8080ac:	2007883a 	mov	r3,r4
  8080b0:	20000526 	beq	r4,zero,8080c8 <fflush+0x24>
  8080b4:	00802274 	movhi	r2,137
  8080b8:	10a4f804 	addi	r2,r2,-27680
  8080bc:	11000017 	ldw	r4,0(r2)
  8080c0:	180b883a 	mov	r5,r3
  8080c4:	0807ea81 	jmpi	807ea8 <_fflush_r>
  8080c8:	00802274 	movhi	r2,137
  8080cc:	10a4f904 	addi	r2,r2,-27676
  8080d0:	11000017 	ldw	r4,0(r2)
  8080d4:	0808c741 	jmpi	808c74 <_fwalk_reent>

008080d8 <std>:
  8080d8:	00802074 	movhi	r2,129
  8080dc:	10ac5404 	addi	r2,r2,-20144
  8080e0:	20800b15 	stw	r2,44(r4)
  8080e4:	00802074 	movhi	r2,129
  8080e8:	10ac8f04 	addi	r2,r2,-19908
  8080ec:	20800815 	stw	r2,32(r4)
  8080f0:	00c02074 	movhi	r3,129
  8080f4:	18ec7004 	addi	r3,r3,-20032
  8080f8:	00802074 	movhi	r2,129
  8080fc:	10ac5604 	addi	r2,r2,-20136
  808100:	2140030d 	sth	r5,12(r4)
  808104:	2180038d 	sth	r6,14(r4)
  808108:	20c00915 	stw	r3,36(r4)
  80810c:	20800a15 	stw	r2,40(r4)
  808110:	20000015 	stw	zero,0(r4)
  808114:	20000115 	stw	zero,4(r4)
  808118:	20000215 	stw	zero,8(r4)
  80811c:	20000415 	stw	zero,16(r4)
  808120:	20000515 	stw	zero,20(r4)
  808124:	20000615 	stw	zero,24(r4)
  808128:	21000715 	stw	r4,28(r4)
  80812c:	f800283a 	ret

00808130 <__sfp_lock_acquire>:
  808130:	f800283a 	ret

00808134 <__sfp_lock_release>:
  808134:	f800283a 	ret

00808138 <__sinit_lock_acquire>:
  808138:	f800283a 	ret

0080813c <__sinit_lock_release>:
  80813c:	f800283a 	ret

00808140 <__sinit>:
  808140:	20800e17 	ldw	r2,56(r4)
  808144:	defffd04 	addi	sp,sp,-12
  808148:	dc400115 	stw	r17,4(sp)
  80814c:	dc000015 	stw	r16,0(sp)
  808150:	dfc00215 	stw	ra,8(sp)
  808154:	04400044 	movi	r17,1
  808158:	01400104 	movi	r5,4
  80815c:	000d883a 	mov	r6,zero
  808160:	2021883a 	mov	r16,r4
  808164:	2200bb04 	addi	r8,r4,748
  808168:	200f883a 	mov	r7,r4
  80816c:	10000526 	beq	r2,zero,808184 <__sinit+0x44>
  808170:	dfc00217 	ldw	ra,8(sp)
  808174:	dc400117 	ldw	r17,4(sp)
  808178:	dc000017 	ldw	r16,0(sp)
  80817c:	dec00304 	addi	sp,sp,12
  808180:	f800283a 	ret
  808184:	21000117 	ldw	r4,4(r4)
  808188:	00802074 	movhi	r2,129
  80818c:	10a08904 	addi	r2,r2,-32220
  808190:	00c000c4 	movi	r3,3
  808194:	80800f15 	stw	r2,60(r16)
  808198:	80c0b915 	stw	r3,740(r16)
  80819c:	8200ba15 	stw	r8,744(r16)
  8081a0:	84400e15 	stw	r17,56(r16)
  8081a4:	8000b815 	stw	zero,736(r16)
  8081a8:	08080d80 	call	8080d8 <std>
  8081ac:	81000217 	ldw	r4,8(r16)
  8081b0:	880d883a 	mov	r6,r17
  8081b4:	800f883a 	mov	r7,r16
  8081b8:	01400284 	movi	r5,10
  8081bc:	08080d80 	call	8080d8 <std>
  8081c0:	81000317 	ldw	r4,12(r16)
  8081c4:	800f883a 	mov	r7,r16
  8081c8:	01400484 	movi	r5,18
  8081cc:	01800084 	movi	r6,2
  8081d0:	dfc00217 	ldw	ra,8(sp)
  8081d4:	dc400117 	ldw	r17,4(sp)
  8081d8:	dc000017 	ldw	r16,0(sp)
  8081dc:	dec00304 	addi	sp,sp,12
  8081e0:	08080d81 	jmpi	8080d8 <std>

008081e4 <__fp_lock>:
  8081e4:	0005883a 	mov	r2,zero
  8081e8:	f800283a 	ret

008081ec <__fp_unlock>:
  8081ec:	0005883a 	mov	r2,zero
  8081f0:	f800283a 	ret

008081f4 <__fp_unlock_all>:
  8081f4:	00802274 	movhi	r2,137
  8081f8:	10a4f804 	addi	r2,r2,-27680
  8081fc:	11000017 	ldw	r4,0(r2)
  808200:	01402074 	movhi	r5,129
  808204:	29607b04 	addi	r5,r5,-32276
  808208:	0808d3c1 	jmpi	808d3c <_fwalk>

0080820c <__fp_lock_all>:
  80820c:	00802274 	movhi	r2,137
  808210:	10a4f804 	addi	r2,r2,-27680
  808214:	11000017 	ldw	r4,0(r2)
  808218:	01402074 	movhi	r5,129
  80821c:	29607904 	addi	r5,r5,-32284
  808220:	0808d3c1 	jmpi	808d3c <_fwalk>

00808224 <_cleanup_r>:
  808224:	01402074 	movhi	r5,129
  808228:	296d9e04 	addi	r5,r5,-18824
  80822c:	0808d3c1 	jmpi	808d3c <_fwalk>

00808230 <_cleanup>:
  808230:	00802274 	movhi	r2,137
  808234:	10a4f904 	addi	r2,r2,-27676
  808238:	11000017 	ldw	r4,0(r2)
  80823c:	08082241 	jmpi	808224 <_cleanup_r>

00808240 <__sfmoreglue>:
  808240:	defffc04 	addi	sp,sp,-16
  808244:	dc400115 	stw	r17,4(sp)
  808248:	2c401724 	muli	r17,r5,92
  80824c:	dc800215 	stw	r18,8(sp)
  808250:	2825883a 	mov	r18,r5
  808254:	89400304 	addi	r5,r17,12
  808258:	dc000015 	stw	r16,0(sp)
  80825c:	dfc00315 	stw	ra,12(sp)
  808260:	080904c0 	call	80904c <_malloc_r>
  808264:	0021883a 	mov	r16,zero
  808268:	880d883a 	mov	r6,r17
  80826c:	000b883a 	mov	r5,zero
  808270:	10000626 	beq	r2,zero,80828c <__sfmoreglue+0x4c>
  808274:	11000304 	addi	r4,r2,12
  808278:	14800115 	stw	r18,4(r2)
  80827c:	10000015 	stw	zero,0(r2)
  808280:	11000215 	stw	r4,8(r2)
  808284:	1021883a 	mov	r16,r2
  808288:	08099f00 	call	8099f0 <memset>
  80828c:	8005883a 	mov	r2,r16
  808290:	dfc00317 	ldw	ra,12(sp)
  808294:	dc800217 	ldw	r18,8(sp)
  808298:	dc400117 	ldw	r17,4(sp)
  80829c:	dc000017 	ldw	r16,0(sp)
  8082a0:	dec00404 	addi	sp,sp,16
  8082a4:	f800283a 	ret

008082a8 <__sfp>:
  8082a8:	defffd04 	addi	sp,sp,-12
  8082ac:	00802274 	movhi	r2,137
  8082b0:	10a4f904 	addi	r2,r2,-27676
  8082b4:	dc000015 	stw	r16,0(sp)
  8082b8:	14000017 	ldw	r16,0(r2)
  8082bc:	dc400115 	stw	r17,4(sp)
  8082c0:	dfc00215 	stw	ra,8(sp)
  8082c4:	80800e17 	ldw	r2,56(r16)
  8082c8:	2023883a 	mov	r17,r4
  8082cc:	10002626 	beq	r2,zero,808368 <__sfp+0xc0>
  8082d0:	8400b804 	addi	r16,r16,736
  8082d4:	80800117 	ldw	r2,4(r16)
  8082d8:	81000217 	ldw	r4,8(r16)
  8082dc:	10ffffc4 	addi	r3,r2,-1
  8082e0:	18000916 	blt	r3,zero,808308 <__sfp+0x60>
  8082e4:	2080030f 	ldh	r2,12(r4)
  8082e8:	10000b26 	beq	r2,zero,808318 <__sfp+0x70>
  8082ec:	017fffc4 	movi	r5,-1
  8082f0:	00000206 	br	8082fc <__sfp+0x54>
  8082f4:	2080030f 	ldh	r2,12(r4)
  8082f8:	10000726 	beq	r2,zero,808318 <__sfp+0x70>
  8082fc:	18ffffc4 	addi	r3,r3,-1
  808300:	21001704 	addi	r4,r4,92
  808304:	197ffb1e 	bne	r3,r5,8082f4 <__sfp+0x4c>
  808308:	80800017 	ldw	r2,0(r16)
  80830c:	10001926 	beq	r2,zero,808374 <__sfp+0xcc>
  808310:	1021883a 	mov	r16,r2
  808314:	003fef06 	br	8082d4 <__sfp+0x2c>
  808318:	00bfffc4 	movi	r2,-1
  80831c:	00c00044 	movi	r3,1
  808320:	2080038d 	sth	r2,14(r4)
  808324:	20c0030d 	sth	r3,12(r4)
  808328:	20000015 	stw	zero,0(r4)
  80832c:	20000215 	stw	zero,8(r4)
  808330:	20000115 	stw	zero,4(r4)
  808334:	20000415 	stw	zero,16(r4)
  808338:	20000515 	stw	zero,20(r4)
  80833c:	20000615 	stw	zero,24(r4)
  808340:	20000c15 	stw	zero,48(r4)
  808344:	20000d15 	stw	zero,52(r4)
  808348:	20001115 	stw	zero,68(r4)
  80834c:	20001215 	stw	zero,72(r4)
  808350:	2005883a 	mov	r2,r4
  808354:	dfc00217 	ldw	ra,8(sp)
  808358:	dc400117 	ldw	r17,4(sp)
  80835c:	dc000017 	ldw	r16,0(sp)
  808360:	dec00304 	addi	sp,sp,12
  808364:	f800283a 	ret
  808368:	8009883a 	mov	r4,r16
  80836c:	08081400 	call	808140 <__sinit>
  808370:	003fd706 	br	8082d0 <__sfp+0x28>
  808374:	8809883a 	mov	r4,r17
  808378:	01400104 	movi	r5,4
  80837c:	08082400 	call	808240 <__sfmoreglue>
  808380:	80800015 	stw	r2,0(r16)
  808384:	103fe21e 	bne	r2,zero,808310 <__sfp+0x68>
  808388:	00800304 	movi	r2,12
  80838c:	0009883a 	mov	r4,zero
  808390:	88800015 	stw	r2,0(r17)
  808394:	003fee06 	br	808350 <__sfp+0xa8>

00808398 <_malloc_trim_r>:
  808398:	defffb04 	addi	sp,sp,-20
  80839c:	dcc00315 	stw	r19,12(sp)
  8083a0:	04c02234 	movhi	r19,136
  8083a4:	9cdf7404 	addi	r19,r19,32208
  8083a8:	dc800215 	stw	r18,8(sp)
  8083ac:	dc400115 	stw	r17,4(sp)
  8083b0:	dc000015 	stw	r16,0(sp)
  8083b4:	2823883a 	mov	r17,r5
  8083b8:	2025883a 	mov	r18,r4
  8083bc:	dfc00415 	stw	ra,16(sp)
  8083c0:	080cf6c0 	call	80cf6c <__malloc_lock>
  8083c4:	98800217 	ldw	r2,8(r19)
  8083c8:	9009883a 	mov	r4,r18
  8083cc:	000b883a 	mov	r5,zero
  8083d0:	10c00117 	ldw	r3,4(r2)
  8083d4:	00bfff04 	movi	r2,-4
  8083d8:	18a0703a 	and	r16,r3,r2
  8083dc:	8463c83a 	sub	r17,r16,r17
  8083e0:	8c43fbc4 	addi	r17,r17,4079
  8083e4:	8822d33a 	srli	r17,r17,12
  8083e8:	0083ffc4 	movi	r2,4095
  8083ec:	8c7fffc4 	addi	r17,r17,-1
  8083f0:	8822933a 	slli	r17,r17,12
  8083f4:	1440060e 	bge	r2,r17,808410 <_malloc_trim_r+0x78>
  8083f8:	080b0e00 	call	80b0e0 <_sbrk_r>
  8083fc:	98c00217 	ldw	r3,8(r19)
  808400:	9009883a 	mov	r4,r18
  808404:	044bc83a 	sub	r5,zero,r17
  808408:	80c7883a 	add	r3,r16,r3
  80840c:	10c00926 	beq	r2,r3,808434 <_malloc_trim_r+0x9c>
  808410:	080cf8c0 	call	80cf8c <__malloc_unlock>
  808414:	0005883a 	mov	r2,zero
  808418:	dfc00417 	ldw	ra,16(sp)
  80841c:	dcc00317 	ldw	r19,12(sp)
  808420:	dc800217 	ldw	r18,8(sp)
  808424:	dc400117 	ldw	r17,4(sp)
  808428:	dc000017 	ldw	r16,0(sp)
  80842c:	dec00504 	addi	sp,sp,20
  808430:	f800283a 	ret
  808434:	9009883a 	mov	r4,r18
  808438:	080b0e00 	call	80b0e0 <_sbrk_r>
  80843c:	844dc83a 	sub	r6,r16,r17
  808440:	00ffffc4 	movi	r3,-1
  808444:	9009883a 	mov	r4,r18
  808448:	000b883a 	mov	r5,zero
  80844c:	01c02274 	movhi	r7,137
  808450:	39ec3c04 	addi	r7,r7,-20240
  808454:	31800054 	ori	r6,r6,1
  808458:	10c00926 	beq	r2,r3,808480 <_malloc_trim_r+0xe8>
  80845c:	38800017 	ldw	r2,0(r7)
  808460:	98c00217 	ldw	r3,8(r19)
  808464:	9009883a 	mov	r4,r18
  808468:	1445c83a 	sub	r2,r2,r17
  80846c:	38800015 	stw	r2,0(r7)
  808470:	19800115 	stw	r6,4(r3)
  808474:	080cf8c0 	call	80cf8c <__malloc_unlock>
  808478:	00800044 	movi	r2,1
  80847c:	003fe606 	br	808418 <_malloc_trim_r+0x80>
  808480:	080b0e00 	call	80b0e0 <_sbrk_r>
  808484:	99800217 	ldw	r6,8(r19)
  808488:	100f883a 	mov	r7,r2
  80848c:	9009883a 	mov	r4,r18
  808490:	1187c83a 	sub	r3,r2,r6
  808494:	008003c4 	movi	r2,15
  808498:	19400054 	ori	r5,r3,1
  80849c:	10ffdc0e 	bge	r2,r3,808410 <_malloc_trim_r+0x78>
  8084a0:	00802274 	movhi	r2,137
  8084a4:	10a4fd04 	addi	r2,r2,-27660
  8084a8:	10c00017 	ldw	r3,0(r2)
  8084ac:	00802274 	movhi	r2,137
  8084b0:	10ac3c04 	addi	r2,r2,-20240
  8084b4:	31400115 	stw	r5,4(r6)
  8084b8:	38c7c83a 	sub	r3,r7,r3
  8084bc:	10c00015 	stw	r3,0(r2)
  8084c0:	003fd306 	br	808410 <_malloc_trim_r+0x78>

008084c4 <_free_r>:
  8084c4:	defffd04 	addi	sp,sp,-12
  8084c8:	dc400115 	stw	r17,4(sp)
  8084cc:	dc000015 	stw	r16,0(sp)
  8084d0:	dfc00215 	stw	ra,8(sp)
  8084d4:	2821883a 	mov	r16,r5
  8084d8:	2023883a 	mov	r17,r4
  8084dc:	28005a26 	beq	r5,zero,808648 <_free_r+0x184>
  8084e0:	080cf6c0 	call	80cf6c <__malloc_lock>
  8084e4:	823ffe04 	addi	r8,r16,-8
  8084e8:	41400117 	ldw	r5,4(r8)
  8084ec:	00bfff84 	movi	r2,-2
  8084f0:	02802234 	movhi	r10,136
  8084f4:	529f7404 	addi	r10,r10,32208
  8084f8:	288e703a 	and	r7,r5,r2
  8084fc:	41cd883a 	add	r6,r8,r7
  808500:	30c00117 	ldw	r3,4(r6)
  808504:	51000217 	ldw	r4,8(r10)
  808508:	00bfff04 	movi	r2,-4
  80850c:	1892703a 	and	r9,r3,r2
  808510:	5017883a 	mov	r11,r10
  808514:	31006726 	beq	r6,r4,8086b4 <_free_r+0x1f0>
  808518:	2880004c 	andi	r2,r5,1
  80851c:	1005003a 	cmpeq	r2,r2,zero
  808520:	32400115 	stw	r9,4(r6)
  808524:	10001a1e 	bne	r2,zero,808590 <_free_r+0xcc>
  808528:	000b883a 	mov	r5,zero
  80852c:	3247883a 	add	r3,r6,r9
  808530:	18800117 	ldw	r2,4(r3)
  808534:	1080004c 	andi	r2,r2,1
  808538:	1000231e 	bne	r2,zero,8085c8 <_free_r+0x104>
  80853c:	280ac03a 	cmpne	r5,r5,zero
  808540:	3a4f883a 	add	r7,r7,r9
  808544:	2800451e 	bne	r5,zero,80865c <_free_r+0x198>
  808548:	31000217 	ldw	r4,8(r6)
  80854c:	00802234 	movhi	r2,136
  808550:	109f7604 	addi	r2,r2,32216
  808554:	20807b26 	beq	r4,r2,808744 <_free_r+0x280>
  808558:	30800317 	ldw	r2,12(r6)
  80855c:	3a07883a 	add	r3,r7,r8
  808560:	19c00015 	stw	r7,0(r3)
  808564:	11000215 	stw	r4,8(r2)
  808568:	20800315 	stw	r2,12(r4)
  80856c:	38800054 	ori	r2,r7,1
  808570:	40800115 	stw	r2,4(r8)
  808574:	28001a26 	beq	r5,zero,8085e0 <_free_r+0x11c>
  808578:	8809883a 	mov	r4,r17
  80857c:	dfc00217 	ldw	ra,8(sp)
  808580:	dc400117 	ldw	r17,4(sp)
  808584:	dc000017 	ldw	r16,0(sp)
  808588:	dec00304 	addi	sp,sp,12
  80858c:	080cf8c1 	jmpi	80cf8c <__malloc_unlock>
  808590:	80bffe17 	ldw	r2,-8(r16)
  808594:	50c00204 	addi	r3,r10,8
  808598:	4091c83a 	sub	r8,r8,r2
  80859c:	41000217 	ldw	r4,8(r8)
  8085a0:	388f883a 	add	r7,r7,r2
  8085a4:	20c06126 	beq	r4,r3,80872c <_free_r+0x268>
  8085a8:	40800317 	ldw	r2,12(r8)
  8085ac:	3247883a 	add	r3,r6,r9
  8085b0:	000b883a 	mov	r5,zero
  8085b4:	11000215 	stw	r4,8(r2)
  8085b8:	20800315 	stw	r2,12(r4)
  8085bc:	18800117 	ldw	r2,4(r3)
  8085c0:	1080004c 	andi	r2,r2,1
  8085c4:	103fdd26 	beq	r2,zero,80853c <_free_r+0x78>
  8085c8:	38800054 	ori	r2,r7,1
  8085cc:	3a07883a 	add	r3,r7,r8
  8085d0:	280ac03a 	cmpne	r5,r5,zero
  8085d4:	40800115 	stw	r2,4(r8)
  8085d8:	19c00015 	stw	r7,0(r3)
  8085dc:	283fe61e 	bne	r5,zero,808578 <_free_r+0xb4>
  8085e0:	00807fc4 	movi	r2,511
  8085e4:	11c01f2e 	bgeu	r2,r7,808664 <_free_r+0x1a0>
  8085e8:	3806d27a 	srli	r3,r7,9
  8085ec:	1800481e 	bne	r3,zero,808710 <_free_r+0x24c>
  8085f0:	3804d0fa 	srli	r2,r7,3
  8085f4:	100690fa 	slli	r3,r2,3
  8085f8:	1acd883a 	add	r6,r3,r11
  8085fc:	31400217 	ldw	r5,8(r6)
  808600:	31405926 	beq	r6,r5,808768 <_free_r+0x2a4>
  808604:	28800117 	ldw	r2,4(r5)
  808608:	00ffff04 	movi	r3,-4
  80860c:	10c4703a 	and	r2,r2,r3
  808610:	3880022e 	bgeu	r7,r2,80861c <_free_r+0x158>
  808614:	29400217 	ldw	r5,8(r5)
  808618:	317ffa1e 	bne	r6,r5,808604 <_free_r+0x140>
  80861c:	29800317 	ldw	r6,12(r5)
  808620:	41800315 	stw	r6,12(r8)
  808624:	41400215 	stw	r5,8(r8)
  808628:	8809883a 	mov	r4,r17
  80862c:	2a000315 	stw	r8,12(r5)
  808630:	32000215 	stw	r8,8(r6)
  808634:	dfc00217 	ldw	ra,8(sp)
  808638:	dc400117 	ldw	r17,4(sp)
  80863c:	dc000017 	ldw	r16,0(sp)
  808640:	dec00304 	addi	sp,sp,12
  808644:	080cf8c1 	jmpi	80cf8c <__malloc_unlock>
  808648:	dfc00217 	ldw	ra,8(sp)
  80864c:	dc400117 	ldw	r17,4(sp)
  808650:	dc000017 	ldw	r16,0(sp)
  808654:	dec00304 	addi	sp,sp,12
  808658:	f800283a 	ret
  80865c:	31000217 	ldw	r4,8(r6)
  808660:	003fbd06 	br	808558 <_free_r+0x94>
  808664:	3806d0fa 	srli	r3,r7,3
  808668:	00800044 	movi	r2,1
  80866c:	51400117 	ldw	r5,4(r10)
  808670:	180890fa 	slli	r4,r3,3
  808674:	1807d0ba 	srai	r3,r3,2
  808678:	22c9883a 	add	r4,r4,r11
  80867c:	21800217 	ldw	r6,8(r4)
  808680:	10c4983a 	sll	r2,r2,r3
  808684:	41000315 	stw	r4,12(r8)
  808688:	41800215 	stw	r6,8(r8)
  80868c:	288ab03a 	or	r5,r5,r2
  808690:	22000215 	stw	r8,8(r4)
  808694:	8809883a 	mov	r4,r17
  808698:	51400115 	stw	r5,4(r10)
  80869c:	32000315 	stw	r8,12(r6)
  8086a0:	dfc00217 	ldw	ra,8(sp)
  8086a4:	dc400117 	ldw	r17,4(sp)
  8086a8:	dc000017 	ldw	r16,0(sp)
  8086ac:	dec00304 	addi	sp,sp,12
  8086b0:	080cf8c1 	jmpi	80cf8c <__malloc_unlock>
  8086b4:	2880004c 	andi	r2,r5,1
  8086b8:	3a4d883a 	add	r6,r7,r9
  8086bc:	1000071e 	bne	r2,zero,8086dc <_free_r+0x218>
  8086c0:	80bffe17 	ldw	r2,-8(r16)
  8086c4:	4091c83a 	sub	r8,r8,r2
  8086c8:	41000317 	ldw	r4,12(r8)
  8086cc:	40c00217 	ldw	r3,8(r8)
  8086d0:	308d883a 	add	r6,r6,r2
  8086d4:	20c00215 	stw	r3,8(r4)
  8086d8:	19000315 	stw	r4,12(r3)
  8086dc:	00802274 	movhi	r2,137
  8086e0:	10a4fc04 	addi	r2,r2,-27664
  8086e4:	11000017 	ldw	r4,0(r2)
  8086e8:	30c00054 	ori	r3,r6,1
  8086ec:	52000215 	stw	r8,8(r10)
  8086f0:	40c00115 	stw	r3,4(r8)
  8086f4:	313fa036 	bltu	r6,r4,808578 <_free_r+0xb4>
  8086f8:	00802274 	movhi	r2,137
  8086fc:	10ac3204 	addi	r2,r2,-20280
  808700:	11400017 	ldw	r5,0(r2)
  808704:	8809883a 	mov	r4,r17
  808708:	08083980 	call	808398 <_malloc_trim_r>
  80870c:	003f9a06 	br	808578 <_free_r+0xb4>
  808710:	00800104 	movi	r2,4
  808714:	10c0072e 	bgeu	r2,r3,808734 <_free_r+0x270>
  808718:	00800504 	movi	r2,20
  80871c:	10c01936 	bltu	r2,r3,808784 <_free_r+0x2c0>
  808720:	188016c4 	addi	r2,r3,91
  808724:	100690fa 	slli	r3,r2,3
  808728:	003fb306 	br	8085f8 <_free_r+0x134>
  80872c:	01400044 	movi	r5,1
  808730:	003f7e06 	br	80852c <_free_r+0x68>
  808734:	3804d1ba 	srli	r2,r7,6
  808738:	10800e04 	addi	r2,r2,56
  80873c:	100690fa 	slli	r3,r2,3
  808740:	003fad06 	br	8085f8 <_free_r+0x134>
  808744:	22000315 	stw	r8,12(r4)
  808748:	22000215 	stw	r8,8(r4)
  80874c:	3a05883a 	add	r2,r7,r8
  808750:	38c00054 	ori	r3,r7,1
  808754:	11c00015 	stw	r7,0(r2)
  808758:	41000215 	stw	r4,8(r8)
  80875c:	40c00115 	stw	r3,4(r8)
  808760:	41000315 	stw	r4,12(r8)
  808764:	003f8406 	br	808578 <_free_r+0xb4>
  808768:	1005d0ba 	srai	r2,r2,2
  80876c:	00c00044 	movi	r3,1
  808770:	51000117 	ldw	r4,4(r10)
  808774:	1886983a 	sll	r3,r3,r2
  808778:	20c8b03a 	or	r4,r4,r3
  80877c:	51000115 	stw	r4,4(r10)
  808780:	003fa706 	br	808620 <_free_r+0x15c>
  808784:	00801504 	movi	r2,84
  808788:	10c00436 	bltu	r2,r3,80879c <_free_r+0x2d8>
  80878c:	3804d33a 	srli	r2,r7,12
  808790:	10801b84 	addi	r2,r2,110
  808794:	100690fa 	slli	r3,r2,3
  808798:	003f9706 	br	8085f8 <_free_r+0x134>
  80879c:	00805504 	movi	r2,340
  8087a0:	10c00436 	bltu	r2,r3,8087b4 <_free_r+0x2f0>
  8087a4:	3804d3fa 	srli	r2,r7,15
  8087a8:	10801dc4 	addi	r2,r2,119
  8087ac:	100690fa 	slli	r3,r2,3
  8087b0:	003f9106 	br	8085f8 <_free_r+0x134>
  8087b4:	00815504 	movi	r2,1364
  8087b8:	10c0032e 	bgeu	r2,r3,8087c8 <_free_r+0x304>
  8087bc:	00801f84 	movi	r2,126
  8087c0:	00c0fc04 	movi	r3,1008
  8087c4:	003f8c06 	br	8085f8 <_free_r+0x134>
  8087c8:	3804d4ba 	srli	r2,r7,18
  8087cc:	10801f04 	addi	r2,r2,124
  8087d0:	100690fa 	slli	r3,r2,3
  8087d4:	003f8806 	br	8085f8 <_free_r+0x134>

008087d8 <__sfvwrite_r>:
  8087d8:	30800217 	ldw	r2,8(r6)
  8087dc:	defff504 	addi	sp,sp,-44
  8087e0:	df000915 	stw	fp,36(sp)
  8087e4:	dd800715 	stw	r22,28(sp)
  8087e8:	dc800315 	stw	r18,12(sp)
  8087ec:	dfc00a15 	stw	ra,40(sp)
  8087f0:	ddc00815 	stw	r23,32(sp)
  8087f4:	dd400615 	stw	r21,24(sp)
  8087f8:	dd000515 	stw	r20,20(sp)
  8087fc:	dcc00415 	stw	r19,16(sp)
  808800:	dc400215 	stw	r17,8(sp)
  808804:	dc000115 	stw	r16,4(sp)
  808808:	302d883a 	mov	r22,r6
  80880c:	2039883a 	mov	fp,r4
  808810:	2825883a 	mov	r18,r5
  808814:	10001c26 	beq	r2,zero,808888 <__sfvwrite_r+0xb0>
  808818:	29c0030b 	ldhu	r7,12(r5)
  80881c:	3880020c 	andi	r2,r7,8
  808820:	10002726 	beq	r2,zero,8088c0 <__sfvwrite_r+0xe8>
  808824:	28800417 	ldw	r2,16(r5)
  808828:	10002526 	beq	r2,zero,8088c0 <__sfvwrite_r+0xe8>
  80882c:	3880008c 	andi	r2,r7,2
  808830:	b5400017 	ldw	r21,0(r22)
  808834:	10002826 	beq	r2,zero,8088d8 <__sfvwrite_r+0x100>
  808838:	0021883a 	mov	r16,zero
  80883c:	0023883a 	mov	r17,zero
  808840:	880d883a 	mov	r6,r17
  808844:	e009883a 	mov	r4,fp
  808848:	00810004 	movi	r2,1024
  80884c:	80006e26 	beq	r16,zero,808a08 <__sfvwrite_r+0x230>
  808850:	800f883a 	mov	r7,r16
  808854:	91400717 	ldw	r5,28(r18)
  808858:	1400012e 	bgeu	r2,r16,808860 <__sfvwrite_r+0x88>
  80885c:	100f883a 	mov	r7,r2
  808860:	90c00917 	ldw	r3,36(r18)
  808864:	183ee83a 	callr	r3
  808868:	1007883a 	mov	r3,r2
  80886c:	80a1c83a 	sub	r16,r16,r2
  808870:	88a3883a 	add	r17,r17,r2
  808874:	00806d0e 	bge	zero,r2,808a2c <__sfvwrite_r+0x254>
  808878:	b0800217 	ldw	r2,8(r22)
  80887c:	10c5c83a 	sub	r2,r2,r3
  808880:	b0800215 	stw	r2,8(r22)
  808884:	103fee1e 	bne	r2,zero,808840 <__sfvwrite_r+0x68>
  808888:	0009883a 	mov	r4,zero
  80888c:	2005883a 	mov	r2,r4
  808890:	dfc00a17 	ldw	ra,40(sp)
  808894:	df000917 	ldw	fp,36(sp)
  808898:	ddc00817 	ldw	r23,32(sp)
  80889c:	dd800717 	ldw	r22,28(sp)
  8088a0:	dd400617 	ldw	r21,24(sp)
  8088a4:	dd000517 	ldw	r20,20(sp)
  8088a8:	dcc00417 	ldw	r19,16(sp)
  8088ac:	dc800317 	ldw	r18,12(sp)
  8088b0:	dc400217 	ldw	r17,8(sp)
  8088b4:	dc000117 	ldw	r16,4(sp)
  8088b8:	dec00b04 	addi	sp,sp,44
  8088bc:	f800283a 	ret
  8088c0:	08065a00 	call	8065a0 <__swsetup_r>
  8088c4:	1000e41e 	bne	r2,zero,808c58 <__sfvwrite_r+0x480>
  8088c8:	91c0030b 	ldhu	r7,12(r18)
  8088cc:	b5400017 	ldw	r21,0(r22)
  8088d0:	3880008c 	andi	r2,r7,2
  8088d4:	103fd81e 	bne	r2,zero,808838 <__sfvwrite_r+0x60>
  8088d8:	3880004c 	andi	r2,r7,1
  8088dc:	1005003a 	cmpeq	r2,r2,zero
  8088e0:	10005726 	beq	r2,zero,808a40 <__sfvwrite_r+0x268>
  8088e4:	0029883a 	mov	r20,zero
  8088e8:	002f883a 	mov	r23,zero
  8088ec:	a0004226 	beq	r20,zero,8089f8 <__sfvwrite_r+0x220>
  8088f0:	3880800c 	andi	r2,r7,512
  8088f4:	94000217 	ldw	r16,8(r18)
  8088f8:	10008b26 	beq	r2,zero,808b28 <__sfvwrite_r+0x350>
  8088fc:	800d883a 	mov	r6,r16
  808900:	a400a536 	bltu	r20,r16,808b98 <__sfvwrite_r+0x3c0>
  808904:	3881200c 	andi	r2,r7,1152
  808908:	10002726 	beq	r2,zero,8089a8 <__sfvwrite_r+0x1d0>
  80890c:	90800517 	ldw	r2,20(r18)
  808910:	92000417 	ldw	r8,16(r18)
  808914:	91400017 	ldw	r5,0(r18)
  808918:	1087883a 	add	r3,r2,r2
  80891c:	1887883a 	add	r3,r3,r2
  808920:	1808d7fa 	srli	r4,r3,31
  808924:	2a21c83a 	sub	r16,r5,r8
  808928:	80800044 	addi	r2,r16,1
  80892c:	20c9883a 	add	r4,r4,r3
  808930:	2027d07a 	srai	r19,r4,1
  808934:	a085883a 	add	r2,r20,r2
  808938:	980d883a 	mov	r6,r19
  80893c:	9880022e 	bgeu	r19,r2,808948 <__sfvwrite_r+0x170>
  808940:	1027883a 	mov	r19,r2
  808944:	100d883a 	mov	r6,r2
  808948:	3881000c 	andi	r2,r7,1024
  80894c:	1000b826 	beq	r2,zero,808c30 <__sfvwrite_r+0x458>
  808950:	300b883a 	mov	r5,r6
  808954:	e009883a 	mov	r4,fp
  808958:	080904c0 	call	80904c <_malloc_r>
  80895c:	10003126 	beq	r2,zero,808a24 <__sfvwrite_r+0x24c>
  808960:	91400417 	ldw	r5,16(r18)
  808964:	1009883a 	mov	r4,r2
  808968:	800d883a 	mov	r6,r16
  80896c:	1023883a 	mov	r17,r2
  808970:	08098700 	call	809870 <memcpy>
  808974:	90c0030b 	ldhu	r3,12(r18)
  808978:	00beffc4 	movi	r2,-1025
  80897c:	1886703a 	and	r3,r3,r2
  808980:	18c02014 	ori	r3,r3,128
  808984:	90c0030d 	sth	r3,12(r18)
  808988:	9c07c83a 	sub	r3,r19,r16
  80898c:	8c05883a 	add	r2,r17,r16
  808990:	a00d883a 	mov	r6,r20
  808994:	a021883a 	mov	r16,r20
  808998:	90800015 	stw	r2,0(r18)
  80899c:	90c00215 	stw	r3,8(r18)
  8089a0:	94400415 	stw	r17,16(r18)
  8089a4:	94c00515 	stw	r19,20(r18)
  8089a8:	91000017 	ldw	r4,0(r18)
  8089ac:	b80b883a 	mov	r5,r23
  8089b0:	a023883a 	mov	r17,r20
  8089b4:	08099100 	call	809910 <memmove>
  8089b8:	90c00217 	ldw	r3,8(r18)
  8089bc:	90800017 	ldw	r2,0(r18)
  8089c0:	a027883a 	mov	r19,r20
  8089c4:	1c07c83a 	sub	r3,r3,r16
  8089c8:	1405883a 	add	r2,r2,r16
  8089cc:	90c00215 	stw	r3,8(r18)
  8089d0:	a021883a 	mov	r16,r20
  8089d4:	90800015 	stw	r2,0(r18)
  8089d8:	b0800217 	ldw	r2,8(r22)
  8089dc:	1405c83a 	sub	r2,r2,r16
  8089e0:	b0800215 	stw	r2,8(r22)
  8089e4:	103fa826 	beq	r2,zero,808888 <__sfvwrite_r+0xb0>
  8089e8:	a469c83a 	sub	r20,r20,r17
  8089ec:	91c0030b 	ldhu	r7,12(r18)
  8089f0:	bcef883a 	add	r23,r23,r19
  8089f4:	a03fbe1e 	bne	r20,zero,8088f0 <__sfvwrite_r+0x118>
  8089f8:	adc00017 	ldw	r23,0(r21)
  8089fc:	ad000117 	ldw	r20,4(r21)
  808a00:	ad400204 	addi	r21,r21,8
  808a04:	003fb906 	br	8088ec <__sfvwrite_r+0x114>
  808a08:	ac400017 	ldw	r17,0(r21)
  808a0c:	ac000117 	ldw	r16,4(r21)
  808a10:	ad400204 	addi	r21,r21,8
  808a14:	003f8a06 	br	808840 <__sfvwrite_r+0x68>
  808a18:	91400417 	ldw	r5,16(r18)
  808a1c:	e009883a 	mov	r4,fp
  808a20:	08084c40 	call	8084c4 <_free_r>
  808a24:	00800304 	movi	r2,12
  808a28:	e0800015 	stw	r2,0(fp)
  808a2c:	9080030b 	ldhu	r2,12(r18)
  808a30:	013fffc4 	movi	r4,-1
  808a34:	10801014 	ori	r2,r2,64
  808a38:	9080030d 	sth	r2,12(r18)
  808a3c:	003f9306 	br	80888c <__sfvwrite_r+0xb4>
  808a40:	0027883a 	mov	r19,zero
  808a44:	002f883a 	mov	r23,zero
  808a48:	d8000015 	stw	zero,0(sp)
  808a4c:	0029883a 	mov	r20,zero
  808a50:	98001e26 	beq	r19,zero,808acc <__sfvwrite_r+0x2f4>
  808a54:	d8c00017 	ldw	r3,0(sp)
  808a58:	1804c03a 	cmpne	r2,r3,zero
  808a5c:	10005e26 	beq	r2,zero,808bd8 <__sfvwrite_r+0x400>
  808a60:	9821883a 	mov	r16,r19
  808a64:	a4c0012e 	bgeu	r20,r19,808a6c <__sfvwrite_r+0x294>
  808a68:	a021883a 	mov	r16,r20
  808a6c:	91000017 	ldw	r4,0(r18)
  808a70:	90800417 	ldw	r2,16(r18)
  808a74:	91800217 	ldw	r6,8(r18)
  808a78:	91c00517 	ldw	r7,20(r18)
  808a7c:	1100022e 	bgeu	r2,r4,808a88 <__sfvwrite_r+0x2b0>
  808a80:	31e3883a 	add	r17,r6,r7
  808a84:	8c001616 	blt	r17,r16,808ae0 <__sfvwrite_r+0x308>
  808a88:	81c03816 	blt	r16,r7,808b6c <__sfvwrite_r+0x394>
  808a8c:	90c00917 	ldw	r3,36(r18)
  808a90:	91400717 	ldw	r5,28(r18)
  808a94:	e009883a 	mov	r4,fp
  808a98:	b80d883a 	mov	r6,r23
  808a9c:	183ee83a 	callr	r3
  808aa0:	1023883a 	mov	r17,r2
  808aa4:	00bfe10e 	bge	zero,r2,808a2c <__sfvwrite_r+0x254>
  808aa8:	a469c83a 	sub	r20,r20,r17
  808aac:	a0001826 	beq	r20,zero,808b10 <__sfvwrite_r+0x338>
  808ab0:	b0800217 	ldw	r2,8(r22)
  808ab4:	1445c83a 	sub	r2,r2,r17
  808ab8:	b0800215 	stw	r2,8(r22)
  808abc:	103f7226 	beq	r2,zero,808888 <__sfvwrite_r+0xb0>
  808ac0:	9c67c83a 	sub	r19,r19,r17
  808ac4:	bc6f883a 	add	r23,r23,r17
  808ac8:	983fe21e 	bne	r19,zero,808a54 <__sfvwrite_r+0x27c>
  808acc:	adc00017 	ldw	r23,0(r21)
  808ad0:	acc00117 	ldw	r19,4(r21)
  808ad4:	ad400204 	addi	r21,r21,8
  808ad8:	d8000015 	stw	zero,0(sp)
  808adc:	003fdc06 	br	808a50 <__sfvwrite_r+0x278>
  808ae0:	b80b883a 	mov	r5,r23
  808ae4:	880d883a 	mov	r6,r17
  808ae8:	08099100 	call	809910 <memmove>
  808aec:	90c00017 	ldw	r3,0(r18)
  808af0:	e009883a 	mov	r4,fp
  808af4:	900b883a 	mov	r5,r18
  808af8:	1c47883a 	add	r3,r3,r17
  808afc:	90c00015 	stw	r3,0(r18)
  808b00:	0807ea80 	call	807ea8 <_fflush_r>
  808b04:	103fc91e 	bne	r2,zero,808a2c <__sfvwrite_r+0x254>
  808b08:	a469c83a 	sub	r20,r20,r17
  808b0c:	a03fe81e 	bne	r20,zero,808ab0 <__sfvwrite_r+0x2d8>
  808b10:	e009883a 	mov	r4,fp
  808b14:	900b883a 	mov	r5,r18
  808b18:	0807ea80 	call	807ea8 <_fflush_r>
  808b1c:	103fc31e 	bne	r2,zero,808a2c <__sfvwrite_r+0x254>
  808b20:	d8000015 	stw	zero,0(sp)
  808b24:	003fe206 	br	808ab0 <__sfvwrite_r+0x2d8>
  808b28:	91000017 	ldw	r4,0(r18)
  808b2c:	90800417 	ldw	r2,16(r18)
  808b30:	1100022e 	bgeu	r2,r4,808b3c <__sfvwrite_r+0x364>
  808b34:	8023883a 	mov	r17,r16
  808b38:	85003136 	bltu	r16,r20,808c00 <__sfvwrite_r+0x428>
  808b3c:	91c00517 	ldw	r7,20(r18)
  808b40:	a1c01836 	bltu	r20,r7,808ba4 <__sfvwrite_r+0x3cc>
  808b44:	90c00917 	ldw	r3,36(r18)
  808b48:	91400717 	ldw	r5,28(r18)
  808b4c:	e009883a 	mov	r4,fp
  808b50:	b80d883a 	mov	r6,r23
  808b54:	183ee83a 	callr	r3
  808b58:	1021883a 	mov	r16,r2
  808b5c:	00bfb30e 	bge	zero,r2,808a2c <__sfvwrite_r+0x254>
  808b60:	1023883a 	mov	r17,r2
  808b64:	1027883a 	mov	r19,r2
  808b68:	003f9b06 	br	8089d8 <__sfvwrite_r+0x200>
  808b6c:	b80b883a 	mov	r5,r23
  808b70:	800d883a 	mov	r6,r16
  808b74:	08099100 	call	809910 <memmove>
  808b78:	90c00217 	ldw	r3,8(r18)
  808b7c:	90800017 	ldw	r2,0(r18)
  808b80:	8023883a 	mov	r17,r16
  808b84:	1c07c83a 	sub	r3,r3,r16
  808b88:	1405883a 	add	r2,r2,r16
  808b8c:	90c00215 	stw	r3,8(r18)
  808b90:	90800015 	stw	r2,0(r18)
  808b94:	003fc406 	br	808aa8 <__sfvwrite_r+0x2d0>
  808b98:	a00d883a 	mov	r6,r20
  808b9c:	a021883a 	mov	r16,r20
  808ba0:	003f8106 	br	8089a8 <__sfvwrite_r+0x1d0>
  808ba4:	b80b883a 	mov	r5,r23
  808ba8:	a00d883a 	mov	r6,r20
  808bac:	08099100 	call	809910 <memmove>
  808bb0:	90c00217 	ldw	r3,8(r18)
  808bb4:	90800017 	ldw	r2,0(r18)
  808bb8:	a021883a 	mov	r16,r20
  808bbc:	1d07c83a 	sub	r3,r3,r20
  808bc0:	1505883a 	add	r2,r2,r20
  808bc4:	a023883a 	mov	r17,r20
  808bc8:	a027883a 	mov	r19,r20
  808bcc:	90c00215 	stw	r3,8(r18)
  808bd0:	90800015 	stw	r2,0(r18)
  808bd4:	003f8006 	br	8089d8 <__sfvwrite_r+0x200>
  808bd8:	b809883a 	mov	r4,r23
  808bdc:	01400284 	movi	r5,10
  808be0:	980d883a 	mov	r6,r19
  808be4:	080978c0 	call	80978c <memchr>
  808be8:	10001726 	beq	r2,zero,808c48 <__sfvwrite_r+0x470>
  808bec:	15c5c83a 	sub	r2,r2,r23
  808bf0:	15000044 	addi	r20,r2,1
  808bf4:	00800044 	movi	r2,1
  808bf8:	d8800015 	stw	r2,0(sp)
  808bfc:	003f9806 	br	808a60 <__sfvwrite_r+0x288>
  808c00:	b80b883a 	mov	r5,r23
  808c04:	800d883a 	mov	r6,r16
  808c08:	08099100 	call	809910 <memmove>
  808c0c:	90c00017 	ldw	r3,0(r18)
  808c10:	e009883a 	mov	r4,fp
  808c14:	900b883a 	mov	r5,r18
  808c18:	1c07883a 	add	r3,r3,r16
  808c1c:	90c00015 	stw	r3,0(r18)
  808c20:	8027883a 	mov	r19,r16
  808c24:	0807ea80 	call	807ea8 <_fflush_r>
  808c28:	103f6b26 	beq	r2,zero,8089d8 <__sfvwrite_r+0x200>
  808c2c:	003f7f06 	br	808a2c <__sfvwrite_r+0x254>
  808c30:	400b883a 	mov	r5,r8
  808c34:	e009883a 	mov	r4,fp
  808c38:	080aa7c0 	call	80aa7c <_realloc_r>
  808c3c:	103f7626 	beq	r2,zero,808a18 <__sfvwrite_r+0x240>
  808c40:	1023883a 	mov	r17,r2
  808c44:	003f5006 	br	808988 <__sfvwrite_r+0x1b0>
  808c48:	00c00044 	movi	r3,1
  808c4c:	9d000044 	addi	r20,r19,1
  808c50:	d8c00015 	stw	r3,0(sp)
  808c54:	003f8206 	br	808a60 <__sfvwrite_r+0x288>
  808c58:	9080030b 	ldhu	r2,12(r18)
  808c5c:	00c00244 	movi	r3,9
  808c60:	013fffc4 	movi	r4,-1
  808c64:	10801014 	ori	r2,r2,64
  808c68:	9080030d 	sth	r2,12(r18)
  808c6c:	e0c00015 	stw	r3,0(fp)
  808c70:	003f0606 	br	80888c <__sfvwrite_r+0xb4>

00808c74 <_fwalk_reent>:
  808c74:	defff704 	addi	sp,sp,-36
  808c78:	dcc00315 	stw	r19,12(sp)
  808c7c:	24c0b804 	addi	r19,r4,736
  808c80:	dd800615 	stw	r22,24(sp)
  808c84:	dd400515 	stw	r21,20(sp)
  808c88:	dfc00815 	stw	ra,32(sp)
  808c8c:	ddc00715 	stw	r23,28(sp)
  808c90:	dd000415 	stw	r20,16(sp)
  808c94:	dc800215 	stw	r18,8(sp)
  808c98:	dc400115 	stw	r17,4(sp)
  808c9c:	dc000015 	stw	r16,0(sp)
  808ca0:	202b883a 	mov	r21,r4
  808ca4:	282d883a 	mov	r22,r5
  808ca8:	08081300 	call	808130 <__sfp_lock_acquire>
  808cac:	98002126 	beq	r19,zero,808d34 <_fwalk_reent+0xc0>
  808cb0:	002f883a 	mov	r23,zero
  808cb4:	9c800117 	ldw	r18,4(r19)
  808cb8:	9c000217 	ldw	r16,8(r19)
  808cbc:	90bfffc4 	addi	r2,r18,-1
  808cc0:	10000d16 	blt	r2,zero,808cf8 <_fwalk_reent+0x84>
  808cc4:	0023883a 	mov	r17,zero
  808cc8:	053fffc4 	movi	r20,-1
  808ccc:	8080030f 	ldh	r2,12(r16)
  808cd0:	8c400044 	addi	r17,r17,1
  808cd4:	10000626 	beq	r2,zero,808cf0 <_fwalk_reent+0x7c>
  808cd8:	8080038f 	ldh	r2,14(r16)
  808cdc:	800b883a 	mov	r5,r16
  808ce0:	a809883a 	mov	r4,r21
  808ce4:	15000226 	beq	r2,r20,808cf0 <_fwalk_reent+0x7c>
  808ce8:	b03ee83a 	callr	r22
  808cec:	b8aeb03a 	or	r23,r23,r2
  808cf0:	84001704 	addi	r16,r16,92
  808cf4:	947ff51e 	bne	r18,r17,808ccc <_fwalk_reent+0x58>
  808cf8:	9cc00017 	ldw	r19,0(r19)
  808cfc:	983fed1e 	bne	r19,zero,808cb4 <_fwalk_reent+0x40>
  808d00:	08081340 	call	808134 <__sfp_lock_release>
  808d04:	b805883a 	mov	r2,r23
  808d08:	dfc00817 	ldw	ra,32(sp)
  808d0c:	ddc00717 	ldw	r23,28(sp)
  808d10:	dd800617 	ldw	r22,24(sp)
  808d14:	dd400517 	ldw	r21,20(sp)
  808d18:	dd000417 	ldw	r20,16(sp)
  808d1c:	dcc00317 	ldw	r19,12(sp)
  808d20:	dc800217 	ldw	r18,8(sp)
  808d24:	dc400117 	ldw	r17,4(sp)
  808d28:	dc000017 	ldw	r16,0(sp)
  808d2c:	dec00904 	addi	sp,sp,36
  808d30:	f800283a 	ret
  808d34:	002f883a 	mov	r23,zero
  808d38:	003ff106 	br	808d00 <_fwalk_reent+0x8c>

00808d3c <_fwalk>:
  808d3c:	defff804 	addi	sp,sp,-32
  808d40:	dcc00315 	stw	r19,12(sp)
  808d44:	24c0b804 	addi	r19,r4,736
  808d48:	dd400515 	stw	r21,20(sp)
  808d4c:	dfc00715 	stw	ra,28(sp)
  808d50:	dd800615 	stw	r22,24(sp)
  808d54:	dd000415 	stw	r20,16(sp)
  808d58:	dc800215 	stw	r18,8(sp)
  808d5c:	dc400115 	stw	r17,4(sp)
  808d60:	dc000015 	stw	r16,0(sp)
  808d64:	282b883a 	mov	r21,r5
  808d68:	08081300 	call	808130 <__sfp_lock_acquire>
  808d6c:	98001f26 	beq	r19,zero,808dec <_fwalk+0xb0>
  808d70:	002d883a 	mov	r22,zero
  808d74:	9c800117 	ldw	r18,4(r19)
  808d78:	9c000217 	ldw	r16,8(r19)
  808d7c:	90bfffc4 	addi	r2,r18,-1
  808d80:	10000c16 	blt	r2,zero,808db4 <_fwalk+0x78>
  808d84:	0023883a 	mov	r17,zero
  808d88:	053fffc4 	movi	r20,-1
  808d8c:	8080030f 	ldh	r2,12(r16)
  808d90:	8c400044 	addi	r17,r17,1
  808d94:	10000526 	beq	r2,zero,808dac <_fwalk+0x70>
  808d98:	8080038f 	ldh	r2,14(r16)
  808d9c:	8009883a 	mov	r4,r16
  808da0:	15000226 	beq	r2,r20,808dac <_fwalk+0x70>
  808da4:	a83ee83a 	callr	r21
  808da8:	b0acb03a 	or	r22,r22,r2
  808dac:	84001704 	addi	r16,r16,92
  808db0:	947ff61e 	bne	r18,r17,808d8c <_fwalk+0x50>
  808db4:	9cc00017 	ldw	r19,0(r19)
  808db8:	983fee1e 	bne	r19,zero,808d74 <_fwalk+0x38>
  808dbc:	08081340 	call	808134 <__sfp_lock_release>
  808dc0:	b005883a 	mov	r2,r22
  808dc4:	dfc00717 	ldw	ra,28(sp)
  808dc8:	dd800617 	ldw	r22,24(sp)
  808dcc:	dd400517 	ldw	r21,20(sp)
  808dd0:	dd000417 	ldw	r20,16(sp)
  808dd4:	dcc00317 	ldw	r19,12(sp)
  808dd8:	dc800217 	ldw	r18,8(sp)
  808ddc:	dc400117 	ldw	r17,4(sp)
  808de0:	dc000017 	ldw	r16,0(sp)
  808de4:	dec00804 	addi	sp,sp,32
  808de8:	f800283a 	ret
  808dec:	002d883a 	mov	r22,zero
  808df0:	003ff206 	br	808dbc <_fwalk+0x80>

00808df4 <__locale_charset>:
  808df4:	d0a00317 	ldw	r2,-32756(gp)
  808df8:	f800283a 	ret

00808dfc <_localeconv_r>:
  808dfc:	00802234 	movhi	r2,136
  808e00:	109d7f04 	addi	r2,r2,30204
  808e04:	f800283a 	ret

00808e08 <localeconv>:
  808e08:	00802274 	movhi	r2,137
  808e0c:	10a4f804 	addi	r2,r2,-27680
  808e10:	11000017 	ldw	r4,0(r2)
  808e14:	0808dfc1 	jmpi	808dfc <_localeconv_r>

00808e18 <_setlocale_r>:
  808e18:	defffc04 	addi	sp,sp,-16
  808e1c:	00c02234 	movhi	r3,136
  808e20:	18dd7a04 	addi	r3,r3,30184
  808e24:	dc800215 	stw	r18,8(sp)
  808e28:	dc400115 	stw	r17,4(sp)
  808e2c:	dc000015 	stw	r16,0(sp)
  808e30:	2023883a 	mov	r17,r4
  808e34:	2825883a 	mov	r18,r5
  808e38:	dfc00315 	stw	ra,12(sp)
  808e3c:	3021883a 	mov	r16,r6
  808e40:	3009883a 	mov	r4,r6
  808e44:	180b883a 	mov	r5,r3
  808e48:	30000926 	beq	r6,zero,808e70 <_setlocale_r+0x58>
  808e4c:	080b29c0 	call	80b29c <strcmp>
  808e50:	8009883a 	mov	r4,r16
  808e54:	01402234 	movhi	r5,136
  808e58:	295d6504 	addi	r5,r5,30100
  808e5c:	10000b1e 	bne	r2,zero,808e8c <_setlocale_r+0x74>
  808e60:	8c000d15 	stw	r16,52(r17)
  808e64:	8c800c15 	stw	r18,48(r17)
  808e68:	00c02234 	movhi	r3,136
  808e6c:	18dd7a04 	addi	r3,r3,30184
  808e70:	1805883a 	mov	r2,r3
  808e74:	dfc00317 	ldw	ra,12(sp)
  808e78:	dc800217 	ldw	r18,8(sp)
  808e7c:	dc400117 	ldw	r17,4(sp)
  808e80:	dc000017 	ldw	r16,0(sp)
  808e84:	dec00404 	addi	sp,sp,16
  808e88:	f800283a 	ret
  808e8c:	080b29c0 	call	80b29c <strcmp>
  808e90:	0007883a 	mov	r3,zero
  808e94:	103ff226 	beq	r2,zero,808e60 <_setlocale_r+0x48>
  808e98:	003ff506 	br	808e70 <_setlocale_r+0x58>

00808e9c <setlocale>:
  808e9c:	01802274 	movhi	r6,137
  808ea0:	31a4f804 	addi	r6,r6,-27680
  808ea4:	2007883a 	mov	r3,r4
  808ea8:	31000017 	ldw	r4,0(r6)
  808eac:	280d883a 	mov	r6,r5
  808eb0:	180b883a 	mov	r5,r3
  808eb4:	0808e181 	jmpi	808e18 <_setlocale_r>

00808eb8 <__smakebuf_r>:
  808eb8:	2880030b 	ldhu	r2,12(r5)
  808ebc:	deffed04 	addi	sp,sp,-76
  808ec0:	dc401015 	stw	r17,64(sp)
  808ec4:	1080008c 	andi	r2,r2,2
  808ec8:	dc000f15 	stw	r16,60(sp)
  808ecc:	dfc01215 	stw	ra,72(sp)
  808ed0:	dc801115 	stw	r18,68(sp)
  808ed4:	2821883a 	mov	r16,r5
  808ed8:	2023883a 	mov	r17,r4
  808edc:	10000b26 	beq	r2,zero,808f0c <__smakebuf_r+0x54>
  808ee0:	28c010c4 	addi	r3,r5,67
  808ee4:	00800044 	movi	r2,1
  808ee8:	28800515 	stw	r2,20(r5)
  808eec:	28c00415 	stw	r3,16(r5)
  808ef0:	28c00015 	stw	r3,0(r5)
  808ef4:	dfc01217 	ldw	ra,72(sp)
  808ef8:	dc801117 	ldw	r18,68(sp)
  808efc:	dc401017 	ldw	r17,64(sp)
  808f00:	dc000f17 	ldw	r16,60(sp)
  808f04:	dec01304 	addi	sp,sp,76
  808f08:	f800283a 	ret
  808f0c:	2940038f 	ldh	r5,14(r5)
  808f10:	28002116 	blt	r5,zero,808f98 <__smakebuf_r+0xe0>
  808f14:	d80d883a 	mov	r6,sp
  808f18:	080b68c0 	call	80b68c <_fstat_r>
  808f1c:	10001e16 	blt	r2,zero,808f98 <__smakebuf_r+0xe0>
  808f20:	d8800117 	ldw	r2,4(sp)
  808f24:	00e00014 	movui	r3,32768
  808f28:	113c000c 	andi	r4,r2,61440
  808f2c:	20c03126 	beq	r4,r3,808ff4 <__smakebuf_r+0x13c>
  808f30:	8080030b 	ldhu	r2,12(r16)
  808f34:	00c80004 	movi	r3,8192
  808f38:	10820014 	ori	r2,r2,2048
  808f3c:	8080030d 	sth	r2,12(r16)
  808f40:	20c01e26 	beq	r4,r3,808fbc <__smakebuf_r+0x104>
  808f44:	04810004 	movi	r18,1024
  808f48:	8809883a 	mov	r4,r17
  808f4c:	900b883a 	mov	r5,r18
  808f50:	080904c0 	call	80904c <_malloc_r>
  808f54:	1009883a 	mov	r4,r2
  808f58:	10003126 	beq	r2,zero,809020 <__smakebuf_r+0x168>
  808f5c:	80c0030b 	ldhu	r3,12(r16)
  808f60:	00802074 	movhi	r2,129
  808f64:	10a08904 	addi	r2,r2,-32220
  808f68:	88800f15 	stw	r2,60(r17)
  808f6c:	18c02014 	ori	r3,r3,128
  808f70:	84800515 	stw	r18,20(r16)
  808f74:	80c0030d 	sth	r3,12(r16)
  808f78:	81000415 	stw	r4,16(r16)
  808f7c:	81000015 	stw	r4,0(r16)
  808f80:	dfc01217 	ldw	ra,72(sp)
  808f84:	dc801117 	ldw	r18,68(sp)
  808f88:	dc401017 	ldw	r17,64(sp)
  808f8c:	dc000f17 	ldw	r16,60(sp)
  808f90:	dec01304 	addi	sp,sp,76
  808f94:	f800283a 	ret
  808f98:	80c0030b 	ldhu	r3,12(r16)
  808f9c:	1880200c 	andi	r2,r3,128
  808fa0:	10000426 	beq	r2,zero,808fb4 <__smakebuf_r+0xfc>
  808fa4:	04801004 	movi	r18,64
  808fa8:	18820014 	ori	r2,r3,2048
  808fac:	8080030d 	sth	r2,12(r16)
  808fb0:	003fe506 	br	808f48 <__smakebuf_r+0x90>
  808fb4:	04810004 	movi	r18,1024
  808fb8:	003ffb06 	br	808fa8 <__smakebuf_r+0xf0>
  808fbc:	8140038f 	ldh	r5,14(r16)
  808fc0:	8809883a 	mov	r4,r17
  808fc4:	080b7000 	call	80b700 <_isatty_r>
  808fc8:	103fde26 	beq	r2,zero,808f44 <__smakebuf_r+0x8c>
  808fcc:	8080030b 	ldhu	r2,12(r16)
  808fd0:	80c010c4 	addi	r3,r16,67
  808fd4:	04810004 	movi	r18,1024
  808fd8:	10800054 	ori	r2,r2,1
  808fdc:	8080030d 	sth	r2,12(r16)
  808fe0:	00800044 	movi	r2,1
  808fe4:	80c00415 	stw	r3,16(r16)
  808fe8:	80800515 	stw	r2,20(r16)
  808fec:	80c00015 	stw	r3,0(r16)
  808ff0:	003fd506 	br	808f48 <__smakebuf_r+0x90>
  808ff4:	80c00a17 	ldw	r3,40(r16)
  808ff8:	00802074 	movhi	r2,129
  808ffc:	10ac5604 	addi	r2,r2,-20136
  809000:	18bfcb1e 	bne	r3,r2,808f30 <__smakebuf_r+0x78>
  809004:	8080030b 	ldhu	r2,12(r16)
  809008:	00c10004 	movi	r3,1024
  80900c:	1825883a 	mov	r18,r3
  809010:	10c4b03a 	or	r2,r2,r3
  809014:	8080030d 	sth	r2,12(r16)
  809018:	80c01315 	stw	r3,76(r16)
  80901c:	003fca06 	br	808f48 <__smakebuf_r+0x90>
  809020:	8100030b 	ldhu	r4,12(r16)
  809024:	2080800c 	andi	r2,r4,512
  809028:	103fb21e 	bne	r2,zero,808ef4 <__smakebuf_r+0x3c>
  80902c:	80c010c4 	addi	r3,r16,67
  809030:	21000094 	ori	r4,r4,2
  809034:	00800044 	movi	r2,1
  809038:	80800515 	stw	r2,20(r16)
  80903c:	8100030d 	sth	r4,12(r16)
  809040:	80c00415 	stw	r3,16(r16)
  809044:	80c00015 	stw	r3,0(r16)
  809048:	003faa06 	br	808ef4 <__smakebuf_r+0x3c>

0080904c <_malloc_r>:
  80904c:	defff604 	addi	sp,sp,-40
  809050:	28c002c4 	addi	r3,r5,11
  809054:	00800584 	movi	r2,22
  809058:	dc800215 	stw	r18,8(sp)
  80905c:	dfc00915 	stw	ra,36(sp)
  809060:	df000815 	stw	fp,32(sp)
  809064:	ddc00715 	stw	r23,28(sp)
  809068:	dd800615 	stw	r22,24(sp)
  80906c:	dd400515 	stw	r21,20(sp)
  809070:	dd000415 	stw	r20,16(sp)
  809074:	dcc00315 	stw	r19,12(sp)
  809078:	dc400115 	stw	r17,4(sp)
  80907c:	dc000015 	stw	r16,0(sp)
  809080:	2025883a 	mov	r18,r4
  809084:	10c01236 	bltu	r2,r3,8090d0 <_malloc_r+0x84>
  809088:	04400404 	movi	r17,16
  80908c:	8940142e 	bgeu	r17,r5,8090e0 <_malloc_r+0x94>
  809090:	00800304 	movi	r2,12
  809094:	0007883a 	mov	r3,zero
  809098:	90800015 	stw	r2,0(r18)
  80909c:	1805883a 	mov	r2,r3
  8090a0:	dfc00917 	ldw	ra,36(sp)
  8090a4:	df000817 	ldw	fp,32(sp)
  8090a8:	ddc00717 	ldw	r23,28(sp)
  8090ac:	dd800617 	ldw	r22,24(sp)
  8090b0:	dd400517 	ldw	r21,20(sp)
  8090b4:	dd000417 	ldw	r20,16(sp)
  8090b8:	dcc00317 	ldw	r19,12(sp)
  8090bc:	dc800217 	ldw	r18,8(sp)
  8090c0:	dc400117 	ldw	r17,4(sp)
  8090c4:	dc000017 	ldw	r16,0(sp)
  8090c8:	dec00a04 	addi	sp,sp,40
  8090cc:	f800283a 	ret
  8090d0:	00bffe04 	movi	r2,-8
  8090d4:	18a2703a 	and	r17,r3,r2
  8090d8:	883fed16 	blt	r17,zero,809090 <_malloc_r+0x44>
  8090dc:	897fec36 	bltu	r17,r5,809090 <_malloc_r+0x44>
  8090e0:	9009883a 	mov	r4,r18
  8090e4:	080cf6c0 	call	80cf6c <__malloc_lock>
  8090e8:	00807dc4 	movi	r2,503
  8090ec:	14402b2e 	bgeu	r2,r17,80919c <_malloc_r+0x150>
  8090f0:	8806d27a 	srli	r3,r17,9
  8090f4:	18003f1e 	bne	r3,zero,8091f4 <_malloc_r+0x1a8>
  8090f8:	880cd0fa 	srli	r6,r17,3
  8090fc:	300490fa 	slli	r2,r6,3
  809100:	02c02234 	movhi	r11,136
  809104:	5adf7404 	addi	r11,r11,32208
  809108:	12cb883a 	add	r5,r2,r11
  80910c:	2c000317 	ldw	r16,12(r5)
  809110:	580f883a 	mov	r7,r11
  809114:	2c00041e 	bne	r5,r16,809128 <_malloc_r+0xdc>
  809118:	00000a06 	br	809144 <_malloc_r+0xf8>
  80911c:	1800860e 	bge	r3,zero,809338 <_malloc_r+0x2ec>
  809120:	84000317 	ldw	r16,12(r16)
  809124:	2c000726 	beq	r5,r16,809144 <_malloc_r+0xf8>
  809128:	80800117 	ldw	r2,4(r16)
  80912c:	00ffff04 	movi	r3,-4
  809130:	10c8703a 	and	r4,r2,r3
  809134:	2447c83a 	sub	r3,r4,r17
  809138:	008003c4 	movi	r2,15
  80913c:	10fff70e 	bge	r2,r3,80911c <_malloc_r+0xd0>
  809140:	31bfffc4 	addi	r6,r6,-1
  809144:	32400044 	addi	r9,r6,1
  809148:	02802234 	movhi	r10,136
  80914c:	529f7604 	addi	r10,r10,32216
  809150:	54000217 	ldw	r16,8(r10)
  809154:	8280a026 	beq	r16,r10,8093d8 <_malloc_r+0x38c>
  809158:	80800117 	ldw	r2,4(r16)
  80915c:	00ffff04 	movi	r3,-4
  809160:	10ca703a 	and	r5,r2,r3
  809164:	2c4dc83a 	sub	r6,r5,r17
  809168:	008003c4 	movi	r2,15
  80916c:	11808316 	blt	r2,r6,80937c <_malloc_r+0x330>
  809170:	52800315 	stw	r10,12(r10)
  809174:	52800215 	stw	r10,8(r10)
  809178:	30002916 	blt	r6,zero,809220 <_malloc_r+0x1d4>
  80917c:	8147883a 	add	r3,r16,r5
  809180:	18800117 	ldw	r2,4(r3)
  809184:	9009883a 	mov	r4,r18
  809188:	10800054 	ori	r2,r2,1
  80918c:	18800115 	stw	r2,4(r3)
  809190:	080cf8c0 	call	80cf8c <__malloc_unlock>
  809194:	80c00204 	addi	r3,r16,8
  809198:	003fc006 	br	80909c <_malloc_r+0x50>
  80919c:	02c02234 	movhi	r11,136
  8091a0:	5adf7404 	addi	r11,r11,32208
  8091a4:	8ac5883a 	add	r2,r17,r11
  8091a8:	14000317 	ldw	r16,12(r2)
  8091ac:	580f883a 	mov	r7,r11
  8091b0:	8806d0fa 	srli	r3,r17,3
  8091b4:	14006c26 	beq	r2,r16,809368 <_malloc_r+0x31c>
  8091b8:	80c00117 	ldw	r3,4(r16)
  8091bc:	00bfff04 	movi	r2,-4
  8091c0:	81800317 	ldw	r6,12(r16)
  8091c4:	1886703a 	and	r3,r3,r2
  8091c8:	80c7883a 	add	r3,r16,r3
  8091cc:	18800117 	ldw	r2,4(r3)
  8091d0:	81400217 	ldw	r5,8(r16)
  8091d4:	9009883a 	mov	r4,r18
  8091d8:	10800054 	ori	r2,r2,1
  8091dc:	18800115 	stw	r2,4(r3)
  8091e0:	31400215 	stw	r5,8(r6)
  8091e4:	29800315 	stw	r6,12(r5)
  8091e8:	080cf8c0 	call	80cf8c <__malloc_unlock>
  8091ec:	80c00204 	addi	r3,r16,8
  8091f0:	003faa06 	br	80909c <_malloc_r+0x50>
  8091f4:	00800104 	movi	r2,4
  8091f8:	10c0052e 	bgeu	r2,r3,809210 <_malloc_r+0x1c4>
  8091fc:	00800504 	movi	r2,20
  809200:	10c07836 	bltu	r2,r3,8093e4 <_malloc_r+0x398>
  809204:	198016c4 	addi	r6,r3,91
  809208:	300490fa 	slli	r2,r6,3
  80920c:	003fbc06 	br	809100 <_malloc_r+0xb4>
  809210:	8804d1ba 	srli	r2,r17,6
  809214:	11800e04 	addi	r6,r2,56
  809218:	300490fa 	slli	r2,r6,3
  80921c:	003fb806 	br	809100 <_malloc_r+0xb4>
  809220:	00807fc4 	movi	r2,511
  809224:	1140bb36 	bltu	r2,r5,809514 <_malloc_r+0x4c8>
  809228:	2806d0fa 	srli	r3,r5,3
  80922c:	573ffe04 	addi	fp,r10,-8
  809230:	00800044 	movi	r2,1
  809234:	180890fa 	slli	r4,r3,3
  809238:	1807d0ba 	srai	r3,r3,2
  80923c:	e1c00117 	ldw	r7,4(fp)
  809240:	5909883a 	add	r4,r11,r4
  809244:	21400217 	ldw	r5,8(r4)
  809248:	10c4983a 	sll	r2,r2,r3
  80924c:	81000315 	stw	r4,12(r16)
  809250:	81400215 	stw	r5,8(r16)
  809254:	388eb03a 	or	r7,r7,r2
  809258:	2c000315 	stw	r16,12(r5)
  80925c:	24000215 	stw	r16,8(r4)
  809260:	e1c00115 	stw	r7,4(fp)
  809264:	4807883a 	mov	r3,r9
  809268:	4800cd16 	blt	r9,zero,8095a0 <_malloc_r+0x554>
  80926c:	1807d0ba 	srai	r3,r3,2
  809270:	00800044 	movi	r2,1
  809274:	10c8983a 	sll	r4,r2,r3
  809278:	39004436 	bltu	r7,r4,80938c <_malloc_r+0x340>
  80927c:	21c4703a 	and	r2,r4,r7
  809280:	10000a1e 	bne	r2,zero,8092ac <_malloc_r+0x260>
  809284:	2109883a 	add	r4,r4,r4
  809288:	00bfff04 	movi	r2,-4
  80928c:	4884703a 	and	r2,r9,r2
  809290:	3906703a 	and	r3,r7,r4
  809294:	12400104 	addi	r9,r2,4
  809298:	1800041e 	bne	r3,zero,8092ac <_malloc_r+0x260>
  80929c:	2109883a 	add	r4,r4,r4
  8092a0:	3904703a 	and	r2,r7,r4
  8092a4:	4a400104 	addi	r9,r9,4
  8092a8:	103ffc26 	beq	r2,zero,80929c <_malloc_r+0x250>
  8092ac:	480490fa 	slli	r2,r9,3
  8092b0:	4819883a 	mov	r12,r9
  8092b4:	023fff04 	movi	r8,-4
  8092b8:	589b883a 	add	r13,r11,r2
  8092bc:	6807883a 	mov	r3,r13
  8092c0:	014003c4 	movi	r5,15
  8092c4:	1c000317 	ldw	r16,12(r3)
  8092c8:	1c00041e 	bne	r3,r16,8092dc <_malloc_r+0x290>
  8092cc:	0000a706 	br	80956c <_malloc_r+0x520>
  8092d0:	3000ab0e 	bge	r6,zero,809580 <_malloc_r+0x534>
  8092d4:	84000317 	ldw	r16,12(r16)
  8092d8:	1c00a426 	beq	r3,r16,80956c <_malloc_r+0x520>
  8092dc:	80800117 	ldw	r2,4(r16)
  8092e0:	1204703a 	and	r2,r2,r8
  8092e4:	144dc83a 	sub	r6,r2,r17
  8092e8:	29bff90e 	bge	r5,r6,8092d0 <_malloc_r+0x284>
  8092ec:	81000317 	ldw	r4,12(r16)
  8092f0:	80c00217 	ldw	r3,8(r16)
  8092f4:	89400054 	ori	r5,r17,1
  8092f8:	8445883a 	add	r2,r16,r17
  8092fc:	20c00215 	stw	r3,8(r4)
  809300:	19000315 	stw	r4,12(r3)
  809304:	81400115 	stw	r5,4(r16)
  809308:	1187883a 	add	r3,r2,r6
  80930c:	31000054 	ori	r4,r6,1
  809310:	50800315 	stw	r2,12(r10)
  809314:	50800215 	stw	r2,8(r10)
  809318:	19800015 	stw	r6,0(r3)
  80931c:	11000115 	stw	r4,4(r2)
  809320:	12800215 	stw	r10,8(r2)
  809324:	12800315 	stw	r10,12(r2)
  809328:	9009883a 	mov	r4,r18
  80932c:	080cf8c0 	call	80cf8c <__malloc_unlock>
  809330:	80c00204 	addi	r3,r16,8
  809334:	003f5906 	br	80909c <_malloc_r+0x50>
  809338:	8109883a 	add	r4,r16,r4
  80933c:	20800117 	ldw	r2,4(r4)
  809340:	80c00217 	ldw	r3,8(r16)
  809344:	81400317 	ldw	r5,12(r16)
  809348:	10800054 	ori	r2,r2,1
  80934c:	20800115 	stw	r2,4(r4)
  809350:	28c00215 	stw	r3,8(r5)
  809354:	19400315 	stw	r5,12(r3)
  809358:	9009883a 	mov	r4,r18
  80935c:	080cf8c0 	call	80cf8c <__malloc_unlock>
  809360:	80c00204 	addi	r3,r16,8
  809364:	003f4d06 	br	80909c <_malloc_r+0x50>
  809368:	80800204 	addi	r2,r16,8
  80936c:	14000317 	ldw	r16,12(r2)
  809370:	143f911e 	bne	r2,r16,8091b8 <_malloc_r+0x16c>
  809374:	1a400084 	addi	r9,r3,2
  809378:	003f7306 	br	809148 <_malloc_r+0xfc>
  80937c:	88c00054 	ori	r3,r17,1
  809380:	8445883a 	add	r2,r16,r17
  809384:	80c00115 	stw	r3,4(r16)
  809388:	003fdf06 	br	809308 <_malloc_r+0x2bc>
  80938c:	e4000217 	ldw	r16,8(fp)
  809390:	00bfff04 	movi	r2,-4
  809394:	80c00117 	ldw	r3,4(r16)
  809398:	802d883a 	mov	r22,r16
  80939c:	18aa703a 	and	r21,r3,r2
  8093a0:	ac401636 	bltu	r21,r17,8093fc <_malloc_r+0x3b0>
  8093a4:	ac49c83a 	sub	r4,r21,r17
  8093a8:	008003c4 	movi	r2,15
  8093ac:	1100130e 	bge	r2,r4,8093fc <_malloc_r+0x3b0>
  8093b0:	88800054 	ori	r2,r17,1
  8093b4:	8447883a 	add	r3,r16,r17
  8093b8:	80800115 	stw	r2,4(r16)
  8093bc:	20800054 	ori	r2,r4,1
  8093c0:	18800115 	stw	r2,4(r3)
  8093c4:	e0c00215 	stw	r3,8(fp)
  8093c8:	9009883a 	mov	r4,r18
  8093cc:	080cf8c0 	call	80cf8c <__malloc_unlock>
  8093d0:	80c00204 	addi	r3,r16,8
  8093d4:	003f3106 	br	80909c <_malloc_r+0x50>
  8093d8:	39c00117 	ldw	r7,4(r7)
  8093dc:	573ffe04 	addi	fp,r10,-8
  8093e0:	003fa006 	br	809264 <_malloc_r+0x218>
  8093e4:	00801504 	movi	r2,84
  8093e8:	10c06736 	bltu	r2,r3,809588 <_malloc_r+0x53c>
  8093ec:	8804d33a 	srli	r2,r17,12
  8093f0:	11801b84 	addi	r6,r2,110
  8093f4:	300490fa 	slli	r2,r6,3
  8093f8:	003f4106 	br	809100 <_malloc_r+0xb4>
  8093fc:	d0a73a17 	ldw	r2,-25368(gp)
  809400:	d0e00517 	ldw	r3,-32748(gp)
  809404:	053fffc4 	movi	r20,-1
  809408:	10800404 	addi	r2,r2,16
  80940c:	88a7883a 	add	r19,r17,r2
  809410:	1d000326 	beq	r3,r20,809420 <_malloc_r+0x3d4>
  809414:	98c3ffc4 	addi	r3,r19,4095
  809418:	00bc0004 	movi	r2,-4096
  80941c:	18a6703a 	and	r19,r3,r2
  809420:	9009883a 	mov	r4,r18
  809424:	980b883a 	mov	r5,r19
  809428:	080b0e00 	call	80b0e0 <_sbrk_r>
  80942c:	1009883a 	mov	r4,r2
  809430:	15000426 	beq	r2,r20,809444 <_malloc_r+0x3f8>
  809434:	854b883a 	add	r5,r16,r21
  809438:	1029883a 	mov	r20,r2
  80943c:	11405a2e 	bgeu	r2,r5,8095a8 <_malloc_r+0x55c>
  809440:	87000c26 	beq	r16,fp,809474 <_malloc_r+0x428>
  809444:	e4000217 	ldw	r16,8(fp)
  809448:	80c00117 	ldw	r3,4(r16)
  80944c:	00bfff04 	movi	r2,-4
  809450:	1884703a 	and	r2,r3,r2
  809454:	14400336 	bltu	r2,r17,809464 <_malloc_r+0x418>
  809458:	1449c83a 	sub	r4,r2,r17
  80945c:	008003c4 	movi	r2,15
  809460:	113fd316 	blt	r2,r4,8093b0 <_malloc_r+0x364>
  809464:	9009883a 	mov	r4,r18
  809468:	080cf8c0 	call	80cf8c <__malloc_unlock>
  80946c:	0007883a 	mov	r3,zero
  809470:	003f0a06 	br	80909c <_malloc_r+0x50>
  809474:	05c02274 	movhi	r23,137
  809478:	bdec3c04 	addi	r23,r23,-20240
  80947c:	b8800017 	ldw	r2,0(r23)
  809480:	988d883a 	add	r6,r19,r2
  809484:	b9800015 	stw	r6,0(r23)
  809488:	d0e00517 	ldw	r3,-32748(gp)
  80948c:	00bfffc4 	movi	r2,-1
  809490:	18808e26 	beq	r3,r2,8096cc <_malloc_r+0x680>
  809494:	2145c83a 	sub	r2,r4,r5
  809498:	3085883a 	add	r2,r6,r2
  80949c:	b8800015 	stw	r2,0(r23)
  8094a0:	20c001cc 	andi	r3,r4,7
  8094a4:	18005f1e 	bne	r3,zero,809624 <_malloc_r+0x5d8>
  8094a8:	000b883a 	mov	r5,zero
  8094ac:	a4c5883a 	add	r2,r20,r19
  8094b0:	1083ffcc 	andi	r2,r2,4095
  8094b4:	00c40004 	movi	r3,4096
  8094b8:	1887c83a 	sub	r3,r3,r2
  8094bc:	28e7883a 	add	r19,r5,r3
  8094c0:	9009883a 	mov	r4,r18
  8094c4:	980b883a 	mov	r5,r19
  8094c8:	080b0e00 	call	80b0e0 <_sbrk_r>
  8094cc:	1007883a 	mov	r3,r2
  8094d0:	00bfffc4 	movi	r2,-1
  8094d4:	18807a26 	beq	r3,r2,8096c0 <_malloc_r+0x674>
  8094d8:	1d05c83a 	sub	r2,r3,r20
  8094dc:	9885883a 	add	r2,r19,r2
  8094e0:	10c00054 	ori	r3,r2,1
  8094e4:	b8800017 	ldw	r2,0(r23)
  8094e8:	a021883a 	mov	r16,r20
  8094ec:	a0c00115 	stw	r3,4(r20)
  8094f0:	9885883a 	add	r2,r19,r2
  8094f4:	b8800015 	stw	r2,0(r23)
  8094f8:	e5000215 	stw	r20,8(fp)
  8094fc:	b7003626 	beq	r22,fp,8095d8 <_malloc_r+0x58c>
  809500:	018003c4 	movi	r6,15
  809504:	35404b36 	bltu	r6,r21,809634 <_malloc_r+0x5e8>
  809508:	00800044 	movi	r2,1
  80950c:	a0800115 	stw	r2,4(r20)
  809510:	003fcd06 	br	809448 <_malloc_r+0x3fc>
  809514:	2808d27a 	srli	r4,r5,9
  809518:	2000371e 	bne	r4,zero,8095f8 <_malloc_r+0x5ac>
  80951c:	2808d0fa 	srli	r4,r5,3
  809520:	200690fa 	slli	r3,r4,3
  809524:	1ad1883a 	add	r8,r3,r11
  809528:	41800217 	ldw	r6,8(r8)
  80952c:	41805b26 	beq	r8,r6,80969c <_malloc_r+0x650>
  809530:	30800117 	ldw	r2,4(r6)
  809534:	00ffff04 	movi	r3,-4
  809538:	10c4703a 	and	r2,r2,r3
  80953c:	2880022e 	bgeu	r5,r2,809548 <_malloc_r+0x4fc>
  809540:	31800217 	ldw	r6,8(r6)
  809544:	41bffa1e 	bne	r8,r6,809530 <_malloc_r+0x4e4>
  809548:	32000317 	ldw	r8,12(r6)
  80954c:	39c00117 	ldw	r7,4(r7)
  809550:	82000315 	stw	r8,12(r16)
  809554:	81800215 	stw	r6,8(r16)
  809558:	07002234 	movhi	fp,136
  80955c:	e71f7404 	addi	fp,fp,32208
  809560:	34000315 	stw	r16,12(r6)
  809564:	44000215 	stw	r16,8(r8)
  809568:	003f3e06 	br	809264 <_malloc_r+0x218>
  80956c:	63000044 	addi	r12,r12,1
  809570:	608000cc 	andi	r2,r12,3
  809574:	10005d26 	beq	r2,zero,8096ec <_malloc_r+0x6a0>
  809578:	18c00204 	addi	r3,r3,8
  80957c:	003f5106 	br	8092c4 <_malloc_r+0x278>
  809580:	8089883a 	add	r4,r16,r2
  809584:	003f6d06 	br	80933c <_malloc_r+0x2f0>
  809588:	00805504 	movi	r2,340
  80958c:	10c02036 	bltu	r2,r3,809610 <_malloc_r+0x5c4>
  809590:	8804d3fa 	srli	r2,r17,15
  809594:	11801dc4 	addi	r6,r2,119
  809598:	300490fa 	slli	r2,r6,3
  80959c:	003ed806 	br	809100 <_malloc_r+0xb4>
  8095a0:	48c000c4 	addi	r3,r9,3
  8095a4:	003f3106 	br	80926c <_malloc_r+0x220>
  8095a8:	05c02274 	movhi	r23,137
  8095ac:	bdec3c04 	addi	r23,r23,-20240
  8095b0:	b8800017 	ldw	r2,0(r23)
  8095b4:	988d883a 	add	r6,r19,r2
  8095b8:	b9800015 	stw	r6,0(r23)
  8095bc:	293fb21e 	bne	r5,r4,809488 <_malloc_r+0x43c>
  8095c0:	2083ffcc 	andi	r2,r4,4095
  8095c4:	103fb01e 	bne	r2,zero,809488 <_malloc_r+0x43c>
  8095c8:	e4000217 	ldw	r16,8(fp)
  8095cc:	9d45883a 	add	r2,r19,r21
  8095d0:	10800054 	ori	r2,r2,1
  8095d4:	80800115 	stw	r2,4(r16)
  8095d8:	b8c00017 	ldw	r3,0(r23)
  8095dc:	d0a73b17 	ldw	r2,-25364(gp)
  8095e0:	10c0012e 	bgeu	r2,r3,8095e8 <_malloc_r+0x59c>
  8095e4:	d0e73b15 	stw	r3,-25364(gp)
  8095e8:	d0a73c17 	ldw	r2,-25360(gp)
  8095ec:	10ff962e 	bgeu	r2,r3,809448 <_malloc_r+0x3fc>
  8095f0:	d0e73c15 	stw	r3,-25360(gp)
  8095f4:	003f9406 	br	809448 <_malloc_r+0x3fc>
  8095f8:	00800104 	movi	r2,4
  8095fc:	11001e36 	bltu	r2,r4,809678 <_malloc_r+0x62c>
  809600:	2804d1ba 	srli	r2,r5,6
  809604:	11000e04 	addi	r4,r2,56
  809608:	200690fa 	slli	r3,r4,3
  80960c:	003fc506 	br	809524 <_malloc_r+0x4d8>
  809610:	00815504 	movi	r2,1364
  809614:	10c01d2e 	bgeu	r2,r3,80968c <_malloc_r+0x640>
  809618:	01801f84 	movi	r6,126
  80961c:	0080fc04 	movi	r2,1008
  809620:	003eb706 	br	809100 <_malloc_r+0xb4>
  809624:	00800204 	movi	r2,8
  809628:	10cbc83a 	sub	r5,r2,r3
  80962c:	2169883a 	add	r20,r4,r5
  809630:	003f9e06 	br	8094ac <_malloc_r+0x460>
  809634:	00bffe04 	movi	r2,-8
  809638:	a93ffd04 	addi	r4,r21,-12
  80963c:	2088703a 	and	r4,r4,r2
  809640:	b10b883a 	add	r5,r22,r4
  809644:	00c00144 	movi	r3,5
  809648:	28c00215 	stw	r3,8(r5)
  80964c:	28c00115 	stw	r3,4(r5)
  809650:	b0800117 	ldw	r2,4(r22)
  809654:	1080004c 	andi	r2,r2,1
  809658:	2084b03a 	or	r2,r4,r2
  80965c:	b0800115 	stw	r2,4(r22)
  809660:	313fdd2e 	bgeu	r6,r4,8095d8 <_malloc_r+0x58c>
  809664:	b1400204 	addi	r5,r22,8
  809668:	9009883a 	mov	r4,r18
  80966c:	08084c40 	call	8084c4 <_free_r>
  809670:	e4000217 	ldw	r16,8(fp)
  809674:	003fd806 	br	8095d8 <_malloc_r+0x58c>
  809678:	00800504 	movi	r2,20
  80967c:	11001536 	bltu	r2,r4,8096d4 <_malloc_r+0x688>
  809680:	210016c4 	addi	r4,r4,91
  809684:	200690fa 	slli	r3,r4,3
  809688:	003fa606 	br	809524 <_malloc_r+0x4d8>
  80968c:	8804d4ba 	srli	r2,r17,18
  809690:	11801f04 	addi	r6,r2,124
  809694:	300490fa 	slli	r2,r6,3
  809698:	003e9906 	br	809100 <_malloc_r+0xb4>
  80969c:	2009d0ba 	srai	r4,r4,2
  8096a0:	01402234 	movhi	r5,136
  8096a4:	295f7404 	addi	r5,r5,32208
  8096a8:	00c00044 	movi	r3,1
  8096ac:	28800117 	ldw	r2,4(r5)
  8096b0:	1906983a 	sll	r3,r3,r4
  8096b4:	10c4b03a 	or	r2,r2,r3
  8096b8:	28800115 	stw	r2,4(r5)
  8096bc:	003fa306 	br	80954c <_malloc_r+0x500>
  8096c0:	0027883a 	mov	r19,zero
  8096c4:	00c00044 	movi	r3,1
  8096c8:	003f8606 	br	8094e4 <_malloc_r+0x498>
  8096cc:	d1200515 	stw	r4,-32748(gp)
  8096d0:	003f7306 	br	8094a0 <_malloc_r+0x454>
  8096d4:	00801504 	movi	r2,84
  8096d8:	11001936 	bltu	r2,r4,809740 <_malloc_r+0x6f4>
  8096dc:	2804d33a 	srli	r2,r5,12
  8096e0:	11001b84 	addi	r4,r2,110
  8096e4:	200690fa 	slli	r3,r4,3
  8096e8:	003f8e06 	br	809524 <_malloc_r+0x4d8>
  8096ec:	480b883a 	mov	r5,r9
  8096f0:	6807883a 	mov	r3,r13
  8096f4:	288000cc 	andi	r2,r5,3
  8096f8:	18fffe04 	addi	r3,r3,-8
  8096fc:	297fffc4 	addi	r5,r5,-1
  809700:	10001526 	beq	r2,zero,809758 <_malloc_r+0x70c>
  809704:	18800217 	ldw	r2,8(r3)
  809708:	10fffa26 	beq	r2,r3,8096f4 <_malloc_r+0x6a8>
  80970c:	2109883a 	add	r4,r4,r4
  809710:	393f1e36 	bltu	r7,r4,80938c <_malloc_r+0x340>
  809714:	203f1d26 	beq	r4,zero,80938c <_malloc_r+0x340>
  809718:	21c4703a 	and	r2,r4,r7
  80971c:	10000226 	beq	r2,zero,809728 <_malloc_r+0x6dc>
  809720:	6013883a 	mov	r9,r12
  809724:	003ee106 	br	8092ac <_malloc_r+0x260>
  809728:	2109883a 	add	r4,r4,r4
  80972c:	3904703a 	and	r2,r7,r4
  809730:	63000104 	addi	r12,r12,4
  809734:	103ffc26 	beq	r2,zero,809728 <_malloc_r+0x6dc>
  809738:	6013883a 	mov	r9,r12
  80973c:	003edb06 	br	8092ac <_malloc_r+0x260>
  809740:	00805504 	movi	r2,340
  809744:	11000836 	bltu	r2,r4,809768 <_malloc_r+0x71c>
  809748:	2804d3fa 	srli	r2,r5,15
  80974c:	11001dc4 	addi	r4,r2,119
  809750:	200690fa 	slli	r3,r4,3
  809754:	003f7306 	br	809524 <_malloc_r+0x4d8>
  809758:	0104303a 	nor	r2,zero,r4
  80975c:	388e703a 	and	r7,r7,r2
  809760:	e1c00115 	stw	r7,4(fp)
  809764:	003fe906 	br	80970c <_malloc_r+0x6c0>
  809768:	00815504 	movi	r2,1364
  80976c:	1100032e 	bgeu	r2,r4,80977c <_malloc_r+0x730>
  809770:	01001f84 	movi	r4,126
  809774:	00c0fc04 	movi	r3,1008
  809778:	003f6a06 	br	809524 <_malloc_r+0x4d8>
  80977c:	2804d4ba 	srli	r2,r5,18
  809780:	11001f04 	addi	r4,r2,124
  809784:	200690fa 	slli	r3,r4,3
  809788:	003f6606 	br	809524 <_malloc_r+0x4d8>

0080978c <memchr>:
  80978c:	008000c4 	movi	r2,3
  809790:	29403fcc 	andi	r5,r5,255
  809794:	2007883a 	mov	r3,r4
  809798:	1180022e 	bgeu	r2,r6,8097a4 <memchr+0x18>
  80979c:	2084703a 	and	r2,r4,r2
  8097a0:	10000b26 	beq	r2,zero,8097d0 <memchr+0x44>
  8097a4:	313fffc4 	addi	r4,r6,-1
  8097a8:	3000051e 	bne	r6,zero,8097c0 <memchr+0x34>
  8097ac:	00002c06 	br	809860 <memchr+0xd4>
  8097b0:	213fffc4 	addi	r4,r4,-1
  8097b4:	00bfffc4 	movi	r2,-1
  8097b8:	18c00044 	addi	r3,r3,1
  8097bc:	20802826 	beq	r4,r2,809860 <memchr+0xd4>
  8097c0:	18800003 	ldbu	r2,0(r3)
  8097c4:	28bffa1e 	bne	r5,r2,8097b0 <memchr+0x24>
  8097c8:	1805883a 	mov	r2,r3
  8097cc:	f800283a 	ret
  8097d0:	0011883a 	mov	r8,zero
  8097d4:	0007883a 	mov	r3,zero
  8097d8:	01c00104 	movi	r7,4
  8097dc:	4004923a 	slli	r2,r8,8
  8097e0:	18c00044 	addi	r3,r3,1
  8097e4:	1151883a 	add	r8,r2,r5
  8097e8:	19fffc1e 	bne	r3,r7,8097dc <memchr+0x50>
  8097ec:	02bfbff4 	movhi	r10,65279
  8097f0:	52bfbfc4 	addi	r10,r10,-257
  8097f4:	02602074 	movhi	r9,32897
  8097f8:	4a602004 	addi	r9,r9,-32640
  8097fc:	02c000c4 	movi	r11,3
  809800:	20800017 	ldw	r2,0(r4)
  809804:	31bfff04 	addi	r6,r6,-4
  809808:	200f883a 	mov	r7,r4
  80980c:	1204f03a 	xor	r2,r2,r8
  809810:	1287883a 	add	r3,r2,r10
  809814:	1a46703a 	and	r3,r3,r9
  809818:	0084303a 	nor	r2,zero,r2
  80981c:	10c4703a 	and	r2,r2,r3
  809820:	10000b26 	beq	r2,zero,809850 <memchr+0xc4>
  809824:	20800003 	ldbu	r2,0(r4)
  809828:	28800f26 	beq	r5,r2,809868 <memchr+0xdc>
  80982c:	20800043 	ldbu	r2,1(r4)
  809830:	21c00044 	addi	r7,r4,1
  809834:	28800c26 	beq	r5,r2,809868 <memchr+0xdc>
  809838:	20800083 	ldbu	r2,2(r4)
  80983c:	21c00084 	addi	r7,r4,2
  809840:	28800926 	beq	r5,r2,809868 <memchr+0xdc>
  809844:	208000c3 	ldbu	r2,3(r4)
  809848:	21c000c4 	addi	r7,r4,3
  80984c:	28800626 	beq	r5,r2,809868 <memchr+0xdc>
  809850:	21000104 	addi	r4,r4,4
  809854:	59bfea36 	bltu	r11,r6,809800 <memchr+0x74>
  809858:	2007883a 	mov	r3,r4
  80985c:	003fd106 	br	8097a4 <memchr+0x18>
  809860:	0005883a 	mov	r2,zero
  809864:	f800283a 	ret
  809868:	3805883a 	mov	r2,r7
  80986c:	f800283a 	ret

00809870 <memcpy>:
  809870:	01c003c4 	movi	r7,15
  809874:	2007883a 	mov	r3,r4
  809878:	3980032e 	bgeu	r7,r6,809888 <memcpy+0x18>
  80987c:	2904b03a 	or	r2,r5,r4
  809880:	108000cc 	andi	r2,r2,3
  809884:	10000926 	beq	r2,zero,8098ac <memcpy+0x3c>
  809888:	30000626 	beq	r6,zero,8098a4 <memcpy+0x34>
  80988c:	30cd883a 	add	r6,r6,r3
  809890:	28800003 	ldbu	r2,0(r5)
  809894:	29400044 	addi	r5,r5,1
  809898:	18800005 	stb	r2,0(r3)
  80989c:	18c00044 	addi	r3,r3,1
  8098a0:	30fffb1e 	bne	r6,r3,809890 <memcpy+0x20>
  8098a4:	2005883a 	mov	r2,r4
  8098a8:	f800283a 	ret
  8098ac:	3811883a 	mov	r8,r7
  8098b0:	200f883a 	mov	r7,r4
  8098b4:	28c00017 	ldw	r3,0(r5)
  8098b8:	31bffc04 	addi	r6,r6,-16
  8098bc:	38c00015 	stw	r3,0(r7)
  8098c0:	28800117 	ldw	r2,4(r5)
  8098c4:	38800115 	stw	r2,4(r7)
  8098c8:	28c00217 	ldw	r3,8(r5)
  8098cc:	38c00215 	stw	r3,8(r7)
  8098d0:	28800317 	ldw	r2,12(r5)
  8098d4:	29400404 	addi	r5,r5,16
  8098d8:	38800315 	stw	r2,12(r7)
  8098dc:	39c00404 	addi	r7,r7,16
  8098e0:	41bff436 	bltu	r8,r6,8098b4 <memcpy+0x44>
  8098e4:	008000c4 	movi	r2,3
  8098e8:	1180072e 	bgeu	r2,r6,809908 <memcpy+0x98>
  8098ec:	1007883a 	mov	r3,r2
  8098f0:	28800017 	ldw	r2,0(r5)
  8098f4:	31bfff04 	addi	r6,r6,-4
  8098f8:	29400104 	addi	r5,r5,4
  8098fc:	38800015 	stw	r2,0(r7)
  809900:	39c00104 	addi	r7,r7,4
  809904:	19bffa36 	bltu	r3,r6,8098f0 <memcpy+0x80>
  809908:	3807883a 	mov	r3,r7
  80990c:	003fde06 	br	809888 <memcpy+0x18>

00809910 <memmove>:
  809910:	2807883a 	mov	r3,r5
  809914:	2011883a 	mov	r8,r4
  809918:	29000c2e 	bgeu	r5,r4,80994c <memmove+0x3c>
  80991c:	298f883a 	add	r7,r5,r6
  809920:	21c00a2e 	bgeu	r4,r7,80994c <memmove+0x3c>
  809924:	30000726 	beq	r6,zero,809944 <memmove+0x34>
  809928:	2187883a 	add	r3,r4,r6
  80992c:	198dc83a 	sub	r6,r3,r6
  809930:	39ffffc4 	addi	r7,r7,-1
  809934:	38800003 	ldbu	r2,0(r7)
  809938:	18ffffc4 	addi	r3,r3,-1
  80993c:	18800005 	stb	r2,0(r3)
  809940:	19bffb1e 	bne	r3,r6,809930 <memmove+0x20>
  809944:	2005883a 	mov	r2,r4
  809948:	f800283a 	ret
  80994c:	01c003c4 	movi	r7,15
  809950:	39800a36 	bltu	r7,r6,80997c <memmove+0x6c>
  809954:	303ffb26 	beq	r6,zero,809944 <memmove+0x34>
  809958:	400f883a 	mov	r7,r8
  80995c:	320d883a 	add	r6,r6,r8
  809960:	28800003 	ldbu	r2,0(r5)
  809964:	29400044 	addi	r5,r5,1
  809968:	38800005 	stb	r2,0(r7)
  80996c:	39c00044 	addi	r7,r7,1
  809970:	39bffb1e 	bne	r7,r6,809960 <memmove+0x50>
  809974:	2005883a 	mov	r2,r4
  809978:	f800283a 	ret
  80997c:	1904b03a 	or	r2,r3,r4
  809980:	108000cc 	andi	r2,r2,3
  809984:	103ff31e 	bne	r2,zero,809954 <memmove+0x44>
  809988:	3811883a 	mov	r8,r7
  80998c:	180b883a 	mov	r5,r3
  809990:	200f883a 	mov	r7,r4
  809994:	28c00017 	ldw	r3,0(r5)
  809998:	31bffc04 	addi	r6,r6,-16
  80999c:	38c00015 	stw	r3,0(r7)
  8099a0:	28800117 	ldw	r2,4(r5)
  8099a4:	38800115 	stw	r2,4(r7)
  8099a8:	28c00217 	ldw	r3,8(r5)
  8099ac:	38c00215 	stw	r3,8(r7)
  8099b0:	28800317 	ldw	r2,12(r5)
  8099b4:	29400404 	addi	r5,r5,16
  8099b8:	38800315 	stw	r2,12(r7)
  8099bc:	39c00404 	addi	r7,r7,16
  8099c0:	41bff436 	bltu	r8,r6,809994 <memmove+0x84>
  8099c4:	008000c4 	movi	r2,3
  8099c8:	1180072e 	bgeu	r2,r6,8099e8 <memmove+0xd8>
  8099cc:	1007883a 	mov	r3,r2
  8099d0:	28800017 	ldw	r2,0(r5)
  8099d4:	31bfff04 	addi	r6,r6,-4
  8099d8:	29400104 	addi	r5,r5,4
  8099dc:	38800015 	stw	r2,0(r7)
  8099e0:	39c00104 	addi	r7,r7,4
  8099e4:	19bffa36 	bltu	r3,r6,8099d0 <memmove+0xc0>
  8099e8:	3811883a 	mov	r8,r7
  8099ec:	003fd906 	br	809954 <memmove+0x44>

008099f0 <memset>:
  8099f0:	008000c4 	movi	r2,3
  8099f4:	29403fcc 	andi	r5,r5,255
  8099f8:	2007883a 	mov	r3,r4
  8099fc:	1180022e 	bgeu	r2,r6,809a08 <memset+0x18>
  809a00:	2084703a 	and	r2,r4,r2
  809a04:	10000826 	beq	r2,zero,809a28 <memset+0x38>
  809a08:	30000526 	beq	r6,zero,809a20 <memset+0x30>
  809a0c:	2805883a 	mov	r2,r5
  809a10:	30cd883a 	add	r6,r6,r3
  809a14:	18800005 	stb	r2,0(r3)
  809a18:	18c00044 	addi	r3,r3,1
  809a1c:	19bffd1e 	bne	r3,r6,809a14 <memset+0x24>
  809a20:	2005883a 	mov	r2,r4
  809a24:	f800283a 	ret
  809a28:	2804923a 	slli	r2,r5,8
  809a2c:	020003c4 	movi	r8,15
  809a30:	200f883a 	mov	r7,r4
  809a34:	2884b03a 	or	r2,r5,r2
  809a38:	1006943a 	slli	r3,r2,16
  809a3c:	10c6b03a 	or	r3,r2,r3
  809a40:	41800a2e 	bgeu	r8,r6,809a6c <memset+0x7c>
  809a44:	4005883a 	mov	r2,r8
  809a48:	31bffc04 	addi	r6,r6,-16
  809a4c:	38c00015 	stw	r3,0(r7)
  809a50:	38c00115 	stw	r3,4(r7)
  809a54:	38c00215 	stw	r3,8(r7)
  809a58:	38c00315 	stw	r3,12(r7)
  809a5c:	39c00404 	addi	r7,r7,16
  809a60:	11bff936 	bltu	r2,r6,809a48 <memset+0x58>
  809a64:	008000c4 	movi	r2,3
  809a68:	1180052e 	bgeu	r2,r6,809a80 <memset+0x90>
  809a6c:	31bfff04 	addi	r6,r6,-4
  809a70:	008000c4 	movi	r2,3
  809a74:	38c00015 	stw	r3,0(r7)
  809a78:	39c00104 	addi	r7,r7,4
  809a7c:	11bffb36 	bltu	r2,r6,809a6c <memset+0x7c>
  809a80:	3807883a 	mov	r3,r7
  809a84:	003fe006 	br	809a08 <memset+0x18>

00809a88 <_Bfree>:
  809a88:	28000826 	beq	r5,zero,809aac <_Bfree+0x24>
  809a8c:	28800117 	ldw	r2,4(r5)
  809a90:	21001317 	ldw	r4,76(r4)
  809a94:	1085883a 	add	r2,r2,r2
  809a98:	1085883a 	add	r2,r2,r2
  809a9c:	1105883a 	add	r2,r2,r4
  809aa0:	10c00017 	ldw	r3,0(r2)
  809aa4:	28c00015 	stw	r3,0(r5)
  809aa8:	11400015 	stw	r5,0(r2)
  809aac:	f800283a 	ret

00809ab0 <__hi0bits>:
  809ab0:	20bfffec 	andhi	r2,r4,65535
  809ab4:	10001426 	beq	r2,zero,809b08 <__hi0bits+0x58>
  809ab8:	0007883a 	mov	r3,zero
  809abc:	20bfc02c 	andhi	r2,r4,65280
  809ac0:	1000021e 	bne	r2,zero,809acc <__hi0bits+0x1c>
  809ac4:	2008923a 	slli	r4,r4,8
  809ac8:	18c00204 	addi	r3,r3,8
  809acc:	20bc002c 	andhi	r2,r4,61440
  809ad0:	1000021e 	bne	r2,zero,809adc <__hi0bits+0x2c>
  809ad4:	2008913a 	slli	r4,r4,4
  809ad8:	18c00104 	addi	r3,r3,4
  809adc:	20b0002c 	andhi	r2,r4,49152
  809ae0:	1000031e 	bne	r2,zero,809af0 <__hi0bits+0x40>
  809ae4:	2105883a 	add	r2,r4,r4
  809ae8:	18c00084 	addi	r3,r3,2
  809aec:	1089883a 	add	r4,r2,r2
  809af0:	20000316 	blt	r4,zero,809b00 <__hi0bits+0x50>
  809af4:	2090002c 	andhi	r2,r4,16384
  809af8:	10000626 	beq	r2,zero,809b14 <__hi0bits+0x64>
  809afc:	18c00044 	addi	r3,r3,1
  809b00:	1805883a 	mov	r2,r3
  809b04:	f800283a 	ret
  809b08:	2008943a 	slli	r4,r4,16
  809b0c:	00c00404 	movi	r3,16
  809b10:	003fea06 	br	809abc <__hi0bits+0xc>
  809b14:	00c00804 	movi	r3,32
  809b18:	1805883a 	mov	r2,r3
  809b1c:	f800283a 	ret

00809b20 <__lo0bits>:
  809b20:	20c00017 	ldw	r3,0(r4)
  809b24:	188001cc 	andi	r2,r3,7
  809b28:	10000a26 	beq	r2,zero,809b54 <__lo0bits+0x34>
  809b2c:	1880004c 	andi	r2,r3,1
  809b30:	1005003a 	cmpeq	r2,r2,zero
  809b34:	10002126 	beq	r2,zero,809bbc <__lo0bits+0x9c>
  809b38:	1880008c 	andi	r2,r3,2
  809b3c:	1000251e 	bne	r2,zero,809bd4 <__lo0bits+0xb4>
  809b40:	1804d0ba 	srli	r2,r3,2
  809b44:	01400084 	movi	r5,2
  809b48:	20800015 	stw	r2,0(r4)
  809b4c:	2805883a 	mov	r2,r5
  809b50:	f800283a 	ret
  809b54:	18bfffcc 	andi	r2,r3,65535
  809b58:	10001526 	beq	r2,zero,809bb0 <__lo0bits+0x90>
  809b5c:	000b883a 	mov	r5,zero
  809b60:	18803fcc 	andi	r2,r3,255
  809b64:	1000021e 	bne	r2,zero,809b70 <__lo0bits+0x50>
  809b68:	1806d23a 	srli	r3,r3,8
  809b6c:	29400204 	addi	r5,r5,8
  809b70:	188003cc 	andi	r2,r3,15
  809b74:	1000021e 	bne	r2,zero,809b80 <__lo0bits+0x60>
  809b78:	1806d13a 	srli	r3,r3,4
  809b7c:	29400104 	addi	r5,r5,4
  809b80:	188000cc 	andi	r2,r3,3
  809b84:	1000021e 	bne	r2,zero,809b90 <__lo0bits+0x70>
  809b88:	1806d0ba 	srli	r3,r3,2
  809b8c:	29400084 	addi	r5,r5,2
  809b90:	1880004c 	andi	r2,r3,1
  809b94:	1000031e 	bne	r2,zero,809ba4 <__lo0bits+0x84>
  809b98:	1806d07a 	srli	r3,r3,1
  809b9c:	18000a26 	beq	r3,zero,809bc8 <__lo0bits+0xa8>
  809ba0:	29400044 	addi	r5,r5,1
  809ba4:	2805883a 	mov	r2,r5
  809ba8:	20c00015 	stw	r3,0(r4)
  809bac:	f800283a 	ret
  809bb0:	1806d43a 	srli	r3,r3,16
  809bb4:	01400404 	movi	r5,16
  809bb8:	003fe906 	br	809b60 <__lo0bits+0x40>
  809bbc:	000b883a 	mov	r5,zero
  809bc0:	2805883a 	mov	r2,r5
  809bc4:	f800283a 	ret
  809bc8:	01400804 	movi	r5,32
  809bcc:	2805883a 	mov	r2,r5
  809bd0:	f800283a 	ret
  809bd4:	1804d07a 	srli	r2,r3,1
  809bd8:	01400044 	movi	r5,1
  809bdc:	20800015 	stw	r2,0(r4)
  809be0:	003fda06 	br	809b4c <__lo0bits+0x2c>

00809be4 <__mcmp>:
  809be4:	20800417 	ldw	r2,16(r4)
  809be8:	28c00417 	ldw	r3,16(r5)
  809bec:	10cfc83a 	sub	r7,r2,r3
  809bf0:	38000c1e 	bne	r7,zero,809c24 <__mcmp+0x40>
  809bf4:	18c5883a 	add	r2,r3,r3
  809bf8:	1085883a 	add	r2,r2,r2
  809bfc:	10c00504 	addi	r3,r2,20
  809c00:	21000504 	addi	r4,r4,20
  809c04:	28cb883a 	add	r5,r5,r3
  809c08:	2085883a 	add	r2,r4,r2
  809c0c:	10bfff04 	addi	r2,r2,-4
  809c10:	297fff04 	addi	r5,r5,-4
  809c14:	11800017 	ldw	r6,0(r2)
  809c18:	28c00017 	ldw	r3,0(r5)
  809c1c:	30c0031e 	bne	r6,r3,809c2c <__mcmp+0x48>
  809c20:	20bffa36 	bltu	r4,r2,809c0c <__mcmp+0x28>
  809c24:	3805883a 	mov	r2,r7
  809c28:	f800283a 	ret
  809c2c:	30c00336 	bltu	r6,r3,809c3c <__mcmp+0x58>
  809c30:	01c00044 	movi	r7,1
  809c34:	3805883a 	mov	r2,r7
  809c38:	f800283a 	ret
  809c3c:	01ffffc4 	movi	r7,-1
  809c40:	003ff806 	br	809c24 <__mcmp+0x40>

00809c44 <__ulp>:
  809c44:	295ffc2c 	andhi	r5,r5,32752
  809c48:	013f3034 	movhi	r4,64704
  809c4c:	290b883a 	add	r5,r5,r4
  809c50:	0145c83a 	sub	r2,zero,r5
  809c54:	1007d53a 	srai	r3,r2,20
  809c58:	000d883a 	mov	r6,zero
  809c5c:	0140040e 	bge	zero,r5,809c70 <__ulp+0x2c>
  809c60:	280f883a 	mov	r7,r5
  809c64:	3807883a 	mov	r3,r7
  809c68:	3005883a 	mov	r2,r6
  809c6c:	f800283a 	ret
  809c70:	008004c4 	movi	r2,19
  809c74:	193ffb04 	addi	r4,r3,-20
  809c78:	10c00c0e 	bge	r2,r3,809cac <__ulp+0x68>
  809c7c:	008007c4 	movi	r2,31
  809c80:	1107c83a 	sub	r3,r2,r4
  809c84:	00800784 	movi	r2,30
  809c88:	01400044 	movi	r5,1
  809c8c:	11000216 	blt	r2,r4,809c98 <__ulp+0x54>
  809c90:	00800044 	movi	r2,1
  809c94:	10ca983a 	sll	r5,r2,r3
  809c98:	000f883a 	mov	r7,zero
  809c9c:	280d883a 	mov	r6,r5
  809ca0:	3807883a 	mov	r3,r7
  809ca4:	3005883a 	mov	r2,r6
  809ca8:	f800283a 	ret
  809cac:	00800234 	movhi	r2,8
  809cb0:	10cfd83a 	sra	r7,r2,r3
  809cb4:	000d883a 	mov	r6,zero
  809cb8:	3005883a 	mov	r2,r6
  809cbc:	3807883a 	mov	r3,r7
  809cc0:	f800283a 	ret

00809cc4 <__b2d>:
  809cc4:	20800417 	ldw	r2,16(r4)
  809cc8:	defff904 	addi	sp,sp,-28
  809ccc:	dd000415 	stw	r20,16(sp)
  809cd0:	1085883a 	add	r2,r2,r2
  809cd4:	25000504 	addi	r20,r4,20
  809cd8:	1085883a 	add	r2,r2,r2
  809cdc:	dc000015 	stw	r16,0(sp)
  809ce0:	a0a1883a 	add	r16,r20,r2
  809ce4:	dd400515 	stw	r21,20(sp)
  809ce8:	857fff17 	ldw	r21,-4(r16)
  809cec:	dc400115 	stw	r17,4(sp)
  809cf0:	dfc00615 	stw	ra,24(sp)
  809cf4:	a809883a 	mov	r4,r21
  809cf8:	2823883a 	mov	r17,r5
  809cfc:	dcc00315 	stw	r19,12(sp)
  809d00:	dc800215 	stw	r18,8(sp)
  809d04:	0809ab00 	call	809ab0 <__hi0bits>
  809d08:	100b883a 	mov	r5,r2
  809d0c:	00800804 	movi	r2,32
  809d10:	1145c83a 	sub	r2,r2,r5
  809d14:	88800015 	stw	r2,0(r17)
  809d18:	00800284 	movi	r2,10
  809d1c:	80ffff04 	addi	r3,r16,-4
  809d20:	11401416 	blt	r2,r5,809d74 <__b2d+0xb0>
  809d24:	008002c4 	movi	r2,11
  809d28:	1149c83a 	sub	r4,r2,r5
  809d2c:	a0c02736 	bltu	r20,r3,809dcc <__b2d+0x108>
  809d30:	000d883a 	mov	r6,zero
  809d34:	28800544 	addi	r2,r5,21
  809d38:	a906d83a 	srl	r3,r21,r4
  809d3c:	a884983a 	sll	r2,r21,r2
  809d40:	1ccffc34 	orhi	r19,r3,16368
  809d44:	11a4b03a 	or	r18,r2,r6
  809d48:	9005883a 	mov	r2,r18
  809d4c:	9807883a 	mov	r3,r19
  809d50:	dfc00617 	ldw	ra,24(sp)
  809d54:	dd400517 	ldw	r21,20(sp)
  809d58:	dd000417 	ldw	r20,16(sp)
  809d5c:	dcc00317 	ldw	r19,12(sp)
  809d60:	dc800217 	ldw	r18,8(sp)
  809d64:	dc400117 	ldw	r17,4(sp)
  809d68:	dc000017 	ldw	r16,0(sp)
  809d6c:	dec00704 	addi	sp,sp,28
  809d70:	f800283a 	ret
  809d74:	a0c00e36 	bltu	r20,r3,809db0 <__b2d+0xec>
  809d78:	293ffd44 	addi	r4,r5,-11
  809d7c:	000d883a 	mov	r6,zero
  809d80:	20000f26 	beq	r4,zero,809dc0 <__b2d+0xfc>
  809d84:	00800804 	movi	r2,32
  809d88:	110bc83a 	sub	r5,r2,r4
  809d8c:	a0c01236 	bltu	r20,r3,809dd8 <__b2d+0x114>
  809d90:	000f883a 	mov	r7,zero
  809d94:	a904983a 	sll	r2,r21,r4
  809d98:	3146d83a 	srl	r3,r6,r5
  809d9c:	3108983a 	sll	r4,r6,r4
  809da0:	108ffc34 	orhi	r2,r2,16368
  809da4:	18a6b03a 	or	r19,r3,r2
  809da8:	3924b03a 	or	r18,r7,r4
  809dac:	003fe606 	br	809d48 <__b2d+0x84>
  809db0:	293ffd44 	addi	r4,r5,-11
  809db4:	81bffe17 	ldw	r6,-8(r16)
  809db8:	80fffe04 	addi	r3,r16,-8
  809dbc:	203ff11e 	bne	r4,zero,809d84 <__b2d+0xc0>
  809dc0:	accffc34 	orhi	r19,r21,16368
  809dc4:	3025883a 	mov	r18,r6
  809dc8:	003fdf06 	br	809d48 <__b2d+0x84>
  809dcc:	18bfff17 	ldw	r2,-4(r3)
  809dd0:	110cd83a 	srl	r6,r2,r4
  809dd4:	003fd706 	br	809d34 <__b2d+0x70>
  809dd8:	18bfff17 	ldw	r2,-4(r3)
  809ddc:	114ed83a 	srl	r7,r2,r5
  809de0:	003fec06 	br	809d94 <__b2d+0xd0>

00809de4 <__ratio>:
  809de4:	defff904 	addi	sp,sp,-28
  809de8:	dc400215 	stw	r17,8(sp)
  809dec:	2823883a 	mov	r17,r5
  809df0:	d80b883a 	mov	r5,sp
  809df4:	dfc00615 	stw	ra,24(sp)
  809df8:	dd000515 	stw	r20,20(sp)
  809dfc:	dcc00415 	stw	r19,16(sp)
  809e00:	dc800315 	stw	r18,12(sp)
  809e04:	2025883a 	mov	r18,r4
  809e08:	0809cc40 	call	809cc4 <__b2d>
  809e0c:	8809883a 	mov	r4,r17
  809e10:	d9400104 	addi	r5,sp,4
  809e14:	1027883a 	mov	r19,r2
  809e18:	1829883a 	mov	r20,r3
  809e1c:	0809cc40 	call	809cc4 <__b2d>
  809e20:	89000417 	ldw	r4,16(r17)
  809e24:	91c00417 	ldw	r7,16(r18)
  809e28:	d9800117 	ldw	r6,4(sp)
  809e2c:	180b883a 	mov	r5,r3
  809e30:	390fc83a 	sub	r7,r7,r4
  809e34:	1009883a 	mov	r4,r2
  809e38:	d8800017 	ldw	r2,0(sp)
  809e3c:	380e917a 	slli	r7,r7,5
  809e40:	2011883a 	mov	r8,r4
  809e44:	1185c83a 	sub	r2,r2,r6
  809e48:	11c5883a 	add	r2,r2,r7
  809e4c:	1006953a 	slli	r3,r2,20
  809e50:	2813883a 	mov	r9,r5
  809e54:	00800d0e 	bge	zero,r2,809e8c <__ratio+0xa8>
  809e58:	1d29883a 	add	r20,r3,r20
  809e5c:	a00b883a 	mov	r5,r20
  809e60:	480f883a 	mov	r7,r9
  809e64:	9809883a 	mov	r4,r19
  809e68:	400d883a 	mov	r6,r8
  809e6c:	080c3ec0 	call	80c3ec <__divdf3>
  809e70:	dfc00617 	ldw	ra,24(sp)
  809e74:	dd000517 	ldw	r20,20(sp)
  809e78:	dcc00417 	ldw	r19,16(sp)
  809e7c:	dc800317 	ldw	r18,12(sp)
  809e80:	dc400217 	ldw	r17,8(sp)
  809e84:	dec00704 	addi	sp,sp,28
  809e88:	f800283a 	ret
  809e8c:	28d3c83a 	sub	r9,r5,r3
  809e90:	003ff206 	br	809e5c <__ratio+0x78>

00809e94 <_mprec_log10>:
  809e94:	defffe04 	addi	sp,sp,-8
  809e98:	008005c4 	movi	r2,23
  809e9c:	dc000015 	stw	r16,0(sp)
  809ea0:	dfc00115 	stw	ra,4(sp)
  809ea4:	2021883a 	mov	r16,r4
  809ea8:	11000c16 	blt	r2,r4,809edc <_mprec_log10+0x48>
  809eac:	200490fa 	slli	r2,r4,3
  809eb0:	00c02234 	movhi	r3,136
  809eb4:	18dd8b04 	addi	r3,r3,30252
  809eb8:	10c5883a 	add	r2,r2,r3
  809ebc:	12400117 	ldw	r9,4(r2)
  809ec0:	12000017 	ldw	r8,0(r2)
  809ec4:	4807883a 	mov	r3,r9
  809ec8:	4005883a 	mov	r2,r8
  809ecc:	dfc00117 	ldw	ra,4(sp)
  809ed0:	dc000017 	ldw	r16,0(sp)
  809ed4:	dec00204 	addi	sp,sp,8
  809ed8:	f800283a 	ret
  809edc:	0011883a 	mov	r8,zero
  809ee0:	024ffc34 	movhi	r9,16368
  809ee4:	0005883a 	mov	r2,zero
  809ee8:	00d00934 	movhi	r3,16420
  809eec:	480b883a 	mov	r5,r9
  809ef0:	4009883a 	mov	r4,r8
  809ef4:	180f883a 	mov	r7,r3
  809ef8:	100d883a 	mov	r6,r2
  809efc:	080375c0 	call	80375c <__muldf3>
  809f00:	843fffc4 	addi	r16,r16,-1
  809f04:	1011883a 	mov	r8,r2
  809f08:	1813883a 	mov	r9,r3
  809f0c:	803ff51e 	bne	r16,zero,809ee4 <_mprec_log10+0x50>
  809f10:	4005883a 	mov	r2,r8
  809f14:	4807883a 	mov	r3,r9
  809f18:	dfc00117 	ldw	ra,4(sp)
  809f1c:	dc000017 	ldw	r16,0(sp)
  809f20:	dec00204 	addi	sp,sp,8
  809f24:	f800283a 	ret

00809f28 <__copybits>:
  809f28:	297fffc4 	addi	r5,r5,-1
  809f2c:	30800417 	ldw	r2,16(r6)
  809f30:	280bd17a 	srai	r5,r5,5
  809f34:	31800504 	addi	r6,r6,20
  809f38:	1085883a 	add	r2,r2,r2
  809f3c:	294b883a 	add	r5,r5,r5
  809f40:	294b883a 	add	r5,r5,r5
  809f44:	1085883a 	add	r2,r2,r2
  809f48:	290b883a 	add	r5,r5,r4
  809f4c:	3087883a 	add	r3,r6,r2
  809f50:	29400104 	addi	r5,r5,4
  809f54:	30c0052e 	bgeu	r6,r3,809f6c <__copybits+0x44>
  809f58:	30800017 	ldw	r2,0(r6)
  809f5c:	31800104 	addi	r6,r6,4
  809f60:	20800015 	stw	r2,0(r4)
  809f64:	21000104 	addi	r4,r4,4
  809f68:	30fffb36 	bltu	r6,r3,809f58 <__copybits+0x30>
  809f6c:	2140032e 	bgeu	r4,r5,809f7c <__copybits+0x54>
  809f70:	20000015 	stw	zero,0(r4)
  809f74:	21000104 	addi	r4,r4,4
  809f78:	217ffd36 	bltu	r4,r5,809f70 <__copybits+0x48>
  809f7c:	f800283a 	ret

00809f80 <__any_on>:
  809f80:	20800417 	ldw	r2,16(r4)
  809f84:	2807d17a 	srai	r3,r5,5
  809f88:	21000504 	addi	r4,r4,20
  809f8c:	10c00d0e 	bge	r2,r3,809fc4 <__any_on+0x44>
  809f90:	1085883a 	add	r2,r2,r2
  809f94:	1085883a 	add	r2,r2,r2
  809f98:	208d883a 	add	r6,r4,r2
  809f9c:	2180182e 	bgeu	r4,r6,80a000 <__any_on+0x80>
  809fa0:	30bfff17 	ldw	r2,-4(r6)
  809fa4:	30ffff04 	addi	r3,r6,-4
  809fa8:	1000041e 	bne	r2,zero,809fbc <__any_on+0x3c>
  809fac:	20c0142e 	bgeu	r4,r3,80a000 <__any_on+0x80>
  809fb0:	18ffff04 	addi	r3,r3,-4
  809fb4:	18800017 	ldw	r2,0(r3)
  809fb8:	103ffc26 	beq	r2,zero,809fac <__any_on+0x2c>
  809fbc:	00800044 	movi	r2,1
  809fc0:	f800283a 	ret
  809fc4:	18800a0e 	bge	r3,r2,809ff0 <__any_on+0x70>
  809fc8:	294007cc 	andi	r5,r5,31
  809fcc:	28000826 	beq	r5,zero,809ff0 <__any_on+0x70>
  809fd0:	18c5883a 	add	r2,r3,r3
  809fd4:	1085883a 	add	r2,r2,r2
  809fd8:	208d883a 	add	r6,r4,r2
  809fdc:	30c00017 	ldw	r3,0(r6)
  809fe0:	1944d83a 	srl	r2,r3,r5
  809fe4:	1144983a 	sll	r2,r2,r5
  809fe8:	18bff41e 	bne	r3,r2,809fbc <__any_on+0x3c>
  809fec:	003feb06 	br	809f9c <__any_on+0x1c>
  809ff0:	18c5883a 	add	r2,r3,r3
  809ff4:	1085883a 	add	r2,r2,r2
  809ff8:	208d883a 	add	r6,r4,r2
  809ffc:	003fe706 	br	809f9c <__any_on+0x1c>
  80a000:	0005883a 	mov	r2,zero
  80a004:	f800283a 	ret

0080a008 <_Balloc>:
  80a008:	20c01317 	ldw	r3,76(r4)
  80a00c:	defffb04 	addi	sp,sp,-20
  80a010:	dcc00315 	stw	r19,12(sp)
  80a014:	dc800215 	stw	r18,8(sp)
  80a018:	dfc00415 	stw	ra,16(sp)
  80a01c:	2825883a 	mov	r18,r5
  80a020:	dc400115 	stw	r17,4(sp)
  80a024:	dc000015 	stw	r16,0(sp)
  80a028:	2027883a 	mov	r19,r4
  80a02c:	01800404 	movi	r6,16
  80a030:	01400104 	movi	r5,4
  80a034:	18001726 	beq	r3,zero,80a094 <_Balloc+0x8c>
  80a038:	01400044 	movi	r5,1
  80a03c:	9485883a 	add	r2,r18,r18
  80a040:	2ca2983a 	sll	r17,r5,r18
  80a044:	1085883a 	add	r2,r2,r2
  80a048:	10c7883a 	add	r3,r2,r3
  80a04c:	1c000017 	ldw	r16,0(r3)
  80a050:	8c4d883a 	add	r6,r17,r17
  80a054:	318d883a 	add	r6,r6,r6
  80a058:	9809883a 	mov	r4,r19
  80a05c:	31800504 	addi	r6,r6,20
  80a060:	80001226 	beq	r16,zero,80a0ac <_Balloc+0xa4>
  80a064:	80800017 	ldw	r2,0(r16)
  80a068:	18800015 	stw	r2,0(r3)
  80a06c:	80000415 	stw	zero,16(r16)
  80a070:	80000315 	stw	zero,12(r16)
  80a074:	8005883a 	mov	r2,r16
  80a078:	dfc00417 	ldw	ra,16(sp)
  80a07c:	dcc00317 	ldw	r19,12(sp)
  80a080:	dc800217 	ldw	r18,8(sp)
  80a084:	dc400117 	ldw	r17,4(sp)
  80a088:	dc000017 	ldw	r16,0(sp)
  80a08c:	dec00504 	addi	sp,sp,20
  80a090:	f800283a 	ret
  80a094:	080b4440 	call	80b444 <_calloc_r>
  80a098:	1007883a 	mov	r3,r2
  80a09c:	0021883a 	mov	r16,zero
  80a0a0:	98801315 	stw	r2,76(r19)
  80a0a4:	103fe41e 	bne	r2,zero,80a038 <_Balloc+0x30>
  80a0a8:	003ff206 	br	80a074 <_Balloc+0x6c>
  80a0ac:	080b4440 	call	80b444 <_calloc_r>
  80a0b0:	103ff026 	beq	r2,zero,80a074 <_Balloc+0x6c>
  80a0b4:	1021883a 	mov	r16,r2
  80a0b8:	14800115 	stw	r18,4(r2)
  80a0bc:	14400215 	stw	r17,8(r2)
  80a0c0:	003fea06 	br	80a06c <_Balloc+0x64>

0080a0c4 <__d2b>:
  80a0c4:	defff504 	addi	sp,sp,-44
  80a0c8:	dcc00515 	stw	r19,20(sp)
  80a0cc:	04c00044 	movi	r19,1
  80a0d0:	dc000215 	stw	r16,8(sp)
  80a0d4:	2821883a 	mov	r16,r5
  80a0d8:	980b883a 	mov	r5,r19
  80a0dc:	ddc00915 	stw	r23,36(sp)
  80a0e0:	dd800815 	stw	r22,32(sp)
  80a0e4:	dd400715 	stw	r21,28(sp)
  80a0e8:	dd000615 	stw	r20,24(sp)
  80a0ec:	dc800415 	stw	r18,16(sp)
  80a0f0:	dc400315 	stw	r17,12(sp)
  80a0f4:	dfc00a15 	stw	ra,40(sp)
  80a0f8:	3023883a 	mov	r17,r6
  80a0fc:	382d883a 	mov	r22,r7
  80a100:	ddc00b17 	ldw	r23,44(sp)
  80a104:	080a0080 	call	80a008 <_Balloc>
  80a108:	1025883a 	mov	r18,r2
  80a10c:	00a00034 	movhi	r2,32768
  80a110:	10bfffc4 	addi	r2,r2,-1
  80a114:	8888703a 	and	r4,r17,r2
  80a118:	202ad53a 	srli	r21,r4,20
  80a11c:	00800434 	movhi	r2,16
  80a120:	10bfffc4 	addi	r2,r2,-1
  80a124:	8886703a 	and	r3,r17,r2
  80a128:	a829003a 	cmpeq	r20,r21,zero
  80a12c:	800b883a 	mov	r5,r16
  80a130:	d8c00115 	stw	r3,4(sp)
  80a134:	94000504 	addi	r16,r18,20
  80a138:	a000021e 	bne	r20,zero,80a144 <__d2b+0x80>
  80a13c:	18c00434 	orhi	r3,r3,16
  80a140:	d8c00115 	stw	r3,4(sp)
  80a144:	28002726 	beq	r5,zero,80a1e4 <__d2b+0x120>
  80a148:	d809883a 	mov	r4,sp
  80a14c:	d9400015 	stw	r5,0(sp)
  80a150:	0809b200 	call	809b20 <__lo0bits>
  80a154:	100d883a 	mov	r6,r2
  80a158:	10003526 	beq	r2,zero,80a230 <__d2b+0x16c>
  80a15c:	d8c00117 	ldw	r3,4(sp)
  80a160:	00800804 	movi	r2,32
  80a164:	1185c83a 	sub	r2,r2,r6
  80a168:	d9000017 	ldw	r4,0(sp)
  80a16c:	1886983a 	sll	r3,r3,r2
  80a170:	1906b03a 	or	r3,r3,r4
  80a174:	90c00515 	stw	r3,20(r18)
  80a178:	d8c00117 	ldw	r3,4(sp)
  80a17c:	1986d83a 	srl	r3,r3,r6
  80a180:	d8c00115 	stw	r3,4(sp)
  80a184:	180b003a 	cmpeq	r5,r3,zero
  80a188:	00800084 	movi	r2,2
  80a18c:	114bc83a 	sub	r5,r2,r5
  80a190:	80c00115 	stw	r3,4(r16)
  80a194:	91400415 	stw	r5,16(r18)
  80a198:	a0001a1e 	bne	r20,zero,80a204 <__d2b+0x140>
  80a19c:	3545883a 	add	r2,r6,r21
  80a1a0:	10bef344 	addi	r2,r2,-1075
  80a1a4:	00c00d44 	movi	r3,53
  80a1a8:	b0800015 	stw	r2,0(r22)
  80a1ac:	1987c83a 	sub	r3,r3,r6
  80a1b0:	b8c00015 	stw	r3,0(r23)
  80a1b4:	9005883a 	mov	r2,r18
  80a1b8:	dfc00a17 	ldw	ra,40(sp)
  80a1bc:	ddc00917 	ldw	r23,36(sp)
  80a1c0:	dd800817 	ldw	r22,32(sp)
  80a1c4:	dd400717 	ldw	r21,28(sp)
  80a1c8:	dd000617 	ldw	r20,24(sp)
  80a1cc:	dcc00517 	ldw	r19,20(sp)
  80a1d0:	dc800417 	ldw	r18,16(sp)
  80a1d4:	dc400317 	ldw	r17,12(sp)
  80a1d8:	dc000217 	ldw	r16,8(sp)
  80a1dc:	dec00b04 	addi	sp,sp,44
  80a1e0:	f800283a 	ret
  80a1e4:	d9000104 	addi	r4,sp,4
  80a1e8:	0809b200 	call	809b20 <__lo0bits>
  80a1ec:	11800804 	addi	r6,r2,32
  80a1f0:	d8800117 	ldw	r2,4(sp)
  80a1f4:	94c00415 	stw	r19,16(r18)
  80a1f8:	980b883a 	mov	r5,r19
  80a1fc:	90800515 	stw	r2,20(r18)
  80a200:	a03fe626 	beq	r20,zero,80a19c <__d2b+0xd8>
  80a204:	2945883a 	add	r2,r5,r5
  80a208:	1085883a 	add	r2,r2,r2
  80a20c:	1405883a 	add	r2,r2,r16
  80a210:	113fff17 	ldw	r4,-4(r2)
  80a214:	30fef384 	addi	r3,r6,-1074
  80a218:	2820917a 	slli	r16,r5,5
  80a21c:	b0c00015 	stw	r3,0(r22)
  80a220:	0809ab00 	call	809ab0 <__hi0bits>
  80a224:	80a1c83a 	sub	r16,r16,r2
  80a228:	bc000015 	stw	r16,0(r23)
  80a22c:	003fe106 	br	80a1b4 <__d2b+0xf0>
  80a230:	d8800017 	ldw	r2,0(sp)
  80a234:	90800515 	stw	r2,20(r18)
  80a238:	d8c00117 	ldw	r3,4(sp)
  80a23c:	003fd106 	br	80a184 <__d2b+0xc0>

0080a240 <__mdiff>:
  80a240:	defffb04 	addi	sp,sp,-20
  80a244:	dc000015 	stw	r16,0(sp)
  80a248:	2821883a 	mov	r16,r5
  80a24c:	dc800215 	stw	r18,8(sp)
  80a250:	300b883a 	mov	r5,r6
  80a254:	2025883a 	mov	r18,r4
  80a258:	8009883a 	mov	r4,r16
  80a25c:	dc400115 	stw	r17,4(sp)
  80a260:	dfc00415 	stw	ra,16(sp)
  80a264:	dcc00315 	stw	r19,12(sp)
  80a268:	3023883a 	mov	r17,r6
  80a26c:	0809be40 	call	809be4 <__mcmp>
  80a270:	10004226 	beq	r2,zero,80a37c <__mdiff+0x13c>
  80a274:	10005016 	blt	r2,zero,80a3b8 <__mdiff+0x178>
  80a278:	0027883a 	mov	r19,zero
  80a27c:	81400117 	ldw	r5,4(r16)
  80a280:	9009883a 	mov	r4,r18
  80a284:	080a0080 	call	80a008 <_Balloc>
  80a288:	1019883a 	mov	r12,r2
  80a28c:	82800417 	ldw	r10,16(r16)
  80a290:	88800417 	ldw	r2,16(r17)
  80a294:	81800504 	addi	r6,r16,20
  80a298:	5287883a 	add	r3,r10,r10
  80a29c:	1085883a 	add	r2,r2,r2
  80a2a0:	18c7883a 	add	r3,r3,r3
  80a2a4:	1085883a 	add	r2,r2,r2
  80a2a8:	8a000504 	addi	r8,r17,20
  80a2ac:	64c00315 	stw	r19,12(r12)
  80a2b0:	30db883a 	add	r13,r6,r3
  80a2b4:	4097883a 	add	r11,r8,r2
  80a2b8:	61c00504 	addi	r7,r12,20
  80a2bc:	0013883a 	mov	r9,zero
  80a2c0:	31000017 	ldw	r4,0(r6)
  80a2c4:	41400017 	ldw	r5,0(r8)
  80a2c8:	42000104 	addi	r8,r8,4
  80a2cc:	20bfffcc 	andi	r2,r4,65535
  80a2d0:	28ffffcc 	andi	r3,r5,65535
  80a2d4:	10c5c83a 	sub	r2,r2,r3
  80a2d8:	1245883a 	add	r2,r2,r9
  80a2dc:	2008d43a 	srli	r4,r4,16
  80a2e0:	280ad43a 	srli	r5,r5,16
  80a2e4:	1007d43a 	srai	r3,r2,16
  80a2e8:	3880000d 	sth	r2,0(r7)
  80a2ec:	2149c83a 	sub	r4,r4,r5
  80a2f0:	20c9883a 	add	r4,r4,r3
  80a2f4:	3900008d 	sth	r4,2(r7)
  80a2f8:	31800104 	addi	r6,r6,4
  80a2fc:	39c00104 	addi	r7,r7,4
  80a300:	2013d43a 	srai	r9,r4,16
  80a304:	42ffee36 	bltu	r8,r11,80a2c0 <__mdiff+0x80>
  80a308:	33400c2e 	bgeu	r6,r13,80a33c <__mdiff+0xfc>
  80a30c:	30800017 	ldw	r2,0(r6)
  80a310:	31800104 	addi	r6,r6,4
  80a314:	10ffffcc 	andi	r3,r2,65535
  80a318:	1a47883a 	add	r3,r3,r9
  80a31c:	1004d43a 	srli	r2,r2,16
  80a320:	1809d43a 	srai	r4,r3,16
  80a324:	38c0000d 	sth	r3,0(r7)
  80a328:	1105883a 	add	r2,r2,r4
  80a32c:	3880008d 	sth	r2,2(r7)
  80a330:	1013d43a 	srai	r9,r2,16
  80a334:	39c00104 	addi	r7,r7,4
  80a338:	337ff436 	bltu	r6,r13,80a30c <__mdiff+0xcc>
  80a33c:	38bfff17 	ldw	r2,-4(r7)
  80a340:	38ffff04 	addi	r3,r7,-4
  80a344:	1000041e 	bne	r2,zero,80a358 <__mdiff+0x118>
  80a348:	18ffff04 	addi	r3,r3,-4
  80a34c:	18800017 	ldw	r2,0(r3)
  80a350:	52bfffc4 	addi	r10,r10,-1
  80a354:	103ffc26 	beq	r2,zero,80a348 <__mdiff+0x108>
  80a358:	6005883a 	mov	r2,r12
  80a35c:	62800415 	stw	r10,16(r12)
  80a360:	dfc00417 	ldw	ra,16(sp)
  80a364:	dcc00317 	ldw	r19,12(sp)
  80a368:	dc800217 	ldw	r18,8(sp)
  80a36c:	dc400117 	ldw	r17,4(sp)
  80a370:	dc000017 	ldw	r16,0(sp)
  80a374:	dec00504 	addi	sp,sp,20
  80a378:	f800283a 	ret
  80a37c:	9009883a 	mov	r4,r18
  80a380:	000b883a 	mov	r5,zero
  80a384:	080a0080 	call	80a008 <_Balloc>
  80a388:	1019883a 	mov	r12,r2
  80a38c:	00800044 	movi	r2,1
  80a390:	60800415 	stw	r2,16(r12)
  80a394:	6005883a 	mov	r2,r12
  80a398:	60000515 	stw	zero,20(r12)
  80a39c:	dfc00417 	ldw	ra,16(sp)
  80a3a0:	dcc00317 	ldw	r19,12(sp)
  80a3a4:	dc800217 	ldw	r18,8(sp)
  80a3a8:	dc400117 	ldw	r17,4(sp)
  80a3ac:	dc000017 	ldw	r16,0(sp)
  80a3b0:	dec00504 	addi	sp,sp,20
  80a3b4:	f800283a 	ret
  80a3b8:	880d883a 	mov	r6,r17
  80a3bc:	04c00044 	movi	r19,1
  80a3c0:	8023883a 	mov	r17,r16
  80a3c4:	3021883a 	mov	r16,r6
  80a3c8:	003fac06 	br	80a27c <__mdiff+0x3c>

0080a3cc <__lshift>:
  80a3cc:	defff904 	addi	sp,sp,-28
  80a3d0:	28800417 	ldw	r2,16(r5)
  80a3d4:	dc000015 	stw	r16,0(sp)
  80a3d8:	3021d17a 	srai	r16,r6,5
  80a3dc:	28c00217 	ldw	r3,8(r5)
  80a3e0:	10800044 	addi	r2,r2,1
  80a3e4:	dc400115 	stw	r17,4(sp)
  80a3e8:	80a3883a 	add	r17,r16,r2
  80a3ec:	dd400515 	stw	r21,20(sp)
  80a3f0:	dd000415 	stw	r20,16(sp)
  80a3f4:	dc800215 	stw	r18,8(sp)
  80a3f8:	dfc00615 	stw	ra,24(sp)
  80a3fc:	2825883a 	mov	r18,r5
  80a400:	dcc00315 	stw	r19,12(sp)
  80a404:	3029883a 	mov	r20,r6
  80a408:	202b883a 	mov	r21,r4
  80a40c:	29400117 	ldw	r5,4(r5)
  80a410:	1c40030e 	bge	r3,r17,80a420 <__lshift+0x54>
  80a414:	18c7883a 	add	r3,r3,r3
  80a418:	29400044 	addi	r5,r5,1
  80a41c:	1c7ffd16 	blt	r3,r17,80a414 <__lshift+0x48>
  80a420:	a809883a 	mov	r4,r21
  80a424:	080a0080 	call	80a008 <_Balloc>
  80a428:	1027883a 	mov	r19,r2
  80a42c:	11400504 	addi	r5,r2,20
  80a430:	0400090e 	bge	zero,r16,80a458 <__lshift+0x8c>
  80a434:	2805883a 	mov	r2,r5
  80a438:	0007883a 	mov	r3,zero
  80a43c:	18c00044 	addi	r3,r3,1
  80a440:	10000015 	stw	zero,0(r2)
  80a444:	10800104 	addi	r2,r2,4
  80a448:	80fffc1e 	bne	r16,r3,80a43c <__lshift+0x70>
  80a44c:	8405883a 	add	r2,r16,r16
  80a450:	1085883a 	add	r2,r2,r2
  80a454:	288b883a 	add	r5,r5,r2
  80a458:	90800417 	ldw	r2,16(r18)
  80a45c:	91000504 	addi	r4,r18,20
  80a460:	a18007cc 	andi	r6,r20,31
  80a464:	1085883a 	add	r2,r2,r2
  80a468:	1085883a 	add	r2,r2,r2
  80a46c:	208f883a 	add	r7,r4,r2
  80a470:	30001e26 	beq	r6,zero,80a4ec <__lshift+0x120>
  80a474:	00800804 	movi	r2,32
  80a478:	1191c83a 	sub	r8,r2,r6
  80a47c:	0007883a 	mov	r3,zero
  80a480:	20800017 	ldw	r2,0(r4)
  80a484:	1184983a 	sll	r2,r2,r6
  80a488:	1884b03a 	or	r2,r3,r2
  80a48c:	28800015 	stw	r2,0(r5)
  80a490:	20c00017 	ldw	r3,0(r4)
  80a494:	21000104 	addi	r4,r4,4
  80a498:	29400104 	addi	r5,r5,4
  80a49c:	1a06d83a 	srl	r3,r3,r8
  80a4a0:	21fff736 	bltu	r4,r7,80a480 <__lshift+0xb4>
  80a4a4:	28c00015 	stw	r3,0(r5)
  80a4a8:	18000126 	beq	r3,zero,80a4b0 <__lshift+0xe4>
  80a4ac:	8c400044 	addi	r17,r17,1
  80a4b0:	88bfffc4 	addi	r2,r17,-1
  80a4b4:	98800415 	stw	r2,16(r19)
  80a4b8:	a809883a 	mov	r4,r21
  80a4bc:	900b883a 	mov	r5,r18
  80a4c0:	0809a880 	call	809a88 <_Bfree>
  80a4c4:	9805883a 	mov	r2,r19
  80a4c8:	dfc00617 	ldw	ra,24(sp)
  80a4cc:	dd400517 	ldw	r21,20(sp)
  80a4d0:	dd000417 	ldw	r20,16(sp)
  80a4d4:	dcc00317 	ldw	r19,12(sp)
  80a4d8:	dc800217 	ldw	r18,8(sp)
  80a4dc:	dc400117 	ldw	r17,4(sp)
  80a4e0:	dc000017 	ldw	r16,0(sp)
  80a4e4:	dec00704 	addi	sp,sp,28
  80a4e8:	f800283a 	ret
  80a4ec:	20800017 	ldw	r2,0(r4)
  80a4f0:	21000104 	addi	r4,r4,4
  80a4f4:	28800015 	stw	r2,0(r5)
  80a4f8:	29400104 	addi	r5,r5,4
  80a4fc:	21ffec2e 	bgeu	r4,r7,80a4b0 <__lshift+0xe4>
  80a500:	20800017 	ldw	r2,0(r4)
  80a504:	21000104 	addi	r4,r4,4
  80a508:	28800015 	stw	r2,0(r5)
  80a50c:	29400104 	addi	r5,r5,4
  80a510:	21fff636 	bltu	r4,r7,80a4ec <__lshift+0x120>
  80a514:	003fe606 	br	80a4b0 <__lshift+0xe4>

0080a518 <__multiply>:
  80a518:	defff904 	addi	sp,sp,-28
  80a51c:	dcc00315 	stw	r19,12(sp)
  80a520:	dc800215 	stw	r18,8(sp)
  80a524:	2cc00417 	ldw	r19,16(r5)
  80a528:	34800417 	ldw	r18,16(r6)
  80a52c:	dd000415 	stw	r20,16(sp)
  80a530:	dc400115 	stw	r17,4(sp)
  80a534:	dfc00615 	stw	ra,24(sp)
  80a538:	dd400515 	stw	r21,20(sp)
  80a53c:	dc000015 	stw	r16,0(sp)
  80a540:	2823883a 	mov	r17,r5
  80a544:	3029883a 	mov	r20,r6
  80a548:	9c80040e 	bge	r19,r18,80a55c <__multiply+0x44>
  80a54c:	9027883a 	mov	r19,r18
  80a550:	2c800417 	ldw	r18,16(r5)
  80a554:	2829883a 	mov	r20,r5
  80a558:	3023883a 	mov	r17,r6
  80a55c:	88800217 	ldw	r2,8(r17)
  80a560:	9ca1883a 	add	r16,r19,r18
  80a564:	89400117 	ldw	r5,4(r17)
  80a568:	1400010e 	bge	r2,r16,80a570 <__multiply+0x58>
  80a56c:	29400044 	addi	r5,r5,1
  80a570:	080a0080 	call	80a008 <_Balloc>
  80a574:	102b883a 	mov	r21,r2
  80a578:	8405883a 	add	r2,r16,r16
  80a57c:	1085883a 	add	r2,r2,r2
  80a580:	a9000504 	addi	r4,r21,20
  80a584:	209d883a 	add	r14,r4,r2
  80a588:	2380042e 	bgeu	r4,r14,80a59c <__multiply+0x84>
  80a58c:	2005883a 	mov	r2,r4
  80a590:	10000015 	stw	zero,0(r2)
  80a594:	10800104 	addi	r2,r2,4
  80a598:	13bffd36 	bltu	r2,r14,80a590 <__multiply+0x78>
  80a59c:	9485883a 	add	r2,r18,r18
  80a5a0:	9cc7883a 	add	r3,r19,r19
  80a5a4:	a1800504 	addi	r6,r20,20
  80a5a8:	1085883a 	add	r2,r2,r2
  80a5ac:	8b400504 	addi	r13,r17,20
  80a5b0:	18c7883a 	add	r3,r3,r3
  80a5b4:	309f883a 	add	r15,r6,r2
  80a5b8:	68d7883a 	add	r11,r13,r3
  80a5bc:	33c03b2e 	bgeu	r6,r15,80a6ac <__multiply+0x194>
  80a5c0:	2019883a 	mov	r12,r4
  80a5c4:	30800017 	ldw	r2,0(r6)
  80a5c8:	127fffcc 	andi	r9,r2,65535
  80a5cc:	48001826 	beq	r9,zero,80a630 <__multiply+0x118>
  80a5d0:	6811883a 	mov	r8,r13
  80a5d4:	600f883a 	mov	r7,r12
  80a5d8:	0015883a 	mov	r10,zero
  80a5dc:	40c00017 	ldw	r3,0(r8)
  80a5e0:	39400017 	ldw	r5,0(r7)
  80a5e4:	42000104 	addi	r8,r8,4
  80a5e8:	193fffcc 	andi	r4,r3,65535
  80a5ec:	4909383a 	mul	r4,r9,r4
  80a5f0:	1806d43a 	srli	r3,r3,16
  80a5f4:	28bfffcc 	andi	r2,r5,65535
  80a5f8:	5085883a 	add	r2,r10,r2
  80a5fc:	2089883a 	add	r4,r4,r2
  80a600:	48c7383a 	mul	r3,r9,r3
  80a604:	280ad43a 	srli	r5,r5,16
  80a608:	2004d43a 	srli	r2,r4,16
  80a60c:	3900000d 	sth	r4,0(r7)
  80a610:	1947883a 	add	r3,r3,r5
  80a614:	10c5883a 	add	r2,r2,r3
  80a618:	3880008d 	sth	r2,2(r7)
  80a61c:	1014d43a 	srli	r10,r2,16
  80a620:	39c00104 	addi	r7,r7,4
  80a624:	42ffed36 	bltu	r8,r11,80a5dc <__multiply+0xc4>
  80a628:	3a800015 	stw	r10,0(r7)
  80a62c:	30800017 	ldw	r2,0(r6)
  80a630:	1012d43a 	srli	r9,r2,16
  80a634:	48001926 	beq	r9,zero,80a69c <__multiply+0x184>
  80a638:	60800017 	ldw	r2,0(r12)
  80a63c:	6811883a 	mov	r8,r13
  80a640:	600f883a 	mov	r7,r12
  80a644:	0015883a 	mov	r10,zero
  80a648:	100b883a 	mov	r5,r2
  80a64c:	41000017 	ldw	r4,0(r8)
  80a650:	2806d43a 	srli	r3,r5,16
  80a654:	3880000d 	sth	r2,0(r7)
  80a658:	20bfffcc 	andi	r2,r4,65535
  80a65c:	4885383a 	mul	r2,r9,r2
  80a660:	50c7883a 	add	r3,r10,r3
  80a664:	2008d43a 	srli	r4,r4,16
  80a668:	10c5883a 	add	r2,r2,r3
  80a66c:	3880008d 	sth	r2,2(r7)
  80a670:	39c00104 	addi	r7,r7,4
  80a674:	39400017 	ldw	r5,0(r7)
  80a678:	4909383a 	mul	r4,r9,r4
  80a67c:	1004d43a 	srli	r2,r2,16
  80a680:	28ffffcc 	andi	r3,r5,65535
  80a684:	20c9883a 	add	r4,r4,r3
  80a688:	1105883a 	add	r2,r2,r4
  80a68c:	42000104 	addi	r8,r8,4
  80a690:	1014d43a 	srli	r10,r2,16
  80a694:	42ffed36 	bltu	r8,r11,80a64c <__multiply+0x134>
  80a698:	38800015 	stw	r2,0(r7)
  80a69c:	31800104 	addi	r6,r6,4
  80a6a0:	33c0022e 	bgeu	r6,r15,80a6ac <__multiply+0x194>
  80a6a4:	63000104 	addi	r12,r12,4
  80a6a8:	003fc606 	br	80a5c4 <__multiply+0xac>
  80a6ac:	0400090e 	bge	zero,r16,80a6d4 <__multiply+0x1bc>
  80a6b0:	70bfff17 	ldw	r2,-4(r14)
  80a6b4:	70ffff04 	addi	r3,r14,-4
  80a6b8:	10000326 	beq	r2,zero,80a6c8 <__multiply+0x1b0>
  80a6bc:	00000506 	br	80a6d4 <__multiply+0x1bc>
  80a6c0:	18800017 	ldw	r2,0(r3)
  80a6c4:	1000031e 	bne	r2,zero,80a6d4 <__multiply+0x1bc>
  80a6c8:	843fffc4 	addi	r16,r16,-1
  80a6cc:	18ffff04 	addi	r3,r3,-4
  80a6d0:	803ffb1e 	bne	r16,zero,80a6c0 <__multiply+0x1a8>
  80a6d4:	a805883a 	mov	r2,r21
  80a6d8:	ac000415 	stw	r16,16(r21)
  80a6dc:	dfc00617 	ldw	ra,24(sp)
  80a6e0:	dd400517 	ldw	r21,20(sp)
  80a6e4:	dd000417 	ldw	r20,16(sp)
  80a6e8:	dcc00317 	ldw	r19,12(sp)
  80a6ec:	dc800217 	ldw	r18,8(sp)
  80a6f0:	dc400117 	ldw	r17,4(sp)
  80a6f4:	dc000017 	ldw	r16,0(sp)
  80a6f8:	dec00704 	addi	sp,sp,28
  80a6fc:	f800283a 	ret

0080a700 <__i2b>:
  80a700:	defffd04 	addi	sp,sp,-12
  80a704:	dc000015 	stw	r16,0(sp)
  80a708:	04000044 	movi	r16,1
  80a70c:	dc800115 	stw	r18,4(sp)
  80a710:	2825883a 	mov	r18,r5
  80a714:	800b883a 	mov	r5,r16
  80a718:	dfc00215 	stw	ra,8(sp)
  80a71c:	080a0080 	call	80a008 <_Balloc>
  80a720:	14000415 	stw	r16,16(r2)
  80a724:	14800515 	stw	r18,20(r2)
  80a728:	dfc00217 	ldw	ra,8(sp)
  80a72c:	dc800117 	ldw	r18,4(sp)
  80a730:	dc000017 	ldw	r16,0(sp)
  80a734:	dec00304 	addi	sp,sp,12
  80a738:	f800283a 	ret

0080a73c <__multadd>:
  80a73c:	defffa04 	addi	sp,sp,-24
  80a740:	dc800215 	stw	r18,8(sp)
  80a744:	2c800417 	ldw	r18,16(r5)
  80a748:	dd000415 	stw	r20,16(sp)
  80a74c:	dcc00315 	stw	r19,12(sp)
  80a750:	dc000015 	stw	r16,0(sp)
  80a754:	dfc00515 	stw	ra,20(sp)
  80a758:	3821883a 	mov	r16,r7
  80a75c:	dc400115 	stw	r17,4(sp)
  80a760:	2827883a 	mov	r19,r5
  80a764:	2029883a 	mov	r20,r4
  80a768:	2a000504 	addi	r8,r5,20
  80a76c:	000f883a 	mov	r7,zero
  80a770:	40800017 	ldw	r2,0(r8)
  80a774:	39c00044 	addi	r7,r7,1
  80a778:	10ffffcc 	andi	r3,r2,65535
  80a77c:	1987383a 	mul	r3,r3,r6
  80a780:	1004d43a 	srli	r2,r2,16
  80a784:	1c07883a 	add	r3,r3,r16
  80a788:	180ad43a 	srli	r5,r3,16
  80a78c:	1185383a 	mul	r2,r2,r6
  80a790:	18ffffcc 	andi	r3,r3,65535
  80a794:	1145883a 	add	r2,r2,r5
  80a798:	1008943a 	slli	r4,r2,16
  80a79c:	1020d43a 	srli	r16,r2,16
  80a7a0:	20c9883a 	add	r4,r4,r3
  80a7a4:	41000015 	stw	r4,0(r8)
  80a7a8:	42000104 	addi	r8,r8,4
  80a7ac:	3cbff016 	blt	r7,r18,80a770 <__multadd+0x34>
  80a7b0:	80000826 	beq	r16,zero,80a7d4 <__multadd+0x98>
  80a7b4:	98800217 	ldw	r2,8(r19)
  80a7b8:	90800f0e 	bge	r18,r2,80a7f8 <__multadd+0xbc>
  80a7bc:	9485883a 	add	r2,r18,r18
  80a7c0:	1085883a 	add	r2,r2,r2
  80a7c4:	14c5883a 	add	r2,r2,r19
  80a7c8:	90c00044 	addi	r3,r18,1
  80a7cc:	14000515 	stw	r16,20(r2)
  80a7d0:	98c00415 	stw	r3,16(r19)
  80a7d4:	9805883a 	mov	r2,r19
  80a7d8:	dfc00517 	ldw	ra,20(sp)
  80a7dc:	dd000417 	ldw	r20,16(sp)
  80a7e0:	dcc00317 	ldw	r19,12(sp)
  80a7e4:	dc800217 	ldw	r18,8(sp)
  80a7e8:	dc400117 	ldw	r17,4(sp)
  80a7ec:	dc000017 	ldw	r16,0(sp)
  80a7f0:	dec00604 	addi	sp,sp,24
  80a7f4:	f800283a 	ret
  80a7f8:	99400117 	ldw	r5,4(r19)
  80a7fc:	a009883a 	mov	r4,r20
  80a800:	29400044 	addi	r5,r5,1
  80a804:	080a0080 	call	80a008 <_Balloc>
  80a808:	99800417 	ldw	r6,16(r19)
  80a80c:	99400304 	addi	r5,r19,12
  80a810:	11000304 	addi	r4,r2,12
  80a814:	318d883a 	add	r6,r6,r6
  80a818:	318d883a 	add	r6,r6,r6
  80a81c:	31800204 	addi	r6,r6,8
  80a820:	1023883a 	mov	r17,r2
  80a824:	08098700 	call	809870 <memcpy>
  80a828:	980b883a 	mov	r5,r19
  80a82c:	a009883a 	mov	r4,r20
  80a830:	0809a880 	call	809a88 <_Bfree>
  80a834:	8827883a 	mov	r19,r17
  80a838:	003fe006 	br	80a7bc <__multadd+0x80>

0080a83c <__pow5mult>:
  80a83c:	defffa04 	addi	sp,sp,-24
  80a840:	308000cc 	andi	r2,r6,3
  80a844:	dd000415 	stw	r20,16(sp)
  80a848:	dcc00315 	stw	r19,12(sp)
  80a84c:	dc000015 	stw	r16,0(sp)
  80a850:	dfc00515 	stw	ra,20(sp)
  80a854:	dc800215 	stw	r18,8(sp)
  80a858:	dc400115 	stw	r17,4(sp)
  80a85c:	3021883a 	mov	r16,r6
  80a860:	2027883a 	mov	r19,r4
  80a864:	2829883a 	mov	r20,r5
  80a868:	10002b1e 	bne	r2,zero,80a918 <__pow5mult+0xdc>
  80a86c:	8025d0ba 	srai	r18,r16,2
  80a870:	90001b26 	beq	r18,zero,80a8e0 <__pow5mult+0xa4>
  80a874:	9c001217 	ldw	r16,72(r19)
  80a878:	8000081e 	bne	r16,zero,80a89c <__pow5mult+0x60>
  80a87c:	00003006 	br	80a940 <__pow5mult+0x104>
  80a880:	800b883a 	mov	r5,r16
  80a884:	800d883a 	mov	r6,r16
  80a888:	9809883a 	mov	r4,r19
  80a88c:	90001426 	beq	r18,zero,80a8e0 <__pow5mult+0xa4>
  80a890:	80800017 	ldw	r2,0(r16)
  80a894:	10001b26 	beq	r2,zero,80a904 <__pow5mult+0xc8>
  80a898:	1021883a 	mov	r16,r2
  80a89c:	9080004c 	andi	r2,r18,1
  80a8a0:	1005003a 	cmpeq	r2,r2,zero
  80a8a4:	9025d07a 	srai	r18,r18,1
  80a8a8:	800d883a 	mov	r6,r16
  80a8ac:	9809883a 	mov	r4,r19
  80a8b0:	a00b883a 	mov	r5,r20
  80a8b4:	103ff21e 	bne	r2,zero,80a880 <__pow5mult+0x44>
  80a8b8:	080a5180 	call	80a518 <__multiply>
  80a8bc:	a00b883a 	mov	r5,r20
  80a8c0:	9809883a 	mov	r4,r19
  80a8c4:	1023883a 	mov	r17,r2
  80a8c8:	0809a880 	call	809a88 <_Bfree>
  80a8cc:	8829883a 	mov	r20,r17
  80a8d0:	800b883a 	mov	r5,r16
  80a8d4:	800d883a 	mov	r6,r16
  80a8d8:	9809883a 	mov	r4,r19
  80a8dc:	903fec1e 	bne	r18,zero,80a890 <__pow5mult+0x54>
  80a8e0:	a005883a 	mov	r2,r20
  80a8e4:	dfc00517 	ldw	ra,20(sp)
  80a8e8:	dd000417 	ldw	r20,16(sp)
  80a8ec:	dcc00317 	ldw	r19,12(sp)
  80a8f0:	dc800217 	ldw	r18,8(sp)
  80a8f4:	dc400117 	ldw	r17,4(sp)
  80a8f8:	dc000017 	ldw	r16,0(sp)
  80a8fc:	dec00604 	addi	sp,sp,24
  80a900:	f800283a 	ret
  80a904:	080a5180 	call	80a518 <__multiply>
  80a908:	80800015 	stw	r2,0(r16)
  80a90c:	1021883a 	mov	r16,r2
  80a910:	10000015 	stw	zero,0(r2)
  80a914:	003fe106 	br	80a89c <__pow5mult+0x60>
  80a918:	1085883a 	add	r2,r2,r2
  80a91c:	00c02234 	movhi	r3,136
  80a920:	18ddd104 	addi	r3,r3,30532
  80a924:	1085883a 	add	r2,r2,r2
  80a928:	10c5883a 	add	r2,r2,r3
  80a92c:	11bfff17 	ldw	r6,-4(r2)
  80a930:	000f883a 	mov	r7,zero
  80a934:	080a73c0 	call	80a73c <__multadd>
  80a938:	1029883a 	mov	r20,r2
  80a93c:	003fcb06 	br	80a86c <__pow5mult+0x30>
  80a940:	9809883a 	mov	r4,r19
  80a944:	01409c44 	movi	r5,625
  80a948:	080a7000 	call	80a700 <__i2b>
  80a94c:	98801215 	stw	r2,72(r19)
  80a950:	1021883a 	mov	r16,r2
  80a954:	10000015 	stw	zero,0(r2)
  80a958:	003fd006 	br	80a89c <__pow5mult+0x60>

0080a95c <__s2b>:
  80a95c:	defff904 	addi	sp,sp,-28
  80a960:	dcc00315 	stw	r19,12(sp)
  80a964:	dc800215 	stw	r18,8(sp)
  80a968:	2827883a 	mov	r19,r5
  80a96c:	2025883a 	mov	r18,r4
  80a970:	01400244 	movi	r5,9
  80a974:	39000204 	addi	r4,r7,8
  80a978:	dd000415 	stw	r20,16(sp)
  80a97c:	dc400115 	stw	r17,4(sp)
  80a980:	dfc00615 	stw	ra,24(sp)
  80a984:	dd400515 	stw	r21,20(sp)
  80a988:	dc000015 	stw	r16,0(sp)
  80a98c:	3829883a 	mov	r20,r7
  80a990:	3023883a 	mov	r17,r6
  80a994:	0803f040 	call	803f04 <__divsi3>
  80a998:	00c00044 	movi	r3,1
  80a99c:	1880350e 	bge	r3,r2,80aa74 <__s2b+0x118>
  80a9a0:	000b883a 	mov	r5,zero
  80a9a4:	18c7883a 	add	r3,r3,r3
  80a9a8:	29400044 	addi	r5,r5,1
  80a9ac:	18bffd16 	blt	r3,r2,80a9a4 <__s2b+0x48>
  80a9b0:	9009883a 	mov	r4,r18
  80a9b4:	080a0080 	call	80a008 <_Balloc>
  80a9b8:	1011883a 	mov	r8,r2
  80a9bc:	d8800717 	ldw	r2,28(sp)
  80a9c0:	00c00044 	movi	r3,1
  80a9c4:	01800244 	movi	r6,9
  80a9c8:	40800515 	stw	r2,20(r8)
  80a9cc:	40c00415 	stw	r3,16(r8)
  80a9d0:	3440260e 	bge	r6,r17,80aa6c <__s2b+0x110>
  80a9d4:	3021883a 	mov	r16,r6
  80a9d8:	99ab883a 	add	r21,r19,r6
  80a9dc:	9c05883a 	add	r2,r19,r16
  80a9e0:	11c00007 	ldb	r7,0(r2)
  80a9e4:	400b883a 	mov	r5,r8
  80a9e8:	9009883a 	mov	r4,r18
  80a9ec:	39fff404 	addi	r7,r7,-48
  80a9f0:	01800284 	movi	r6,10
  80a9f4:	080a73c0 	call	80a73c <__multadd>
  80a9f8:	84000044 	addi	r16,r16,1
  80a9fc:	1011883a 	mov	r8,r2
  80aa00:	8c3ff61e 	bne	r17,r16,80a9dc <__s2b+0x80>
  80aa04:	ac45883a 	add	r2,r21,r17
  80aa08:	117ffe04 	addi	r5,r2,-8
  80aa0c:	880d883a 	mov	r6,r17
  80aa10:	35000c0e 	bge	r6,r20,80aa44 <__s2b+0xe8>
  80aa14:	a185c83a 	sub	r2,r20,r6
  80aa18:	2821883a 	mov	r16,r5
  80aa1c:	28a3883a 	add	r17,r5,r2
  80aa20:	81c00007 	ldb	r7,0(r16)
  80aa24:	400b883a 	mov	r5,r8
  80aa28:	9009883a 	mov	r4,r18
  80aa2c:	39fff404 	addi	r7,r7,-48
  80aa30:	01800284 	movi	r6,10
  80aa34:	080a73c0 	call	80a73c <__multadd>
  80aa38:	84000044 	addi	r16,r16,1
  80aa3c:	1011883a 	mov	r8,r2
  80aa40:	847ff71e 	bne	r16,r17,80aa20 <__s2b+0xc4>
  80aa44:	4005883a 	mov	r2,r8
  80aa48:	dfc00617 	ldw	ra,24(sp)
  80aa4c:	dd400517 	ldw	r21,20(sp)
  80aa50:	dd000417 	ldw	r20,16(sp)
  80aa54:	dcc00317 	ldw	r19,12(sp)
  80aa58:	dc800217 	ldw	r18,8(sp)
  80aa5c:	dc400117 	ldw	r17,4(sp)
  80aa60:	dc000017 	ldw	r16,0(sp)
  80aa64:	dec00704 	addi	sp,sp,28
  80aa68:	f800283a 	ret
  80aa6c:	99400284 	addi	r5,r19,10
  80aa70:	003fe706 	br	80aa10 <__s2b+0xb4>
  80aa74:	000b883a 	mov	r5,zero
  80aa78:	003fcd06 	br	80a9b0 <__s2b+0x54>

0080aa7c <_realloc_r>:
  80aa7c:	defff404 	addi	sp,sp,-48
  80aa80:	dd800815 	stw	r22,32(sp)
  80aa84:	dc800415 	stw	r18,16(sp)
  80aa88:	dc400315 	stw	r17,12(sp)
  80aa8c:	dfc00b15 	stw	ra,44(sp)
  80aa90:	df000a15 	stw	fp,40(sp)
  80aa94:	ddc00915 	stw	r23,36(sp)
  80aa98:	dd400715 	stw	r21,28(sp)
  80aa9c:	dd000615 	stw	r20,24(sp)
  80aaa0:	dcc00515 	stw	r19,20(sp)
  80aaa4:	dc000215 	stw	r16,8(sp)
  80aaa8:	2825883a 	mov	r18,r5
  80aaac:	3023883a 	mov	r17,r6
  80aab0:	202d883a 	mov	r22,r4
  80aab4:	2800c926 	beq	r5,zero,80addc <_realloc_r+0x360>
  80aab8:	080cf6c0 	call	80cf6c <__malloc_lock>
  80aabc:	943ffe04 	addi	r16,r18,-8
  80aac0:	88c002c4 	addi	r3,r17,11
  80aac4:	00800584 	movi	r2,22
  80aac8:	82000117 	ldw	r8,4(r16)
  80aacc:	10c01b2e 	bgeu	r2,r3,80ab3c <_realloc_r+0xc0>
  80aad0:	00bffe04 	movi	r2,-8
  80aad4:	188e703a 	and	r7,r3,r2
  80aad8:	3839883a 	mov	fp,r7
  80aadc:	38001a16 	blt	r7,zero,80ab48 <_realloc_r+0xcc>
  80aae0:	e4401936 	bltu	fp,r17,80ab48 <_realloc_r+0xcc>
  80aae4:	013fff04 	movi	r4,-4
  80aae8:	4126703a 	and	r19,r8,r4
  80aaec:	99c02616 	blt	r19,r7,80ab88 <_realloc_r+0x10c>
  80aaf0:	802b883a 	mov	r21,r16
  80aaf4:	9829883a 	mov	r20,r19
  80aaf8:	84000204 	addi	r16,r16,8
  80aafc:	a80f883a 	mov	r7,r21
  80ab00:	a70dc83a 	sub	r6,r20,fp
  80ab04:	008003c4 	movi	r2,15
  80ab08:	1180c136 	bltu	r2,r6,80ae10 <_realloc_r+0x394>
  80ab0c:	38800117 	ldw	r2,4(r7)
  80ab10:	a549883a 	add	r4,r20,r21
  80ab14:	1080004c 	andi	r2,r2,1
  80ab18:	a084b03a 	or	r2,r20,r2
  80ab1c:	38800115 	stw	r2,4(r7)
  80ab20:	20c00117 	ldw	r3,4(r4)
  80ab24:	18c00054 	ori	r3,r3,1
  80ab28:	20c00115 	stw	r3,4(r4)
  80ab2c:	b009883a 	mov	r4,r22
  80ab30:	080cf8c0 	call	80cf8c <__malloc_unlock>
  80ab34:	8023883a 	mov	r17,r16
  80ab38:	00000606 	br	80ab54 <_realloc_r+0xd8>
  80ab3c:	01c00404 	movi	r7,16
  80ab40:	3839883a 	mov	fp,r7
  80ab44:	e47fe72e 	bgeu	fp,r17,80aae4 <_realloc_r+0x68>
  80ab48:	00800304 	movi	r2,12
  80ab4c:	0023883a 	mov	r17,zero
  80ab50:	b0800015 	stw	r2,0(r22)
  80ab54:	8805883a 	mov	r2,r17
  80ab58:	dfc00b17 	ldw	ra,44(sp)
  80ab5c:	df000a17 	ldw	fp,40(sp)
  80ab60:	ddc00917 	ldw	r23,36(sp)
  80ab64:	dd800817 	ldw	r22,32(sp)
  80ab68:	dd400717 	ldw	r21,28(sp)
  80ab6c:	dd000617 	ldw	r20,24(sp)
  80ab70:	dcc00517 	ldw	r19,20(sp)
  80ab74:	dc800417 	ldw	r18,16(sp)
  80ab78:	dc400317 	ldw	r17,12(sp)
  80ab7c:	dc000217 	ldw	r16,8(sp)
  80ab80:	dec00c04 	addi	sp,sp,48
  80ab84:	f800283a 	ret
  80ab88:	00802234 	movhi	r2,136
  80ab8c:	109f7404 	addi	r2,r2,32208
  80ab90:	12400217 	ldw	r9,8(r2)
  80ab94:	84cd883a 	add	r6,r16,r19
  80ab98:	802b883a 	mov	r21,r16
  80ab9c:	3240b926 	beq	r6,r9,80ae84 <_realloc_r+0x408>
  80aba0:	31400117 	ldw	r5,4(r6)
  80aba4:	00bfff84 	movi	r2,-2
  80aba8:	2884703a 	and	r2,r5,r2
  80abac:	1185883a 	add	r2,r2,r6
  80abb0:	10c00117 	ldw	r3,4(r2)
  80abb4:	18c0004c 	andi	r3,r3,1
  80abb8:	1807003a 	cmpeq	r3,r3,zero
  80abbc:	1800a326 	beq	r3,zero,80ae4c <_realloc_r+0x3d0>
  80abc0:	2908703a 	and	r4,r5,r4
  80abc4:	9929883a 	add	r20,r19,r4
  80abc8:	a1c0a30e 	bge	r20,r7,80ae58 <_realloc_r+0x3dc>
  80abcc:	4080004c 	andi	r2,r8,1
  80abd0:	1000551e 	bne	r2,zero,80ad28 <_realloc_r+0x2ac>
  80abd4:	80800017 	ldw	r2,0(r16)
  80abd8:	80afc83a 	sub	r23,r16,r2
  80abdc:	b8c00117 	ldw	r3,4(r23)
  80abe0:	00bfff04 	movi	r2,-4
  80abe4:	1884703a 	and	r2,r3,r2
  80abe8:	30002e26 	beq	r6,zero,80aca4 <_realloc_r+0x228>
  80abec:	3240b926 	beq	r6,r9,80aed4 <_realloc_r+0x458>
  80abf0:	98a9883a 	add	r20,r19,r2
  80abf4:	2509883a 	add	r4,r4,r20
  80abf8:	d9000015 	stw	r4,0(sp)
  80abfc:	21c02a16 	blt	r4,r7,80aca8 <_realloc_r+0x22c>
  80ac00:	30800317 	ldw	r2,12(r6)
  80ac04:	30c00217 	ldw	r3,8(r6)
  80ac08:	01400904 	movi	r5,36
  80ac0c:	99bfff04 	addi	r6,r19,-4
  80ac10:	18800315 	stw	r2,12(r3)
  80ac14:	10c00215 	stw	r3,8(r2)
  80ac18:	b9000317 	ldw	r4,12(r23)
  80ac1c:	b8800217 	ldw	r2,8(r23)
  80ac20:	b82b883a 	mov	r21,r23
  80ac24:	bc000204 	addi	r16,r23,8
  80ac28:	20800215 	stw	r2,8(r4)
  80ac2c:	11000315 	stw	r4,12(r2)
  80ac30:	2980e436 	bltu	r5,r6,80afc4 <_realloc_r+0x548>
  80ac34:	008004c4 	movi	r2,19
  80ac38:	9009883a 	mov	r4,r18
  80ac3c:	8011883a 	mov	r8,r16
  80ac40:	11800f2e 	bgeu	r2,r6,80ac80 <_realloc_r+0x204>
  80ac44:	90800017 	ldw	r2,0(r18)
  80ac48:	ba000404 	addi	r8,r23,16
  80ac4c:	91000204 	addi	r4,r18,8
  80ac50:	b8800215 	stw	r2,8(r23)
  80ac54:	90c00117 	ldw	r3,4(r18)
  80ac58:	008006c4 	movi	r2,27
  80ac5c:	b8c00315 	stw	r3,12(r23)
  80ac60:	1180072e 	bgeu	r2,r6,80ac80 <_realloc_r+0x204>
  80ac64:	90c00217 	ldw	r3,8(r18)
  80ac68:	ba000604 	addi	r8,r23,24
  80ac6c:	91000404 	addi	r4,r18,16
  80ac70:	b8c00415 	stw	r3,16(r23)
  80ac74:	90800317 	ldw	r2,12(r18)
  80ac78:	b8800515 	stw	r2,20(r23)
  80ac7c:	3140e726 	beq	r6,r5,80b01c <_realloc_r+0x5a0>
  80ac80:	20800017 	ldw	r2,0(r4)
  80ac84:	dd000017 	ldw	r20,0(sp)
  80ac88:	b80f883a 	mov	r7,r23
  80ac8c:	40800015 	stw	r2,0(r8)
  80ac90:	20c00117 	ldw	r3,4(r4)
  80ac94:	40c00115 	stw	r3,4(r8)
  80ac98:	20800217 	ldw	r2,8(r4)
  80ac9c:	40800215 	stw	r2,8(r8)
  80aca0:	003f9706 	br	80ab00 <_realloc_r+0x84>
  80aca4:	98a9883a 	add	r20,r19,r2
  80aca8:	a1c01f16 	blt	r20,r7,80ad28 <_realloc_r+0x2ac>
  80acac:	b8c00317 	ldw	r3,12(r23)
  80acb0:	b8800217 	ldw	r2,8(r23)
  80acb4:	99bfff04 	addi	r6,r19,-4
  80acb8:	01400904 	movi	r5,36
  80acbc:	b82b883a 	mov	r21,r23
  80acc0:	18800215 	stw	r2,8(r3)
  80acc4:	10c00315 	stw	r3,12(r2)
  80acc8:	bc000204 	addi	r16,r23,8
  80accc:	2980c336 	bltu	r5,r6,80afdc <_realloc_r+0x560>
  80acd0:	008004c4 	movi	r2,19
  80acd4:	9009883a 	mov	r4,r18
  80acd8:	8011883a 	mov	r8,r16
  80acdc:	11800f2e 	bgeu	r2,r6,80ad1c <_realloc_r+0x2a0>
  80ace0:	90800017 	ldw	r2,0(r18)
  80ace4:	ba000404 	addi	r8,r23,16
  80ace8:	91000204 	addi	r4,r18,8
  80acec:	b8800215 	stw	r2,8(r23)
  80acf0:	90c00117 	ldw	r3,4(r18)
  80acf4:	008006c4 	movi	r2,27
  80acf8:	b8c00315 	stw	r3,12(r23)
  80acfc:	1180072e 	bgeu	r2,r6,80ad1c <_realloc_r+0x2a0>
  80ad00:	90c00217 	ldw	r3,8(r18)
  80ad04:	ba000604 	addi	r8,r23,24
  80ad08:	91000404 	addi	r4,r18,16
  80ad0c:	b8c00415 	stw	r3,16(r23)
  80ad10:	90800317 	ldw	r2,12(r18)
  80ad14:	b8800515 	stw	r2,20(r23)
  80ad18:	3140c726 	beq	r6,r5,80b038 <_realloc_r+0x5bc>
  80ad1c:	20800017 	ldw	r2,0(r4)
  80ad20:	b80f883a 	mov	r7,r23
  80ad24:	003fd906 	br	80ac8c <_realloc_r+0x210>
  80ad28:	880b883a 	mov	r5,r17
  80ad2c:	b009883a 	mov	r4,r22
  80ad30:	080904c0 	call	80904c <_malloc_r>
  80ad34:	1023883a 	mov	r17,r2
  80ad38:	10002526 	beq	r2,zero,80add0 <_realloc_r+0x354>
  80ad3c:	80800117 	ldw	r2,4(r16)
  80ad40:	00ffff84 	movi	r3,-2
  80ad44:	893ffe04 	addi	r4,r17,-8
  80ad48:	10c4703a 	and	r2,r2,r3
  80ad4c:	8085883a 	add	r2,r16,r2
  80ad50:	20809526 	beq	r4,r2,80afa8 <_realloc_r+0x52c>
  80ad54:	99bfff04 	addi	r6,r19,-4
  80ad58:	01c00904 	movi	r7,36
  80ad5c:	39804536 	bltu	r7,r6,80ae74 <_realloc_r+0x3f8>
  80ad60:	008004c4 	movi	r2,19
  80ad64:	9009883a 	mov	r4,r18
  80ad68:	880b883a 	mov	r5,r17
  80ad6c:	11800f2e 	bgeu	r2,r6,80adac <_realloc_r+0x330>
  80ad70:	90800017 	ldw	r2,0(r18)
  80ad74:	89400204 	addi	r5,r17,8
  80ad78:	91000204 	addi	r4,r18,8
  80ad7c:	88800015 	stw	r2,0(r17)
  80ad80:	90c00117 	ldw	r3,4(r18)
  80ad84:	008006c4 	movi	r2,27
  80ad88:	88c00115 	stw	r3,4(r17)
  80ad8c:	1180072e 	bgeu	r2,r6,80adac <_realloc_r+0x330>
  80ad90:	90c00217 	ldw	r3,8(r18)
  80ad94:	89400404 	addi	r5,r17,16
  80ad98:	91000404 	addi	r4,r18,16
  80ad9c:	88c00215 	stw	r3,8(r17)
  80ada0:	90800317 	ldw	r2,12(r18)
  80ada4:	88800315 	stw	r2,12(r17)
  80ada8:	31c09126 	beq	r6,r7,80aff0 <_realloc_r+0x574>
  80adac:	20800017 	ldw	r2,0(r4)
  80adb0:	28800015 	stw	r2,0(r5)
  80adb4:	20c00117 	ldw	r3,4(r4)
  80adb8:	28c00115 	stw	r3,4(r5)
  80adbc:	20800217 	ldw	r2,8(r4)
  80adc0:	28800215 	stw	r2,8(r5)
  80adc4:	900b883a 	mov	r5,r18
  80adc8:	b009883a 	mov	r4,r22
  80adcc:	08084c40 	call	8084c4 <_free_r>
  80add0:	b009883a 	mov	r4,r22
  80add4:	080cf8c0 	call	80cf8c <__malloc_unlock>
  80add8:	003f5e06 	br	80ab54 <_realloc_r+0xd8>
  80addc:	300b883a 	mov	r5,r6
  80ade0:	dfc00b17 	ldw	ra,44(sp)
  80ade4:	df000a17 	ldw	fp,40(sp)
  80ade8:	ddc00917 	ldw	r23,36(sp)
  80adec:	dd800817 	ldw	r22,32(sp)
  80adf0:	dd400717 	ldw	r21,28(sp)
  80adf4:	dd000617 	ldw	r20,24(sp)
  80adf8:	dcc00517 	ldw	r19,20(sp)
  80adfc:	dc800417 	ldw	r18,16(sp)
  80ae00:	dc400317 	ldw	r17,12(sp)
  80ae04:	dc000217 	ldw	r16,8(sp)
  80ae08:	dec00c04 	addi	sp,sp,48
  80ae0c:	080904c1 	jmpi	80904c <_malloc_r>
  80ae10:	38800117 	ldw	r2,4(r7)
  80ae14:	e54b883a 	add	r5,fp,r21
  80ae18:	31000054 	ori	r4,r6,1
  80ae1c:	1080004c 	andi	r2,r2,1
  80ae20:	1704b03a 	or	r2,r2,fp
  80ae24:	38800115 	stw	r2,4(r7)
  80ae28:	29000115 	stw	r4,4(r5)
  80ae2c:	2987883a 	add	r3,r5,r6
  80ae30:	18800117 	ldw	r2,4(r3)
  80ae34:	29400204 	addi	r5,r5,8
  80ae38:	b009883a 	mov	r4,r22
  80ae3c:	10800054 	ori	r2,r2,1
  80ae40:	18800115 	stw	r2,4(r3)
  80ae44:	08084c40 	call	8084c4 <_free_r>
  80ae48:	003f3806 	br	80ab2c <_realloc_r+0xb0>
  80ae4c:	000d883a 	mov	r6,zero
  80ae50:	0009883a 	mov	r4,zero
  80ae54:	003f5d06 	br	80abcc <_realloc_r+0x150>
  80ae58:	30c00217 	ldw	r3,8(r6)
  80ae5c:	30800317 	ldw	r2,12(r6)
  80ae60:	800f883a 	mov	r7,r16
  80ae64:	84000204 	addi	r16,r16,8
  80ae68:	10c00215 	stw	r3,8(r2)
  80ae6c:	18800315 	stw	r2,12(r3)
  80ae70:	003f2306 	br	80ab00 <_realloc_r+0x84>
  80ae74:	8809883a 	mov	r4,r17
  80ae78:	900b883a 	mov	r5,r18
  80ae7c:	08099100 	call	809910 <memmove>
  80ae80:	003fd006 	br	80adc4 <_realloc_r+0x348>
  80ae84:	30800117 	ldw	r2,4(r6)
  80ae88:	e0c00404 	addi	r3,fp,16
  80ae8c:	1108703a 	and	r4,r2,r4
  80ae90:	9905883a 	add	r2,r19,r4
  80ae94:	10ff4d16 	blt	r2,r3,80abcc <_realloc_r+0x150>
  80ae98:	1705c83a 	sub	r2,r2,fp
  80ae9c:	870b883a 	add	r5,r16,fp
  80aea0:	10800054 	ori	r2,r2,1
  80aea4:	28800115 	stw	r2,4(r5)
  80aea8:	80c00117 	ldw	r3,4(r16)
  80aeac:	00802234 	movhi	r2,136
  80aeb0:	109f7404 	addi	r2,r2,32208
  80aeb4:	b009883a 	mov	r4,r22
  80aeb8:	18c0004c 	andi	r3,r3,1
  80aebc:	e0c6b03a 	or	r3,fp,r3
  80aec0:	11400215 	stw	r5,8(r2)
  80aec4:	80c00115 	stw	r3,4(r16)
  80aec8:	080cf8c0 	call	80cf8c <__malloc_unlock>
  80aecc:	84400204 	addi	r17,r16,8
  80aed0:	003f2006 	br	80ab54 <_realloc_r+0xd8>
  80aed4:	98a9883a 	add	r20,r19,r2
  80aed8:	2509883a 	add	r4,r4,r20
  80aedc:	e0800404 	addi	r2,fp,16
  80aee0:	d9000115 	stw	r4,4(sp)
  80aee4:	20bf7016 	blt	r4,r2,80aca8 <_realloc_r+0x22c>
  80aee8:	b8c00317 	ldw	r3,12(r23)
  80aeec:	b8800217 	ldw	r2,8(r23)
  80aef0:	99bfff04 	addi	r6,r19,-4
  80aef4:	01400904 	movi	r5,36
  80aef8:	18800215 	stw	r2,8(r3)
  80aefc:	10c00315 	stw	r3,12(r2)
  80af00:	bc400204 	addi	r17,r23,8
  80af04:	29804136 	bltu	r5,r6,80b00c <_realloc_r+0x590>
  80af08:	008004c4 	movi	r2,19
  80af0c:	9009883a 	mov	r4,r18
  80af10:	880f883a 	mov	r7,r17
  80af14:	11800f2e 	bgeu	r2,r6,80af54 <_realloc_r+0x4d8>
  80af18:	90800017 	ldw	r2,0(r18)
  80af1c:	b9c00404 	addi	r7,r23,16
  80af20:	91000204 	addi	r4,r18,8
  80af24:	b8800215 	stw	r2,8(r23)
  80af28:	90c00117 	ldw	r3,4(r18)
  80af2c:	008006c4 	movi	r2,27
  80af30:	b8c00315 	stw	r3,12(r23)
  80af34:	1180072e 	bgeu	r2,r6,80af54 <_realloc_r+0x4d8>
  80af38:	90c00217 	ldw	r3,8(r18)
  80af3c:	b9c00604 	addi	r7,r23,24
  80af40:	91000404 	addi	r4,r18,16
  80af44:	b8c00415 	stw	r3,16(r23)
  80af48:	90800317 	ldw	r2,12(r18)
  80af4c:	b8800515 	stw	r2,20(r23)
  80af50:	31404026 	beq	r6,r5,80b054 <_realloc_r+0x5d8>
  80af54:	20800017 	ldw	r2,0(r4)
  80af58:	38800015 	stw	r2,0(r7)
  80af5c:	20c00117 	ldw	r3,4(r4)
  80af60:	38c00115 	stw	r3,4(r7)
  80af64:	20800217 	ldw	r2,8(r4)
  80af68:	38800215 	stw	r2,8(r7)
  80af6c:	d8c00117 	ldw	r3,4(sp)
  80af70:	bf0b883a 	add	r5,r23,fp
  80af74:	b009883a 	mov	r4,r22
  80af78:	1f05c83a 	sub	r2,r3,fp
  80af7c:	10800054 	ori	r2,r2,1
  80af80:	28800115 	stw	r2,4(r5)
  80af84:	b8c00117 	ldw	r3,4(r23)
  80af88:	00802234 	movhi	r2,136
  80af8c:	109f7404 	addi	r2,r2,32208
  80af90:	11400215 	stw	r5,8(r2)
  80af94:	18c0004c 	andi	r3,r3,1
  80af98:	e0c6b03a 	or	r3,fp,r3
  80af9c:	b8c00115 	stw	r3,4(r23)
  80afa0:	080cf8c0 	call	80cf8c <__malloc_unlock>
  80afa4:	003eeb06 	br	80ab54 <_realloc_r+0xd8>
  80afa8:	20800117 	ldw	r2,4(r4)
  80afac:	00ffff04 	movi	r3,-4
  80afb0:	800f883a 	mov	r7,r16
  80afb4:	10c4703a 	and	r2,r2,r3
  80afb8:	98a9883a 	add	r20,r19,r2
  80afbc:	84000204 	addi	r16,r16,8
  80afc0:	003ecf06 	br	80ab00 <_realloc_r+0x84>
  80afc4:	900b883a 	mov	r5,r18
  80afc8:	8009883a 	mov	r4,r16
  80afcc:	08099100 	call	809910 <memmove>
  80afd0:	dd000017 	ldw	r20,0(sp)
  80afd4:	b80f883a 	mov	r7,r23
  80afd8:	003ec906 	br	80ab00 <_realloc_r+0x84>
  80afdc:	900b883a 	mov	r5,r18
  80afe0:	8009883a 	mov	r4,r16
  80afe4:	08099100 	call	809910 <memmove>
  80afe8:	b80f883a 	mov	r7,r23
  80afec:	003ec406 	br	80ab00 <_realloc_r+0x84>
  80aff0:	90c00417 	ldw	r3,16(r18)
  80aff4:	89400604 	addi	r5,r17,24
  80aff8:	91000604 	addi	r4,r18,24
  80affc:	88c00415 	stw	r3,16(r17)
  80b000:	90800517 	ldw	r2,20(r18)
  80b004:	88800515 	stw	r2,20(r17)
  80b008:	003f6806 	br	80adac <_realloc_r+0x330>
  80b00c:	900b883a 	mov	r5,r18
  80b010:	8809883a 	mov	r4,r17
  80b014:	08099100 	call	809910 <memmove>
  80b018:	003fd406 	br	80af6c <_realloc_r+0x4f0>
  80b01c:	90c00417 	ldw	r3,16(r18)
  80b020:	91000604 	addi	r4,r18,24
  80b024:	ba000804 	addi	r8,r23,32
  80b028:	b8c00615 	stw	r3,24(r23)
  80b02c:	90800517 	ldw	r2,20(r18)
  80b030:	b8800715 	stw	r2,28(r23)
  80b034:	003f1206 	br	80ac80 <_realloc_r+0x204>
  80b038:	90c00417 	ldw	r3,16(r18)
  80b03c:	91000604 	addi	r4,r18,24
  80b040:	ba000804 	addi	r8,r23,32
  80b044:	b8c00615 	stw	r3,24(r23)
  80b048:	90800517 	ldw	r2,20(r18)
  80b04c:	b8800715 	stw	r2,28(r23)
  80b050:	003f3206 	br	80ad1c <_realloc_r+0x2a0>
  80b054:	90c00417 	ldw	r3,16(r18)
  80b058:	91000604 	addi	r4,r18,24
  80b05c:	b9c00804 	addi	r7,r23,32
  80b060:	b8c00615 	stw	r3,24(r23)
  80b064:	90800517 	ldw	r2,20(r18)
  80b068:	b8800715 	stw	r2,28(r23)
  80b06c:	003fb906 	br	80af54 <_realloc_r+0x4d8>

0080b070 <__isinfd>:
  80b070:	200d883a 	mov	r6,r4
  80b074:	0109c83a 	sub	r4,zero,r4
  80b078:	2188b03a 	or	r4,r4,r6
  80b07c:	2008d7fa 	srli	r4,r4,31
  80b080:	00a00034 	movhi	r2,32768
  80b084:	10bfffc4 	addi	r2,r2,-1
  80b088:	1144703a 	and	r2,r2,r5
  80b08c:	2088b03a 	or	r4,r4,r2
  80b090:	009ffc34 	movhi	r2,32752
  80b094:	1105c83a 	sub	r2,r2,r4
  80b098:	0087c83a 	sub	r3,zero,r2
  80b09c:	10c4b03a 	or	r2,r2,r3
  80b0a0:	1004d7fa 	srli	r2,r2,31
  80b0a4:	00c00044 	movi	r3,1
  80b0a8:	1885c83a 	sub	r2,r3,r2
  80b0ac:	f800283a 	ret

0080b0b0 <__isnand>:
  80b0b0:	200d883a 	mov	r6,r4
  80b0b4:	0109c83a 	sub	r4,zero,r4
  80b0b8:	2188b03a 	or	r4,r4,r6
  80b0bc:	2008d7fa 	srli	r4,r4,31
  80b0c0:	00a00034 	movhi	r2,32768
  80b0c4:	10bfffc4 	addi	r2,r2,-1
  80b0c8:	1144703a 	and	r2,r2,r5
  80b0cc:	2088b03a 	or	r4,r4,r2
  80b0d0:	009ffc34 	movhi	r2,32752
  80b0d4:	1105c83a 	sub	r2,r2,r4
  80b0d8:	1004d7fa 	srli	r2,r2,31
  80b0dc:	f800283a 	ret

0080b0e0 <_sbrk_r>:
  80b0e0:	defffd04 	addi	sp,sp,-12
  80b0e4:	dc000015 	stw	r16,0(sp)
  80b0e8:	04002274 	movhi	r16,137
  80b0ec:	842c3504 	addi	r16,r16,-20268
  80b0f0:	dc400115 	stw	r17,4(sp)
  80b0f4:	80000015 	stw	zero,0(r16)
  80b0f8:	2023883a 	mov	r17,r4
  80b0fc:	2809883a 	mov	r4,r5
  80b100:	dfc00215 	stw	ra,8(sp)
  80b104:	080d18c0 	call	80d18c <sbrk>
  80b108:	1007883a 	mov	r3,r2
  80b10c:	00bfffc4 	movi	r2,-1
  80b110:	18800626 	beq	r3,r2,80b12c <_sbrk_r+0x4c>
  80b114:	1805883a 	mov	r2,r3
  80b118:	dfc00217 	ldw	ra,8(sp)
  80b11c:	dc400117 	ldw	r17,4(sp)
  80b120:	dc000017 	ldw	r16,0(sp)
  80b124:	dec00304 	addi	sp,sp,12
  80b128:	f800283a 	ret
  80b12c:	80800017 	ldw	r2,0(r16)
  80b130:	103ff826 	beq	r2,zero,80b114 <_sbrk_r+0x34>
  80b134:	88800015 	stw	r2,0(r17)
  80b138:	1805883a 	mov	r2,r3
  80b13c:	dfc00217 	ldw	ra,8(sp)
  80b140:	dc400117 	ldw	r17,4(sp)
  80b144:	dc000017 	ldw	r16,0(sp)
  80b148:	dec00304 	addi	sp,sp,12
  80b14c:	f800283a 	ret

0080b150 <__sclose>:
  80b150:	2940038f 	ldh	r5,14(r5)
  80b154:	080b4f81 	jmpi	80b4f8 <_close_r>

0080b158 <__sseek>:
  80b158:	defffe04 	addi	sp,sp,-8
  80b15c:	dc000015 	stw	r16,0(sp)
  80b160:	2821883a 	mov	r16,r5
  80b164:	2940038f 	ldh	r5,14(r5)
  80b168:	dfc00115 	stw	ra,4(sp)
  80b16c:	080b7700 	call	80b770 <_lseek_r>
  80b170:	1007883a 	mov	r3,r2
  80b174:	00bfffc4 	movi	r2,-1
  80b178:	18800926 	beq	r3,r2,80b1a0 <__sseek+0x48>
  80b17c:	8080030b 	ldhu	r2,12(r16)
  80b180:	80c01415 	stw	r3,80(r16)
  80b184:	10840014 	ori	r2,r2,4096
  80b188:	8080030d 	sth	r2,12(r16)
  80b18c:	1805883a 	mov	r2,r3
  80b190:	dfc00117 	ldw	ra,4(sp)
  80b194:	dc000017 	ldw	r16,0(sp)
  80b198:	dec00204 	addi	sp,sp,8
  80b19c:	f800283a 	ret
  80b1a0:	8080030b 	ldhu	r2,12(r16)
  80b1a4:	10bbffcc 	andi	r2,r2,61439
  80b1a8:	8080030d 	sth	r2,12(r16)
  80b1ac:	1805883a 	mov	r2,r3
  80b1b0:	dfc00117 	ldw	ra,4(sp)
  80b1b4:	dc000017 	ldw	r16,0(sp)
  80b1b8:	dec00204 	addi	sp,sp,8
  80b1bc:	f800283a 	ret

0080b1c0 <__swrite>:
  80b1c0:	2880030b 	ldhu	r2,12(r5)
  80b1c4:	defffb04 	addi	sp,sp,-20
  80b1c8:	dcc00315 	stw	r19,12(sp)
  80b1cc:	1080400c 	andi	r2,r2,256
  80b1d0:	dc800215 	stw	r18,8(sp)
  80b1d4:	dc400115 	stw	r17,4(sp)
  80b1d8:	dc000015 	stw	r16,0(sp)
  80b1dc:	3027883a 	mov	r19,r6
  80b1e0:	3825883a 	mov	r18,r7
  80b1e4:	dfc00415 	stw	ra,16(sp)
  80b1e8:	2821883a 	mov	r16,r5
  80b1ec:	000d883a 	mov	r6,zero
  80b1f0:	01c00084 	movi	r7,2
  80b1f4:	2023883a 	mov	r17,r4
  80b1f8:	10000226 	beq	r2,zero,80b204 <__swrite+0x44>
  80b1fc:	2940038f 	ldh	r5,14(r5)
  80b200:	080b7700 	call	80b770 <_lseek_r>
  80b204:	8080030b 	ldhu	r2,12(r16)
  80b208:	8140038f 	ldh	r5,14(r16)
  80b20c:	8809883a 	mov	r4,r17
  80b210:	10bbffcc 	andi	r2,r2,61439
  80b214:	980d883a 	mov	r6,r19
  80b218:	900f883a 	mov	r7,r18
  80b21c:	8080030d 	sth	r2,12(r16)
  80b220:	dfc00417 	ldw	ra,16(sp)
  80b224:	dcc00317 	ldw	r19,12(sp)
  80b228:	dc800217 	ldw	r18,8(sp)
  80b22c:	dc400117 	ldw	r17,4(sp)
  80b230:	dc000017 	ldw	r16,0(sp)
  80b234:	dec00504 	addi	sp,sp,20
  80b238:	080b3cc1 	jmpi	80b3cc <_write_r>

0080b23c <__sread>:
  80b23c:	defffe04 	addi	sp,sp,-8
  80b240:	dc000015 	stw	r16,0(sp)
  80b244:	2821883a 	mov	r16,r5
  80b248:	2940038f 	ldh	r5,14(r5)
  80b24c:	dfc00115 	stw	ra,4(sp)
  80b250:	080b7e80 	call	80b7e8 <_read_r>
  80b254:	1007883a 	mov	r3,r2
  80b258:	10000816 	blt	r2,zero,80b27c <__sread+0x40>
  80b25c:	80801417 	ldw	r2,80(r16)
  80b260:	10c5883a 	add	r2,r2,r3
  80b264:	80801415 	stw	r2,80(r16)
  80b268:	1805883a 	mov	r2,r3
  80b26c:	dfc00117 	ldw	ra,4(sp)
  80b270:	dc000017 	ldw	r16,0(sp)
  80b274:	dec00204 	addi	sp,sp,8
  80b278:	f800283a 	ret
  80b27c:	8080030b 	ldhu	r2,12(r16)
  80b280:	10bbffcc 	andi	r2,r2,61439
  80b284:	8080030d 	sth	r2,12(r16)
  80b288:	1805883a 	mov	r2,r3
  80b28c:	dfc00117 	ldw	ra,4(sp)
  80b290:	dc000017 	ldw	r16,0(sp)
  80b294:	dec00204 	addi	sp,sp,8
  80b298:	f800283a 	ret

0080b29c <strcmp>:
  80b29c:	2144b03a 	or	r2,r4,r5
  80b2a0:	108000cc 	andi	r2,r2,3
  80b2a4:	10001d1e 	bne	r2,zero,80b31c <strcmp+0x80>
  80b2a8:	200f883a 	mov	r7,r4
  80b2ac:	28800017 	ldw	r2,0(r5)
  80b2b0:	21000017 	ldw	r4,0(r4)
  80b2b4:	280d883a 	mov	r6,r5
  80b2b8:	2080161e 	bne	r4,r2,80b314 <strcmp+0x78>
  80b2bc:	023fbff4 	movhi	r8,65279
  80b2c0:	423fbfc4 	addi	r8,r8,-257
  80b2c4:	2207883a 	add	r3,r4,r8
  80b2c8:	01602074 	movhi	r5,32897
  80b2cc:	29602004 	addi	r5,r5,-32640
  80b2d0:	1946703a 	and	r3,r3,r5
  80b2d4:	0104303a 	nor	r2,zero,r4
  80b2d8:	10c4703a 	and	r2,r2,r3
  80b2dc:	10001c1e 	bne	r2,zero,80b350 <strcmp+0xb4>
  80b2e0:	4013883a 	mov	r9,r8
  80b2e4:	2811883a 	mov	r8,r5
  80b2e8:	00000106 	br	80b2f0 <strcmp+0x54>
  80b2ec:	1800181e 	bne	r3,zero,80b350 <strcmp+0xb4>
  80b2f0:	39c00104 	addi	r7,r7,4
  80b2f4:	39000017 	ldw	r4,0(r7)
  80b2f8:	31800104 	addi	r6,r6,4
  80b2fc:	31400017 	ldw	r5,0(r6)
  80b300:	2245883a 	add	r2,r4,r9
  80b304:	1204703a 	and	r2,r2,r8
  80b308:	0106303a 	nor	r3,zero,r4
  80b30c:	1886703a 	and	r3,r3,r2
  80b310:	217ff626 	beq	r4,r5,80b2ec <strcmp+0x50>
  80b314:	3809883a 	mov	r4,r7
  80b318:	300b883a 	mov	r5,r6
  80b31c:	20c00007 	ldb	r3,0(r4)
  80b320:	1800051e 	bne	r3,zero,80b338 <strcmp+0x9c>
  80b324:	00000606 	br	80b340 <strcmp+0xa4>
  80b328:	21000044 	addi	r4,r4,1
  80b32c:	20c00007 	ldb	r3,0(r4)
  80b330:	29400044 	addi	r5,r5,1
  80b334:	18000226 	beq	r3,zero,80b340 <strcmp+0xa4>
  80b338:	28800007 	ldb	r2,0(r5)
  80b33c:	18bffa26 	beq	r3,r2,80b328 <strcmp+0x8c>
  80b340:	20c00003 	ldbu	r3,0(r4)
  80b344:	28800003 	ldbu	r2,0(r5)
  80b348:	1885c83a 	sub	r2,r3,r2
  80b34c:	f800283a 	ret
  80b350:	0005883a 	mov	r2,zero
  80b354:	f800283a 	ret

0080b358 <strlen>:
  80b358:	208000cc 	andi	r2,r4,3
  80b35c:	2011883a 	mov	r8,r4
  80b360:	1000161e 	bne	r2,zero,80b3bc <strlen+0x64>
  80b364:	20c00017 	ldw	r3,0(r4)
  80b368:	017fbff4 	movhi	r5,65279
  80b36c:	297fbfc4 	addi	r5,r5,-257
  80b370:	01e02074 	movhi	r7,32897
  80b374:	39e02004 	addi	r7,r7,-32640
  80b378:	1945883a 	add	r2,r3,r5
  80b37c:	11c4703a 	and	r2,r2,r7
  80b380:	00c6303a 	nor	r3,zero,r3
  80b384:	1886703a 	and	r3,r3,r2
  80b388:	18000c1e 	bne	r3,zero,80b3bc <strlen+0x64>
  80b38c:	280d883a 	mov	r6,r5
  80b390:	380b883a 	mov	r5,r7
  80b394:	21000104 	addi	r4,r4,4
  80b398:	20800017 	ldw	r2,0(r4)
  80b39c:	1187883a 	add	r3,r2,r6
  80b3a0:	1946703a 	and	r3,r3,r5
  80b3a4:	0084303a 	nor	r2,zero,r2
  80b3a8:	10c4703a 	and	r2,r2,r3
  80b3ac:	103ff926 	beq	r2,zero,80b394 <strlen+0x3c>
  80b3b0:	20800007 	ldb	r2,0(r4)
  80b3b4:	10000326 	beq	r2,zero,80b3c4 <strlen+0x6c>
  80b3b8:	21000044 	addi	r4,r4,1
  80b3bc:	20800007 	ldb	r2,0(r4)
  80b3c0:	103ffd1e 	bne	r2,zero,80b3b8 <strlen+0x60>
  80b3c4:	2205c83a 	sub	r2,r4,r8
  80b3c8:	f800283a 	ret

0080b3cc <_write_r>:
  80b3cc:	defffd04 	addi	sp,sp,-12
  80b3d0:	dc000015 	stw	r16,0(sp)
  80b3d4:	04002274 	movhi	r16,137
  80b3d8:	842c3504 	addi	r16,r16,-20268
  80b3dc:	dc400115 	stw	r17,4(sp)
  80b3e0:	80000015 	stw	zero,0(r16)
  80b3e4:	2023883a 	mov	r17,r4
  80b3e8:	2809883a 	mov	r4,r5
  80b3ec:	300b883a 	mov	r5,r6
  80b3f0:	380d883a 	mov	r6,r7
  80b3f4:	dfc00215 	stw	ra,8(sp)
  80b3f8:	080d2480 	call	80d248 <write>
  80b3fc:	1007883a 	mov	r3,r2
  80b400:	00bfffc4 	movi	r2,-1
  80b404:	18800626 	beq	r3,r2,80b420 <_write_r+0x54>
  80b408:	1805883a 	mov	r2,r3
  80b40c:	dfc00217 	ldw	ra,8(sp)
  80b410:	dc400117 	ldw	r17,4(sp)
  80b414:	dc000017 	ldw	r16,0(sp)
  80b418:	dec00304 	addi	sp,sp,12
  80b41c:	f800283a 	ret
  80b420:	80800017 	ldw	r2,0(r16)
  80b424:	103ff826 	beq	r2,zero,80b408 <_write_r+0x3c>
  80b428:	88800015 	stw	r2,0(r17)
  80b42c:	1805883a 	mov	r2,r3
  80b430:	dfc00217 	ldw	ra,8(sp)
  80b434:	dc400117 	ldw	r17,4(sp)
  80b438:	dc000017 	ldw	r16,0(sp)
  80b43c:	dec00304 	addi	sp,sp,12
  80b440:	f800283a 	ret

0080b444 <_calloc_r>:
  80b444:	298b383a 	mul	r5,r5,r6
  80b448:	defffe04 	addi	sp,sp,-8
  80b44c:	dc000015 	stw	r16,0(sp)
  80b450:	dfc00115 	stw	ra,4(sp)
  80b454:	080904c0 	call	80904c <_malloc_r>
  80b458:	1021883a 	mov	r16,r2
  80b45c:	01c00904 	movi	r7,36
  80b460:	10000d26 	beq	r2,zero,80b498 <_calloc_r+0x54>
  80b464:	10ffff17 	ldw	r3,-4(r2)
  80b468:	1009883a 	mov	r4,r2
  80b46c:	00bfff04 	movi	r2,-4
  80b470:	1886703a 	and	r3,r3,r2
  80b474:	1887883a 	add	r3,r3,r2
  80b478:	180d883a 	mov	r6,r3
  80b47c:	000b883a 	mov	r5,zero
  80b480:	38c01736 	bltu	r7,r3,80b4e0 <_calloc_r+0x9c>
  80b484:	008004c4 	movi	r2,19
  80b488:	10c00836 	bltu	r2,r3,80b4ac <_calloc_r+0x68>
  80b48c:	20000215 	stw	zero,8(r4)
  80b490:	20000015 	stw	zero,0(r4)
  80b494:	20000115 	stw	zero,4(r4)
  80b498:	8005883a 	mov	r2,r16
  80b49c:	dfc00117 	ldw	ra,4(sp)
  80b4a0:	dc000017 	ldw	r16,0(sp)
  80b4a4:	dec00204 	addi	sp,sp,8
  80b4a8:	f800283a 	ret
  80b4ac:	008006c4 	movi	r2,27
  80b4b0:	80000015 	stw	zero,0(r16)
  80b4b4:	80000115 	stw	zero,4(r16)
  80b4b8:	81000204 	addi	r4,r16,8
  80b4bc:	10fff32e 	bgeu	r2,r3,80b48c <_calloc_r+0x48>
  80b4c0:	80000215 	stw	zero,8(r16)
  80b4c4:	80000315 	stw	zero,12(r16)
  80b4c8:	81000404 	addi	r4,r16,16
  80b4cc:	19ffef1e 	bne	r3,r7,80b48c <_calloc_r+0x48>
  80b4d0:	81000604 	addi	r4,r16,24
  80b4d4:	80000415 	stw	zero,16(r16)
  80b4d8:	80000515 	stw	zero,20(r16)
  80b4dc:	003feb06 	br	80b48c <_calloc_r+0x48>
  80b4e0:	08099f00 	call	8099f0 <memset>
  80b4e4:	8005883a 	mov	r2,r16
  80b4e8:	dfc00117 	ldw	ra,4(sp)
  80b4ec:	dc000017 	ldw	r16,0(sp)
  80b4f0:	dec00204 	addi	sp,sp,8
  80b4f4:	f800283a 	ret

0080b4f8 <_close_r>:
  80b4f8:	defffd04 	addi	sp,sp,-12
  80b4fc:	dc000015 	stw	r16,0(sp)
  80b500:	04002274 	movhi	r16,137
  80b504:	842c3504 	addi	r16,r16,-20268
  80b508:	dc400115 	stw	r17,4(sp)
  80b50c:	80000015 	stw	zero,0(r16)
  80b510:	2023883a 	mov	r17,r4
  80b514:	2809883a 	mov	r4,r5
  80b518:	dfc00215 	stw	ra,8(sp)
  80b51c:	080c8e80 	call	80c8e8 <close>
  80b520:	1007883a 	mov	r3,r2
  80b524:	00bfffc4 	movi	r2,-1
  80b528:	18800626 	beq	r3,r2,80b544 <_close_r+0x4c>
  80b52c:	1805883a 	mov	r2,r3
  80b530:	dfc00217 	ldw	ra,8(sp)
  80b534:	dc400117 	ldw	r17,4(sp)
  80b538:	dc000017 	ldw	r16,0(sp)
  80b53c:	dec00304 	addi	sp,sp,12
  80b540:	f800283a 	ret
  80b544:	80800017 	ldw	r2,0(r16)
  80b548:	103ff826 	beq	r2,zero,80b52c <_close_r+0x34>
  80b54c:	88800015 	stw	r2,0(r17)
  80b550:	1805883a 	mov	r2,r3
  80b554:	dfc00217 	ldw	ra,8(sp)
  80b558:	dc400117 	ldw	r17,4(sp)
  80b55c:	dc000017 	ldw	r16,0(sp)
  80b560:	dec00304 	addi	sp,sp,12
  80b564:	f800283a 	ret

0080b568 <_fclose_r>:
  80b568:	defffc04 	addi	sp,sp,-16
  80b56c:	dc400115 	stw	r17,4(sp)
  80b570:	dc000015 	stw	r16,0(sp)
  80b574:	dfc00315 	stw	ra,12(sp)
  80b578:	dc800215 	stw	r18,8(sp)
  80b57c:	2821883a 	mov	r16,r5
  80b580:	2023883a 	mov	r17,r4
  80b584:	28002926 	beq	r5,zero,80b62c <_fclose_r+0xc4>
  80b588:	08081300 	call	808130 <__sfp_lock_acquire>
  80b58c:	88000226 	beq	r17,zero,80b598 <_fclose_r+0x30>
  80b590:	88800e17 	ldw	r2,56(r17)
  80b594:	10002d26 	beq	r2,zero,80b64c <_fclose_r+0xe4>
  80b598:	8080030f 	ldh	r2,12(r16)
  80b59c:	10002226 	beq	r2,zero,80b628 <_fclose_r+0xc0>
  80b5a0:	8809883a 	mov	r4,r17
  80b5a4:	800b883a 	mov	r5,r16
  80b5a8:	0807ea80 	call	807ea8 <_fflush_r>
  80b5ac:	1025883a 	mov	r18,r2
  80b5b0:	80800b17 	ldw	r2,44(r16)
  80b5b4:	10000426 	beq	r2,zero,80b5c8 <_fclose_r+0x60>
  80b5b8:	81400717 	ldw	r5,28(r16)
  80b5bc:	8809883a 	mov	r4,r17
  80b5c0:	103ee83a 	callr	r2
  80b5c4:	10002a16 	blt	r2,zero,80b670 <_fclose_r+0x108>
  80b5c8:	8080030b 	ldhu	r2,12(r16)
  80b5cc:	1080200c 	andi	r2,r2,128
  80b5d0:	1000231e 	bne	r2,zero,80b660 <_fclose_r+0xf8>
  80b5d4:	81400c17 	ldw	r5,48(r16)
  80b5d8:	28000526 	beq	r5,zero,80b5f0 <_fclose_r+0x88>
  80b5dc:	80801004 	addi	r2,r16,64
  80b5e0:	28800226 	beq	r5,r2,80b5ec <_fclose_r+0x84>
  80b5e4:	8809883a 	mov	r4,r17
  80b5e8:	08084c40 	call	8084c4 <_free_r>
  80b5ec:	80000c15 	stw	zero,48(r16)
  80b5f0:	81401117 	ldw	r5,68(r16)
  80b5f4:	28000326 	beq	r5,zero,80b604 <_fclose_r+0x9c>
  80b5f8:	8809883a 	mov	r4,r17
  80b5fc:	08084c40 	call	8084c4 <_free_r>
  80b600:	80001115 	stw	zero,68(r16)
  80b604:	8000030d 	sth	zero,12(r16)
  80b608:	08081340 	call	808134 <__sfp_lock_release>
  80b60c:	9005883a 	mov	r2,r18
  80b610:	dfc00317 	ldw	ra,12(sp)
  80b614:	dc800217 	ldw	r18,8(sp)
  80b618:	dc400117 	ldw	r17,4(sp)
  80b61c:	dc000017 	ldw	r16,0(sp)
  80b620:	dec00404 	addi	sp,sp,16
  80b624:	f800283a 	ret
  80b628:	08081340 	call	808134 <__sfp_lock_release>
  80b62c:	0025883a 	mov	r18,zero
  80b630:	9005883a 	mov	r2,r18
  80b634:	dfc00317 	ldw	ra,12(sp)
  80b638:	dc800217 	ldw	r18,8(sp)
  80b63c:	dc400117 	ldw	r17,4(sp)
  80b640:	dc000017 	ldw	r16,0(sp)
  80b644:	dec00404 	addi	sp,sp,16
  80b648:	f800283a 	ret
  80b64c:	8809883a 	mov	r4,r17
  80b650:	08081400 	call	808140 <__sinit>
  80b654:	8080030f 	ldh	r2,12(r16)
  80b658:	103fd11e 	bne	r2,zero,80b5a0 <_fclose_r+0x38>
  80b65c:	003ff206 	br	80b628 <_fclose_r+0xc0>
  80b660:	81400417 	ldw	r5,16(r16)
  80b664:	8809883a 	mov	r4,r17
  80b668:	08084c40 	call	8084c4 <_free_r>
  80b66c:	003fd906 	br	80b5d4 <_fclose_r+0x6c>
  80b670:	04bfffc4 	movi	r18,-1
  80b674:	003fd406 	br	80b5c8 <_fclose_r+0x60>

0080b678 <fclose>:
  80b678:	00802274 	movhi	r2,137
  80b67c:	10a4f804 	addi	r2,r2,-27680
  80b680:	200b883a 	mov	r5,r4
  80b684:	11000017 	ldw	r4,0(r2)
  80b688:	080b5681 	jmpi	80b568 <_fclose_r>

0080b68c <_fstat_r>:
  80b68c:	defffd04 	addi	sp,sp,-12
  80b690:	dc000015 	stw	r16,0(sp)
  80b694:	04002274 	movhi	r16,137
  80b698:	842c3504 	addi	r16,r16,-20268
  80b69c:	dc400115 	stw	r17,4(sp)
  80b6a0:	80000015 	stw	zero,0(r16)
  80b6a4:	2023883a 	mov	r17,r4
  80b6a8:	2809883a 	mov	r4,r5
  80b6ac:	300b883a 	mov	r5,r6
  80b6b0:	dfc00215 	stw	ra,8(sp)
  80b6b4:	080ca700 	call	80ca70 <fstat>
  80b6b8:	1007883a 	mov	r3,r2
  80b6bc:	00bfffc4 	movi	r2,-1
  80b6c0:	18800626 	beq	r3,r2,80b6dc <_fstat_r+0x50>
  80b6c4:	1805883a 	mov	r2,r3
  80b6c8:	dfc00217 	ldw	ra,8(sp)
  80b6cc:	dc400117 	ldw	r17,4(sp)
  80b6d0:	dc000017 	ldw	r16,0(sp)
  80b6d4:	dec00304 	addi	sp,sp,12
  80b6d8:	f800283a 	ret
  80b6dc:	80800017 	ldw	r2,0(r16)
  80b6e0:	103ff826 	beq	r2,zero,80b6c4 <_fstat_r+0x38>
  80b6e4:	88800015 	stw	r2,0(r17)
  80b6e8:	1805883a 	mov	r2,r3
  80b6ec:	dfc00217 	ldw	ra,8(sp)
  80b6f0:	dc400117 	ldw	r17,4(sp)
  80b6f4:	dc000017 	ldw	r16,0(sp)
  80b6f8:	dec00304 	addi	sp,sp,12
  80b6fc:	f800283a 	ret

0080b700 <_isatty_r>:
  80b700:	defffd04 	addi	sp,sp,-12
  80b704:	dc000015 	stw	r16,0(sp)
  80b708:	04002274 	movhi	r16,137
  80b70c:	842c3504 	addi	r16,r16,-20268
  80b710:	dc400115 	stw	r17,4(sp)
  80b714:	80000015 	stw	zero,0(r16)
  80b718:	2023883a 	mov	r17,r4
  80b71c:	2809883a 	mov	r4,r5
  80b720:	dfc00215 	stw	ra,8(sp)
  80b724:	080cba40 	call	80cba4 <isatty>
  80b728:	1007883a 	mov	r3,r2
  80b72c:	00bfffc4 	movi	r2,-1
  80b730:	18800626 	beq	r3,r2,80b74c <_isatty_r+0x4c>
  80b734:	1805883a 	mov	r2,r3
  80b738:	dfc00217 	ldw	ra,8(sp)
  80b73c:	dc400117 	ldw	r17,4(sp)
  80b740:	dc000017 	ldw	r16,0(sp)
  80b744:	dec00304 	addi	sp,sp,12
  80b748:	f800283a 	ret
  80b74c:	80800017 	ldw	r2,0(r16)
  80b750:	103ff826 	beq	r2,zero,80b734 <_isatty_r+0x34>
  80b754:	88800015 	stw	r2,0(r17)
  80b758:	1805883a 	mov	r2,r3
  80b75c:	dfc00217 	ldw	ra,8(sp)
  80b760:	dc400117 	ldw	r17,4(sp)
  80b764:	dc000017 	ldw	r16,0(sp)
  80b768:	dec00304 	addi	sp,sp,12
  80b76c:	f800283a 	ret

0080b770 <_lseek_r>:
  80b770:	defffd04 	addi	sp,sp,-12
  80b774:	dc000015 	stw	r16,0(sp)
  80b778:	04002274 	movhi	r16,137
  80b77c:	842c3504 	addi	r16,r16,-20268
  80b780:	dc400115 	stw	r17,4(sp)
  80b784:	80000015 	stw	zero,0(r16)
  80b788:	2023883a 	mov	r17,r4
  80b78c:	2809883a 	mov	r4,r5
  80b790:	300b883a 	mov	r5,r6
  80b794:	380d883a 	mov	r6,r7
  80b798:	dfc00215 	stw	ra,8(sp)
  80b79c:	080cdb00 	call	80cdb0 <lseek>
  80b7a0:	1007883a 	mov	r3,r2
  80b7a4:	00bfffc4 	movi	r2,-1
  80b7a8:	18800626 	beq	r3,r2,80b7c4 <_lseek_r+0x54>
  80b7ac:	1805883a 	mov	r2,r3
  80b7b0:	dfc00217 	ldw	ra,8(sp)
  80b7b4:	dc400117 	ldw	r17,4(sp)
  80b7b8:	dc000017 	ldw	r16,0(sp)
  80b7bc:	dec00304 	addi	sp,sp,12
  80b7c0:	f800283a 	ret
  80b7c4:	80800017 	ldw	r2,0(r16)
  80b7c8:	103ff826 	beq	r2,zero,80b7ac <_lseek_r+0x3c>
  80b7cc:	88800015 	stw	r2,0(r17)
  80b7d0:	1805883a 	mov	r2,r3
  80b7d4:	dfc00217 	ldw	ra,8(sp)
  80b7d8:	dc400117 	ldw	r17,4(sp)
  80b7dc:	dc000017 	ldw	r16,0(sp)
  80b7e0:	dec00304 	addi	sp,sp,12
  80b7e4:	f800283a 	ret

0080b7e8 <_read_r>:
  80b7e8:	defffd04 	addi	sp,sp,-12
  80b7ec:	dc000015 	stw	r16,0(sp)
  80b7f0:	04002274 	movhi	r16,137
  80b7f4:	842c3504 	addi	r16,r16,-20268
  80b7f8:	dc400115 	stw	r17,4(sp)
  80b7fc:	80000015 	stw	zero,0(r16)
  80b800:	2023883a 	mov	r17,r4
  80b804:	2809883a 	mov	r4,r5
  80b808:	300b883a 	mov	r5,r6
  80b80c:	380d883a 	mov	r6,r7
  80b810:	dfc00215 	stw	ra,8(sp)
  80b814:	080cfac0 	call	80cfac <read>
  80b818:	1007883a 	mov	r3,r2
  80b81c:	00bfffc4 	movi	r2,-1
  80b820:	18800626 	beq	r3,r2,80b83c <_read_r+0x54>
  80b824:	1805883a 	mov	r2,r3
  80b828:	dfc00217 	ldw	ra,8(sp)
  80b82c:	dc400117 	ldw	r17,4(sp)
  80b830:	dc000017 	ldw	r16,0(sp)
  80b834:	dec00304 	addi	sp,sp,12
  80b838:	f800283a 	ret
  80b83c:	80800017 	ldw	r2,0(r16)
  80b840:	103ff826 	beq	r2,zero,80b824 <_read_r+0x3c>
  80b844:	88800015 	stw	r2,0(r17)
  80b848:	1805883a 	mov	r2,r3
  80b84c:	dfc00217 	ldw	ra,8(sp)
  80b850:	dc400117 	ldw	r17,4(sp)
  80b854:	dc000017 	ldw	r16,0(sp)
  80b858:	dec00304 	addi	sp,sp,12
  80b85c:	f800283a 	ret

0080b860 <__udivdi3>:
  80b860:	defff004 	addi	sp,sp,-64
  80b864:	2005883a 	mov	r2,r4
  80b868:	3011883a 	mov	r8,r6
  80b86c:	df000e15 	stw	fp,56(sp)
  80b870:	dd000a15 	stw	r20,40(sp)
  80b874:	dc000615 	stw	r16,24(sp)
  80b878:	dfc00f15 	stw	ra,60(sp)
  80b87c:	ddc00d15 	stw	r23,52(sp)
  80b880:	dd800c15 	stw	r22,48(sp)
  80b884:	dd400b15 	stw	r21,44(sp)
  80b888:	dcc00915 	stw	r19,36(sp)
  80b88c:	dc800815 	stw	r18,32(sp)
  80b890:	dc400715 	stw	r17,28(sp)
  80b894:	4021883a 	mov	r16,r8
  80b898:	1039883a 	mov	fp,r2
  80b89c:	2829883a 	mov	r20,r5
  80b8a0:	38003b1e 	bne	r7,zero,80b990 <__udivdi3+0x130>
  80b8a4:	2a005c36 	bltu	r5,r8,80ba18 <__udivdi3+0x1b8>
  80b8a8:	4000a626 	beq	r8,zero,80bb44 <__udivdi3+0x2e4>
  80b8ac:	00bfffd4 	movui	r2,65535
  80b8b0:	14009e36 	bltu	r2,r16,80bb2c <__udivdi3+0x2cc>
  80b8b4:	00803fc4 	movi	r2,255
  80b8b8:	14013d36 	bltu	r2,r16,80bdb0 <__udivdi3+0x550>
  80b8bc:	000b883a 	mov	r5,zero
  80b8c0:	0005883a 	mov	r2,zero
  80b8c4:	8084d83a 	srl	r2,r16,r2
  80b8c8:	01002234 	movhi	r4,136
  80b8cc:	211d1604 	addi	r4,r4,29784
  80b8d0:	01800804 	movi	r6,32
  80b8d4:	1105883a 	add	r2,r2,r4
  80b8d8:	10c00003 	ldbu	r3,0(r2)
  80b8dc:	28c7883a 	add	r3,r5,r3
  80b8e0:	30edc83a 	sub	r22,r6,r3
  80b8e4:	b000ee1e 	bne	r22,zero,80bca0 <__udivdi3+0x440>
  80b8e8:	802ad43a 	srli	r21,r16,16
  80b8ec:	00800044 	movi	r2,1
  80b8f0:	a423c83a 	sub	r17,r20,r16
  80b8f4:	85ffffcc 	andi	r23,r16,65535
  80b8f8:	d8800315 	stw	r2,12(sp)
  80b8fc:	8809883a 	mov	r4,r17
  80b900:	a80b883a 	mov	r5,r21
  80b904:	0803fc40 	call	803fc4 <__udivsi3>
  80b908:	8809883a 	mov	r4,r17
  80b90c:	a80b883a 	mov	r5,r21
  80b910:	102d883a 	mov	r22,r2
  80b914:	0803fcc0 	call	803fcc <__umodsi3>
  80b918:	1004943a 	slli	r2,r2,16
  80b91c:	e006d43a 	srli	r3,fp,16
  80b920:	bda3383a 	mul	r17,r23,r22
  80b924:	10c4b03a 	or	r2,r2,r3
  80b928:	1440042e 	bgeu	r2,r17,80b93c <__udivdi3+0xdc>
  80b92c:	1405883a 	add	r2,r2,r16
  80b930:	b5bfffc4 	addi	r22,r22,-1
  80b934:	14000136 	bltu	r2,r16,80b93c <__udivdi3+0xdc>
  80b938:	14413d36 	bltu	r2,r17,80be30 <__udivdi3+0x5d0>
  80b93c:	1463c83a 	sub	r17,r2,r17
  80b940:	8809883a 	mov	r4,r17
  80b944:	a80b883a 	mov	r5,r21
  80b948:	0803fc40 	call	803fc4 <__udivsi3>
  80b94c:	8809883a 	mov	r4,r17
  80b950:	a80b883a 	mov	r5,r21
  80b954:	1029883a 	mov	r20,r2
  80b958:	0803fcc0 	call	803fcc <__umodsi3>
  80b95c:	1004943a 	slli	r2,r2,16
  80b960:	bd09383a 	mul	r4,r23,r20
  80b964:	e0ffffcc 	andi	r3,fp,65535
  80b968:	10c4b03a 	or	r2,r2,r3
  80b96c:	1100042e 	bgeu	r2,r4,80b980 <__udivdi3+0x120>
  80b970:	8085883a 	add	r2,r16,r2
  80b974:	a53fffc4 	addi	r20,r20,-1
  80b978:	14000136 	bltu	r2,r16,80b980 <__udivdi3+0x120>
  80b97c:	11012036 	bltu	r2,r4,80be00 <__udivdi3+0x5a0>
  80b980:	b004943a 	slli	r2,r22,16
  80b984:	d9000317 	ldw	r4,12(sp)
  80b988:	a084b03a 	or	r2,r20,r2
  80b98c:	00001506 	br	80b9e4 <__udivdi3+0x184>
  80b990:	380d883a 	mov	r6,r7
  80b994:	29c06236 	bltu	r5,r7,80bb20 <__udivdi3+0x2c0>
  80b998:	00bfffd4 	movui	r2,65535
  80b99c:	11c05a36 	bltu	r2,r7,80bb08 <__udivdi3+0x2a8>
  80b9a0:	00803fc4 	movi	r2,255
  80b9a4:	11c0fc36 	bltu	r2,r7,80bd98 <__udivdi3+0x538>
  80b9a8:	000b883a 	mov	r5,zero
  80b9ac:	0005883a 	mov	r2,zero
  80b9b0:	3084d83a 	srl	r2,r6,r2
  80b9b4:	01002234 	movhi	r4,136
  80b9b8:	211d1604 	addi	r4,r4,29784
  80b9bc:	01c00804 	movi	r7,32
  80b9c0:	1105883a 	add	r2,r2,r4
  80b9c4:	10c00003 	ldbu	r3,0(r2)
  80b9c8:	28c7883a 	add	r3,r5,r3
  80b9cc:	38efc83a 	sub	r23,r7,r3
  80b9d0:	b800691e 	bne	r23,zero,80bb78 <__udivdi3+0x318>
  80b9d4:	35000136 	bltu	r6,r20,80b9dc <__udivdi3+0x17c>
  80b9d8:	e4005136 	bltu	fp,r16,80bb20 <__udivdi3+0x2c0>
  80b9dc:	00800044 	movi	r2,1
  80b9e0:	0009883a 	mov	r4,zero
  80b9e4:	2007883a 	mov	r3,r4
  80b9e8:	dfc00f17 	ldw	ra,60(sp)
  80b9ec:	df000e17 	ldw	fp,56(sp)
  80b9f0:	ddc00d17 	ldw	r23,52(sp)
  80b9f4:	dd800c17 	ldw	r22,48(sp)
  80b9f8:	dd400b17 	ldw	r21,44(sp)
  80b9fc:	dd000a17 	ldw	r20,40(sp)
  80ba00:	dcc00917 	ldw	r19,36(sp)
  80ba04:	dc800817 	ldw	r18,32(sp)
  80ba08:	dc400717 	ldw	r17,28(sp)
  80ba0c:	dc000617 	ldw	r16,24(sp)
  80ba10:	dec01004 	addi	sp,sp,64
  80ba14:	f800283a 	ret
  80ba18:	00bfffd4 	movui	r2,65535
  80ba1c:	12005036 	bltu	r2,r8,80bb60 <__udivdi3+0x300>
  80ba20:	00803fc4 	movi	r2,255
  80ba24:	1200e836 	bltu	r2,r8,80bdc8 <__udivdi3+0x568>
  80ba28:	000b883a 	mov	r5,zero
  80ba2c:	0005883a 	mov	r2,zero
  80ba30:	8084d83a 	srl	r2,r16,r2
  80ba34:	01002234 	movhi	r4,136
  80ba38:	211d1604 	addi	r4,r4,29784
  80ba3c:	01800804 	movi	r6,32
  80ba40:	1105883a 	add	r2,r2,r4
  80ba44:	10c00003 	ldbu	r3,0(r2)
  80ba48:	28c7883a 	add	r3,r5,r3
  80ba4c:	30cbc83a 	sub	r5,r6,r3
  80ba50:	28000626 	beq	r5,zero,80ba6c <__udivdi3+0x20c>
  80ba54:	3145c83a 	sub	r2,r6,r5
  80ba58:	e084d83a 	srl	r2,fp,r2
  80ba5c:	a146983a 	sll	r3,r20,r5
  80ba60:	e178983a 	sll	fp,fp,r5
  80ba64:	8160983a 	sll	r16,r16,r5
  80ba68:	18a8b03a 	or	r20,r3,r2
  80ba6c:	802ad43a 	srli	r21,r16,16
  80ba70:	a009883a 	mov	r4,r20
  80ba74:	85ffffcc 	andi	r23,r16,65535
  80ba78:	a80b883a 	mov	r5,r21
  80ba7c:	0803fc40 	call	803fc4 <__udivsi3>
  80ba80:	a009883a 	mov	r4,r20
  80ba84:	a80b883a 	mov	r5,r21
  80ba88:	102d883a 	mov	r22,r2
  80ba8c:	0803fcc0 	call	803fcc <__umodsi3>
  80ba90:	1004943a 	slli	r2,r2,16
  80ba94:	e006d43a 	srli	r3,fp,16
  80ba98:	bda3383a 	mul	r17,r23,r22
  80ba9c:	10c4b03a 	or	r2,r2,r3
  80baa0:	1440042e 	bgeu	r2,r17,80bab4 <__udivdi3+0x254>
  80baa4:	1405883a 	add	r2,r2,r16
  80baa8:	b5bfffc4 	addi	r22,r22,-1
  80baac:	14000136 	bltu	r2,r16,80bab4 <__udivdi3+0x254>
  80bab0:	1440d536 	bltu	r2,r17,80be08 <__udivdi3+0x5a8>
  80bab4:	1463c83a 	sub	r17,r2,r17
  80bab8:	8809883a 	mov	r4,r17
  80babc:	a80b883a 	mov	r5,r21
  80bac0:	0803fc40 	call	803fc4 <__udivsi3>
  80bac4:	8809883a 	mov	r4,r17
  80bac8:	a80b883a 	mov	r5,r21
  80bacc:	1029883a 	mov	r20,r2
  80bad0:	0803fcc0 	call	803fcc <__umodsi3>
  80bad4:	1004943a 	slli	r2,r2,16
  80bad8:	bd09383a 	mul	r4,r23,r20
  80badc:	e0ffffcc 	andi	r3,fp,65535
  80bae0:	10c4b03a 	or	r2,r2,r3
  80bae4:	1100042e 	bgeu	r2,r4,80baf8 <__udivdi3+0x298>
  80bae8:	8085883a 	add	r2,r16,r2
  80baec:	a53fffc4 	addi	r20,r20,-1
  80baf0:	14000136 	bltu	r2,r16,80baf8 <__udivdi3+0x298>
  80baf4:	1100c736 	bltu	r2,r4,80be14 <__udivdi3+0x5b4>
  80baf8:	b004943a 	slli	r2,r22,16
  80bafc:	0009883a 	mov	r4,zero
  80bb00:	a084b03a 	or	r2,r20,r2
  80bb04:	003fb706 	br	80b9e4 <__udivdi3+0x184>
  80bb08:	00804034 	movhi	r2,256
  80bb0c:	10bfffc4 	addi	r2,r2,-1
  80bb10:	11c0a436 	bltu	r2,r7,80bda4 <__udivdi3+0x544>
  80bb14:	01400404 	movi	r5,16
  80bb18:	2805883a 	mov	r2,r5
  80bb1c:	003fa406 	br	80b9b0 <__udivdi3+0x150>
  80bb20:	0005883a 	mov	r2,zero
  80bb24:	0009883a 	mov	r4,zero
  80bb28:	003fae06 	br	80b9e4 <__udivdi3+0x184>
  80bb2c:	00804034 	movhi	r2,256
  80bb30:	10bfffc4 	addi	r2,r2,-1
  80bb34:	1400a136 	bltu	r2,r16,80bdbc <__udivdi3+0x55c>
  80bb38:	01400404 	movi	r5,16
  80bb3c:	2805883a 	mov	r2,r5
  80bb40:	003f6006 	br	80b8c4 <__udivdi3+0x64>
  80bb44:	01000044 	movi	r4,1
  80bb48:	000b883a 	mov	r5,zero
  80bb4c:	0803fc40 	call	803fc4 <__udivsi3>
  80bb50:	1021883a 	mov	r16,r2
  80bb54:	00bfffd4 	movui	r2,65535
  80bb58:	143ff436 	bltu	r2,r16,80bb2c <__udivdi3+0x2cc>
  80bb5c:	003f5506 	br	80b8b4 <__udivdi3+0x54>
  80bb60:	00804034 	movhi	r2,256
  80bb64:	10bfffc4 	addi	r2,r2,-1
  80bb68:	12009a36 	bltu	r2,r8,80bdd4 <__udivdi3+0x574>
  80bb6c:	01400404 	movi	r5,16
  80bb70:	2805883a 	mov	r2,r5
  80bb74:	003fae06 	br	80ba30 <__udivdi3+0x1d0>
  80bb78:	3dc5c83a 	sub	r2,r7,r23
  80bb7c:	35c8983a 	sll	r4,r6,r23
  80bb80:	8086d83a 	srl	r3,r16,r2
  80bb84:	a0a2d83a 	srl	r17,r20,r2
  80bb88:	e084d83a 	srl	r2,fp,r2
  80bb8c:	20eab03a 	or	r21,r4,r3
  80bb90:	a82cd43a 	srli	r22,r21,16
  80bb94:	a5c6983a 	sll	r3,r20,r23
  80bb98:	8809883a 	mov	r4,r17
  80bb9c:	b00b883a 	mov	r5,r22
  80bba0:	1886b03a 	or	r3,r3,r2
  80bba4:	d8c00215 	stw	r3,8(sp)
  80bba8:	0803fc40 	call	803fc4 <__udivsi3>
  80bbac:	8809883a 	mov	r4,r17
  80bbb0:	b00b883a 	mov	r5,r22
  80bbb4:	1029883a 	mov	r20,r2
  80bbb8:	0803fcc0 	call	803fcc <__umodsi3>
  80bbbc:	a8ffffcc 	andi	r3,r21,65535
  80bbc0:	d8c00515 	stw	r3,20(sp)
  80bbc4:	d9000217 	ldw	r4,8(sp)
  80bbc8:	d9400517 	ldw	r5,20(sp)
  80bbcc:	1004943a 	slli	r2,r2,16
  80bbd0:	2006d43a 	srli	r3,r4,16
  80bbd4:	85e0983a 	sll	r16,r16,r23
  80bbd8:	2d23383a 	mul	r17,r5,r20
  80bbdc:	10c4b03a 	or	r2,r2,r3
  80bbe0:	dc000015 	stw	r16,0(sp)
  80bbe4:	1440032e 	bgeu	r2,r17,80bbf4 <__udivdi3+0x394>
  80bbe8:	1545883a 	add	r2,r2,r21
  80bbec:	a53fffc4 	addi	r20,r20,-1
  80bbf0:	15407f2e 	bgeu	r2,r21,80bdf0 <__udivdi3+0x590>
  80bbf4:	1463c83a 	sub	r17,r2,r17
  80bbf8:	8809883a 	mov	r4,r17
  80bbfc:	b00b883a 	mov	r5,r22
  80bc00:	0803fc40 	call	803fc4 <__udivsi3>
  80bc04:	8809883a 	mov	r4,r17
  80bc08:	b00b883a 	mov	r5,r22
  80bc0c:	1021883a 	mov	r16,r2
  80bc10:	0803fcc0 	call	803fcc <__umodsi3>
  80bc14:	d8c00517 	ldw	r3,20(sp)
  80bc18:	d9000217 	ldw	r4,8(sp)
  80bc1c:	1004943a 	slli	r2,r2,16
  80bc20:	1c0f383a 	mul	r7,r3,r16
  80bc24:	20ffffcc 	andi	r3,r4,65535
  80bc28:	10e2b03a 	or	r17,r2,r3
  80bc2c:	89c0032e 	bgeu	r17,r7,80bc3c <__udivdi3+0x3dc>
  80bc30:	8d63883a 	add	r17,r17,r21
  80bc34:	843fffc4 	addi	r16,r16,-1
  80bc38:	8d40692e 	bgeu	r17,r21,80bde0 <__udivdi3+0x580>
  80bc3c:	a008943a 	slli	r4,r20,16
  80bc40:	d9400017 	ldw	r5,0(sp)
  80bc44:	89e3c83a 	sub	r17,r17,r7
  80bc48:	8110b03a 	or	r8,r16,r4
  80bc4c:	280cd43a 	srli	r6,r5,16
  80bc50:	28ffffcc 	andi	r3,r5,65535
  80bc54:	40bfffcc 	andi	r2,r8,65535
  80bc58:	400ad43a 	srli	r5,r8,16
  80bc5c:	10d3383a 	mul	r9,r2,r3
  80bc60:	1185383a 	mul	r2,r2,r6
  80bc64:	28c7383a 	mul	r3,r5,r3
  80bc68:	4808d43a 	srli	r4,r9,16
  80bc6c:	298b383a 	mul	r5,r5,r6
  80bc70:	10c5883a 	add	r2,r2,r3
  80bc74:	2089883a 	add	r4,r4,r2
  80bc78:	20c0022e 	bgeu	r4,r3,80bc84 <__udivdi3+0x424>
  80bc7c:	00800074 	movhi	r2,1
  80bc80:	288b883a 	add	r5,r5,r2
  80bc84:	2004d43a 	srli	r2,r4,16
  80bc88:	288b883a 	add	r5,r5,r2
  80bc8c:	89403f36 	bltu	r17,r5,80bd8c <__udivdi3+0x52c>
  80bc90:	89403926 	beq	r17,r5,80bd78 <__udivdi3+0x518>
  80bc94:	4005883a 	mov	r2,r8
  80bc98:	0009883a 	mov	r4,zero
  80bc9c:	003f5106 	br	80b9e4 <__udivdi3+0x184>
  80bca0:	85a0983a 	sll	r16,r16,r22
  80bca4:	3585c83a 	sub	r2,r6,r22
  80bca8:	a0a2d83a 	srl	r17,r20,r2
  80bcac:	802ad43a 	srli	r21,r16,16
  80bcb0:	e084d83a 	srl	r2,fp,r2
  80bcb4:	a586983a 	sll	r3,r20,r22
  80bcb8:	8809883a 	mov	r4,r17
  80bcbc:	a80b883a 	mov	r5,r21
  80bcc0:	1886b03a 	or	r3,r3,r2
  80bcc4:	d8c00115 	stw	r3,4(sp)
  80bcc8:	0803fc40 	call	803fc4 <__udivsi3>
  80bccc:	8809883a 	mov	r4,r17
  80bcd0:	a80b883a 	mov	r5,r21
  80bcd4:	d8800415 	stw	r2,16(sp)
  80bcd8:	0803fcc0 	call	803fcc <__umodsi3>
  80bcdc:	d9000117 	ldw	r4,4(sp)
  80bce0:	d9400417 	ldw	r5,16(sp)
  80bce4:	1004943a 	slli	r2,r2,16
  80bce8:	85ffffcc 	andi	r23,r16,65535
  80bcec:	2006d43a 	srli	r3,r4,16
  80bcf0:	b963383a 	mul	r17,r23,r5
  80bcf4:	10c4b03a 	or	r2,r2,r3
  80bcf8:	1440042e 	bgeu	r2,r17,80bd0c <__udivdi3+0x4ac>
  80bcfc:	297fffc4 	addi	r5,r5,-1
  80bd00:	1405883a 	add	r2,r2,r16
  80bd04:	d9400415 	stw	r5,16(sp)
  80bd08:	1400442e 	bgeu	r2,r16,80be1c <__udivdi3+0x5bc>
  80bd0c:	1463c83a 	sub	r17,r2,r17
  80bd10:	8809883a 	mov	r4,r17
  80bd14:	a80b883a 	mov	r5,r21
  80bd18:	0803fc40 	call	803fc4 <__udivsi3>
  80bd1c:	8809883a 	mov	r4,r17
  80bd20:	a80b883a 	mov	r5,r21
  80bd24:	1029883a 	mov	r20,r2
  80bd28:	0803fcc0 	call	803fcc <__umodsi3>
  80bd2c:	d9400117 	ldw	r5,4(sp)
  80bd30:	1004943a 	slli	r2,r2,16
  80bd34:	bd09383a 	mul	r4,r23,r20
  80bd38:	28ffffcc 	andi	r3,r5,65535
  80bd3c:	10c6b03a 	or	r3,r2,r3
  80bd40:	1900062e 	bgeu	r3,r4,80bd5c <__udivdi3+0x4fc>
  80bd44:	1c07883a 	add	r3,r3,r16
  80bd48:	a53fffc4 	addi	r20,r20,-1
  80bd4c:	1c000336 	bltu	r3,r16,80bd5c <__udivdi3+0x4fc>
  80bd50:	1900022e 	bgeu	r3,r4,80bd5c <__udivdi3+0x4fc>
  80bd54:	a53fffc4 	addi	r20,r20,-1
  80bd58:	1c07883a 	add	r3,r3,r16
  80bd5c:	d9400417 	ldw	r5,16(sp)
  80bd60:	e5b8983a 	sll	fp,fp,r22
  80bd64:	1923c83a 	sub	r17,r3,r4
  80bd68:	2804943a 	slli	r2,r5,16
  80bd6c:	a0a8b03a 	or	r20,r20,r2
  80bd70:	dd000315 	stw	r20,12(sp)
  80bd74:	003ee106 	br	80b8fc <__udivdi3+0x9c>
  80bd78:	2004943a 	slli	r2,r4,16
  80bd7c:	e5c8983a 	sll	r4,fp,r23
  80bd80:	48ffffcc 	andi	r3,r9,65535
  80bd84:	10c5883a 	add	r2,r2,r3
  80bd88:	20bfc22e 	bgeu	r4,r2,80bc94 <__udivdi3+0x434>
  80bd8c:	40bfffc4 	addi	r2,r8,-1
  80bd90:	0009883a 	mov	r4,zero
  80bd94:	003f1306 	br	80b9e4 <__udivdi3+0x184>
  80bd98:	01400204 	movi	r5,8
  80bd9c:	2805883a 	mov	r2,r5
  80bda0:	003f0306 	br	80b9b0 <__udivdi3+0x150>
  80bda4:	01400604 	movi	r5,24
  80bda8:	2805883a 	mov	r2,r5
  80bdac:	003f0006 	br	80b9b0 <__udivdi3+0x150>
  80bdb0:	01400204 	movi	r5,8
  80bdb4:	2805883a 	mov	r2,r5
  80bdb8:	003ec206 	br	80b8c4 <__udivdi3+0x64>
  80bdbc:	01400604 	movi	r5,24
  80bdc0:	2805883a 	mov	r2,r5
  80bdc4:	003ebf06 	br	80b8c4 <__udivdi3+0x64>
  80bdc8:	01400204 	movi	r5,8
  80bdcc:	2805883a 	mov	r2,r5
  80bdd0:	003f1706 	br	80ba30 <__udivdi3+0x1d0>
  80bdd4:	01400604 	movi	r5,24
  80bdd8:	2805883a 	mov	r2,r5
  80bddc:	003f1406 	br	80ba30 <__udivdi3+0x1d0>
  80bde0:	89ff962e 	bgeu	r17,r7,80bc3c <__udivdi3+0x3dc>
  80bde4:	8d63883a 	add	r17,r17,r21
  80bde8:	843fffc4 	addi	r16,r16,-1
  80bdec:	003f9306 	br	80bc3c <__udivdi3+0x3dc>
  80bdf0:	147f802e 	bgeu	r2,r17,80bbf4 <__udivdi3+0x394>
  80bdf4:	a53fffc4 	addi	r20,r20,-1
  80bdf8:	1545883a 	add	r2,r2,r21
  80bdfc:	003f7d06 	br	80bbf4 <__udivdi3+0x394>
  80be00:	a53fffc4 	addi	r20,r20,-1
  80be04:	003ede06 	br	80b980 <__udivdi3+0x120>
  80be08:	b5bfffc4 	addi	r22,r22,-1
  80be0c:	1405883a 	add	r2,r2,r16
  80be10:	003f2806 	br	80bab4 <__udivdi3+0x254>
  80be14:	a53fffc4 	addi	r20,r20,-1
  80be18:	003f3706 	br	80baf8 <__udivdi3+0x298>
  80be1c:	147fbb2e 	bgeu	r2,r17,80bd0c <__udivdi3+0x4ac>
  80be20:	297fffc4 	addi	r5,r5,-1
  80be24:	1405883a 	add	r2,r2,r16
  80be28:	d9400415 	stw	r5,16(sp)
  80be2c:	003fb706 	br	80bd0c <__udivdi3+0x4ac>
  80be30:	b5bfffc4 	addi	r22,r22,-1
  80be34:	1405883a 	add	r2,r2,r16
  80be38:	003ec006 	br	80b93c <__udivdi3+0xdc>

0080be3c <__umoddi3>:
  80be3c:	defff104 	addi	sp,sp,-60
  80be40:	dd800b15 	stw	r22,44(sp)
  80be44:	dd000915 	stw	r20,36(sp)
  80be48:	dc000515 	stw	r16,20(sp)
  80be4c:	dfc00e15 	stw	ra,56(sp)
  80be50:	df000d15 	stw	fp,52(sp)
  80be54:	ddc00c15 	stw	r23,48(sp)
  80be58:	dd400a15 	stw	r21,40(sp)
  80be5c:	dcc00815 	stw	r19,32(sp)
  80be60:	dc800715 	stw	r18,28(sp)
  80be64:	dc400615 	stw	r17,24(sp)
  80be68:	3021883a 	mov	r16,r6
  80be6c:	202d883a 	mov	r22,r4
  80be70:	2829883a 	mov	r20,r5
  80be74:	38002b1e 	bne	r7,zero,80bf24 <__umoddi3+0xe8>
  80be78:	29805036 	bltu	r5,r6,80bfbc <__umoddi3+0x180>
  80be7c:	30008a26 	beq	r6,zero,80c0a8 <__umoddi3+0x26c>
  80be80:	00bfffd4 	movui	r2,65535
  80be84:	14008236 	bltu	r2,r16,80c090 <__umoddi3+0x254>
  80be88:	00803fc4 	movi	r2,255
  80be8c:	14013636 	bltu	r2,r16,80c368 <__umoddi3+0x52c>
  80be90:	000b883a 	mov	r5,zero
  80be94:	0005883a 	mov	r2,zero
  80be98:	8084d83a 	srl	r2,r16,r2
  80be9c:	01002234 	movhi	r4,136
  80bea0:	211d1604 	addi	r4,r4,29784
  80bea4:	01800804 	movi	r6,32
  80bea8:	1105883a 	add	r2,r2,r4
  80beac:	10c00003 	ldbu	r3,0(r2)
  80beb0:	28c7883a 	add	r3,r5,r3
  80beb4:	30efc83a 	sub	r23,r6,r3
  80beb8:	b800941e 	bne	r23,zero,80c10c <__umoddi3+0x2d0>
  80bebc:	802ad43a 	srli	r21,r16,16
  80bec0:	a423c83a 	sub	r17,r20,r16
  80bec4:	0039883a 	mov	fp,zero
  80bec8:	853fffcc 	andi	r20,r16,65535
  80becc:	8809883a 	mov	r4,r17
  80bed0:	a80b883a 	mov	r5,r21
  80bed4:	0803fc40 	call	803fc4 <__udivsi3>
  80bed8:	8809883a 	mov	r4,r17
  80bedc:	a80b883a 	mov	r5,r21
  80bee0:	a0a3383a 	mul	r17,r20,r2
  80bee4:	0803fcc0 	call	803fcc <__umodsi3>
  80bee8:	1004943a 	slli	r2,r2,16
  80beec:	b006d43a 	srli	r3,r22,16
  80bef0:	10c4b03a 	or	r2,r2,r3
  80bef4:	1440032e 	bgeu	r2,r17,80bf04 <__umoddi3+0xc8>
  80bef8:	1405883a 	add	r2,r2,r16
  80befc:	14000136 	bltu	r2,r16,80bf04 <__umoddi3+0xc8>
  80bf00:	14413536 	bltu	r2,r17,80c3d8 <__umoddi3+0x59c>
  80bf04:	1463c83a 	sub	r17,r2,r17
  80bf08:	8809883a 	mov	r4,r17
  80bf0c:	a80b883a 	mov	r5,r21
  80bf10:	0803fc40 	call	803fc4 <__udivsi3>
  80bf14:	8809883a 	mov	r4,r17
  80bf18:	a0a3383a 	mul	r17,r20,r2
  80bf1c:	a80b883a 	mov	r5,r21
  80bf20:	00004d06 	br	80c058 <__umoddi3+0x21c>
  80bf24:	380d883a 	mov	r6,r7
  80bf28:	29c0102e 	bgeu	r5,r7,80bf6c <__umoddi3+0x130>
  80bf2c:	2011883a 	mov	r8,r4
  80bf30:	2813883a 	mov	r9,r5
  80bf34:	4005883a 	mov	r2,r8
  80bf38:	4807883a 	mov	r3,r9
  80bf3c:	dfc00e17 	ldw	ra,56(sp)
  80bf40:	df000d17 	ldw	fp,52(sp)
  80bf44:	ddc00c17 	ldw	r23,48(sp)
  80bf48:	dd800b17 	ldw	r22,44(sp)
  80bf4c:	dd400a17 	ldw	r21,40(sp)
  80bf50:	dd000917 	ldw	r20,36(sp)
  80bf54:	dcc00817 	ldw	r19,32(sp)
  80bf58:	dc800717 	ldw	r18,28(sp)
  80bf5c:	dc400617 	ldw	r17,24(sp)
  80bf60:	dc000517 	ldw	r16,20(sp)
  80bf64:	dec00f04 	addi	sp,sp,60
  80bf68:	f800283a 	ret
  80bf6c:	00bfffd4 	movui	r2,65535
  80bf70:	11c05a36 	bltu	r2,r7,80c0dc <__umoddi3+0x2a0>
  80bf74:	00803fc4 	movi	r2,255
  80bf78:	11c0fe36 	bltu	r2,r7,80c374 <__umoddi3+0x538>
  80bf7c:	000b883a 	mov	r5,zero
  80bf80:	0005883a 	mov	r2,zero
  80bf84:	3084d83a 	srl	r2,r6,r2
  80bf88:	01002234 	movhi	r4,136
  80bf8c:	211d1604 	addi	r4,r4,29784
  80bf90:	01c00804 	movi	r7,32
  80bf94:	1105883a 	add	r2,r2,r4
  80bf98:	10c00003 	ldbu	r3,0(r2)
  80bf9c:	28c7883a 	add	r3,r5,r3
  80bfa0:	38ebc83a 	sub	r21,r7,r3
  80bfa4:	a800851e 	bne	r21,zero,80c1bc <__umoddi3+0x380>
  80bfa8:	35005236 	bltu	r6,r20,80c0f4 <__umoddi3+0x2b8>
  80bfac:	b400512e 	bgeu	r22,r16,80c0f4 <__umoddi3+0x2b8>
  80bfb0:	b011883a 	mov	r8,r22
  80bfb4:	a013883a 	mov	r9,r20
  80bfb8:	003fde06 	br	80bf34 <__umoddi3+0xf8>
  80bfbc:	00bfffd4 	movui	r2,65535
  80bfc0:	11804036 	bltu	r2,r6,80c0c4 <__umoddi3+0x288>
  80bfc4:	00803fc4 	movi	r2,255
  80bfc8:	1180ed36 	bltu	r2,r6,80c380 <__umoddi3+0x544>
  80bfcc:	000b883a 	mov	r5,zero
  80bfd0:	0005883a 	mov	r2,zero
  80bfd4:	8084d83a 	srl	r2,r16,r2
  80bfd8:	01002234 	movhi	r4,136
  80bfdc:	211d1604 	addi	r4,r4,29784
  80bfe0:	01800804 	movi	r6,32
  80bfe4:	1105883a 	add	r2,r2,r4
  80bfe8:	10c00003 	ldbu	r3,0(r2)
  80bfec:	28c7883a 	add	r3,r5,r3
  80bff0:	30c7c83a 	sub	r3,r6,r3
  80bff4:	1800bf1e 	bne	r3,zero,80c2f4 <__umoddi3+0x4b8>
  80bff8:	0039883a 	mov	fp,zero
  80bffc:	802ad43a 	srli	r21,r16,16
  80c000:	a009883a 	mov	r4,r20
  80c004:	85ffffcc 	andi	r23,r16,65535
  80c008:	a80b883a 	mov	r5,r21
  80c00c:	0803fc40 	call	803fc4 <__udivsi3>
  80c010:	a009883a 	mov	r4,r20
  80c014:	a80b883a 	mov	r5,r21
  80c018:	b8a3383a 	mul	r17,r23,r2
  80c01c:	0803fcc0 	call	803fcc <__umodsi3>
  80c020:	1004943a 	slli	r2,r2,16
  80c024:	b006d43a 	srli	r3,r22,16
  80c028:	10c4b03a 	or	r2,r2,r3
  80c02c:	1440032e 	bgeu	r2,r17,80c03c <__umoddi3+0x200>
  80c030:	1405883a 	add	r2,r2,r16
  80c034:	14000136 	bltu	r2,r16,80c03c <__umoddi3+0x200>
  80c038:	1440e536 	bltu	r2,r17,80c3d0 <__umoddi3+0x594>
  80c03c:	1463c83a 	sub	r17,r2,r17
  80c040:	8809883a 	mov	r4,r17
  80c044:	a80b883a 	mov	r5,r21
  80c048:	0803fc40 	call	803fc4 <__udivsi3>
  80c04c:	8809883a 	mov	r4,r17
  80c050:	b8a3383a 	mul	r17,r23,r2
  80c054:	a80b883a 	mov	r5,r21
  80c058:	0803fcc0 	call	803fcc <__umodsi3>
  80c05c:	1004943a 	slli	r2,r2,16
  80c060:	b0ffffcc 	andi	r3,r22,65535
  80c064:	10c4b03a 	or	r2,r2,r3
  80c068:	1440042e 	bgeu	r2,r17,80c07c <__umoddi3+0x240>
  80c06c:	1405883a 	add	r2,r2,r16
  80c070:	14000236 	bltu	r2,r16,80c07c <__umoddi3+0x240>
  80c074:	1440012e 	bgeu	r2,r17,80c07c <__umoddi3+0x240>
  80c078:	1405883a 	add	r2,r2,r16
  80c07c:	1445c83a 	sub	r2,r2,r17
  80c080:	1724d83a 	srl	r18,r2,fp
  80c084:	0013883a 	mov	r9,zero
  80c088:	9011883a 	mov	r8,r18
  80c08c:	003fa906 	br	80bf34 <__umoddi3+0xf8>
  80c090:	00804034 	movhi	r2,256
  80c094:	10bfffc4 	addi	r2,r2,-1
  80c098:	1400b036 	bltu	r2,r16,80c35c <__umoddi3+0x520>
  80c09c:	01400404 	movi	r5,16
  80c0a0:	2805883a 	mov	r2,r5
  80c0a4:	003f7c06 	br	80be98 <__umoddi3+0x5c>
  80c0a8:	01000044 	movi	r4,1
  80c0ac:	000b883a 	mov	r5,zero
  80c0b0:	0803fc40 	call	803fc4 <__udivsi3>
  80c0b4:	1021883a 	mov	r16,r2
  80c0b8:	00bfffd4 	movui	r2,65535
  80c0bc:	143ff436 	bltu	r2,r16,80c090 <__umoddi3+0x254>
  80c0c0:	003f7106 	br	80be88 <__umoddi3+0x4c>
  80c0c4:	00804034 	movhi	r2,256
  80c0c8:	10bfffc4 	addi	r2,r2,-1
  80c0cc:	1180af36 	bltu	r2,r6,80c38c <__umoddi3+0x550>
  80c0d0:	01400404 	movi	r5,16
  80c0d4:	2805883a 	mov	r2,r5
  80c0d8:	003fbe06 	br	80bfd4 <__umoddi3+0x198>
  80c0dc:	00804034 	movhi	r2,256
  80c0e0:	10bfffc4 	addi	r2,r2,-1
  80c0e4:	11c0ac36 	bltu	r2,r7,80c398 <__umoddi3+0x55c>
  80c0e8:	01400404 	movi	r5,16
  80c0ec:	2805883a 	mov	r2,r5
  80c0f0:	003fa406 	br	80bf84 <__umoddi3+0x148>
  80c0f4:	b409c83a 	sub	r4,r22,r16
  80c0f8:	b105803a 	cmpltu	r2,r22,r4
  80c0fc:	a187c83a 	sub	r3,r20,r6
  80c100:	18a9c83a 	sub	r20,r3,r2
  80c104:	202d883a 	mov	r22,r4
  80c108:	003fa906 	br	80bfb0 <__umoddi3+0x174>
  80c10c:	85e0983a 	sll	r16,r16,r23
  80c110:	35c5c83a 	sub	r2,r6,r23
  80c114:	a0a2d83a 	srl	r17,r20,r2
  80c118:	802ad43a 	srli	r21,r16,16
  80c11c:	b084d83a 	srl	r2,r22,r2
  80c120:	a5c6983a 	sll	r3,r20,r23
  80c124:	8809883a 	mov	r4,r17
  80c128:	a80b883a 	mov	r5,r21
  80c12c:	1886b03a 	or	r3,r3,r2
  80c130:	d8c00115 	stw	r3,4(sp)
  80c134:	853fffcc 	andi	r20,r16,65535
  80c138:	0803fc40 	call	803fc4 <__udivsi3>
  80c13c:	8809883a 	mov	r4,r17
  80c140:	a80b883a 	mov	r5,r21
  80c144:	a0a3383a 	mul	r17,r20,r2
  80c148:	0803fcc0 	call	803fcc <__umodsi3>
  80c14c:	d9000117 	ldw	r4,4(sp)
  80c150:	1004943a 	slli	r2,r2,16
  80c154:	b839883a 	mov	fp,r23
  80c158:	2006d43a 	srli	r3,r4,16
  80c15c:	10c4b03a 	or	r2,r2,r3
  80c160:	1440022e 	bgeu	r2,r17,80c16c <__umoddi3+0x330>
  80c164:	1405883a 	add	r2,r2,r16
  80c168:	1400962e 	bgeu	r2,r16,80c3c4 <__umoddi3+0x588>
  80c16c:	1463c83a 	sub	r17,r2,r17
  80c170:	8809883a 	mov	r4,r17
  80c174:	a80b883a 	mov	r5,r21
  80c178:	0803fc40 	call	803fc4 <__udivsi3>
  80c17c:	8809883a 	mov	r4,r17
  80c180:	a80b883a 	mov	r5,r21
  80c184:	a0a3383a 	mul	r17,r20,r2
  80c188:	0803fcc0 	call	803fcc <__umodsi3>
  80c18c:	d9400117 	ldw	r5,4(sp)
  80c190:	1004943a 	slli	r2,r2,16
  80c194:	28ffffcc 	andi	r3,r5,65535
  80c198:	10c4b03a 	or	r2,r2,r3
  80c19c:	1440042e 	bgeu	r2,r17,80c1b0 <__umoddi3+0x374>
  80c1a0:	1405883a 	add	r2,r2,r16
  80c1a4:	14000236 	bltu	r2,r16,80c1b0 <__umoddi3+0x374>
  80c1a8:	1440012e 	bgeu	r2,r17,80c1b0 <__umoddi3+0x374>
  80c1ac:	1405883a 	add	r2,r2,r16
  80c1b0:	b5ec983a 	sll	r22,r22,r23
  80c1b4:	1463c83a 	sub	r17,r2,r17
  80c1b8:	003f4406 	br	80becc <__umoddi3+0x90>
  80c1bc:	3d4fc83a 	sub	r7,r7,r21
  80c1c0:	3546983a 	sll	r3,r6,r21
  80c1c4:	81c4d83a 	srl	r2,r16,r7
  80c1c8:	a1e2d83a 	srl	r17,r20,r7
  80c1cc:	a54c983a 	sll	r6,r20,r21
  80c1d0:	18aeb03a 	or	r23,r3,r2
  80c1d4:	b828d43a 	srli	r20,r23,16
  80c1d8:	b1c4d83a 	srl	r2,r22,r7
  80c1dc:	8809883a 	mov	r4,r17
  80c1e0:	a00b883a 	mov	r5,r20
  80c1e4:	308cb03a 	or	r6,r6,r2
  80c1e8:	d9c00315 	stw	r7,12(sp)
  80c1ec:	d9800215 	stw	r6,8(sp)
  80c1f0:	0803fc40 	call	803fc4 <__udivsi3>
  80c1f4:	8809883a 	mov	r4,r17
  80c1f8:	a00b883a 	mov	r5,r20
  80c1fc:	1039883a 	mov	fp,r2
  80c200:	0803fcc0 	call	803fcc <__umodsi3>
  80c204:	b8ffffcc 	andi	r3,r23,65535
  80c208:	d8c00415 	stw	r3,16(sp)
  80c20c:	d9000217 	ldw	r4,8(sp)
  80c210:	d9400417 	ldw	r5,16(sp)
  80c214:	1004943a 	slli	r2,r2,16
  80c218:	2006d43a 	srli	r3,r4,16
  80c21c:	8560983a 	sll	r16,r16,r21
  80c220:	2f23383a 	mul	r17,r5,fp
  80c224:	10c4b03a 	or	r2,r2,r3
  80c228:	dc000015 	stw	r16,0(sp)
  80c22c:	b56c983a 	sll	r22,r22,r21
  80c230:	1440032e 	bgeu	r2,r17,80c240 <__umoddi3+0x404>
  80c234:	15c5883a 	add	r2,r2,r23
  80c238:	e73fffc4 	addi	fp,fp,-1
  80c23c:	15c05d2e 	bgeu	r2,r23,80c3b4 <__umoddi3+0x578>
  80c240:	1463c83a 	sub	r17,r2,r17
  80c244:	8809883a 	mov	r4,r17
  80c248:	a00b883a 	mov	r5,r20
  80c24c:	0803fc40 	call	803fc4 <__udivsi3>
  80c250:	8809883a 	mov	r4,r17
  80c254:	a00b883a 	mov	r5,r20
  80c258:	1021883a 	mov	r16,r2
  80c25c:	0803fcc0 	call	803fcc <__umodsi3>
  80c260:	d8c00417 	ldw	r3,16(sp)
  80c264:	d9000217 	ldw	r4,8(sp)
  80c268:	1004943a 	slli	r2,r2,16
  80c26c:	1c23383a 	mul	r17,r3,r16
  80c270:	20ffffcc 	andi	r3,r4,65535
  80c274:	10ceb03a 	or	r7,r2,r3
  80c278:	3c40032e 	bgeu	r7,r17,80c288 <__umoddi3+0x44c>
  80c27c:	3dcf883a 	add	r7,r7,r23
  80c280:	843fffc4 	addi	r16,r16,-1
  80c284:	3dc0472e 	bgeu	r7,r23,80c3a4 <__umoddi3+0x568>
  80c288:	e004943a 	slli	r2,fp,16
  80c28c:	d9400017 	ldw	r5,0(sp)
  80c290:	3c4fc83a 	sub	r7,r7,r17
  80c294:	8084b03a 	or	r2,r16,r2
  80c298:	28ffffcc 	andi	r3,r5,65535
  80c29c:	280cd43a 	srli	r6,r5,16
  80c2a0:	100ad43a 	srli	r5,r2,16
  80c2a4:	10bfffcc 	andi	r2,r2,65535
  80c2a8:	10d1383a 	mul	r8,r2,r3
  80c2ac:	28c7383a 	mul	r3,r5,r3
  80c2b0:	1185383a 	mul	r2,r2,r6
  80c2b4:	4008d43a 	srli	r4,r8,16
  80c2b8:	298b383a 	mul	r5,r5,r6
  80c2bc:	10c5883a 	add	r2,r2,r3
  80c2c0:	2089883a 	add	r4,r4,r2
  80c2c4:	20c0022e 	bgeu	r4,r3,80c2d0 <__umoddi3+0x494>
  80c2c8:	00800074 	movhi	r2,1
  80c2cc:	288b883a 	add	r5,r5,r2
  80c2d0:	2004d43a 	srli	r2,r4,16
  80c2d4:	2008943a 	slli	r4,r4,16
  80c2d8:	40ffffcc 	andi	r3,r8,65535
  80c2dc:	288b883a 	add	r5,r5,r2
  80c2e0:	20c9883a 	add	r4,r4,r3
  80c2e4:	39400b36 	bltu	r7,r5,80c314 <__umoddi3+0x4d8>
  80c2e8:	39403d26 	beq	r7,r5,80c3e0 <__umoddi3+0x5a4>
  80c2ec:	394bc83a 	sub	r5,r7,r5
  80c2f0:	00000f06 	br	80c330 <__umoddi3+0x4f4>
  80c2f4:	30c5c83a 	sub	r2,r6,r3
  80c2f8:	1839883a 	mov	fp,r3
  80c2fc:	b084d83a 	srl	r2,r22,r2
  80c300:	a0c6983a 	sll	r3,r20,r3
  80c304:	8720983a 	sll	r16,r16,fp
  80c308:	b72c983a 	sll	r22,r22,fp
  80c30c:	18a8b03a 	or	r20,r3,r2
  80c310:	003f3a06 	br	80bffc <__umoddi3+0x1c0>
  80c314:	d8c00017 	ldw	r3,0(sp)
  80c318:	20c5c83a 	sub	r2,r4,r3
  80c31c:	2089803a 	cmpltu	r4,r4,r2
  80c320:	2dc7c83a 	sub	r3,r5,r23
  80c324:	1907c83a 	sub	r3,r3,r4
  80c328:	38cbc83a 	sub	r5,r7,r3
  80c32c:	1009883a 	mov	r4,r2
  80c330:	b105c83a 	sub	r2,r22,r4
  80c334:	b087803a 	cmpltu	r3,r22,r2
  80c338:	28c7c83a 	sub	r3,r5,r3
  80c33c:	d9400317 	ldw	r5,12(sp)
  80c340:	1544d83a 	srl	r2,r2,r21
  80c344:	1948983a 	sll	r4,r3,r5
  80c348:	1d46d83a 	srl	r3,r3,r21
  80c34c:	20a4b03a 	or	r18,r4,r2
  80c350:	9011883a 	mov	r8,r18
  80c354:	1813883a 	mov	r9,r3
  80c358:	003ef606 	br	80bf34 <__umoddi3+0xf8>
  80c35c:	01400604 	movi	r5,24
  80c360:	2805883a 	mov	r2,r5
  80c364:	003ecc06 	br	80be98 <__umoddi3+0x5c>
  80c368:	01400204 	movi	r5,8
  80c36c:	2805883a 	mov	r2,r5
  80c370:	003ec906 	br	80be98 <__umoddi3+0x5c>
  80c374:	01400204 	movi	r5,8
  80c378:	2805883a 	mov	r2,r5
  80c37c:	003f0106 	br	80bf84 <__umoddi3+0x148>
  80c380:	01400204 	movi	r5,8
  80c384:	2805883a 	mov	r2,r5
  80c388:	003f1206 	br	80bfd4 <__umoddi3+0x198>
  80c38c:	01400604 	movi	r5,24
  80c390:	2805883a 	mov	r2,r5
  80c394:	003f0f06 	br	80bfd4 <__umoddi3+0x198>
  80c398:	01400604 	movi	r5,24
  80c39c:	2805883a 	mov	r2,r5
  80c3a0:	003ef806 	br	80bf84 <__umoddi3+0x148>
  80c3a4:	3c7fb82e 	bgeu	r7,r17,80c288 <__umoddi3+0x44c>
  80c3a8:	843fffc4 	addi	r16,r16,-1
  80c3ac:	3dcf883a 	add	r7,r7,r23
  80c3b0:	003fb506 	br	80c288 <__umoddi3+0x44c>
  80c3b4:	147fa22e 	bgeu	r2,r17,80c240 <__umoddi3+0x404>
  80c3b8:	e73fffc4 	addi	fp,fp,-1
  80c3bc:	15c5883a 	add	r2,r2,r23
  80c3c0:	003f9f06 	br	80c240 <__umoddi3+0x404>
  80c3c4:	147f692e 	bgeu	r2,r17,80c16c <__umoddi3+0x330>
  80c3c8:	1405883a 	add	r2,r2,r16
  80c3cc:	003f6706 	br	80c16c <__umoddi3+0x330>
  80c3d0:	1405883a 	add	r2,r2,r16
  80c3d4:	003f1906 	br	80c03c <__umoddi3+0x200>
  80c3d8:	1405883a 	add	r2,r2,r16
  80c3dc:	003ec906 	br	80bf04 <__umoddi3+0xc8>
  80c3e0:	b13fcc36 	bltu	r22,r4,80c314 <__umoddi3+0x4d8>
  80c3e4:	000b883a 	mov	r5,zero
  80c3e8:	003fd106 	br	80c330 <__umoddi3+0x4f4>

0080c3ec <__divdf3>:
  80c3ec:	deffed04 	addi	sp,sp,-76
  80c3f0:	dcc01115 	stw	r19,68(sp)
  80c3f4:	dcc00404 	addi	r19,sp,16
  80c3f8:	2011883a 	mov	r8,r4
  80c3fc:	2813883a 	mov	r9,r5
  80c400:	dc000e15 	stw	r16,56(sp)
  80c404:	d809883a 	mov	r4,sp
  80c408:	980b883a 	mov	r5,r19
  80c40c:	dc000904 	addi	r16,sp,36
  80c410:	dfc01215 	stw	ra,72(sp)
  80c414:	da400115 	stw	r9,4(sp)
  80c418:	d9c00315 	stw	r7,12(sp)
  80c41c:	da000015 	stw	r8,0(sp)
  80c420:	d9800215 	stw	r6,8(sp)
  80c424:	dc801015 	stw	r18,64(sp)
  80c428:	dc400f15 	stw	r17,60(sp)
  80c42c:	08044000 	call	804400 <__unpack_d>
  80c430:	d9000204 	addi	r4,sp,8
  80c434:	800b883a 	mov	r5,r16
  80c438:	08044000 	call	804400 <__unpack_d>
  80c43c:	d9000417 	ldw	r4,16(sp)
  80c440:	00800044 	movi	r2,1
  80c444:	11000b2e 	bgeu	r2,r4,80c474 <__divdf3+0x88>
  80c448:	d9400917 	ldw	r5,36(sp)
  80c44c:	1140762e 	bgeu	r2,r5,80c628 <__divdf3+0x23c>
  80c450:	d8800517 	ldw	r2,20(sp)
  80c454:	d8c00a17 	ldw	r3,40(sp)
  80c458:	01800104 	movi	r6,4
  80c45c:	10c4f03a 	xor	r2,r2,r3
  80c460:	d8800515 	stw	r2,20(sp)
  80c464:	21800226 	beq	r4,r6,80c470 <__divdf3+0x84>
  80c468:	00800084 	movi	r2,2
  80c46c:	2080141e 	bne	r4,r2,80c4c0 <__divdf3+0xd4>
  80c470:	29000926 	beq	r5,r4,80c498 <__divdf3+0xac>
  80c474:	9809883a 	mov	r4,r19
  80c478:	08040ec0 	call	8040ec <__pack_d>
  80c47c:	dfc01217 	ldw	ra,72(sp)
  80c480:	dcc01117 	ldw	r19,68(sp)
  80c484:	dc801017 	ldw	r18,64(sp)
  80c488:	dc400f17 	ldw	r17,60(sp)
  80c48c:	dc000e17 	ldw	r16,56(sp)
  80c490:	dec01304 	addi	sp,sp,76
  80c494:	f800283a 	ret
  80c498:	01002234 	movhi	r4,136
  80c49c:	211d1104 	addi	r4,r4,29764
  80c4a0:	08040ec0 	call	8040ec <__pack_d>
  80c4a4:	dfc01217 	ldw	ra,72(sp)
  80c4a8:	dcc01117 	ldw	r19,68(sp)
  80c4ac:	dc801017 	ldw	r18,64(sp)
  80c4b0:	dc400f17 	ldw	r17,60(sp)
  80c4b4:	dc000e17 	ldw	r16,56(sp)
  80c4b8:	dec01304 	addi	sp,sp,76
  80c4bc:	f800283a 	ret
  80c4c0:	29805b26 	beq	r5,r6,80c630 <__divdf3+0x244>
  80c4c4:	28802d26 	beq	r5,r2,80c57c <__divdf3+0x190>
  80c4c8:	d8c00617 	ldw	r3,24(sp)
  80c4cc:	d8800b17 	ldw	r2,44(sp)
  80c4d0:	d9c00817 	ldw	r7,32(sp)
  80c4d4:	dc400d17 	ldw	r17,52(sp)
  80c4d8:	188bc83a 	sub	r5,r3,r2
  80c4dc:	d9800717 	ldw	r6,28(sp)
  80c4e0:	dc000c17 	ldw	r16,48(sp)
  80c4e4:	d9400615 	stw	r5,24(sp)
  80c4e8:	3c403836 	bltu	r7,r17,80c5cc <__divdf3+0x1e0>
  80c4ec:	89c03626 	beq	r17,r7,80c5c8 <__divdf3+0x1dc>
  80c4f0:	0015883a 	mov	r10,zero
  80c4f4:	001d883a 	mov	r14,zero
  80c4f8:	02c40034 	movhi	r11,4096
  80c4fc:	001f883a 	mov	r15,zero
  80c500:	003f883a 	mov	ra,zero
  80c504:	04800f44 	movi	r18,61
  80c508:	00000f06 	br	80c548 <__divdf3+0x15c>
  80c50c:	601d883a 	mov	r14,r12
  80c510:	681f883a 	mov	r15,r13
  80c514:	400d883a 	mov	r6,r8
  80c518:	100f883a 	mov	r7,r2
  80c51c:	3191883a 	add	r8,r6,r6
  80c520:	5808d07a 	srli	r4,r11,1
  80c524:	4185803a 	cmpltu	r2,r8,r6
  80c528:	39d3883a 	add	r9,r7,r7
  80c52c:	28c6b03a 	or	r3,r5,r3
  80c530:	1245883a 	add	r2,r2,r9
  80c534:	1815883a 	mov	r10,r3
  80c538:	2017883a 	mov	r11,r4
  80c53c:	400d883a 	mov	r6,r8
  80c540:	100f883a 	mov	r7,r2
  80c544:	fc801726 	beq	ra,r18,80c5a4 <__divdf3+0x1b8>
  80c548:	580a97fa 	slli	r5,r11,31
  80c54c:	5006d07a 	srli	r3,r10,1
  80c550:	ffc00044 	addi	ra,ra,1
  80c554:	3c7ff136 	bltu	r7,r17,80c51c <__divdf3+0x130>
  80c558:	3411c83a 	sub	r8,r6,r16
  80c55c:	3205803a 	cmpltu	r2,r6,r8
  80c560:	3c53c83a 	sub	r9,r7,r17
  80c564:	7298b03a 	or	r12,r14,r10
  80c568:	7adab03a 	or	r13,r15,r11
  80c56c:	4885c83a 	sub	r2,r9,r2
  80c570:	89ffe61e 	bne	r17,r7,80c50c <__divdf3+0x120>
  80c574:	343fe936 	bltu	r6,r16,80c51c <__divdf3+0x130>
  80c578:	003fe406 	br	80c50c <__divdf3+0x120>
  80c57c:	9809883a 	mov	r4,r19
  80c580:	d9800415 	stw	r6,16(sp)
  80c584:	08040ec0 	call	8040ec <__pack_d>
  80c588:	dfc01217 	ldw	ra,72(sp)
  80c58c:	dcc01117 	ldw	r19,68(sp)
  80c590:	dc801017 	ldw	r18,64(sp)
  80c594:	dc400f17 	ldw	r17,60(sp)
  80c598:	dc000e17 	ldw	r16,56(sp)
  80c59c:	dec01304 	addi	sp,sp,76
  80c5a0:	f800283a 	ret
  80c5a4:	00803fc4 	movi	r2,255
  80c5a8:	7090703a 	and	r8,r14,r2
  80c5ac:	00802004 	movi	r2,128
  80c5b0:	0007883a 	mov	r3,zero
  80c5b4:	0013883a 	mov	r9,zero
  80c5b8:	40800d26 	beq	r8,r2,80c5f0 <__divdf3+0x204>
  80c5bc:	dbc00815 	stw	r15,32(sp)
  80c5c0:	db800715 	stw	r14,28(sp)
  80c5c4:	003fab06 	br	80c474 <__divdf3+0x88>
  80c5c8:	343fc92e 	bgeu	r6,r16,80c4f0 <__divdf3+0x104>
  80c5cc:	3185883a 	add	r2,r6,r6
  80c5d0:	1189803a 	cmpltu	r4,r2,r6
  80c5d4:	39c7883a 	add	r3,r7,r7
  80c5d8:	20c9883a 	add	r4,r4,r3
  80c5dc:	297fffc4 	addi	r5,r5,-1
  80c5e0:	100d883a 	mov	r6,r2
  80c5e4:	200f883a 	mov	r7,r4
  80c5e8:	d9400615 	stw	r5,24(sp)
  80c5ec:	003fc006 	br	80c4f0 <__divdf3+0x104>
  80c5f0:	483ff21e 	bne	r9,zero,80c5bc <__divdf3+0x1d0>
  80c5f4:	01004004 	movi	r4,256
  80c5f8:	7104703a 	and	r2,r14,r4
  80c5fc:	10c4b03a 	or	r2,r2,r3
  80c600:	103fee1e 	bne	r2,zero,80c5bc <__divdf3+0x1d0>
  80c604:	31c4b03a 	or	r2,r6,r7
  80c608:	103fec26 	beq	r2,zero,80c5bc <__divdf3+0x1d0>
  80c60c:	7205883a 	add	r2,r14,r8
  80c610:	1391803a 	cmpltu	r8,r2,r14
  80c614:	43d1883a 	add	r8,r8,r15
  80c618:	013fc004 	movi	r4,-256
  80c61c:	111c703a 	and	r14,r2,r4
  80c620:	401f883a 	mov	r15,r8
  80c624:	003fe506 	br	80c5bc <__divdf3+0x1d0>
  80c628:	8009883a 	mov	r4,r16
  80c62c:	003f9206 	br	80c478 <__divdf3+0x8c>
  80c630:	9809883a 	mov	r4,r19
  80c634:	d8000715 	stw	zero,28(sp)
  80c638:	d8000815 	stw	zero,32(sp)
  80c63c:	d8000615 	stw	zero,24(sp)
  80c640:	003f8d06 	br	80c478 <__divdf3+0x8c>

0080c644 <__nedf2>:
  80c644:	deffef04 	addi	sp,sp,-68
  80c648:	dc400f15 	stw	r17,60(sp)
  80c64c:	dc400404 	addi	r17,sp,16
  80c650:	2005883a 	mov	r2,r4
  80c654:	2807883a 	mov	r3,r5
  80c658:	dc000e15 	stw	r16,56(sp)
  80c65c:	d809883a 	mov	r4,sp
  80c660:	880b883a 	mov	r5,r17
  80c664:	dc000904 	addi	r16,sp,36
  80c668:	d8c00115 	stw	r3,4(sp)
  80c66c:	d8800015 	stw	r2,0(sp)
  80c670:	d9800215 	stw	r6,8(sp)
  80c674:	dfc01015 	stw	ra,64(sp)
  80c678:	d9c00315 	stw	r7,12(sp)
  80c67c:	08044000 	call	804400 <__unpack_d>
  80c680:	d9000204 	addi	r4,sp,8
  80c684:	800b883a 	mov	r5,r16
  80c688:	08044000 	call	804400 <__unpack_d>
  80c68c:	d8800417 	ldw	r2,16(sp)
  80c690:	00c00044 	movi	r3,1
  80c694:	180d883a 	mov	r6,r3
  80c698:	1880062e 	bgeu	r3,r2,80c6b4 <__nedf2+0x70>
  80c69c:	d8800917 	ldw	r2,36(sp)
  80c6a0:	8809883a 	mov	r4,r17
  80c6a4:	800b883a 	mov	r5,r16
  80c6a8:	1880022e 	bgeu	r3,r2,80c6b4 <__nedf2+0x70>
  80c6ac:	08045380 	call	804538 <__fpcmp_parts_d>
  80c6b0:	100d883a 	mov	r6,r2
  80c6b4:	3005883a 	mov	r2,r6
  80c6b8:	dfc01017 	ldw	ra,64(sp)
  80c6bc:	dc400f17 	ldw	r17,60(sp)
  80c6c0:	dc000e17 	ldw	r16,56(sp)
  80c6c4:	dec01104 	addi	sp,sp,68
  80c6c8:	f800283a 	ret

0080c6cc <__ltdf2>:
  80c6cc:	deffef04 	addi	sp,sp,-68
  80c6d0:	dc400f15 	stw	r17,60(sp)
  80c6d4:	dc400404 	addi	r17,sp,16
  80c6d8:	2005883a 	mov	r2,r4
  80c6dc:	2807883a 	mov	r3,r5
  80c6e0:	dc000e15 	stw	r16,56(sp)
  80c6e4:	d809883a 	mov	r4,sp
  80c6e8:	880b883a 	mov	r5,r17
  80c6ec:	dc000904 	addi	r16,sp,36
  80c6f0:	d8c00115 	stw	r3,4(sp)
  80c6f4:	d8800015 	stw	r2,0(sp)
  80c6f8:	d9800215 	stw	r6,8(sp)
  80c6fc:	dfc01015 	stw	ra,64(sp)
  80c700:	d9c00315 	stw	r7,12(sp)
  80c704:	08044000 	call	804400 <__unpack_d>
  80c708:	d9000204 	addi	r4,sp,8
  80c70c:	800b883a 	mov	r5,r16
  80c710:	08044000 	call	804400 <__unpack_d>
  80c714:	d8800417 	ldw	r2,16(sp)
  80c718:	00c00044 	movi	r3,1
  80c71c:	180d883a 	mov	r6,r3
  80c720:	1880062e 	bgeu	r3,r2,80c73c <__ltdf2+0x70>
  80c724:	d8800917 	ldw	r2,36(sp)
  80c728:	8809883a 	mov	r4,r17
  80c72c:	800b883a 	mov	r5,r16
  80c730:	1880022e 	bgeu	r3,r2,80c73c <__ltdf2+0x70>
  80c734:	08045380 	call	804538 <__fpcmp_parts_d>
  80c738:	100d883a 	mov	r6,r2
  80c73c:	3005883a 	mov	r2,r6
  80c740:	dfc01017 	ldw	ra,64(sp)
  80c744:	dc400f17 	ldw	r17,60(sp)
  80c748:	dc000e17 	ldw	r16,56(sp)
  80c74c:	dec01104 	addi	sp,sp,68
  80c750:	f800283a 	ret

0080c754 <__floatunsidf>:
  80c754:	defff204 	addi	sp,sp,-56
  80c758:	dfc00d15 	stw	ra,52(sp)
  80c75c:	ddc00c15 	stw	r23,48(sp)
  80c760:	dd800b15 	stw	r22,44(sp)
  80c764:	dd400a15 	stw	r21,40(sp)
  80c768:	dd000915 	stw	r20,36(sp)
  80c76c:	dcc00815 	stw	r19,32(sp)
  80c770:	dc800715 	stw	r18,28(sp)
  80c774:	dc400615 	stw	r17,24(sp)
  80c778:	dc000515 	stw	r16,20(sp)
  80c77c:	d8000115 	stw	zero,4(sp)
  80c780:	20000f1e 	bne	r4,zero,80c7c0 <__floatunsidf+0x6c>
  80c784:	00800084 	movi	r2,2
  80c788:	d8800015 	stw	r2,0(sp)
  80c78c:	d809883a 	mov	r4,sp
  80c790:	08040ec0 	call	8040ec <__pack_d>
  80c794:	dfc00d17 	ldw	ra,52(sp)
  80c798:	ddc00c17 	ldw	r23,48(sp)
  80c79c:	dd800b17 	ldw	r22,44(sp)
  80c7a0:	dd400a17 	ldw	r21,40(sp)
  80c7a4:	dd000917 	ldw	r20,36(sp)
  80c7a8:	dcc00817 	ldw	r19,32(sp)
  80c7ac:	dc800717 	ldw	r18,28(sp)
  80c7b0:	dc400617 	ldw	r17,24(sp)
  80c7b4:	dc000517 	ldw	r16,20(sp)
  80c7b8:	dec00e04 	addi	sp,sp,56
  80c7bc:	f800283a 	ret
  80c7c0:	008000c4 	movi	r2,3
  80c7c4:	00c00f04 	movi	r3,60
  80c7c8:	002f883a 	mov	r23,zero
  80c7cc:	202d883a 	mov	r22,r4
  80c7d0:	d8800015 	stw	r2,0(sp)
  80c7d4:	d8c00215 	stw	r3,8(sp)
  80c7d8:	d9000315 	stw	r4,12(sp)
  80c7dc:	ddc00415 	stw	r23,16(sp)
  80c7e0:	080406c0 	call	80406c <__clzsi2>
  80c7e4:	12400744 	addi	r9,r2,29
  80c7e8:	48000b16 	blt	r9,zero,80c818 <__floatunsidf+0xc4>
  80c7ec:	483fe726 	beq	r9,zero,80c78c <__floatunsidf+0x38>
  80c7f0:	10bfff44 	addi	r2,r2,-3
  80c7f4:	10002e16 	blt	r2,zero,80c8b0 <__floatunsidf+0x15c>
  80c7f8:	b0a2983a 	sll	r17,r22,r2
  80c7fc:	0021883a 	mov	r16,zero
  80c800:	d8800217 	ldw	r2,8(sp)
  80c804:	dc400415 	stw	r17,16(sp)
  80c808:	dc000315 	stw	r16,12(sp)
  80c80c:	1245c83a 	sub	r2,r2,r9
  80c810:	d8800215 	stw	r2,8(sp)
  80c814:	003fdd06 	br	80c78c <__floatunsidf+0x38>
  80c818:	0255c83a 	sub	r10,zero,r9
  80c81c:	51bff804 	addi	r6,r10,-32
  80c820:	30001b16 	blt	r6,zero,80c890 <__floatunsidf+0x13c>
  80c824:	b9a8d83a 	srl	r20,r23,r6
  80c828:	002b883a 	mov	r21,zero
  80c82c:	000f883a 	mov	r7,zero
  80c830:	01000044 	movi	r4,1
  80c834:	0011883a 	mov	r8,zero
  80c838:	30002516 	blt	r6,zero,80c8d0 <__floatunsidf+0x17c>
  80c83c:	21a6983a 	sll	r19,r4,r6
  80c840:	0025883a 	mov	r18,zero
  80c844:	00bfffc4 	movi	r2,-1
  80c848:	9089883a 	add	r4,r18,r2
  80c84c:	988b883a 	add	r5,r19,r2
  80c850:	248d803a 	cmpltu	r6,r4,r18
  80c854:	314b883a 	add	r5,r6,r5
  80c858:	b104703a 	and	r2,r22,r4
  80c85c:	b946703a 	and	r3,r23,r5
  80c860:	10c4b03a 	or	r2,r2,r3
  80c864:	10000226 	beq	r2,zero,80c870 <__floatunsidf+0x11c>
  80c868:	01c00044 	movi	r7,1
  80c86c:	0011883a 	mov	r8,zero
  80c870:	d9000217 	ldw	r4,8(sp)
  80c874:	a1c4b03a 	or	r2,r20,r7
  80c878:	aa06b03a 	or	r3,r21,r8
  80c87c:	2249c83a 	sub	r4,r4,r9
  80c880:	d8c00415 	stw	r3,16(sp)
  80c884:	d9000215 	stw	r4,8(sp)
  80c888:	d8800315 	stw	r2,12(sp)
  80c88c:	003fbf06 	br	80c78c <__floatunsidf+0x38>
  80c890:	bdc7883a 	add	r3,r23,r23
  80c894:	008007c4 	movi	r2,31
  80c898:	1285c83a 	sub	r2,r2,r10
  80c89c:	1886983a 	sll	r3,r3,r2
  80c8a0:	b2a8d83a 	srl	r20,r22,r10
  80c8a4:	baaad83a 	srl	r21,r23,r10
  80c8a8:	1d28b03a 	or	r20,r3,r20
  80c8ac:	003fdf06 	br	80c82c <__floatunsidf+0xd8>
  80c8b0:	b006d07a 	srli	r3,r22,1
  80c8b4:	008007c4 	movi	r2,31
  80c8b8:	1245c83a 	sub	r2,r2,r9
  80c8bc:	1886d83a 	srl	r3,r3,r2
  80c8c0:	ba62983a 	sll	r17,r23,r9
  80c8c4:	b260983a 	sll	r16,r22,r9
  80c8c8:	1c62b03a 	or	r17,r3,r17
  80c8cc:	003fcc06 	br	80c800 <__floatunsidf+0xac>
  80c8d0:	2006d07a 	srli	r3,r4,1
  80c8d4:	008007c4 	movi	r2,31
  80c8d8:	1285c83a 	sub	r2,r2,r10
  80c8dc:	18a6d83a 	srl	r19,r3,r2
  80c8e0:	22a4983a 	sll	r18,r4,r10
  80c8e4:	003fd706 	br	80c844 <__floatunsidf+0xf0>

0080c8e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c8e8:	defff804 	addi	sp,sp,-32
  80c8ec:	dfc00715 	stw	ra,28(sp)
  80c8f0:	df000615 	stw	fp,24(sp)
  80c8f4:	df000604 	addi	fp,sp,24
  80c8f8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c8fc:	e0bffc17 	ldw	r2,-16(fp)
  80c900:	1004803a 	cmplt	r2,r2,zero
  80c904:	1000081e 	bne	r2,zero,80c928 <close+0x40>
  80c908:	e0bffc17 	ldw	r2,-16(fp)
  80c90c:	10800324 	muli	r2,r2,12
  80c910:	1007883a 	mov	r3,r2
  80c914:	00802274 	movhi	r2,137
  80c918:	10a08004 	addi	r2,r2,-32256
  80c91c:	1887883a 	add	r3,r3,r2
  80c920:	e0ffff15 	stw	r3,-4(fp)
  80c924:	00000106 	br	80c92c <close+0x44>
  80c928:	e03fff15 	stw	zero,-4(fp)
  80c92c:	e0bfff17 	ldw	r2,-4(fp)
  80c930:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c934:	e0bffb17 	ldw	r2,-20(fp)
  80c938:	1005003a 	cmpeq	r2,r2,zero
  80c93c:	10001d1e 	bne	r2,zero,80c9b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c940:	e0bffb17 	ldw	r2,-20(fp)
  80c944:	10800017 	ldw	r2,0(r2)
  80c948:	10800417 	ldw	r2,16(r2)
  80c94c:	1005003a 	cmpeq	r2,r2,zero
  80c950:	1000071e 	bne	r2,zero,80c970 <close+0x88>
  80c954:	e0bffb17 	ldw	r2,-20(fp)
  80c958:	10800017 	ldw	r2,0(r2)
  80c95c:	10800417 	ldw	r2,16(r2)
  80c960:	e13ffb17 	ldw	r4,-20(fp)
  80c964:	103ee83a 	callr	r2
  80c968:	e0bffe15 	stw	r2,-8(fp)
  80c96c:	00000106 	br	80c974 <close+0x8c>
  80c970:	e03ffe15 	stw	zero,-8(fp)
  80c974:	e0bffe17 	ldw	r2,-8(fp)
  80c978:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c97c:	e13ffc17 	ldw	r4,-16(fp)
  80c980:	080d12c0 	call	80d12c <alt_release_fd>
    if (rval < 0)
  80c984:	e0bffa17 	ldw	r2,-24(fp)
  80c988:	1004403a 	cmpge	r2,r2,zero
  80c98c:	1000071e 	bne	r2,zero,80c9ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c990:	080c9e40 	call	80c9e4 <alt_get_errno>
  80c994:	e0fffa17 	ldw	r3,-24(fp)
  80c998:	00c7c83a 	sub	r3,zero,r3
  80c99c:	10c00015 	stw	r3,0(r2)
      return -1;
  80c9a0:	00bfffc4 	movi	r2,-1
  80c9a4:	e0bffd15 	stw	r2,-12(fp)
  80c9a8:	00000806 	br	80c9cc <close+0xe4>
    }
    return 0;
  80c9ac:	e03ffd15 	stw	zero,-12(fp)
  80c9b0:	00000606 	br	80c9cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c9b4:	080c9e40 	call	80c9e4 <alt_get_errno>
  80c9b8:	1007883a 	mov	r3,r2
  80c9bc:	00801444 	movi	r2,81
  80c9c0:	18800015 	stw	r2,0(r3)
    return -1;
  80c9c4:	00bfffc4 	movi	r2,-1
  80c9c8:	e0bffd15 	stw	r2,-12(fp)
  80c9cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c9d0:	e037883a 	mov	sp,fp
  80c9d4:	dfc00117 	ldw	ra,4(sp)
  80c9d8:	df000017 	ldw	fp,0(sp)
  80c9dc:	dec00204 	addi	sp,sp,8
  80c9e0:	f800283a 	ret

0080c9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c9e4:	defffd04 	addi	sp,sp,-12
  80c9e8:	dfc00215 	stw	ra,8(sp)
  80c9ec:	df000115 	stw	fp,4(sp)
  80c9f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c9f4:	00802274 	movhi	r2,137
  80c9f8:	10a50304 	addi	r2,r2,-27636
  80c9fc:	10800017 	ldw	r2,0(r2)
  80ca00:	1005003a 	cmpeq	r2,r2,zero
  80ca04:	1000061e 	bne	r2,zero,80ca20 <alt_get_errno+0x3c>
  80ca08:	00802274 	movhi	r2,137
  80ca0c:	10a50304 	addi	r2,r2,-27636
  80ca10:	10800017 	ldw	r2,0(r2)
  80ca14:	103ee83a 	callr	r2
  80ca18:	e0bfff15 	stw	r2,-4(fp)
  80ca1c:	00000306 	br	80ca2c <alt_get_errno+0x48>
  80ca20:	00802274 	movhi	r2,137
  80ca24:	10ac3504 	addi	r2,r2,-20268
  80ca28:	e0bfff15 	stw	r2,-4(fp)
  80ca2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca30:	e037883a 	mov	sp,fp
  80ca34:	dfc00117 	ldw	ra,4(sp)
  80ca38:	df000017 	ldw	fp,0(sp)
  80ca3c:	dec00204 	addi	sp,sp,8
  80ca40:	f800283a 	ret

0080ca44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ca44:	defffc04 	addi	sp,sp,-16
  80ca48:	df000315 	stw	fp,12(sp)
  80ca4c:	df000304 	addi	fp,sp,12
  80ca50:	e13ffd15 	stw	r4,-12(fp)
  80ca54:	e17ffe15 	stw	r5,-8(fp)
  80ca58:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ca5c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca60:	e037883a 	mov	sp,fp
  80ca64:	df000017 	ldw	fp,0(sp)
  80ca68:	dec00104 	addi	sp,sp,4
  80ca6c:	f800283a 	ret

0080ca70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ca70:	defff904 	addi	sp,sp,-28
  80ca74:	dfc00615 	stw	ra,24(sp)
  80ca78:	df000515 	stw	fp,20(sp)
  80ca7c:	df000504 	addi	fp,sp,20
  80ca80:	e13ffc15 	stw	r4,-16(fp)
  80ca84:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ca88:	e0bffc17 	ldw	r2,-16(fp)
  80ca8c:	1004803a 	cmplt	r2,r2,zero
  80ca90:	1000081e 	bne	r2,zero,80cab4 <fstat+0x44>
  80ca94:	e0bffc17 	ldw	r2,-16(fp)
  80ca98:	10800324 	muli	r2,r2,12
  80ca9c:	1007883a 	mov	r3,r2
  80caa0:	00802274 	movhi	r2,137
  80caa4:	10a08004 	addi	r2,r2,-32256
  80caa8:	1887883a 	add	r3,r3,r2
  80caac:	e0ffff15 	stw	r3,-4(fp)
  80cab0:	00000106 	br	80cab8 <fstat+0x48>
  80cab4:	e03fff15 	stw	zero,-4(fp)
  80cab8:	e0bfff17 	ldw	r2,-4(fp)
  80cabc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80cac0:	e0bffb17 	ldw	r2,-20(fp)
  80cac4:	1005003a 	cmpeq	r2,r2,zero
  80cac8:	1000121e 	bne	r2,zero,80cb14 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80cacc:	e0bffb17 	ldw	r2,-20(fp)
  80cad0:	10800017 	ldw	r2,0(r2)
  80cad4:	10800817 	ldw	r2,32(r2)
  80cad8:	1005003a 	cmpeq	r2,r2,zero
  80cadc:	1000081e 	bne	r2,zero,80cb00 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80cae0:	e0bffb17 	ldw	r2,-20(fp)
  80cae4:	10800017 	ldw	r2,0(r2)
  80cae8:	10800817 	ldw	r2,32(r2)
  80caec:	e13ffb17 	ldw	r4,-20(fp)
  80caf0:	e17ffd17 	ldw	r5,-12(fp)
  80caf4:	103ee83a 	callr	r2
  80caf8:	e0bffe15 	stw	r2,-8(fp)
  80cafc:	00000b06 	br	80cb2c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80cb00:	e0fffd17 	ldw	r3,-12(fp)
  80cb04:	00880004 	movi	r2,8192
  80cb08:	18800115 	stw	r2,4(r3)
      return 0;
  80cb0c:	e03ffe15 	stw	zero,-8(fp)
  80cb10:	00000606 	br	80cb2c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cb14:	080cb440 	call	80cb44 <alt_get_errno>
  80cb18:	1007883a 	mov	r3,r2
  80cb1c:	00801444 	movi	r2,81
  80cb20:	18800015 	stw	r2,0(r3)
    return -1;
  80cb24:	00bfffc4 	movi	r2,-1
  80cb28:	e0bffe15 	stw	r2,-8(fp)
  80cb2c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80cb30:	e037883a 	mov	sp,fp
  80cb34:	dfc00117 	ldw	ra,4(sp)
  80cb38:	df000017 	ldw	fp,0(sp)
  80cb3c:	dec00204 	addi	sp,sp,8
  80cb40:	f800283a 	ret

0080cb44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cb44:	defffd04 	addi	sp,sp,-12
  80cb48:	dfc00215 	stw	ra,8(sp)
  80cb4c:	df000115 	stw	fp,4(sp)
  80cb50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cb54:	00802274 	movhi	r2,137
  80cb58:	10a50304 	addi	r2,r2,-27636
  80cb5c:	10800017 	ldw	r2,0(r2)
  80cb60:	1005003a 	cmpeq	r2,r2,zero
  80cb64:	1000061e 	bne	r2,zero,80cb80 <alt_get_errno+0x3c>
  80cb68:	00802274 	movhi	r2,137
  80cb6c:	10a50304 	addi	r2,r2,-27636
  80cb70:	10800017 	ldw	r2,0(r2)
  80cb74:	103ee83a 	callr	r2
  80cb78:	e0bfff15 	stw	r2,-4(fp)
  80cb7c:	00000306 	br	80cb8c <alt_get_errno+0x48>
  80cb80:	00802274 	movhi	r2,137
  80cb84:	10ac3504 	addi	r2,r2,-20268
  80cb88:	e0bfff15 	stw	r2,-4(fp)
  80cb8c:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb90:	e037883a 	mov	sp,fp
  80cb94:	dfc00117 	ldw	ra,4(sp)
  80cb98:	df000017 	ldw	fp,0(sp)
  80cb9c:	dec00204 	addi	sp,sp,8
  80cba0:	f800283a 	ret

0080cba4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80cba4:	deffeb04 	addi	sp,sp,-84
  80cba8:	dfc01415 	stw	ra,80(sp)
  80cbac:	df001315 	stw	fp,76(sp)
  80cbb0:	df001304 	addi	fp,sp,76
  80cbb4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cbb8:	e0bffd17 	ldw	r2,-12(fp)
  80cbbc:	1004803a 	cmplt	r2,r2,zero
  80cbc0:	1000081e 	bne	r2,zero,80cbe4 <isatty+0x40>
  80cbc4:	e0bffd17 	ldw	r2,-12(fp)
  80cbc8:	10800324 	muli	r2,r2,12
  80cbcc:	1007883a 	mov	r3,r2
  80cbd0:	00802274 	movhi	r2,137
  80cbd4:	10a08004 	addi	r2,r2,-32256
  80cbd8:	1887883a 	add	r3,r3,r2
  80cbdc:	e0ffff15 	stw	r3,-4(fp)
  80cbe0:	00000106 	br	80cbe8 <isatty+0x44>
  80cbe4:	e03fff15 	stw	zero,-4(fp)
  80cbe8:	e0bfff17 	ldw	r2,-4(fp)
  80cbec:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80cbf0:	e0bfed17 	ldw	r2,-76(fp)
  80cbf4:	1005003a 	cmpeq	r2,r2,zero
  80cbf8:	10000f1e 	bne	r2,zero,80cc38 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80cbfc:	e0bfed17 	ldw	r2,-76(fp)
  80cc00:	10800017 	ldw	r2,0(r2)
  80cc04:	10800817 	ldw	r2,32(r2)
  80cc08:	1004c03a 	cmpne	r2,r2,zero
  80cc0c:	1000031e 	bne	r2,zero,80cc1c <isatty+0x78>
    {
      return 1;
  80cc10:	00800044 	movi	r2,1
  80cc14:	e0bffe15 	stw	r2,-8(fp)
  80cc18:	00000c06 	br	80cc4c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80cc1c:	e17fee04 	addi	r5,fp,-72
  80cc20:	e13ffd17 	ldw	r4,-12(fp)
  80cc24:	080ca700 	call	80ca70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80cc28:	e0bfef17 	ldw	r2,-68(fp)
  80cc2c:	10880020 	cmpeqi	r2,r2,8192
  80cc30:	e0bffe15 	stw	r2,-8(fp)
  80cc34:	00000506 	br	80cc4c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cc38:	080cc640 	call	80cc64 <alt_get_errno>
  80cc3c:	1007883a 	mov	r3,r2
  80cc40:	00801444 	movi	r2,81
  80cc44:	18800015 	stw	r2,0(r3)
    return 0;
  80cc48:	e03ffe15 	stw	zero,-8(fp)
  80cc4c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80cc50:	e037883a 	mov	sp,fp
  80cc54:	dfc00117 	ldw	ra,4(sp)
  80cc58:	df000017 	ldw	fp,0(sp)
  80cc5c:	dec00204 	addi	sp,sp,8
  80cc60:	f800283a 	ret

0080cc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cc64:	defffd04 	addi	sp,sp,-12
  80cc68:	dfc00215 	stw	ra,8(sp)
  80cc6c:	df000115 	stw	fp,4(sp)
  80cc70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cc74:	00802274 	movhi	r2,137
  80cc78:	10a50304 	addi	r2,r2,-27636
  80cc7c:	10800017 	ldw	r2,0(r2)
  80cc80:	1005003a 	cmpeq	r2,r2,zero
  80cc84:	1000061e 	bne	r2,zero,80cca0 <alt_get_errno+0x3c>
  80cc88:	00802274 	movhi	r2,137
  80cc8c:	10a50304 	addi	r2,r2,-27636
  80cc90:	10800017 	ldw	r2,0(r2)
  80cc94:	103ee83a 	callr	r2
  80cc98:	e0bfff15 	stw	r2,-4(fp)
  80cc9c:	00000306 	br	80ccac <alt_get_errno+0x48>
  80cca0:	00802274 	movhi	r2,137
  80cca4:	10ac3504 	addi	r2,r2,-20268
  80cca8:	e0bfff15 	stw	r2,-4(fp)
  80ccac:	e0bfff17 	ldw	r2,-4(fp)
}
  80ccb0:	e037883a 	mov	sp,fp
  80ccb4:	dfc00117 	ldw	ra,4(sp)
  80ccb8:	df000017 	ldw	fp,0(sp)
  80ccbc:	dec00204 	addi	sp,sp,8
  80ccc0:	f800283a 	ret

0080ccc4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ccc4:	defffe04 	addi	sp,sp,-8
  80ccc8:	dfc00115 	stw	ra,4(sp)
  80cccc:	df000015 	stw	fp,0(sp)
  80ccd0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ccd4:	01002274 	movhi	r4,137
  80ccd8:	21250804 	addi	r4,r4,-27616
  80ccdc:	01402234 	movhi	r5,136
  80cce0:	295de104 	addi	r5,r5,30596
  80cce4:	01802274 	movhi	r6,137
  80cce8:	31a50804 	addi	r6,r6,-27616
  80ccec:	080cd440 	call	80cd44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ccf0:	01002034 	movhi	r4,128
  80ccf4:	21000804 	addi	r4,r4,32
  80ccf8:	01402034 	movhi	r5,128
  80ccfc:	29400804 	addi	r5,r5,32
  80cd00:	01802034 	movhi	r6,128
  80cd04:	31806d04 	addi	r6,r6,436
  80cd08:	080cd440 	call	80cd44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80cd0c:	01002074 	movhi	r4,129
  80cd10:	213c9804 	addi	r4,r4,-3488
  80cd14:	01402074 	movhi	r5,129
  80cd18:	297c9804 	addi	r5,r5,-3488
  80cd1c:	01802234 	movhi	r6,136
  80cd20:	319de104 	addi	r6,r6,30596
  80cd24:	080cd440 	call	80cd44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80cd28:	080e0780 	call	80e078 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80cd2c:	080e2980 	call	80e298 <alt_icache_flush_all>
}
  80cd30:	e037883a 	mov	sp,fp
  80cd34:	dfc00117 	ldw	ra,4(sp)
  80cd38:	df000017 	ldw	fp,0(sp)
  80cd3c:	dec00204 	addi	sp,sp,8
  80cd40:	f800283a 	ret

0080cd44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80cd44:	defffc04 	addi	sp,sp,-16
  80cd48:	df000315 	stw	fp,12(sp)
  80cd4c:	df000304 	addi	fp,sp,12
  80cd50:	e13ffd15 	stw	r4,-12(fp)
  80cd54:	e17ffe15 	stw	r5,-8(fp)
  80cd58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80cd5c:	e0fffe17 	ldw	r3,-8(fp)
  80cd60:	e0bffd17 	ldw	r2,-12(fp)
  80cd64:	18800e26 	beq	r3,r2,80cda0 <alt_load_section+0x5c>
  {
    while( to != end )
  80cd68:	00000a06 	br	80cd94 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80cd6c:	e0bffd17 	ldw	r2,-12(fp)
  80cd70:	10c00017 	ldw	r3,0(r2)
  80cd74:	e0bffe17 	ldw	r2,-8(fp)
  80cd78:	10c00015 	stw	r3,0(r2)
  80cd7c:	e0bffe17 	ldw	r2,-8(fp)
  80cd80:	10800104 	addi	r2,r2,4
  80cd84:	e0bffe15 	stw	r2,-8(fp)
  80cd88:	e0bffd17 	ldw	r2,-12(fp)
  80cd8c:	10800104 	addi	r2,r2,4
  80cd90:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80cd94:	e0fffe17 	ldw	r3,-8(fp)
  80cd98:	e0bfff17 	ldw	r2,-4(fp)
  80cd9c:	18bff31e 	bne	r3,r2,80cd6c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80cda0:	e037883a 	mov	sp,fp
  80cda4:	df000017 	ldw	fp,0(sp)
  80cda8:	dec00104 	addi	sp,sp,4
  80cdac:	f800283a 	ret

0080cdb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80cdb0:	defff804 	addi	sp,sp,-32
  80cdb4:	dfc00715 	stw	ra,28(sp)
  80cdb8:	df000615 	stw	fp,24(sp)
  80cdbc:	df000604 	addi	fp,sp,24
  80cdc0:	e13ffc15 	stw	r4,-16(fp)
  80cdc4:	e17ffd15 	stw	r5,-12(fp)
  80cdc8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80cdcc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cdd0:	e0bffc17 	ldw	r2,-16(fp)
  80cdd4:	1004803a 	cmplt	r2,r2,zero
  80cdd8:	1000081e 	bne	r2,zero,80cdfc <lseek+0x4c>
  80cddc:	e0bffc17 	ldw	r2,-16(fp)
  80cde0:	10800324 	muli	r2,r2,12
  80cde4:	1007883a 	mov	r3,r2
  80cde8:	00802274 	movhi	r2,137
  80cdec:	10a08004 	addi	r2,r2,-32256
  80cdf0:	1887883a 	add	r3,r3,r2
  80cdf4:	e0ffff15 	stw	r3,-4(fp)
  80cdf8:	00000106 	br	80ce00 <lseek+0x50>
  80cdfc:	e03fff15 	stw	zero,-4(fp)
  80ce00:	e0bfff17 	ldw	r2,-4(fp)
  80ce04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ce08:	e0bffb17 	ldw	r2,-20(fp)
  80ce0c:	1005003a 	cmpeq	r2,r2,zero
  80ce10:	1000111e 	bne	r2,zero,80ce58 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ce14:	e0bffb17 	ldw	r2,-20(fp)
  80ce18:	10800017 	ldw	r2,0(r2)
  80ce1c:	10800717 	ldw	r2,28(r2)
  80ce20:	1005003a 	cmpeq	r2,r2,zero
  80ce24:	1000091e 	bne	r2,zero,80ce4c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ce28:	e0bffb17 	ldw	r2,-20(fp)
  80ce2c:	10800017 	ldw	r2,0(r2)
  80ce30:	10800717 	ldw	r2,28(r2)
  80ce34:	e13ffb17 	ldw	r4,-20(fp)
  80ce38:	e17ffd17 	ldw	r5,-12(fp)
  80ce3c:	e1bffe17 	ldw	r6,-8(fp)
  80ce40:	103ee83a 	callr	r2
  80ce44:	e0bffa15 	stw	r2,-24(fp)
  80ce48:	00000506 	br	80ce60 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ce4c:	00bfde84 	movi	r2,-134
  80ce50:	e0bffa15 	stw	r2,-24(fp)
  80ce54:	00000206 	br	80ce60 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ce58:	00bfebc4 	movi	r2,-81
  80ce5c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80ce60:	e0bffa17 	ldw	r2,-24(fp)
  80ce64:	1004403a 	cmpge	r2,r2,zero
  80ce68:	1000071e 	bne	r2,zero,80ce88 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ce6c:	080cea00 	call	80cea0 <alt_get_errno>
  80ce70:	1007883a 	mov	r3,r2
  80ce74:	e0bffa17 	ldw	r2,-24(fp)
  80ce78:	0085c83a 	sub	r2,zero,r2
  80ce7c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ce80:	00bfffc4 	movi	r2,-1
  80ce84:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ce88:	e0bffa17 	ldw	r2,-24(fp)
}
  80ce8c:	e037883a 	mov	sp,fp
  80ce90:	dfc00117 	ldw	ra,4(sp)
  80ce94:	df000017 	ldw	fp,0(sp)
  80ce98:	dec00204 	addi	sp,sp,8
  80ce9c:	f800283a 	ret

0080cea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cea0:	defffd04 	addi	sp,sp,-12
  80cea4:	dfc00215 	stw	ra,8(sp)
  80cea8:	df000115 	stw	fp,4(sp)
  80ceac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ceb0:	00802274 	movhi	r2,137
  80ceb4:	10a50304 	addi	r2,r2,-27636
  80ceb8:	10800017 	ldw	r2,0(r2)
  80cebc:	1005003a 	cmpeq	r2,r2,zero
  80cec0:	1000061e 	bne	r2,zero,80cedc <alt_get_errno+0x3c>
  80cec4:	00802274 	movhi	r2,137
  80cec8:	10a50304 	addi	r2,r2,-27636
  80cecc:	10800017 	ldw	r2,0(r2)
  80ced0:	103ee83a 	callr	r2
  80ced4:	e0bfff15 	stw	r2,-4(fp)
  80ced8:	00000306 	br	80cee8 <alt_get_errno+0x48>
  80cedc:	00802274 	movhi	r2,137
  80cee0:	10ac3504 	addi	r2,r2,-20268
  80cee4:	e0bfff15 	stw	r2,-4(fp)
  80cee8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ceec:	e037883a 	mov	sp,fp
  80cef0:	dfc00117 	ldw	ra,4(sp)
  80cef4:	df000017 	ldw	fp,0(sp)
  80cef8:	dec00204 	addi	sp,sp,8
  80cefc:	f800283a 	ret

0080cf00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cf00:	defffd04 	addi	sp,sp,-12
  80cf04:	dfc00215 	stw	ra,8(sp)
  80cf08:	df000115 	stw	fp,4(sp)
  80cf0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cf10:	0009883a 	mov	r4,zero
  80cf14:	080d3c80 	call	80d3c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cf18:	080d3fc0 	call	80d3fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cf1c:	01002234 	movhi	r4,136
  80cf20:	211dd704 	addi	r4,r4,30556
  80cf24:	01402234 	movhi	r5,136
  80cf28:	295dd704 	addi	r5,r5,30556
  80cf2c:	01802234 	movhi	r6,136
  80cf30:	319dd704 	addi	r6,r6,30556
  80cf34:	080e6580 	call	80e658 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80cf38:	080e1d00 	call	80e1d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80cf3c:	01002074 	movhi	r4,129
  80cf40:	21388d04 	addi	r4,r4,-7628
  80cf44:	080ee540 	call	80ee54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80cf48:	d1273e17 	ldw	r4,-25352(gp)
  80cf4c:	d1673f17 	ldw	r5,-25348(gp)
  80cf50:	d1a74017 	ldw	r6,-25344(gp)
  80cf54:	08002000 	call	800200 <main>
  80cf58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80cf5c:	01000044 	movi	r4,1
  80cf60:	080c8e80 	call	80c8e8 <close>
  exit (result);
  80cf64:	e13fff17 	ldw	r4,-4(fp)
  80cf68:	080ee680 	call	80ee68 <exit>

0080cf6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80cf6c:	defffe04 	addi	sp,sp,-8
  80cf70:	df000115 	stw	fp,4(sp)
  80cf74:	df000104 	addi	fp,sp,4
  80cf78:	e13fff15 	stw	r4,-4(fp)
}
  80cf7c:	e037883a 	mov	sp,fp
  80cf80:	df000017 	ldw	fp,0(sp)
  80cf84:	dec00104 	addi	sp,sp,4
  80cf88:	f800283a 	ret

0080cf8c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80cf8c:	defffe04 	addi	sp,sp,-8
  80cf90:	df000115 	stw	fp,4(sp)
  80cf94:	df000104 	addi	fp,sp,4
  80cf98:	e13fff15 	stw	r4,-4(fp)
}
  80cf9c:	e037883a 	mov	sp,fp
  80cfa0:	df000017 	ldw	fp,0(sp)
  80cfa4:	dec00104 	addi	sp,sp,4
  80cfa8:	f800283a 	ret

0080cfac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80cfac:	defff704 	addi	sp,sp,-36
  80cfb0:	dfc00815 	stw	ra,32(sp)
  80cfb4:	df000715 	stw	fp,28(sp)
  80cfb8:	df000704 	addi	fp,sp,28
  80cfbc:	e13ffb15 	stw	r4,-20(fp)
  80cfc0:	e17ffc15 	stw	r5,-16(fp)
  80cfc4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cfc8:	e0bffb17 	ldw	r2,-20(fp)
  80cfcc:	1004803a 	cmplt	r2,r2,zero
  80cfd0:	1000081e 	bne	r2,zero,80cff4 <read+0x48>
  80cfd4:	e0bffb17 	ldw	r2,-20(fp)
  80cfd8:	10800324 	muli	r2,r2,12
  80cfdc:	1007883a 	mov	r3,r2
  80cfe0:	00802274 	movhi	r2,137
  80cfe4:	10a08004 	addi	r2,r2,-32256
  80cfe8:	1887883a 	add	r3,r3,r2
  80cfec:	e0ffff15 	stw	r3,-4(fp)
  80cff0:	00000106 	br	80cff8 <read+0x4c>
  80cff4:	e03fff15 	stw	zero,-4(fp)
  80cff8:	e0bfff17 	ldw	r2,-4(fp)
  80cffc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80d000:	e0bffa17 	ldw	r2,-24(fp)
  80d004:	1005003a 	cmpeq	r2,r2,zero
  80d008:	1000241e 	bne	r2,zero,80d09c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d00c:	e0bffa17 	ldw	r2,-24(fp)
  80d010:	10800217 	ldw	r2,8(r2)
  80d014:	108000cc 	andi	r2,r2,3
  80d018:	10800060 	cmpeqi	r2,r2,1
  80d01c:	10001a1e 	bne	r2,zero,80d088 <read+0xdc>
  80d020:	e0bffa17 	ldw	r2,-24(fp)
  80d024:	10800017 	ldw	r2,0(r2)
  80d028:	10800517 	ldw	r2,20(r2)
  80d02c:	1005003a 	cmpeq	r2,r2,zero
  80d030:	1000151e 	bne	r2,zero,80d088 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80d034:	e0bffa17 	ldw	r2,-24(fp)
  80d038:	10800017 	ldw	r2,0(r2)
  80d03c:	10800517 	ldw	r2,20(r2)
  80d040:	e17ffc17 	ldw	r5,-16(fp)
  80d044:	e1bffd17 	ldw	r6,-12(fp)
  80d048:	e13ffa17 	ldw	r4,-24(fp)
  80d04c:	103ee83a 	callr	r2
  80d050:	e0bff915 	stw	r2,-28(fp)
  80d054:	e0bff917 	ldw	r2,-28(fp)
  80d058:	1004403a 	cmpge	r2,r2,zero
  80d05c:	1000071e 	bne	r2,zero,80d07c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80d060:	080d0cc0 	call	80d0cc <alt_get_errno>
  80d064:	e0fff917 	ldw	r3,-28(fp)
  80d068:	00c7c83a 	sub	r3,zero,r3
  80d06c:	10c00015 	stw	r3,0(r2)
          return -1;
  80d070:	00bfffc4 	movi	r2,-1
  80d074:	e0bffe15 	stw	r2,-8(fp)
  80d078:	00000e06 	br	80d0b4 <read+0x108>
        }
        return rval;
  80d07c:	e0bff917 	ldw	r2,-28(fp)
  80d080:	e0bffe15 	stw	r2,-8(fp)
  80d084:	00000b06 	br	80d0b4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80d088:	080d0cc0 	call	80d0cc <alt_get_errno>
  80d08c:	1007883a 	mov	r3,r2
  80d090:	00800344 	movi	r2,13
  80d094:	18800015 	stw	r2,0(r3)
  80d098:	00000406 	br	80d0ac <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80d09c:	080d0cc0 	call	80d0cc <alt_get_errno>
  80d0a0:	1007883a 	mov	r3,r2
  80d0a4:	00801444 	movi	r2,81
  80d0a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d0ac:	00bfffc4 	movi	r2,-1
  80d0b0:	e0bffe15 	stw	r2,-8(fp)
  80d0b4:	e0bffe17 	ldw	r2,-8(fp)
}
  80d0b8:	e037883a 	mov	sp,fp
  80d0bc:	dfc00117 	ldw	ra,4(sp)
  80d0c0:	df000017 	ldw	fp,0(sp)
  80d0c4:	dec00204 	addi	sp,sp,8
  80d0c8:	f800283a 	ret

0080d0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0cc:	defffd04 	addi	sp,sp,-12
  80d0d0:	dfc00215 	stw	ra,8(sp)
  80d0d4:	df000115 	stw	fp,4(sp)
  80d0d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d0dc:	00802274 	movhi	r2,137
  80d0e0:	10a50304 	addi	r2,r2,-27636
  80d0e4:	10800017 	ldw	r2,0(r2)
  80d0e8:	1005003a 	cmpeq	r2,r2,zero
  80d0ec:	1000061e 	bne	r2,zero,80d108 <alt_get_errno+0x3c>
  80d0f0:	00802274 	movhi	r2,137
  80d0f4:	10a50304 	addi	r2,r2,-27636
  80d0f8:	10800017 	ldw	r2,0(r2)
  80d0fc:	103ee83a 	callr	r2
  80d100:	e0bfff15 	stw	r2,-4(fp)
  80d104:	00000306 	br	80d114 <alt_get_errno+0x48>
  80d108:	00802274 	movhi	r2,137
  80d10c:	10ac3504 	addi	r2,r2,-20268
  80d110:	e0bfff15 	stw	r2,-4(fp)
  80d114:	e0bfff17 	ldw	r2,-4(fp)
}
  80d118:	e037883a 	mov	sp,fp
  80d11c:	dfc00117 	ldw	ra,4(sp)
  80d120:	df000017 	ldw	fp,0(sp)
  80d124:	dec00204 	addi	sp,sp,8
  80d128:	f800283a 	ret

0080d12c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d12c:	defffe04 	addi	sp,sp,-8
  80d130:	df000115 	stw	fp,4(sp)
  80d134:	df000104 	addi	fp,sp,4
  80d138:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80d13c:	e0bfff17 	ldw	r2,-4(fp)
  80d140:	108000d0 	cmplti	r2,r2,3
  80d144:	10000d1e 	bne	r2,zero,80d17c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d148:	e0bfff17 	ldw	r2,-4(fp)
  80d14c:	00c02274 	movhi	r3,137
  80d150:	18e08004 	addi	r3,r3,-32256
  80d154:	10800324 	muli	r2,r2,12
  80d158:	10c5883a 	add	r2,r2,r3
  80d15c:	10800204 	addi	r2,r2,8
  80d160:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d164:	e0bfff17 	ldw	r2,-4(fp)
  80d168:	00c02274 	movhi	r3,137
  80d16c:	18e08004 	addi	r3,r3,-32256
  80d170:	10800324 	muli	r2,r2,12
  80d174:	10c5883a 	add	r2,r2,r3
  80d178:	10000015 	stw	zero,0(r2)
  }
}
  80d17c:	e037883a 	mov	sp,fp
  80d180:	df000017 	ldw	fp,0(sp)
  80d184:	dec00104 	addi	sp,sp,4
  80d188:	f800283a 	ret

0080d18c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d18c:	defff804 	addi	sp,sp,-32
  80d190:	df000715 	stw	fp,28(sp)
  80d194:	df000704 	addi	fp,sp,28
  80d198:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d19c:	0005303a 	rdctl	r2,status
  80d1a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1a4:	e0fffb17 	ldw	r3,-20(fp)
  80d1a8:	00bfff84 	movi	r2,-2
  80d1ac:	1884703a 	and	r2,r3,r2
  80d1b0:	1001703a 	wrctl	status,r2
  
  return context;
  80d1b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d1b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d1bc:	d0a00c17 	ldw	r2,-32720(gp)
  80d1c0:	10c000c4 	addi	r3,r2,3
  80d1c4:	00bfff04 	movi	r2,-4
  80d1c8:	1884703a 	and	r2,r3,r2
  80d1cc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d1d0:	d0e00c17 	ldw	r3,-32720(gp)
  80d1d4:	e0bffe17 	ldw	r2,-8(fp)
  80d1d8:	1887883a 	add	r3,r3,r2
  80d1dc:	00804034 	movhi	r2,256
  80d1e0:	10800004 	addi	r2,r2,0
  80d1e4:	10c0072e 	bgeu	r2,r3,80d204 <sbrk+0x78>
  80d1e8:	e0bffd17 	ldw	r2,-12(fp)
  80d1ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1f0:	e0bffa17 	ldw	r2,-24(fp)
  80d1f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d1f8:	00bfffc4 	movi	r2,-1
  80d1fc:	e0bfff15 	stw	r2,-4(fp)
  80d200:	00000c06 	br	80d234 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80d204:	d0a00c17 	ldw	r2,-32720(gp)
  80d208:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80d20c:	d0e00c17 	ldw	r3,-32720(gp)
  80d210:	e0bffe17 	ldw	r2,-8(fp)
  80d214:	1885883a 	add	r2,r3,r2
  80d218:	d0a00c15 	stw	r2,-32720(gp)
  80d21c:	e0bffd17 	ldw	r2,-12(fp)
  80d220:	e0bff915 	stw	r2,-28(fp)
  80d224:	e0bff917 	ldw	r2,-28(fp)
  80d228:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d22c:	e0bffc17 	ldw	r2,-16(fp)
  80d230:	e0bfff15 	stw	r2,-4(fp)
  80d234:	e0bfff17 	ldw	r2,-4(fp)
} 
  80d238:	e037883a 	mov	sp,fp
  80d23c:	df000017 	ldw	fp,0(sp)
  80d240:	dec00104 	addi	sp,sp,4
  80d244:	f800283a 	ret

0080d248 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80d248:	defff704 	addi	sp,sp,-36
  80d24c:	dfc00815 	stw	ra,32(sp)
  80d250:	df000715 	stw	fp,28(sp)
  80d254:	df000704 	addi	fp,sp,28
  80d258:	e13ffb15 	stw	r4,-20(fp)
  80d25c:	e17ffc15 	stw	r5,-16(fp)
  80d260:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d264:	e0bffb17 	ldw	r2,-20(fp)
  80d268:	1004803a 	cmplt	r2,r2,zero
  80d26c:	1000081e 	bne	r2,zero,80d290 <write+0x48>
  80d270:	e0bffb17 	ldw	r2,-20(fp)
  80d274:	10800324 	muli	r2,r2,12
  80d278:	1007883a 	mov	r3,r2
  80d27c:	00802274 	movhi	r2,137
  80d280:	10a08004 	addi	r2,r2,-32256
  80d284:	1887883a 	add	r3,r3,r2
  80d288:	e0ffff15 	stw	r3,-4(fp)
  80d28c:	00000106 	br	80d294 <write+0x4c>
  80d290:	e03fff15 	stw	zero,-4(fp)
  80d294:	e0bfff17 	ldw	r2,-4(fp)
  80d298:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80d29c:	e0bffa17 	ldw	r2,-24(fp)
  80d2a0:	1005003a 	cmpeq	r2,r2,zero
  80d2a4:	1000241e 	bne	r2,zero,80d338 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d2a8:	e0bffa17 	ldw	r2,-24(fp)
  80d2ac:	10800217 	ldw	r2,8(r2)
  80d2b0:	108000cc 	andi	r2,r2,3
  80d2b4:	1005003a 	cmpeq	r2,r2,zero
  80d2b8:	10001a1e 	bne	r2,zero,80d324 <write+0xdc>
  80d2bc:	e0bffa17 	ldw	r2,-24(fp)
  80d2c0:	10800017 	ldw	r2,0(r2)
  80d2c4:	10800617 	ldw	r2,24(r2)
  80d2c8:	1005003a 	cmpeq	r2,r2,zero
  80d2cc:	1000151e 	bne	r2,zero,80d324 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d2d0:	e0bffa17 	ldw	r2,-24(fp)
  80d2d4:	10800017 	ldw	r2,0(r2)
  80d2d8:	10800617 	ldw	r2,24(r2)
  80d2dc:	e17ffc17 	ldw	r5,-16(fp)
  80d2e0:	e1bffd17 	ldw	r6,-12(fp)
  80d2e4:	e13ffa17 	ldw	r4,-24(fp)
  80d2e8:	103ee83a 	callr	r2
  80d2ec:	e0bff915 	stw	r2,-28(fp)
  80d2f0:	e0bff917 	ldw	r2,-28(fp)
  80d2f4:	1004403a 	cmpge	r2,r2,zero
  80d2f8:	1000071e 	bne	r2,zero,80d318 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80d2fc:	080d3680 	call	80d368 <alt_get_errno>
  80d300:	e0fff917 	ldw	r3,-28(fp)
  80d304:	00c7c83a 	sub	r3,zero,r3
  80d308:	10c00015 	stw	r3,0(r2)
        return -1;
  80d30c:	00bfffc4 	movi	r2,-1
  80d310:	e0bffe15 	stw	r2,-8(fp)
  80d314:	00000e06 	br	80d350 <write+0x108>
      }
      return rval;
  80d318:	e0bff917 	ldw	r2,-28(fp)
  80d31c:	e0bffe15 	stw	r2,-8(fp)
  80d320:	00000b06 	br	80d350 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d324:	080d3680 	call	80d368 <alt_get_errno>
  80d328:	1007883a 	mov	r3,r2
  80d32c:	00800344 	movi	r2,13
  80d330:	18800015 	stw	r2,0(r3)
  80d334:	00000406 	br	80d348 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d338:	080d3680 	call	80d368 <alt_get_errno>
  80d33c:	1007883a 	mov	r3,r2
  80d340:	00801444 	movi	r2,81
  80d344:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d348:	00bfffc4 	movi	r2,-1
  80d34c:	e0bffe15 	stw	r2,-8(fp)
  80d350:	e0bffe17 	ldw	r2,-8(fp)
}
  80d354:	e037883a 	mov	sp,fp
  80d358:	dfc00117 	ldw	ra,4(sp)
  80d35c:	df000017 	ldw	fp,0(sp)
  80d360:	dec00204 	addi	sp,sp,8
  80d364:	f800283a 	ret

0080d368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d368:	defffd04 	addi	sp,sp,-12
  80d36c:	dfc00215 	stw	ra,8(sp)
  80d370:	df000115 	stw	fp,4(sp)
  80d374:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d378:	00802274 	movhi	r2,137
  80d37c:	10a50304 	addi	r2,r2,-27636
  80d380:	10800017 	ldw	r2,0(r2)
  80d384:	1005003a 	cmpeq	r2,r2,zero
  80d388:	1000061e 	bne	r2,zero,80d3a4 <alt_get_errno+0x3c>
  80d38c:	00802274 	movhi	r2,137
  80d390:	10a50304 	addi	r2,r2,-27636
  80d394:	10800017 	ldw	r2,0(r2)
  80d398:	103ee83a 	callr	r2
  80d39c:	e0bfff15 	stw	r2,-4(fp)
  80d3a0:	00000306 	br	80d3b0 <alt_get_errno+0x48>
  80d3a4:	00802274 	movhi	r2,137
  80d3a8:	10ac3504 	addi	r2,r2,-20268
  80d3ac:	e0bfff15 	stw	r2,-4(fp)
  80d3b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d3b4:	e037883a 	mov	sp,fp
  80d3b8:	dfc00117 	ldw	ra,4(sp)
  80d3bc:	df000017 	ldw	fp,0(sp)
  80d3c0:	dec00204 	addi	sp,sp,8
  80d3c4:	f800283a 	ret

0080d3c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d3c8:	defffd04 	addi	sp,sp,-12
  80d3cc:	dfc00215 	stw	ra,8(sp)
  80d3d0:	df000115 	stw	fp,4(sp)
  80d3d4:	df000104 	addi	fp,sp,4
  80d3d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80d3dc:	080eb380 	call	80eb38 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d3e0:	00800044 	movi	r2,1
  80d3e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d3e8:	e037883a 	mov	sp,fp
  80d3ec:	dfc00117 	ldw	ra,4(sp)
  80d3f0:	df000017 	ldw	fp,0(sp)
  80d3f4:	dec00204 	addi	sp,sp,8
  80d3f8:	f800283a 	ret

0080d3fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d3fc:	defffe04 	addi	sp,sp,-8
  80d400:	dfc00115 	stw	ra,4(sp)
  80d404:	df000015 	stw	fp,0(sp)
  80d408:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d40c:	01002274 	movhi	r4,137
  80d410:	2120ea04 	addi	r4,r4,-31832
  80d414:	000b883a 	mov	r5,zero
  80d418:	000d883a 	mov	r6,zero
  80d41c:	080d5c00 	call	80d5c0 <altera_avalon_jtag_uart_init>
  80d420:	01002274 	movhi	r4,137
  80d424:	2120e004 	addi	r4,r4,-31872
  80d428:	080d4400 	call	80d440 <alt_dev_reg>
}
  80d42c:	e037883a 	mov	sp,fp
  80d430:	dfc00117 	ldw	ra,4(sp)
  80d434:	df000017 	ldw	fp,0(sp)
  80d438:	dec00204 	addi	sp,sp,8
  80d43c:	f800283a 	ret

0080d440 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d440:	defffd04 	addi	sp,sp,-12
  80d444:	dfc00215 	stw	ra,8(sp)
  80d448:	df000115 	stw	fp,4(sp)
  80d44c:	df000104 	addi	fp,sp,4
  80d450:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d454:	e13fff17 	ldw	r4,-4(fp)
  80d458:	01402274 	movhi	r5,137
  80d45c:	29650004 	addi	r5,r5,-27648
  80d460:	080e0bc0 	call	80e0bc <alt_dev_llist_insert>
}
  80d464:	e037883a 	mov	sp,fp
  80d468:	dfc00117 	ldw	ra,4(sp)
  80d46c:	df000017 	ldw	fp,0(sp)
  80d470:	dec00204 	addi	sp,sp,8
  80d474:	f800283a 	ret

0080d478 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d478:	defffa04 	addi	sp,sp,-24
  80d47c:	dfc00515 	stw	ra,20(sp)
  80d480:	df000415 	stw	fp,16(sp)
  80d484:	df000404 	addi	fp,sp,16
  80d488:	e13ffd15 	stw	r4,-12(fp)
  80d48c:	e17ffe15 	stw	r5,-8(fp)
  80d490:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d494:	e0bffd17 	ldw	r2,-12(fp)
  80d498:	10800017 	ldw	r2,0(r2)
  80d49c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d4a0:	e0bffc17 	ldw	r2,-16(fp)
  80d4a4:	11000a04 	addi	r4,r2,40
  80d4a8:	e0bffd17 	ldw	r2,-12(fp)
  80d4ac:	11c00217 	ldw	r7,8(r2)
  80d4b0:	e17ffe17 	ldw	r5,-8(fp)
  80d4b4:	e1bfff17 	ldw	r6,-4(fp)
  80d4b8:	080dac00 	call	80dac0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d4bc:	e037883a 	mov	sp,fp
  80d4c0:	dfc00117 	ldw	ra,4(sp)
  80d4c4:	df000017 	ldw	fp,0(sp)
  80d4c8:	dec00204 	addi	sp,sp,8
  80d4cc:	f800283a 	ret

0080d4d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d4d0:	defffa04 	addi	sp,sp,-24
  80d4d4:	dfc00515 	stw	ra,20(sp)
  80d4d8:	df000415 	stw	fp,16(sp)
  80d4dc:	df000404 	addi	fp,sp,16
  80d4e0:	e13ffd15 	stw	r4,-12(fp)
  80d4e4:	e17ffe15 	stw	r5,-8(fp)
  80d4e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d4ec:	e0bffd17 	ldw	r2,-12(fp)
  80d4f0:	10800017 	ldw	r2,0(r2)
  80d4f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d4f8:	e0bffc17 	ldw	r2,-16(fp)
  80d4fc:	11000a04 	addi	r4,r2,40
  80d500:	e0bffd17 	ldw	r2,-12(fp)
  80d504:	11c00217 	ldw	r7,8(r2)
  80d508:	e17ffe17 	ldw	r5,-8(fp)
  80d50c:	e1bfff17 	ldw	r6,-4(fp)
  80d510:	080dce40 	call	80dce4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d514:	e037883a 	mov	sp,fp
  80d518:	dfc00117 	ldw	ra,4(sp)
  80d51c:	df000017 	ldw	fp,0(sp)
  80d520:	dec00204 	addi	sp,sp,8
  80d524:	f800283a 	ret

0080d528 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80d528:	defffc04 	addi	sp,sp,-16
  80d52c:	dfc00315 	stw	ra,12(sp)
  80d530:	df000215 	stw	fp,8(sp)
  80d534:	df000204 	addi	fp,sp,8
  80d538:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d53c:	e0bfff17 	ldw	r2,-4(fp)
  80d540:	10800017 	ldw	r2,0(r2)
  80d544:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80d548:	e0bffe17 	ldw	r2,-8(fp)
  80d54c:	11000a04 	addi	r4,r2,40
  80d550:	e0bfff17 	ldw	r2,-4(fp)
  80d554:	11400217 	ldw	r5,8(r2)
  80d558:	080d9580 	call	80d958 <altera_avalon_jtag_uart_close>
}
  80d55c:	e037883a 	mov	sp,fp
  80d560:	dfc00117 	ldw	ra,4(sp)
  80d564:	df000017 	ldw	fp,0(sp)
  80d568:	dec00204 	addi	sp,sp,8
  80d56c:	f800283a 	ret

0080d570 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80d570:	defffa04 	addi	sp,sp,-24
  80d574:	dfc00515 	stw	ra,20(sp)
  80d578:	df000415 	stw	fp,16(sp)
  80d57c:	df000404 	addi	fp,sp,16
  80d580:	e13ffd15 	stw	r4,-12(fp)
  80d584:	e17ffe15 	stw	r5,-8(fp)
  80d588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80d58c:	e0bffd17 	ldw	r2,-12(fp)
  80d590:	10800017 	ldw	r2,0(r2)
  80d594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80d598:	e0bffc17 	ldw	r2,-16(fp)
  80d59c:	11000a04 	addi	r4,r2,40
  80d5a0:	e17ffe17 	ldw	r5,-8(fp)
  80d5a4:	e1bfff17 	ldw	r6,-4(fp)
  80d5a8:	080d9cc0 	call	80d9cc <altera_avalon_jtag_uart_ioctl>
}
  80d5ac:	e037883a 	mov	sp,fp
  80d5b0:	dfc00117 	ldw	ra,4(sp)
  80d5b4:	df000017 	ldw	fp,0(sp)
  80d5b8:	dec00204 	addi	sp,sp,8
  80d5bc:	f800283a 	ret

0080d5c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80d5c0:	defffa04 	addi	sp,sp,-24
  80d5c4:	dfc00515 	stw	ra,20(sp)
  80d5c8:	df000415 	stw	fp,16(sp)
  80d5cc:	df000404 	addi	fp,sp,16
  80d5d0:	e13ffd15 	stw	r4,-12(fp)
  80d5d4:	e17ffe15 	stw	r5,-8(fp)
  80d5d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d5dc:	e0fffd17 	ldw	r3,-12(fp)
  80d5e0:	00800044 	movi	r2,1
  80d5e4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80d5e8:	e0bffd17 	ldw	r2,-12(fp)
  80d5ec:	10800017 	ldw	r2,0(r2)
  80d5f0:	11000104 	addi	r4,r2,4
  80d5f4:	e0bffd17 	ldw	r2,-12(fp)
  80d5f8:	10800817 	ldw	r2,32(r2)
  80d5fc:	1007883a 	mov	r3,r2
  80d600:	2005883a 	mov	r2,r4
  80d604:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80d608:	e13ffe17 	ldw	r4,-8(fp)
  80d60c:	e17fff17 	ldw	r5,-4(fp)
  80d610:	d8000015 	stw	zero,0(sp)
  80d614:	01802074 	movhi	r6,129
  80d618:	31b5a004 	addi	r6,r6,-10624
  80d61c:	e1fffd17 	ldw	r7,-12(fp)
  80d620:	080e2c80 	call	80e2c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80d624:	e0bffd17 	ldw	r2,-12(fp)
  80d628:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80d62c:	e0bffd17 	ldw	r2,-12(fp)
  80d630:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d634:	00802274 	movhi	r2,137
  80d638:	10ac3a04 	addi	r2,r2,-20248
  80d63c:	10800017 	ldw	r2,0(r2)
  80d640:	100b883a 	mov	r5,r2
  80d644:	01802074 	movhi	r6,129
  80d648:	31b62a04 	addi	r6,r6,-10072
  80d64c:	e1fffd17 	ldw	r7,-12(fp)
  80d650:	080df240 	call	80df24 <alt_alarm_start>
  80d654:	1004403a 	cmpge	r2,r2,zero
  80d658:	1000041e 	bne	r2,zero,80d66c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80d65c:	e0fffd17 	ldw	r3,-12(fp)
  80d660:	00a00034 	movhi	r2,32768
  80d664:	10bfffc4 	addi	r2,r2,-1
  80d668:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d66c:	e037883a 	mov	sp,fp
  80d670:	dfc00117 	ldw	ra,4(sp)
  80d674:	df000017 	ldw	fp,0(sp)
  80d678:	dec00204 	addi	sp,sp,8
  80d67c:	f800283a 	ret

0080d680 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d680:	defff804 	addi	sp,sp,-32
  80d684:	df000715 	stw	fp,28(sp)
  80d688:	df000704 	addi	fp,sp,28
  80d68c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d690:	e0bfff17 	ldw	r2,-4(fp)
  80d694:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80d698:	e0bffe17 	ldw	r2,-8(fp)
  80d69c:	10800017 	ldw	r2,0(r2)
  80d6a0:	e0bffd15 	stw	r2,-12(fp)
  80d6a4:	00000006 	br	80d6a8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d6a8:	e0bffd17 	ldw	r2,-12(fp)
  80d6ac:	10800104 	addi	r2,r2,4
  80d6b0:	10800037 	ldwio	r2,0(r2)
  80d6b4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d6b8:	e0bffc17 	ldw	r2,-16(fp)
  80d6bc:	1080c00c 	andi	r2,r2,768
  80d6c0:	1005003a 	cmpeq	r2,r2,zero
  80d6c4:	1000741e 	bne	r2,zero,80d898 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d6c8:	e0bffc17 	ldw	r2,-16(fp)
  80d6cc:	1080400c 	andi	r2,r2,256
  80d6d0:	1005003a 	cmpeq	r2,r2,zero
  80d6d4:	1000351e 	bne	r2,zero,80d7ac <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d6d8:	00800074 	movhi	r2,1
  80d6dc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d6e0:	e0bffe17 	ldw	r2,-8(fp)
  80d6e4:	10800a17 	ldw	r2,40(r2)
  80d6e8:	10800044 	addi	r2,r2,1
  80d6ec:	1081ffcc 	andi	r2,r2,2047
  80d6f0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80d6f4:	e0bffe17 	ldw	r2,-8(fp)
  80d6f8:	10c00b17 	ldw	r3,44(r2)
  80d6fc:	e0bffa17 	ldw	r2,-24(fp)
  80d700:	18801626 	beq	r3,r2,80d75c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d704:	e0bffd17 	ldw	r2,-12(fp)
  80d708:	10800037 	ldwio	r2,0(r2)
  80d70c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d710:	e0bffb17 	ldw	r2,-20(fp)
  80d714:	10a0000c 	andi	r2,r2,32768
  80d718:	1005003a 	cmpeq	r2,r2,zero
  80d71c:	10000f1e 	bne	r2,zero,80d75c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d720:	e0bffe17 	ldw	r2,-8(fp)
  80d724:	10c00a17 	ldw	r3,40(r2)
  80d728:	e0bffb17 	ldw	r2,-20(fp)
  80d72c:	1009883a 	mov	r4,r2
  80d730:	e0bffe17 	ldw	r2,-8(fp)
  80d734:	1885883a 	add	r2,r3,r2
  80d738:	10800e04 	addi	r2,r2,56
  80d73c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d740:	e0bffe17 	ldw	r2,-8(fp)
  80d744:	10800a17 	ldw	r2,40(r2)
  80d748:	10800044 	addi	r2,r2,1
  80d74c:	10c1ffcc 	andi	r3,r2,2047
  80d750:	e0bffe17 	ldw	r2,-8(fp)
  80d754:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d758:	003fe106 	br	80d6e0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d75c:	e0bffb17 	ldw	r2,-20(fp)
  80d760:	10bfffec 	andhi	r2,r2,65535
  80d764:	1005003a 	cmpeq	r2,r2,zero
  80d768:	1000101e 	bne	r2,zero,80d7ac <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d76c:	e0bffe17 	ldw	r2,-8(fp)
  80d770:	10c00817 	ldw	r3,32(r2)
  80d774:	00bfff84 	movi	r2,-2
  80d778:	1886703a 	and	r3,r3,r2
  80d77c:	e0bffe17 	ldw	r2,-8(fp)
  80d780:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d784:	e0bffd17 	ldw	r2,-12(fp)
  80d788:	11000104 	addi	r4,r2,4
  80d78c:	e0bffe17 	ldw	r2,-8(fp)
  80d790:	10800817 	ldw	r2,32(r2)
  80d794:	1007883a 	mov	r3,r2
  80d798:	2005883a 	mov	r2,r4
  80d79c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d7a0:	e0bffd17 	ldw	r2,-12(fp)
  80d7a4:	10800104 	addi	r2,r2,4
  80d7a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d7ac:	e0bffc17 	ldw	r2,-16(fp)
  80d7b0:	1080800c 	andi	r2,r2,512
  80d7b4:	1005003a 	cmpeq	r2,r2,zero
  80d7b8:	103fbb1e 	bne	r2,zero,80d6a8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d7bc:	e0bffc17 	ldw	r2,-16(fp)
  80d7c0:	10bfffec 	andhi	r2,r2,65535
  80d7c4:	1004d43a 	srli	r2,r2,16
  80d7c8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d7cc:	00001506 	br	80d824 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d7d0:	e13ffd17 	ldw	r4,-12(fp)
  80d7d4:	e0bffe17 	ldw	r2,-8(fp)
  80d7d8:	10c00d17 	ldw	r3,52(r2)
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	1885883a 	add	r2,r3,r2
  80d7e4:	10820e04 	addi	r2,r2,2104
  80d7e8:	10800003 	ldbu	r2,0(r2)
  80d7ec:	10c03fcc 	andi	r3,r2,255
  80d7f0:	18c0201c 	xori	r3,r3,128
  80d7f4:	18ffe004 	addi	r3,r3,-128
  80d7f8:	2005883a 	mov	r2,r4
  80d7fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d800:	e0bffe17 	ldw	r2,-8(fp)
  80d804:	10800d17 	ldw	r2,52(r2)
  80d808:	10800044 	addi	r2,r2,1
  80d80c:	10c1ffcc 	andi	r3,r2,2047
  80d810:	e0bffe17 	ldw	r2,-8(fp)
  80d814:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d818:	e0bff917 	ldw	r2,-28(fp)
  80d81c:	10bfffc4 	addi	r2,r2,-1
  80d820:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d824:	e0bff917 	ldw	r2,-28(fp)
  80d828:	1005003a 	cmpeq	r2,r2,zero
  80d82c:	1000051e 	bne	r2,zero,80d844 <altera_avalon_jtag_uart_irq+0x1c4>
  80d830:	e0bffe17 	ldw	r2,-8(fp)
  80d834:	10c00d17 	ldw	r3,52(r2)
  80d838:	e0bffe17 	ldw	r2,-8(fp)
  80d83c:	10800c17 	ldw	r2,48(r2)
  80d840:	18bfe31e 	bne	r3,r2,80d7d0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d844:	e0bff917 	ldw	r2,-28(fp)
  80d848:	1005003a 	cmpeq	r2,r2,zero
  80d84c:	103f961e 	bne	r2,zero,80d6a8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d850:	e0bffe17 	ldw	r2,-8(fp)
  80d854:	10c00817 	ldw	r3,32(r2)
  80d858:	00bfff44 	movi	r2,-3
  80d85c:	1886703a 	and	r3,r3,r2
  80d860:	e0bffe17 	ldw	r2,-8(fp)
  80d864:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d868:	e0bffe17 	ldw	r2,-8(fp)
  80d86c:	10800017 	ldw	r2,0(r2)
  80d870:	11000104 	addi	r4,r2,4
  80d874:	e0bffe17 	ldw	r2,-8(fp)
  80d878:	10800817 	ldw	r2,32(r2)
  80d87c:	1007883a 	mov	r3,r2
  80d880:	2005883a 	mov	r2,r4
  80d884:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d888:	e0bffd17 	ldw	r2,-12(fp)
  80d88c:	10800104 	addi	r2,r2,4
  80d890:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d894:	003f8406 	br	80d6a8 <altera_avalon_jtag_uart_irq+0x28>
}
  80d898:	e037883a 	mov	sp,fp
  80d89c:	df000017 	ldw	fp,0(sp)
  80d8a0:	dec00104 	addi	sp,sp,4
  80d8a4:	f800283a 	ret

0080d8a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d8a8:	defffc04 	addi	sp,sp,-16
  80d8ac:	df000315 	stw	fp,12(sp)
  80d8b0:	df000304 	addi	fp,sp,12
  80d8b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d8b8:	e0bfff17 	ldw	r2,-4(fp)
  80d8bc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d8c0:	e0bffe17 	ldw	r2,-8(fp)
  80d8c4:	10800017 	ldw	r2,0(r2)
  80d8c8:	10800104 	addi	r2,r2,4
  80d8cc:	10800037 	ldwio	r2,0(r2)
  80d8d0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d8d4:	e0bffd17 	ldw	r2,-12(fp)
  80d8d8:	1081000c 	andi	r2,r2,1024
  80d8dc:	1005003a 	cmpeq	r2,r2,zero
  80d8e0:	10000c1e 	bne	r2,zero,80d914 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d8e4:	e0bffe17 	ldw	r2,-8(fp)
  80d8e8:	10800017 	ldw	r2,0(r2)
  80d8ec:	11000104 	addi	r4,r2,4
  80d8f0:	e0bffe17 	ldw	r2,-8(fp)
  80d8f4:	10800817 	ldw	r2,32(r2)
  80d8f8:	10810014 	ori	r2,r2,1024
  80d8fc:	1007883a 	mov	r3,r2
  80d900:	2005883a 	mov	r2,r4
  80d904:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80d908:	e0bffe17 	ldw	r2,-8(fp)
  80d90c:	10000915 	stw	zero,36(r2)
  80d910:	00000a06 	br	80d93c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d914:	e0bffe17 	ldw	r2,-8(fp)
  80d918:	10c00917 	ldw	r3,36(r2)
  80d91c:	00a00034 	movhi	r2,32768
  80d920:	10bfff04 	addi	r2,r2,-4
  80d924:	10c00536 	bltu	r2,r3,80d93c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80d928:	e0bffe17 	ldw	r2,-8(fp)
  80d92c:	10800917 	ldw	r2,36(r2)
  80d930:	10c00044 	addi	r3,r2,1
  80d934:	e0bffe17 	ldw	r2,-8(fp)
  80d938:	10c00915 	stw	r3,36(r2)
  80d93c:	00802274 	movhi	r2,137
  80d940:	10ac3a04 	addi	r2,r2,-20248
  80d944:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d948:	e037883a 	mov	sp,fp
  80d94c:	df000017 	ldw	fp,0(sp)
  80d950:	dec00104 	addi	sp,sp,4
  80d954:	f800283a 	ret

0080d958 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d958:	defffc04 	addi	sp,sp,-16
  80d95c:	df000315 	stw	fp,12(sp)
  80d960:	df000304 	addi	fp,sp,12
  80d964:	e13ffd15 	stw	r4,-12(fp)
  80d968:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d96c:	00000706 	br	80d98c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d970:	e0bffe17 	ldw	r2,-8(fp)
  80d974:	1090000c 	andi	r2,r2,16384
  80d978:	1005003a 	cmpeq	r2,r2,zero
  80d97c:	1000031e 	bne	r2,zero,80d98c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d980:	00bffd44 	movi	r2,-11
  80d984:	e0bfff15 	stw	r2,-4(fp)
  80d988:	00000b06 	br	80d9b8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d98c:	e0bffd17 	ldw	r2,-12(fp)
  80d990:	10c00d17 	ldw	r3,52(r2)
  80d994:	e0bffd17 	ldw	r2,-12(fp)
  80d998:	10800c17 	ldw	r2,48(r2)
  80d99c:	18800526 	beq	r3,r2,80d9b4 <altera_avalon_jtag_uart_close+0x5c>
  80d9a0:	e0bffd17 	ldw	r2,-12(fp)
  80d9a4:	10c00917 	ldw	r3,36(r2)
  80d9a8:	e0bffd17 	ldw	r2,-12(fp)
  80d9ac:	10800117 	ldw	r2,4(r2)
  80d9b0:	18bfef36 	bltu	r3,r2,80d970 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d9b4:	e03fff15 	stw	zero,-4(fp)
  80d9b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d9bc:	e037883a 	mov	sp,fp
  80d9c0:	df000017 	ldw	fp,0(sp)
  80d9c4:	dec00104 	addi	sp,sp,4
  80d9c8:	f800283a 	ret

0080d9cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d9cc:	defff804 	addi	sp,sp,-32
  80d9d0:	df000715 	stw	fp,28(sp)
  80d9d4:	df000704 	addi	fp,sp,28
  80d9d8:	e13ffb15 	stw	r4,-20(fp)
  80d9dc:	e17ffc15 	stw	r5,-16(fp)
  80d9e0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80d9e4:	00bff9c4 	movi	r2,-25
  80d9e8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80d9ec:	e0bffc17 	ldw	r2,-16(fp)
  80d9f0:	e0bfff15 	stw	r2,-4(fp)
  80d9f4:	e0ffff17 	ldw	r3,-4(fp)
  80d9f8:	189a8060 	cmpeqi	r2,r3,27137
  80d9fc:	1000041e 	bne	r2,zero,80da10 <altera_avalon_jtag_uart_ioctl+0x44>
  80da00:	e0ffff17 	ldw	r3,-4(fp)
  80da04:	189a80a0 	cmpeqi	r2,r3,27138
  80da08:	10001b1e 	bne	r2,zero,80da78 <altera_avalon_jtag_uart_ioctl+0xac>
  80da0c:	00002706 	br	80daac <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80da10:	e0bffb17 	ldw	r2,-20(fp)
  80da14:	10c00117 	ldw	r3,4(r2)
  80da18:	00a00034 	movhi	r2,32768
  80da1c:	10bfffc4 	addi	r2,r2,-1
  80da20:	18802226 	beq	r3,r2,80daac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80da24:	e0bffd17 	ldw	r2,-12(fp)
  80da28:	10800017 	ldw	r2,0(r2)
  80da2c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80da30:	e0bff917 	ldw	r2,-28(fp)
  80da34:	10800090 	cmplti	r2,r2,2
  80da38:	1000071e 	bne	r2,zero,80da58 <altera_avalon_jtag_uart_ioctl+0x8c>
  80da3c:	e0fff917 	ldw	r3,-28(fp)
  80da40:	00a00034 	movhi	r2,32768
  80da44:	10bfffc4 	addi	r2,r2,-1
  80da48:	18800326 	beq	r3,r2,80da58 <altera_avalon_jtag_uart_ioctl+0x8c>
  80da4c:	e0bff917 	ldw	r2,-28(fp)
  80da50:	e0bffe15 	stw	r2,-8(fp)
  80da54:	00000306 	br	80da64 <altera_avalon_jtag_uart_ioctl+0x98>
  80da58:	00e00034 	movhi	r3,32768
  80da5c:	18ffff84 	addi	r3,r3,-2
  80da60:	e0fffe15 	stw	r3,-8(fp)
  80da64:	e0bffb17 	ldw	r2,-20(fp)
  80da68:	e0fffe17 	ldw	r3,-8(fp)
  80da6c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80da70:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80da74:	00000d06 	br	80daac <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80da78:	e0bffb17 	ldw	r2,-20(fp)
  80da7c:	10c00117 	ldw	r3,4(r2)
  80da80:	00a00034 	movhi	r2,32768
  80da84:	10bfffc4 	addi	r2,r2,-1
  80da88:	18800826 	beq	r3,r2,80daac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80da8c:	e13ffd17 	ldw	r4,-12(fp)
  80da90:	e0bffb17 	ldw	r2,-20(fp)
  80da94:	10c00917 	ldw	r3,36(r2)
  80da98:	e0bffb17 	ldw	r2,-20(fp)
  80da9c:	10800117 	ldw	r2,4(r2)
  80daa0:	1885803a 	cmpltu	r2,r3,r2
  80daa4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80daa8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80daac:	e0bffa17 	ldw	r2,-24(fp)
}
  80dab0:	e037883a 	mov	sp,fp
  80dab4:	df000017 	ldw	fp,0(sp)
  80dab8:	dec00104 	addi	sp,sp,4
  80dabc:	f800283a 	ret

0080dac0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80dac0:	defff204 	addi	sp,sp,-56
  80dac4:	dfc00d15 	stw	ra,52(sp)
  80dac8:	df000c15 	stw	fp,48(sp)
  80dacc:	df000c04 	addi	fp,sp,48
  80dad0:	e13ffb15 	stw	r4,-20(fp)
  80dad4:	e17ffc15 	stw	r5,-16(fp)
  80dad8:	e1bffd15 	stw	r6,-12(fp)
  80dadc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80dae0:	e0bffc17 	ldw	r2,-16(fp)
  80dae4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80dae8:	00004806 	br	80dc0c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80daec:	e0bffb17 	ldw	r2,-20(fp)
  80daf0:	10800a17 	ldw	r2,40(r2)
  80daf4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80daf8:	e0bffb17 	ldw	r2,-20(fp)
  80dafc:	10800b17 	ldw	r2,44(r2)
  80db00:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80db04:	e0fff717 	ldw	r3,-36(fp)
  80db08:	e0bff617 	ldw	r2,-40(fp)
  80db0c:	18800536 	bltu	r3,r2,80db24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80db10:	e0bff717 	ldw	r2,-36(fp)
  80db14:	e0fff617 	ldw	r3,-40(fp)
  80db18:	10c5c83a 	sub	r2,r2,r3
  80db1c:	e0bff815 	stw	r2,-32(fp)
  80db20:	00000406 	br	80db34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80db24:	00820004 	movi	r2,2048
  80db28:	e0fff617 	ldw	r3,-40(fp)
  80db2c:	10c5c83a 	sub	r2,r2,r3
  80db30:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80db34:	e0bff817 	ldw	r2,-32(fp)
  80db38:	1005003a 	cmpeq	r2,r2,zero
  80db3c:	10001f1e 	bne	r2,zero,80dbbc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80db40:	e0fffd17 	ldw	r3,-12(fp)
  80db44:	e0bff817 	ldw	r2,-32(fp)
  80db48:	1880022e 	bgeu	r3,r2,80db54 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80db4c:	e0bffd17 	ldw	r2,-12(fp)
  80db50:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80db54:	e0bffb17 	ldw	r2,-20(fp)
  80db58:	10c00e04 	addi	r3,r2,56
  80db5c:	e0bff617 	ldw	r2,-40(fp)
  80db60:	1887883a 	add	r3,r3,r2
  80db64:	e0bffa17 	ldw	r2,-24(fp)
  80db68:	1009883a 	mov	r4,r2
  80db6c:	180b883a 	mov	r5,r3
  80db70:	e1bff817 	ldw	r6,-32(fp)
  80db74:	08098700 	call	809870 <memcpy>
      ptr   += n;
  80db78:	e0fff817 	ldw	r3,-32(fp)
  80db7c:	e0bffa17 	ldw	r2,-24(fp)
  80db80:	10c5883a 	add	r2,r2,r3
  80db84:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80db88:	e0fffd17 	ldw	r3,-12(fp)
  80db8c:	e0bff817 	ldw	r2,-32(fp)
  80db90:	1885c83a 	sub	r2,r3,r2
  80db94:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80db98:	e0fff617 	ldw	r3,-40(fp)
  80db9c:	e0bff817 	ldw	r2,-32(fp)
  80dba0:	1885883a 	add	r2,r3,r2
  80dba4:	10c1ffcc 	andi	r3,r2,2047
  80dba8:	e0bffb17 	ldw	r2,-20(fp)
  80dbac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80dbb0:	e0bffd17 	ldw	r2,-12(fp)
  80dbb4:	10800048 	cmpgei	r2,r2,1
  80dbb8:	103fcc1e 	bne	r2,zero,80daec <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80dbbc:	e0fffa17 	ldw	r3,-24(fp)
  80dbc0:	e0bffc17 	ldw	r2,-16(fp)
  80dbc4:	1880141e 	bne	r3,r2,80dc18 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80dbc8:	e0bffe17 	ldw	r2,-8(fp)
  80dbcc:	1090000c 	andi	r2,r2,16384
  80dbd0:	1004c03a 	cmpne	r2,r2,zero
  80dbd4:	1000101e 	bne	r2,zero,80dc18 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80dbd8:	e0bffb17 	ldw	r2,-20(fp)
  80dbdc:	10c00a17 	ldw	r3,40(r2)
  80dbe0:	e0bff717 	ldw	r2,-36(fp)
  80dbe4:	1880051e 	bne	r3,r2,80dbfc <altera_avalon_jtag_uart_read+0x13c>
  80dbe8:	e0bffb17 	ldw	r2,-20(fp)
  80dbec:	10c00917 	ldw	r3,36(r2)
  80dbf0:	e0bffb17 	ldw	r2,-20(fp)
  80dbf4:	10800117 	ldw	r2,4(r2)
  80dbf8:	18bff736 	bltu	r3,r2,80dbd8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80dbfc:	e0bffb17 	ldw	r2,-20(fp)
  80dc00:	10c00a17 	ldw	r3,40(r2)
  80dc04:	e0bff717 	ldw	r2,-36(fp)
  80dc08:	18800326 	beq	r3,r2,80dc18 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80dc0c:	e0bffd17 	ldw	r2,-12(fp)
  80dc10:	10800048 	cmpgei	r2,r2,1
  80dc14:	103fb51e 	bne	r2,zero,80daec <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80dc18:	e0fffa17 	ldw	r3,-24(fp)
  80dc1c:	e0bffc17 	ldw	r2,-16(fp)
  80dc20:	18801926 	beq	r3,r2,80dc88 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc24:	0005303a 	rdctl	r2,status
  80dc28:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc2c:	e0fff517 	ldw	r3,-44(fp)
  80dc30:	00bfff84 	movi	r2,-2
  80dc34:	1884703a 	and	r2,r3,r2
  80dc38:	1001703a 	wrctl	status,r2
  
  return context;
  80dc3c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80dc40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80dc44:	e0bffb17 	ldw	r2,-20(fp)
  80dc48:	10800817 	ldw	r2,32(r2)
  80dc4c:	10c00054 	ori	r3,r2,1
  80dc50:	e0bffb17 	ldw	r2,-20(fp)
  80dc54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dc58:	e0bffb17 	ldw	r2,-20(fp)
  80dc5c:	10800017 	ldw	r2,0(r2)
  80dc60:	11000104 	addi	r4,r2,4
  80dc64:	e0bffb17 	ldw	r2,-20(fp)
  80dc68:	10800817 	ldw	r2,32(r2)
  80dc6c:	1007883a 	mov	r3,r2
  80dc70:	2005883a 	mov	r2,r4
  80dc74:	10c00035 	stwio	r3,0(r2)
  80dc78:	e0bff917 	ldw	r2,-28(fp)
  80dc7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc80:	e0bff417 	ldw	r2,-48(fp)
  80dc84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80dc88:	e0fffa17 	ldw	r3,-24(fp)
  80dc8c:	e0bffc17 	ldw	r2,-16(fp)
  80dc90:	18800526 	beq	r3,r2,80dca8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80dc94:	e0fffa17 	ldw	r3,-24(fp)
  80dc98:	e0bffc17 	ldw	r2,-16(fp)
  80dc9c:	1887c83a 	sub	r3,r3,r2
  80dca0:	e0ffff15 	stw	r3,-4(fp)
  80dca4:	00000906 	br	80dccc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80dca8:	e0bffe17 	ldw	r2,-8(fp)
  80dcac:	1090000c 	andi	r2,r2,16384
  80dcb0:	1005003a 	cmpeq	r2,r2,zero
  80dcb4:	1000031e 	bne	r2,zero,80dcc4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80dcb8:	00bffd44 	movi	r2,-11
  80dcbc:	e0bfff15 	stw	r2,-4(fp)
  80dcc0:	00000206 	br	80dccc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80dcc4:	00bffec4 	movi	r2,-5
  80dcc8:	e0bfff15 	stw	r2,-4(fp)
  80dccc:	e0bfff17 	ldw	r2,-4(fp)
}
  80dcd0:	e037883a 	mov	sp,fp
  80dcd4:	dfc00117 	ldw	ra,4(sp)
  80dcd8:	df000017 	ldw	fp,0(sp)
  80dcdc:	dec00204 	addi	sp,sp,8
  80dce0:	f800283a 	ret

0080dce4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80dce4:	defff204 	addi	sp,sp,-56
  80dce8:	dfc00d15 	stw	ra,52(sp)
  80dcec:	df000c15 	stw	fp,48(sp)
  80dcf0:	df000c04 	addi	fp,sp,48
  80dcf4:	e13ffb15 	stw	r4,-20(fp)
  80dcf8:	e17ffc15 	stw	r5,-16(fp)
  80dcfc:	e1bffd15 	stw	r6,-12(fp)
  80dd00:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80dd04:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80dd08:	e0bffc17 	ldw	r2,-16(fp)
  80dd0c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80dd10:	00003a06 	br	80ddfc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80dd14:	e0bffb17 	ldw	r2,-20(fp)
  80dd18:	10800c17 	ldw	r2,48(r2)
  80dd1c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80dd20:	e0bffb17 	ldw	r2,-20(fp)
  80dd24:	10800d17 	ldw	r2,52(r2)
  80dd28:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80dd2c:	e0fffa17 	ldw	r3,-24(fp)
  80dd30:	e0bff917 	ldw	r2,-28(fp)
  80dd34:	1880062e 	bgeu	r3,r2,80dd50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80dd38:	e0fff917 	ldw	r3,-28(fp)
  80dd3c:	e0bffa17 	ldw	r2,-24(fp)
  80dd40:	1885c83a 	sub	r2,r3,r2
  80dd44:	10bfffc4 	addi	r2,r2,-1
  80dd48:	e0bff815 	stw	r2,-32(fp)
  80dd4c:	00000c06 	br	80dd80 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80dd50:	e0bff917 	ldw	r2,-28(fp)
  80dd54:	1005003a 	cmpeq	r2,r2,zero
  80dd58:	1000051e 	bne	r2,zero,80dd70 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80dd5c:	00820004 	movi	r2,2048
  80dd60:	e0fffa17 	ldw	r3,-24(fp)
  80dd64:	10c5c83a 	sub	r2,r2,r3
  80dd68:	e0bff815 	stw	r2,-32(fp)
  80dd6c:	00000406 	br	80dd80 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80dd70:	0081ffc4 	movi	r2,2047
  80dd74:	e0fffa17 	ldw	r3,-24(fp)
  80dd78:	10c5c83a 	sub	r2,r2,r3
  80dd7c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80dd80:	e0bff817 	ldw	r2,-32(fp)
  80dd84:	1005003a 	cmpeq	r2,r2,zero
  80dd88:	10001f1e 	bne	r2,zero,80de08 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80dd8c:	e0fffd17 	ldw	r3,-12(fp)
  80dd90:	e0bff817 	ldw	r2,-32(fp)
  80dd94:	1880022e 	bgeu	r3,r2,80dda0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80dd98:	e0bffd17 	ldw	r2,-12(fp)
  80dd9c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80dda0:	e0bffb17 	ldw	r2,-20(fp)
  80dda4:	10c20e04 	addi	r3,r2,2104
  80dda8:	e0bffa17 	ldw	r2,-24(fp)
  80ddac:	1885883a 	add	r2,r3,r2
  80ddb0:	e0fffc17 	ldw	r3,-16(fp)
  80ddb4:	1009883a 	mov	r4,r2
  80ddb8:	180b883a 	mov	r5,r3
  80ddbc:	e1bff817 	ldw	r6,-32(fp)
  80ddc0:	08098700 	call	809870 <memcpy>
      ptr   += n;
  80ddc4:	e0fff817 	ldw	r3,-32(fp)
  80ddc8:	e0bffc17 	ldw	r2,-16(fp)
  80ddcc:	10c5883a 	add	r2,r2,r3
  80ddd0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80ddd4:	e0fffd17 	ldw	r3,-12(fp)
  80ddd8:	e0bff817 	ldw	r2,-32(fp)
  80dddc:	1885c83a 	sub	r2,r3,r2
  80dde0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80dde4:	e0fffa17 	ldw	r3,-24(fp)
  80dde8:	e0bff817 	ldw	r2,-32(fp)
  80ddec:	1885883a 	add	r2,r3,r2
  80ddf0:	10c1ffcc 	andi	r3,r2,2047
  80ddf4:	e0bffb17 	ldw	r2,-20(fp)
  80ddf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ddfc:	e0bffd17 	ldw	r2,-12(fp)
  80de00:	10800048 	cmpgei	r2,r2,1
  80de04:	103fc31e 	bne	r2,zero,80dd14 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de08:	0005303a 	rdctl	r2,status
  80de0c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de10:	e0fff517 	ldw	r3,-44(fp)
  80de14:	00bfff84 	movi	r2,-2
  80de18:	1884703a 	and	r2,r3,r2
  80de1c:	1001703a 	wrctl	status,r2
  
  return context;
  80de20:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80de24:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80de28:	e0bffb17 	ldw	r2,-20(fp)
  80de2c:	10800817 	ldw	r2,32(r2)
  80de30:	10c00094 	ori	r3,r2,2
  80de34:	e0bffb17 	ldw	r2,-20(fp)
  80de38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80de3c:	e0bffb17 	ldw	r2,-20(fp)
  80de40:	10800017 	ldw	r2,0(r2)
  80de44:	11000104 	addi	r4,r2,4
  80de48:	e0bffb17 	ldw	r2,-20(fp)
  80de4c:	10800817 	ldw	r2,32(r2)
  80de50:	1007883a 	mov	r3,r2
  80de54:	2005883a 	mov	r2,r4
  80de58:	10c00035 	stwio	r3,0(r2)
  80de5c:	e0bff717 	ldw	r2,-36(fp)
  80de60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de64:	e0bff417 	ldw	r2,-48(fp)
  80de68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80de6c:	e0bffd17 	ldw	r2,-12(fp)
  80de70:	10800050 	cmplti	r2,r2,1
  80de74:	1000111e 	bne	r2,zero,80debc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80de78:	e0bffe17 	ldw	r2,-8(fp)
  80de7c:	1090000c 	andi	r2,r2,16384
  80de80:	1004c03a 	cmpne	r2,r2,zero
  80de84:	1000101e 	bne	r2,zero,80dec8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80de88:	e0bffb17 	ldw	r2,-20(fp)
  80de8c:	10c00d17 	ldw	r3,52(r2)
  80de90:	e0bff917 	ldw	r2,-28(fp)
  80de94:	1880051e 	bne	r3,r2,80deac <altera_avalon_jtag_uart_write+0x1c8>
  80de98:	e0bffb17 	ldw	r2,-20(fp)
  80de9c:	10c00917 	ldw	r3,36(r2)
  80dea0:	e0bffb17 	ldw	r2,-20(fp)
  80dea4:	10800117 	ldw	r2,4(r2)
  80dea8:	18bff736 	bltu	r3,r2,80de88 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80deac:	e0bffb17 	ldw	r2,-20(fp)
  80deb0:	10c00d17 	ldw	r3,52(r2)
  80deb4:	e0bff917 	ldw	r2,-28(fp)
  80deb8:	18800326 	beq	r3,r2,80dec8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80debc:	e0bffd17 	ldw	r2,-12(fp)
  80dec0:	10800048 	cmpgei	r2,r2,1
  80dec4:	103fcd1e 	bne	r2,zero,80ddfc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80dec8:	e0fffc17 	ldw	r3,-16(fp)
  80decc:	e0bff617 	ldw	r2,-40(fp)
  80ded0:	18800526 	beq	r3,r2,80dee8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80ded4:	e0fffc17 	ldw	r3,-16(fp)
  80ded8:	e0bff617 	ldw	r2,-40(fp)
  80dedc:	1887c83a 	sub	r3,r3,r2
  80dee0:	e0ffff15 	stw	r3,-4(fp)
  80dee4:	00000906 	br	80df0c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80dee8:	e0bffe17 	ldw	r2,-8(fp)
  80deec:	1090000c 	andi	r2,r2,16384
  80def0:	1005003a 	cmpeq	r2,r2,zero
  80def4:	1000031e 	bne	r2,zero,80df04 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80def8:	00bffd44 	movi	r2,-11
  80defc:	e0bfff15 	stw	r2,-4(fp)
  80df00:	00000206 	br	80df0c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80df04:	00bffec4 	movi	r2,-5
  80df08:	e0bfff15 	stw	r2,-4(fp)
  80df0c:	e0bfff17 	ldw	r2,-4(fp)
}
  80df10:	e037883a 	mov	sp,fp
  80df14:	dfc00117 	ldw	ra,4(sp)
  80df18:	df000017 	ldw	fp,0(sp)
  80df1c:	dec00204 	addi	sp,sp,8
  80df20:	f800283a 	ret

0080df24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80df24:	defff404 	addi	sp,sp,-48
  80df28:	df000b15 	stw	fp,44(sp)
  80df2c:	df000b04 	addi	fp,sp,44
  80df30:	e13ffb15 	stw	r4,-20(fp)
  80df34:	e17ffc15 	stw	r5,-16(fp)
  80df38:	e1bffd15 	stw	r6,-12(fp)
  80df3c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80df40:	e03ff915 	stw	zero,-28(fp)
  80df44:	00802274 	movhi	r2,137
  80df48:	10ac3a04 	addi	r2,r2,-20248
  80df4c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80df50:	1005003a 	cmpeq	r2,r2,zero
  80df54:	1000411e 	bne	r2,zero,80e05c <alt_alarm_start+0x138>
  {
    if (alarm)
  80df58:	e0bffb17 	ldw	r2,-20(fp)
  80df5c:	1005003a 	cmpeq	r2,r2,zero
  80df60:	10003b1e 	bne	r2,zero,80e050 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80df64:	e0fffb17 	ldw	r3,-20(fp)
  80df68:	e0bffd17 	ldw	r2,-12(fp)
  80df6c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80df70:	e0fffb17 	ldw	r3,-20(fp)
  80df74:	e0bffe17 	ldw	r2,-8(fp)
  80df78:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df7c:	0005303a 	rdctl	r2,status
  80df80:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df84:	e0fff817 	ldw	r3,-32(fp)
  80df88:	00bfff84 	movi	r2,-2
  80df8c:	1884703a 	and	r2,r3,r2
  80df90:	1001703a 	wrctl	status,r2
  
  return context;
  80df94:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80df98:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80df9c:	00802274 	movhi	r2,137
  80dfa0:	10ac3b04 	addi	r2,r2,-20244
  80dfa4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80dfa8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80dfac:	e0fffc17 	ldw	r3,-16(fp)
  80dfb0:	e0bff917 	ldw	r2,-28(fp)
  80dfb4:	1885883a 	add	r2,r3,r2
  80dfb8:	10c00044 	addi	r3,r2,1
  80dfbc:	e0bffb17 	ldw	r2,-20(fp)
  80dfc0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80dfc4:	e0bffb17 	ldw	r2,-20(fp)
  80dfc8:	10c00217 	ldw	r3,8(r2)
  80dfcc:	e0bff917 	ldw	r2,-28(fp)
  80dfd0:	1880042e 	bgeu	r3,r2,80dfe4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80dfd4:	e0fffb17 	ldw	r3,-20(fp)
  80dfd8:	00800044 	movi	r2,1
  80dfdc:	18800405 	stb	r2,16(r3)
  80dfe0:	00000206 	br	80dfec <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80dfe4:	e0bffb17 	ldw	r2,-20(fp)
  80dfe8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80dfec:	e0fffb17 	ldw	r3,-20(fp)
  80dff0:	00802274 	movhi	r2,137
  80dff4:	10a50604 	addi	r2,r2,-27624
  80dff8:	e0bff615 	stw	r2,-40(fp)
  80dffc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e000:	e0fff717 	ldw	r3,-36(fp)
  80e004:	e0bff617 	ldw	r2,-40(fp)
  80e008:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80e00c:	e0bff617 	ldw	r2,-40(fp)
  80e010:	10c00017 	ldw	r3,0(r2)
  80e014:	e0bff717 	ldw	r2,-36(fp)
  80e018:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e01c:	e0bff617 	ldw	r2,-40(fp)
  80e020:	10c00017 	ldw	r3,0(r2)
  80e024:	e0bff717 	ldw	r2,-36(fp)
  80e028:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80e02c:	e0fff617 	ldw	r3,-40(fp)
  80e030:	e0bff717 	ldw	r2,-36(fp)
  80e034:	18800015 	stw	r2,0(r3)
  80e038:	e0bffa17 	ldw	r2,-24(fp)
  80e03c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e040:	e0bff517 	ldw	r2,-44(fp)
  80e044:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80e048:	e03fff15 	stw	zero,-4(fp)
  80e04c:	00000506 	br	80e064 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80e050:	00bffa84 	movi	r2,-22
  80e054:	e0bfff15 	stw	r2,-4(fp)
  80e058:	00000206 	br	80e064 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80e05c:	00bfde84 	movi	r2,-134
  80e060:	e0bfff15 	stw	r2,-4(fp)
  80e064:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80e068:	e037883a 	mov	sp,fp
  80e06c:	df000017 	ldw	fp,0(sp)
  80e070:	dec00104 	addi	sp,sp,4
  80e074:	f800283a 	ret

0080e078 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80e078:	defffe04 	addi	sp,sp,-8
  80e07c:	df000115 	stw	fp,4(sp)
  80e080:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e084:	e03fff15 	stw	zero,-4(fp)
  80e088:	00000506 	br	80e0a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80e08c:	e0bfff17 	ldw	r2,-4(fp)
  80e090:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e094:	e0bfff17 	ldw	r2,-4(fp)
  80e098:	10800804 	addi	r2,r2,32
  80e09c:	e0bfff15 	stw	r2,-4(fp)
  80e0a0:	e0bfff17 	ldw	r2,-4(fp)
  80e0a4:	10820030 	cmpltui	r2,r2,2048
  80e0a8:	103ff81e 	bne	r2,zero,80e08c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80e0ac:	e037883a 	mov	sp,fp
  80e0b0:	df000017 	ldw	fp,0(sp)
  80e0b4:	dec00104 	addi	sp,sp,4
  80e0b8:	f800283a 	ret

0080e0bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e0bc:	defff904 	addi	sp,sp,-28
  80e0c0:	dfc00615 	stw	ra,24(sp)
  80e0c4:	df000515 	stw	fp,20(sp)
  80e0c8:	df000504 	addi	fp,sp,20
  80e0cc:	e13ffd15 	stw	r4,-12(fp)
  80e0d0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e0d4:	e0bffd17 	ldw	r2,-12(fp)
  80e0d8:	1005003a 	cmpeq	r2,r2,zero
  80e0dc:	1000041e 	bne	r2,zero,80e0f0 <alt_dev_llist_insert+0x34>
  80e0e0:	e0bffd17 	ldw	r2,-12(fp)
  80e0e4:	10800217 	ldw	r2,8(r2)
  80e0e8:	1004c03a 	cmpne	r2,r2,zero
  80e0ec:	1000071e 	bne	r2,zero,80e10c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80e0f0:	080e1700 	call	80e170 <alt_get_errno>
  80e0f4:	1007883a 	mov	r3,r2
  80e0f8:	00800584 	movi	r2,22
  80e0fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e100:	00bffa84 	movi	r2,-22
  80e104:	e0bfff15 	stw	r2,-4(fp)
  80e108:	00001306 	br	80e158 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e10c:	e0fffd17 	ldw	r3,-12(fp)
  80e110:	e0bffe17 	ldw	r2,-8(fp)
  80e114:	e0bffb15 	stw	r2,-20(fp)
  80e118:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e11c:	e0fffc17 	ldw	r3,-16(fp)
  80e120:	e0bffb17 	ldw	r2,-20(fp)
  80e124:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80e128:	e0bffb17 	ldw	r2,-20(fp)
  80e12c:	10c00017 	ldw	r3,0(r2)
  80e130:	e0bffc17 	ldw	r2,-16(fp)
  80e134:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e138:	e0bffb17 	ldw	r2,-20(fp)
  80e13c:	10c00017 	ldw	r3,0(r2)
  80e140:	e0bffc17 	ldw	r2,-16(fp)
  80e144:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80e148:	e0fffb17 	ldw	r3,-20(fp)
  80e14c:	e0bffc17 	ldw	r2,-16(fp)
  80e150:	18800015 	stw	r2,0(r3)

  return 0;  
  80e154:	e03fff15 	stw	zero,-4(fp)
  80e158:	e0bfff17 	ldw	r2,-4(fp)
}
  80e15c:	e037883a 	mov	sp,fp
  80e160:	dfc00117 	ldw	ra,4(sp)
  80e164:	df000017 	ldw	fp,0(sp)
  80e168:	dec00204 	addi	sp,sp,8
  80e16c:	f800283a 	ret

0080e170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e170:	defffd04 	addi	sp,sp,-12
  80e174:	dfc00215 	stw	ra,8(sp)
  80e178:	df000115 	stw	fp,4(sp)
  80e17c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e180:	00802274 	movhi	r2,137
  80e184:	10a50304 	addi	r2,r2,-27636
  80e188:	10800017 	ldw	r2,0(r2)
  80e18c:	1005003a 	cmpeq	r2,r2,zero
  80e190:	1000061e 	bne	r2,zero,80e1ac <alt_get_errno+0x3c>
  80e194:	00802274 	movhi	r2,137
  80e198:	10a50304 	addi	r2,r2,-27636
  80e19c:	10800017 	ldw	r2,0(r2)
  80e1a0:	103ee83a 	callr	r2
  80e1a4:	e0bfff15 	stw	r2,-4(fp)
  80e1a8:	00000306 	br	80e1b8 <alt_get_errno+0x48>
  80e1ac:	00802274 	movhi	r2,137
  80e1b0:	10ac3504 	addi	r2,r2,-20268
  80e1b4:	e0bfff15 	stw	r2,-4(fp)
  80e1b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80e1bc:	e037883a 	mov	sp,fp
  80e1c0:	dfc00117 	ldw	ra,4(sp)
  80e1c4:	df000017 	ldw	fp,0(sp)
  80e1c8:	dec00204 	addi	sp,sp,8
  80e1cc:	f800283a 	ret

0080e1d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80e1d0:	defffd04 	addi	sp,sp,-12
  80e1d4:	dfc00215 	stw	ra,8(sp)
  80e1d8:	df000115 	stw	fp,4(sp)
  80e1dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e1e0:	00bfff04 	movi	r2,-4
  80e1e4:	00c02074 	movhi	r3,129
  80e1e8:	18fc9804 	addi	r3,r3,-3488
  80e1ec:	1885883a 	add	r2,r3,r2
  80e1f0:	e0bfff15 	stw	r2,-4(fp)
  80e1f4:	00000606 	br	80e210 <_do_ctors+0x40>
        (*ctor) (); 
  80e1f8:	e0bfff17 	ldw	r2,-4(fp)
  80e1fc:	10800017 	ldw	r2,0(r2)
  80e200:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e204:	e0bfff17 	ldw	r2,-4(fp)
  80e208:	10bfff04 	addi	r2,r2,-4
  80e20c:	e0bfff15 	stw	r2,-4(fp)
  80e210:	e0ffff17 	ldw	r3,-4(fp)
  80e214:	00802074 	movhi	r2,129
  80e218:	10bc9704 	addi	r2,r2,-3492
  80e21c:	18bff62e 	bgeu	r3,r2,80e1f8 <_do_ctors+0x28>
        (*ctor) (); 
}
  80e220:	e037883a 	mov	sp,fp
  80e224:	dfc00117 	ldw	ra,4(sp)
  80e228:	df000017 	ldw	fp,0(sp)
  80e22c:	dec00204 	addi	sp,sp,8
  80e230:	f800283a 	ret

0080e234 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80e234:	defffd04 	addi	sp,sp,-12
  80e238:	dfc00215 	stw	ra,8(sp)
  80e23c:	df000115 	stw	fp,4(sp)
  80e240:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e244:	00bfff04 	movi	r2,-4
  80e248:	00c02074 	movhi	r3,129
  80e24c:	18fc9804 	addi	r3,r3,-3488
  80e250:	1885883a 	add	r2,r3,r2
  80e254:	e0bfff15 	stw	r2,-4(fp)
  80e258:	00000606 	br	80e274 <_do_dtors+0x40>
        (*dtor) (); 
  80e25c:	e0bfff17 	ldw	r2,-4(fp)
  80e260:	10800017 	ldw	r2,0(r2)
  80e264:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e268:	e0bfff17 	ldw	r2,-4(fp)
  80e26c:	10bfff04 	addi	r2,r2,-4
  80e270:	e0bfff15 	stw	r2,-4(fp)
  80e274:	e0ffff17 	ldw	r3,-4(fp)
  80e278:	00802074 	movhi	r2,129
  80e27c:	10bc9804 	addi	r2,r2,-3488
  80e280:	18bff62e 	bgeu	r3,r2,80e25c <_do_dtors+0x28>
        (*dtor) (); 
}
  80e284:	e037883a 	mov	sp,fp
  80e288:	dfc00117 	ldw	ra,4(sp)
  80e28c:	df000017 	ldw	fp,0(sp)
  80e290:	dec00204 	addi	sp,sp,8
  80e294:	f800283a 	ret

0080e298 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80e298:	defffe04 	addi	sp,sp,-8
  80e29c:	dfc00115 	stw	ra,4(sp)
  80e2a0:	df000015 	stw	fp,0(sp)
  80e2a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80e2a8:	0009883a 	mov	r4,zero
  80e2ac:	01440004 	movi	r5,4096
  80e2b0:	080edc40 	call	80edc4 <alt_icache_flush>
#endif
}
  80e2b4:	e037883a 	mov	sp,fp
  80e2b8:	dfc00117 	ldw	ra,4(sp)
  80e2bc:	df000017 	ldw	fp,0(sp)
  80e2c0:	dec00204 	addi	sp,sp,8
  80e2c4:	f800283a 	ret

0080e2c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e2c8:	defff904 	addi	sp,sp,-28
  80e2cc:	dfc00615 	stw	ra,24(sp)
  80e2d0:	df000515 	stw	fp,20(sp)
  80e2d4:	df000504 	addi	fp,sp,20
  80e2d8:	e13ffc15 	stw	r4,-16(fp)
  80e2dc:	e17ffd15 	stw	r5,-12(fp)
  80e2e0:	e1bffe15 	stw	r6,-8(fp)
  80e2e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e2e8:	e0800217 	ldw	r2,8(fp)
  80e2ec:	d8800015 	stw	r2,0(sp)
  80e2f0:	e13ffc17 	ldw	r4,-16(fp)
  80e2f4:	e17ffd17 	ldw	r5,-12(fp)
  80e2f8:	e1bffe17 	ldw	r6,-8(fp)
  80e2fc:	e1ffff17 	ldw	r7,-4(fp)
  80e300:	080e49c0 	call	80e49c <alt_iic_isr_register>
}  
  80e304:	e037883a 	mov	sp,fp
  80e308:	dfc00117 	ldw	ra,4(sp)
  80e30c:	df000017 	ldw	fp,0(sp)
  80e310:	dec00204 	addi	sp,sp,8
  80e314:	f800283a 	ret

0080e318 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e318:	defff904 	addi	sp,sp,-28
  80e31c:	df000615 	stw	fp,24(sp)
  80e320:	df000604 	addi	fp,sp,24
  80e324:	e13ffe15 	stw	r4,-8(fp)
  80e328:	e17fff15 	stw	r5,-4(fp)
  80e32c:	e0bfff17 	ldw	r2,-4(fp)
  80e330:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e334:	0005303a 	rdctl	r2,status
  80e338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e33c:	e0fffb17 	ldw	r3,-20(fp)
  80e340:	00bfff84 	movi	r2,-2
  80e344:	1884703a 	and	r2,r3,r2
  80e348:	1001703a 	wrctl	status,r2
  
  return context;
  80e34c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e350:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80e354:	e0fffc17 	ldw	r3,-16(fp)
  80e358:	00800044 	movi	r2,1
  80e35c:	10c4983a 	sll	r2,r2,r3
  80e360:	1007883a 	mov	r3,r2
  80e364:	00802274 	movhi	r2,137
  80e368:	10ac3904 	addi	r2,r2,-20252
  80e36c:	10800017 	ldw	r2,0(r2)
  80e370:	1886b03a 	or	r3,r3,r2
  80e374:	00802274 	movhi	r2,137
  80e378:	10ac3904 	addi	r2,r2,-20252
  80e37c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e380:	00802274 	movhi	r2,137
  80e384:	10ac3904 	addi	r2,r2,-20252
  80e388:	10800017 	ldw	r2,0(r2)
  80e38c:	100170fa 	wrctl	ienable,r2
  80e390:	e0bffd17 	ldw	r2,-12(fp)
  80e394:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e398:	e0bffa17 	ldw	r2,-24(fp)
  80e39c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e3a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80e3a4:	e037883a 	mov	sp,fp
  80e3a8:	df000017 	ldw	fp,0(sp)
  80e3ac:	dec00104 	addi	sp,sp,4
  80e3b0:	f800283a 	ret

0080e3b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e3b4:	defff904 	addi	sp,sp,-28
  80e3b8:	df000615 	stw	fp,24(sp)
  80e3bc:	df000604 	addi	fp,sp,24
  80e3c0:	e13ffe15 	stw	r4,-8(fp)
  80e3c4:	e17fff15 	stw	r5,-4(fp)
  80e3c8:	e0bfff17 	ldw	r2,-4(fp)
  80e3cc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3d0:	0005303a 	rdctl	r2,status
  80e3d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3d8:	e0fffb17 	ldw	r3,-20(fp)
  80e3dc:	00bfff84 	movi	r2,-2
  80e3e0:	1884703a 	and	r2,r3,r2
  80e3e4:	1001703a 	wrctl	status,r2
  
  return context;
  80e3e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e3ec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80e3f0:	e0fffc17 	ldw	r3,-16(fp)
  80e3f4:	00800044 	movi	r2,1
  80e3f8:	10c4983a 	sll	r2,r2,r3
  80e3fc:	0084303a 	nor	r2,zero,r2
  80e400:	1007883a 	mov	r3,r2
  80e404:	00802274 	movhi	r2,137
  80e408:	10ac3904 	addi	r2,r2,-20252
  80e40c:	10800017 	ldw	r2,0(r2)
  80e410:	1886703a 	and	r3,r3,r2
  80e414:	00802274 	movhi	r2,137
  80e418:	10ac3904 	addi	r2,r2,-20252
  80e41c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e420:	00802274 	movhi	r2,137
  80e424:	10ac3904 	addi	r2,r2,-20252
  80e428:	10800017 	ldw	r2,0(r2)
  80e42c:	100170fa 	wrctl	ienable,r2
  80e430:	e0bffd17 	ldw	r2,-12(fp)
  80e434:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e438:	e0bffa17 	ldw	r2,-24(fp)
  80e43c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e440:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80e444:	e037883a 	mov	sp,fp
  80e448:	df000017 	ldw	fp,0(sp)
  80e44c:	dec00104 	addi	sp,sp,4
  80e450:	f800283a 	ret

0080e454 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e454:	defffc04 	addi	sp,sp,-16
  80e458:	df000315 	stw	fp,12(sp)
  80e45c:	df000304 	addi	fp,sp,12
  80e460:	e13ffe15 	stw	r4,-8(fp)
  80e464:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e468:	000530fa 	rdctl	r2,ienable
  80e46c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e470:	e0ffff17 	ldw	r3,-4(fp)
  80e474:	00800044 	movi	r2,1
  80e478:	10c4983a 	sll	r2,r2,r3
  80e47c:	1007883a 	mov	r3,r2
  80e480:	e0bffd17 	ldw	r2,-12(fp)
  80e484:	1884703a 	and	r2,r3,r2
  80e488:	1004c03a 	cmpne	r2,r2,zero
}
  80e48c:	e037883a 	mov	sp,fp
  80e490:	df000017 	ldw	fp,0(sp)
  80e494:	dec00104 	addi	sp,sp,4
  80e498:	f800283a 	ret

0080e49c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e49c:	defff404 	addi	sp,sp,-48
  80e4a0:	dfc00b15 	stw	ra,44(sp)
  80e4a4:	df000a15 	stw	fp,40(sp)
  80e4a8:	df000a04 	addi	fp,sp,40
  80e4ac:	e13ffb15 	stw	r4,-20(fp)
  80e4b0:	e17ffc15 	stw	r5,-16(fp)
  80e4b4:	e1bffd15 	stw	r6,-12(fp)
  80e4b8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80e4bc:	00bffa84 	movi	r2,-22
  80e4c0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e4c4:	e0bffc17 	ldw	r2,-16(fp)
  80e4c8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e4cc:	e0bff917 	ldw	r2,-28(fp)
  80e4d0:	10800808 	cmpgei	r2,r2,32
  80e4d4:	1000291e 	bne	r2,zero,80e57c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e4d8:	0005303a 	rdctl	r2,status
  80e4dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e4e0:	e0fff717 	ldw	r3,-36(fp)
  80e4e4:	00bfff84 	movi	r2,-2
  80e4e8:	1884703a 	and	r2,r3,r2
  80e4ec:	1001703a 	wrctl	status,r2
  
  return context;
  80e4f0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e4f4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80e4f8:	e0bff917 	ldw	r2,-28(fp)
  80e4fc:	00c022b4 	movhi	r3,138
  80e500:	18e7a604 	addi	r3,r3,-24936
  80e504:	100490fa 	slli	r2,r2,3
  80e508:	10c7883a 	add	r3,r2,r3
  80e50c:	e0bffd17 	ldw	r2,-12(fp)
  80e510:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80e514:	e0bff917 	ldw	r2,-28(fp)
  80e518:	00c022b4 	movhi	r3,138
  80e51c:	18e7a604 	addi	r3,r3,-24936
  80e520:	100490fa 	slli	r2,r2,3
  80e524:	10c5883a 	add	r2,r2,r3
  80e528:	10c00104 	addi	r3,r2,4
  80e52c:	e0bffe17 	ldw	r2,-8(fp)
  80e530:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e534:	e0bffd17 	ldw	r2,-12(fp)
  80e538:	1005003a 	cmpeq	r2,r2,zero
  80e53c:	1000051e 	bne	r2,zero,80e554 <alt_iic_isr_register+0xb8>
  80e540:	e17ff917 	ldw	r5,-28(fp)
  80e544:	e13ffb17 	ldw	r4,-20(fp)
  80e548:	080e3180 	call	80e318 <alt_ic_irq_enable>
  80e54c:	e0bfff15 	stw	r2,-4(fp)
  80e550:	00000406 	br	80e564 <alt_iic_isr_register+0xc8>
  80e554:	e17ff917 	ldw	r5,-28(fp)
  80e558:	e13ffb17 	ldw	r4,-20(fp)
  80e55c:	080e3b40 	call	80e3b4 <alt_ic_irq_disable>
  80e560:	e0bfff15 	stw	r2,-4(fp)
  80e564:	e0bfff17 	ldw	r2,-4(fp)
  80e568:	e0bffa15 	stw	r2,-24(fp)
  80e56c:	e0bff817 	ldw	r2,-32(fp)
  80e570:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e574:	e0bff617 	ldw	r2,-40(fp)
  80e578:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e57c:	e0bffa17 	ldw	r2,-24(fp)
}
  80e580:	e037883a 	mov	sp,fp
  80e584:	dfc00117 	ldw	ra,4(sp)
  80e588:	df000017 	ldw	fp,0(sp)
  80e58c:	dec00204 	addi	sp,sp,8
  80e590:	f800283a 	ret

0080e594 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e594:	defff904 	addi	sp,sp,-28
  80e598:	dfc00615 	stw	ra,24(sp)
  80e59c:	df000515 	stw	fp,20(sp)
  80e5a0:	df000504 	addi	fp,sp,20
  80e5a4:	e13ffc15 	stw	r4,-16(fp)
  80e5a8:	e17ffd15 	stw	r5,-12(fp)
  80e5ac:	e1bffe15 	stw	r6,-8(fp)
  80e5b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80e5b4:	e13ffd17 	ldw	r4,-12(fp)
  80e5b8:	e17ffe17 	ldw	r5,-8(fp)
  80e5bc:	e1bfff17 	ldw	r6,-4(fp)
  80e5c0:	080e7ac0 	call	80e7ac <open>
  80e5c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80e5c8:	e0bffb17 	ldw	r2,-20(fp)
  80e5cc:	1004803a 	cmplt	r2,r2,zero
  80e5d0:	10001c1e 	bne	r2,zero,80e644 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e5d4:	e0bffb17 	ldw	r2,-20(fp)
  80e5d8:	00c02274 	movhi	r3,137
  80e5dc:	18e08004 	addi	r3,r3,-32256
  80e5e0:	10800324 	muli	r2,r2,12
  80e5e4:	10c5883a 	add	r2,r2,r3
  80e5e8:	10c00017 	ldw	r3,0(r2)
  80e5ec:	e0bffc17 	ldw	r2,-16(fp)
  80e5f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e5f4:	e0bffb17 	ldw	r2,-20(fp)
  80e5f8:	00c02274 	movhi	r3,137
  80e5fc:	18e08004 	addi	r3,r3,-32256
  80e600:	10800324 	muli	r2,r2,12
  80e604:	10c5883a 	add	r2,r2,r3
  80e608:	10800104 	addi	r2,r2,4
  80e60c:	10c00017 	ldw	r3,0(r2)
  80e610:	e0bffc17 	ldw	r2,-16(fp)
  80e614:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e618:	e0bffb17 	ldw	r2,-20(fp)
  80e61c:	00c02274 	movhi	r3,137
  80e620:	18e08004 	addi	r3,r3,-32256
  80e624:	10800324 	muli	r2,r2,12
  80e628:	10c5883a 	add	r2,r2,r3
  80e62c:	10800204 	addi	r2,r2,8
  80e630:	10c00017 	ldw	r3,0(r2)
  80e634:	e0bffc17 	ldw	r2,-16(fp)
  80e638:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e63c:	e13ffb17 	ldw	r4,-20(fp)
  80e640:	080d12c0 	call	80d12c <alt_release_fd>
  }
} 
  80e644:	e037883a 	mov	sp,fp
  80e648:	dfc00117 	ldw	ra,4(sp)
  80e64c:	df000017 	ldw	fp,0(sp)
  80e650:	dec00204 	addi	sp,sp,8
  80e654:	f800283a 	ret

0080e658 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e658:	defffb04 	addi	sp,sp,-20
  80e65c:	dfc00415 	stw	ra,16(sp)
  80e660:	df000315 	stw	fp,12(sp)
  80e664:	df000304 	addi	fp,sp,12
  80e668:	e13ffd15 	stw	r4,-12(fp)
  80e66c:	e17ffe15 	stw	r5,-8(fp)
  80e670:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e674:	01002274 	movhi	r4,137
  80e678:	21208304 	addi	r4,r4,-32244
  80e67c:	e17ffd17 	ldw	r5,-12(fp)
  80e680:	01800044 	movi	r6,1
  80e684:	01c07fc4 	movi	r7,511
  80e688:	080e5940 	call	80e594 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e68c:	01002274 	movhi	r4,137
  80e690:	21208004 	addi	r4,r4,-32256
  80e694:	e17ffe17 	ldw	r5,-8(fp)
  80e698:	000d883a 	mov	r6,zero
  80e69c:	01c07fc4 	movi	r7,511
  80e6a0:	080e5940 	call	80e594 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e6a4:	01002274 	movhi	r4,137
  80e6a8:	21208604 	addi	r4,r4,-32232
  80e6ac:	e17fff17 	ldw	r5,-4(fp)
  80e6b0:	01800044 	movi	r6,1
  80e6b4:	01c07fc4 	movi	r7,511
  80e6b8:	080e5940 	call	80e594 <alt_open_fd>
}  
  80e6bc:	e037883a 	mov	sp,fp
  80e6c0:	dfc00117 	ldw	ra,4(sp)
  80e6c4:	df000017 	ldw	fp,0(sp)
  80e6c8:	dec00204 	addi	sp,sp,8
  80e6cc:	f800283a 	ret

0080e6d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e6d0:	defffc04 	addi	sp,sp,-16
  80e6d4:	df000315 	stw	fp,12(sp)
  80e6d8:	df000304 	addi	fp,sp,12
  80e6dc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e6e0:	e0bffe17 	ldw	r2,-8(fp)
  80e6e4:	10800217 	ldw	r2,8(r2)
  80e6e8:	10d00034 	orhi	r3,r2,16384
  80e6ec:	e0bffe17 	ldw	r2,-8(fp)
  80e6f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e6f4:	e03ffd15 	stw	zero,-12(fp)
  80e6f8:	00002006 	br	80e77c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e6fc:	e0bffd17 	ldw	r2,-12(fp)
  80e700:	00c02274 	movhi	r3,137
  80e704:	18e08004 	addi	r3,r3,-32256
  80e708:	10800324 	muli	r2,r2,12
  80e70c:	10c5883a 	add	r2,r2,r3
  80e710:	10c00017 	ldw	r3,0(r2)
  80e714:	e0bffe17 	ldw	r2,-8(fp)
  80e718:	10800017 	ldw	r2,0(r2)
  80e71c:	1880141e 	bne	r3,r2,80e770 <alt_file_locked+0xa0>
  80e720:	e0bffd17 	ldw	r2,-12(fp)
  80e724:	00c02274 	movhi	r3,137
  80e728:	18e08004 	addi	r3,r3,-32256
  80e72c:	10800324 	muli	r2,r2,12
  80e730:	10c5883a 	add	r2,r2,r3
  80e734:	10800204 	addi	r2,r2,8
  80e738:	10800017 	ldw	r2,0(r2)
  80e73c:	1004403a 	cmpge	r2,r2,zero
  80e740:	10000b1e 	bne	r2,zero,80e770 <alt_file_locked+0xa0>
  80e744:	e0bffd17 	ldw	r2,-12(fp)
  80e748:	10800324 	muli	r2,r2,12
  80e74c:	1007883a 	mov	r3,r2
  80e750:	00802274 	movhi	r2,137
  80e754:	10a08004 	addi	r2,r2,-32256
  80e758:	1887883a 	add	r3,r3,r2
  80e75c:	e0bffe17 	ldw	r2,-8(fp)
  80e760:	18800326 	beq	r3,r2,80e770 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80e764:	00bffcc4 	movi	r2,-13
  80e768:	e0bfff15 	stw	r2,-4(fp)
  80e76c:	00000a06 	br	80e798 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e770:	e0bffd17 	ldw	r2,-12(fp)
  80e774:	10800044 	addi	r2,r2,1
  80e778:	e0bffd15 	stw	r2,-12(fp)
  80e77c:	00802274 	movhi	r2,137
  80e780:	10a50204 	addi	r2,r2,-27640
  80e784:	10800017 	ldw	r2,0(r2)
  80e788:	1007883a 	mov	r3,r2
  80e78c:	e0bffd17 	ldw	r2,-12(fp)
  80e790:	18bfda2e 	bgeu	r3,r2,80e6fc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80e794:	e03fff15 	stw	zero,-4(fp)
  80e798:	e0bfff17 	ldw	r2,-4(fp)
}
  80e79c:	e037883a 	mov	sp,fp
  80e7a0:	df000017 	ldw	fp,0(sp)
  80e7a4:	dec00104 	addi	sp,sp,4
  80e7a8:	f800283a 	ret

0080e7ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80e7ac:	defff404 	addi	sp,sp,-48
  80e7b0:	dfc00b15 	stw	ra,44(sp)
  80e7b4:	df000a15 	stw	fp,40(sp)
  80e7b8:	df000a04 	addi	fp,sp,40
  80e7bc:	e13ffb15 	stw	r4,-20(fp)
  80e7c0:	e17ffc15 	stw	r5,-16(fp)
  80e7c4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80e7c8:	00bfffc4 	movi	r2,-1
  80e7cc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80e7d0:	00bffb44 	movi	r2,-19
  80e7d4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80e7d8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80e7dc:	e13ffb17 	ldw	r4,-20(fp)
  80e7e0:	01402274 	movhi	r5,137
  80e7e4:	29650004 	addi	r5,r5,-27648
  80e7e8:	080eb580 	call	80eb58 <alt_find_dev>
  80e7ec:	e0bffa15 	stw	r2,-24(fp)
  80e7f0:	e0bffa17 	ldw	r2,-24(fp)
  80e7f4:	1004c03a 	cmpne	r2,r2,zero
  80e7f8:	1000051e 	bne	r2,zero,80e810 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80e7fc:	e13ffb17 	ldw	r4,-20(fp)
  80e800:	080ebec0 	call	80ebec <alt_find_file>
  80e804:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80e808:	00800044 	movi	r2,1
  80e80c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80e810:	e0bffa17 	ldw	r2,-24(fp)
  80e814:	1005003a 	cmpeq	r2,r2,zero
  80e818:	1000301e 	bne	r2,zero,80e8dc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80e81c:	e13ffa17 	ldw	r4,-24(fp)
  80e820:	080ed0c0 	call	80ed0c <alt_get_fd>
  80e824:	e0bff815 	stw	r2,-32(fp)
  80e828:	e0bff817 	ldw	r2,-32(fp)
  80e82c:	1004403a 	cmpge	r2,r2,zero
  80e830:	1000031e 	bne	r2,zero,80e840 <open+0x94>
    {
      status = index;
  80e834:	e0bff817 	ldw	r2,-32(fp)
  80e838:	e0bff715 	stw	r2,-36(fp)
  80e83c:	00002906 	br	80e8e4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80e840:	e0bff817 	ldw	r2,-32(fp)
  80e844:	10800324 	muli	r2,r2,12
  80e848:	1007883a 	mov	r3,r2
  80e84c:	00802274 	movhi	r2,137
  80e850:	10a08004 	addi	r2,r2,-32256
  80e854:	1885883a 	add	r2,r3,r2
  80e858:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80e85c:	e0fffc17 	ldw	r3,-16(fp)
  80e860:	00900034 	movhi	r2,16384
  80e864:	10bfffc4 	addi	r2,r2,-1
  80e868:	1886703a 	and	r3,r3,r2
  80e86c:	e0bff917 	ldw	r2,-28(fp)
  80e870:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80e874:	e0bff617 	ldw	r2,-40(fp)
  80e878:	1004c03a 	cmpne	r2,r2,zero
  80e87c:	1000061e 	bne	r2,zero,80e898 <open+0xec>
  80e880:	e13ff917 	ldw	r4,-28(fp)
  80e884:	080e6d00 	call	80e6d0 <alt_file_locked>
  80e888:	e0bff715 	stw	r2,-36(fp)
  80e88c:	e0bff717 	ldw	r2,-36(fp)
  80e890:	1004803a 	cmplt	r2,r2,zero
  80e894:	1000131e 	bne	r2,zero,80e8e4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80e898:	e0bffa17 	ldw	r2,-24(fp)
  80e89c:	10800317 	ldw	r2,12(r2)
  80e8a0:	1005003a 	cmpeq	r2,r2,zero
  80e8a4:	1000091e 	bne	r2,zero,80e8cc <open+0x120>
  80e8a8:	e0bffa17 	ldw	r2,-24(fp)
  80e8ac:	10800317 	ldw	r2,12(r2)
  80e8b0:	e13ff917 	ldw	r4,-28(fp)
  80e8b4:	e17ffb17 	ldw	r5,-20(fp)
  80e8b8:	e1bffc17 	ldw	r6,-16(fp)
  80e8bc:	e1fffd17 	ldw	r7,-12(fp)
  80e8c0:	103ee83a 	callr	r2
  80e8c4:	e0bfff15 	stw	r2,-4(fp)
  80e8c8:	00000106 	br	80e8d0 <open+0x124>
  80e8cc:	e03fff15 	stw	zero,-4(fp)
  80e8d0:	e0bfff17 	ldw	r2,-4(fp)
  80e8d4:	e0bff715 	stw	r2,-36(fp)
  80e8d8:	00000206 	br	80e8e4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e8dc:	00bffb44 	movi	r2,-19
  80e8e0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e8e4:	e0bff717 	ldw	r2,-36(fp)
  80e8e8:	1004403a 	cmpge	r2,r2,zero
  80e8ec:	1000091e 	bne	r2,zero,80e914 <open+0x168>
  {
    alt_release_fd (index);  
  80e8f0:	e13ff817 	ldw	r4,-32(fp)
  80e8f4:	080d12c0 	call	80d12c <alt_release_fd>
    ALT_ERRNO = -status;
  80e8f8:	080e9340 	call	80e934 <alt_get_errno>
  80e8fc:	e0fff717 	ldw	r3,-36(fp)
  80e900:	00c7c83a 	sub	r3,zero,r3
  80e904:	10c00015 	stw	r3,0(r2)
    return -1;
  80e908:	00bfffc4 	movi	r2,-1
  80e90c:	e0bffe15 	stw	r2,-8(fp)
  80e910:	00000206 	br	80e91c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80e914:	e0bff817 	ldw	r2,-32(fp)
  80e918:	e0bffe15 	stw	r2,-8(fp)
  80e91c:	e0bffe17 	ldw	r2,-8(fp)
}
  80e920:	e037883a 	mov	sp,fp
  80e924:	dfc00117 	ldw	ra,4(sp)
  80e928:	df000017 	ldw	fp,0(sp)
  80e92c:	dec00204 	addi	sp,sp,8
  80e930:	f800283a 	ret

0080e934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e934:	defffd04 	addi	sp,sp,-12
  80e938:	dfc00215 	stw	ra,8(sp)
  80e93c:	df000115 	stw	fp,4(sp)
  80e940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e944:	00802274 	movhi	r2,137
  80e948:	10a50304 	addi	r2,r2,-27636
  80e94c:	10800017 	ldw	r2,0(r2)
  80e950:	1005003a 	cmpeq	r2,r2,zero
  80e954:	1000061e 	bne	r2,zero,80e970 <alt_get_errno+0x3c>
  80e958:	00802274 	movhi	r2,137
  80e95c:	10a50304 	addi	r2,r2,-27636
  80e960:	10800017 	ldw	r2,0(r2)
  80e964:	103ee83a 	callr	r2
  80e968:	e0bfff15 	stw	r2,-4(fp)
  80e96c:	00000306 	br	80e97c <alt_get_errno+0x48>
  80e970:	00802274 	movhi	r2,137
  80e974:	10ac3504 	addi	r2,r2,-20268
  80e978:	e0bfff15 	stw	r2,-4(fp)
  80e97c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e980:	e037883a 	mov	sp,fp
  80e984:	dfc00117 	ldw	ra,4(sp)
  80e988:	df000017 	ldw	fp,0(sp)
  80e98c:	dec00204 	addi	sp,sp,8
  80e990:	f800283a 	ret

0080e994 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e994:	defffa04 	addi	sp,sp,-24
  80e998:	df000515 	stw	fp,20(sp)
  80e99c:	df000504 	addi	fp,sp,20
  80e9a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9a4:	0005303a 	rdctl	r2,status
  80e9a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9ac:	e0fffd17 	ldw	r3,-12(fp)
  80e9b0:	00bfff84 	movi	r2,-2
  80e9b4:	1884703a 	and	r2,r3,r2
  80e9b8:	1001703a 	wrctl	status,r2
  
  return context;
  80e9bc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e9c0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80e9c4:	e0bfff17 	ldw	r2,-4(fp)
  80e9c8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e9cc:	e0bffc17 	ldw	r2,-16(fp)
  80e9d0:	10c00017 	ldw	r3,0(r2)
  80e9d4:	e0bffc17 	ldw	r2,-16(fp)
  80e9d8:	10800117 	ldw	r2,4(r2)
  80e9dc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80e9e0:	e0bffc17 	ldw	r2,-16(fp)
  80e9e4:	10c00117 	ldw	r3,4(r2)
  80e9e8:	e0bffc17 	ldw	r2,-16(fp)
  80e9ec:	10800017 	ldw	r2,0(r2)
  80e9f0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e9f4:	e0fffc17 	ldw	r3,-16(fp)
  80e9f8:	e0bffc17 	ldw	r2,-16(fp)
  80e9fc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80ea00:	e0fffc17 	ldw	r3,-16(fp)
  80ea04:	e0bffc17 	ldw	r2,-16(fp)
  80ea08:	18800015 	stw	r2,0(r3)
  80ea0c:	e0bffe17 	ldw	r2,-8(fp)
  80ea10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea14:	e0bffb17 	ldw	r2,-20(fp)
  80ea18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ea1c:	e037883a 	mov	sp,fp
  80ea20:	df000017 	ldw	fp,0(sp)
  80ea24:	dec00104 	addi	sp,sp,4
  80ea28:	f800283a 	ret

0080ea2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80ea2c:	defffb04 	addi	sp,sp,-20
  80ea30:	dfc00415 	stw	ra,16(sp)
  80ea34:	df000315 	stw	fp,12(sp)
  80ea38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ea3c:	d0a00e17 	ldw	r2,-32712(gp)
  80ea40:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ea44:	d0a74317 	ldw	r2,-25332(gp)
  80ea48:	10800044 	addi	r2,r2,1
  80ea4c:	d0a74315 	stw	r2,-25332(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ea50:	00003106 	br	80eb18 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ea54:	e0bffe17 	ldw	r2,-8(fp)
  80ea58:	10800017 	ldw	r2,0(r2)
  80ea5c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80ea60:	e0bffe17 	ldw	r2,-8(fp)
  80ea64:	10800403 	ldbu	r2,16(r2)
  80ea68:	10803fcc 	andi	r2,r2,255
  80ea6c:	1005003a 	cmpeq	r2,r2,zero
  80ea70:	1000051e 	bne	r2,zero,80ea88 <alt_tick+0x5c>
  80ea74:	d0a74317 	ldw	r2,-25332(gp)
  80ea78:	1004c03a 	cmpne	r2,r2,zero
  80ea7c:	1000021e 	bne	r2,zero,80ea88 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80ea80:	e0bffe17 	ldw	r2,-8(fp)
  80ea84:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80ea88:	e0bffe17 	ldw	r2,-8(fp)
  80ea8c:	10c00217 	ldw	r3,8(r2)
  80ea90:	d0a74317 	ldw	r2,-25332(gp)
  80ea94:	10c01e36 	bltu	r2,r3,80eb10 <alt_tick+0xe4>
  80ea98:	e0bffe17 	ldw	r2,-8(fp)
  80ea9c:	10800403 	ldbu	r2,16(r2)
  80eaa0:	10803fcc 	andi	r2,r2,255
  80eaa4:	1004c03a 	cmpne	r2,r2,zero
  80eaa8:	1000191e 	bne	r2,zero,80eb10 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80eaac:	e0bffe17 	ldw	r2,-8(fp)
  80eab0:	10c00317 	ldw	r3,12(r2)
  80eab4:	e0bffe17 	ldw	r2,-8(fp)
  80eab8:	11000517 	ldw	r4,20(r2)
  80eabc:	183ee83a 	callr	r3
  80eac0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80eac4:	e0bffd17 	ldw	r2,-12(fp)
  80eac8:	1004c03a 	cmpne	r2,r2,zero
  80eacc:	1000031e 	bne	r2,zero,80eadc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80ead0:	e13ffe17 	ldw	r4,-8(fp)
  80ead4:	080e9940 	call	80e994 <alt_alarm_stop>
  80ead8:	00000d06 	br	80eb10 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80eadc:	e0bffe17 	ldw	r2,-8(fp)
  80eae0:	10c00217 	ldw	r3,8(r2)
  80eae4:	e0bffd17 	ldw	r2,-12(fp)
  80eae8:	1887883a 	add	r3,r3,r2
  80eaec:	e0bffe17 	ldw	r2,-8(fp)
  80eaf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80eaf4:	e0bffe17 	ldw	r2,-8(fp)
  80eaf8:	10c00217 	ldw	r3,8(r2)
  80eafc:	d0a74317 	ldw	r2,-25332(gp)
  80eb00:	1880032e 	bgeu	r3,r2,80eb10 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80eb04:	e0fffe17 	ldw	r3,-8(fp)
  80eb08:	00800044 	movi	r2,1
  80eb0c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80eb10:	e0bfff17 	ldw	r2,-4(fp)
  80eb14:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80eb18:	d0e00e04 	addi	r3,gp,-32712
  80eb1c:	e0bffe17 	ldw	r2,-8(fp)
  80eb20:	10ffcc1e 	bne	r2,r3,80ea54 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80eb24:	e037883a 	mov	sp,fp
  80eb28:	dfc00117 	ldw	ra,4(sp)
  80eb2c:	df000017 	ldw	fp,0(sp)
  80eb30:	dec00204 	addi	sp,sp,8
  80eb34:	f800283a 	ret

0080eb38 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  80eb38:	deffff04 	addi	sp,sp,-4
  80eb3c:	df000015 	stw	fp,0(sp)
  80eb40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80eb44:	000170fa 	wrctl	ienable,zero
}
  80eb48:	e037883a 	mov	sp,fp
  80eb4c:	df000017 	ldw	fp,0(sp)
  80eb50:	dec00104 	addi	sp,sp,4
  80eb54:	f800283a 	ret

0080eb58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80eb58:	defff904 	addi	sp,sp,-28
  80eb5c:	dfc00615 	stw	ra,24(sp)
  80eb60:	df000515 	stw	fp,20(sp)
  80eb64:	df000504 	addi	fp,sp,20
  80eb68:	e13ffd15 	stw	r4,-12(fp)
  80eb6c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80eb70:	e0bffe17 	ldw	r2,-8(fp)
  80eb74:	10800017 	ldw	r2,0(r2)
  80eb78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80eb7c:	e13ffd17 	ldw	r4,-12(fp)
  80eb80:	080b3580 	call	80b358 <strlen>
  80eb84:	10800044 	addi	r2,r2,1
  80eb88:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80eb8c:	00000d06 	br	80ebc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80eb90:	e0bffc17 	ldw	r2,-16(fp)
  80eb94:	11000217 	ldw	r4,8(r2)
  80eb98:	e1bffb17 	ldw	r6,-20(fp)
  80eb9c:	e17ffd17 	ldw	r5,-12(fp)
  80eba0:	080eea00 	call	80eea0 <memcmp>
  80eba4:	1004c03a 	cmpne	r2,r2,zero
  80eba8:	1000031e 	bne	r2,zero,80ebb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80ebac:	e0bffc17 	ldw	r2,-16(fp)
  80ebb0:	e0bfff15 	stw	r2,-4(fp)
  80ebb4:	00000706 	br	80ebd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80ebb8:	e0bffc17 	ldw	r2,-16(fp)
  80ebbc:	10800017 	ldw	r2,0(r2)
  80ebc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ebc4:	e0fffe17 	ldw	r3,-8(fp)
  80ebc8:	e0bffc17 	ldw	r2,-16(fp)
  80ebcc:	10fff01e 	bne	r2,r3,80eb90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80ebd0:	e03fff15 	stw	zero,-4(fp)
  80ebd4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ebd8:	e037883a 	mov	sp,fp
  80ebdc:	dfc00117 	ldw	ra,4(sp)
  80ebe0:	df000017 	ldw	fp,0(sp)
  80ebe4:	dec00204 	addi	sp,sp,8
  80ebe8:	f800283a 	ret

0080ebec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80ebec:	defffa04 	addi	sp,sp,-24
  80ebf0:	dfc00515 	stw	ra,20(sp)
  80ebf4:	df000415 	stw	fp,16(sp)
  80ebf8:	df000404 	addi	fp,sp,16
  80ebfc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80ec00:	00802274 	movhi	r2,137
  80ec04:	10a4fe04 	addi	r2,r2,-27656
  80ec08:	10800017 	ldw	r2,0(r2)
  80ec0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80ec10:	00003306 	br	80ece0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80ec14:	e0bffd17 	ldw	r2,-12(fp)
  80ec18:	11000217 	ldw	r4,8(r2)
  80ec1c:	080b3580 	call	80b358 <strlen>
  80ec20:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80ec24:	e0bffd17 	ldw	r2,-12(fp)
  80ec28:	10c00217 	ldw	r3,8(r2)
  80ec2c:	e0bffc17 	ldw	r2,-16(fp)
  80ec30:	1885883a 	add	r2,r3,r2
  80ec34:	10bfffc4 	addi	r2,r2,-1
  80ec38:	10800003 	ldbu	r2,0(r2)
  80ec3c:	10803fcc 	andi	r2,r2,255
  80ec40:	1080201c 	xori	r2,r2,128
  80ec44:	10bfe004 	addi	r2,r2,-128
  80ec48:	10800bd8 	cmpnei	r2,r2,47
  80ec4c:	1000031e 	bne	r2,zero,80ec5c <alt_find_file+0x70>
    {
      len -= 1;
  80ec50:	e0bffc17 	ldw	r2,-16(fp)
  80ec54:	10bfffc4 	addi	r2,r2,-1
  80ec58:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80ec5c:	e0bffc17 	ldw	r2,-16(fp)
  80ec60:	1007883a 	mov	r3,r2
  80ec64:	e0bffe17 	ldw	r2,-8(fp)
  80ec68:	1885883a 	add	r2,r3,r2
  80ec6c:	10800003 	ldbu	r2,0(r2)
  80ec70:	10803fcc 	andi	r2,r2,255
  80ec74:	1080201c 	xori	r2,r2,128
  80ec78:	10bfe004 	addi	r2,r2,-128
  80ec7c:	10800be0 	cmpeqi	r2,r2,47
  80ec80:	10000a1e 	bne	r2,zero,80ecac <alt_find_file+0xc0>
  80ec84:	e0bffc17 	ldw	r2,-16(fp)
  80ec88:	1007883a 	mov	r3,r2
  80ec8c:	e0bffe17 	ldw	r2,-8(fp)
  80ec90:	1885883a 	add	r2,r3,r2
  80ec94:	10800003 	ldbu	r2,0(r2)
  80ec98:	10803fcc 	andi	r2,r2,255
  80ec9c:	1080201c 	xori	r2,r2,128
  80eca0:	10bfe004 	addi	r2,r2,-128
  80eca4:	1004c03a 	cmpne	r2,r2,zero
  80eca8:	10000a1e 	bne	r2,zero,80ecd4 <alt_find_file+0xe8>
  80ecac:	e0bffd17 	ldw	r2,-12(fp)
  80ecb0:	11000217 	ldw	r4,8(r2)
  80ecb4:	e1bffc17 	ldw	r6,-16(fp)
  80ecb8:	e17ffe17 	ldw	r5,-8(fp)
  80ecbc:	080eea00 	call	80eea0 <memcmp>
  80ecc0:	1004c03a 	cmpne	r2,r2,zero
  80ecc4:	1000031e 	bne	r2,zero,80ecd4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80ecc8:	e0bffd17 	ldw	r2,-12(fp)
  80eccc:	e0bfff15 	stw	r2,-4(fp)
  80ecd0:	00000806 	br	80ecf4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	10800017 	ldw	r2,0(r2)
  80ecdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80ece0:	00c02274 	movhi	r3,137
  80ece4:	18e4fe04 	addi	r3,r3,-27656
  80ece8:	e0bffd17 	ldw	r2,-12(fp)
  80ecec:	10ffc91e 	bne	r2,r3,80ec14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80ecf0:	e03fff15 	stw	zero,-4(fp)
  80ecf4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecf8:	e037883a 	mov	sp,fp
  80ecfc:	dfc00117 	ldw	ra,4(sp)
  80ed00:	df000017 	ldw	fp,0(sp)
  80ed04:	dec00204 	addi	sp,sp,8
  80ed08:	f800283a 	ret

0080ed0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80ed0c:	defffc04 	addi	sp,sp,-16
  80ed10:	df000315 	stw	fp,12(sp)
  80ed14:	df000304 	addi	fp,sp,12
  80ed18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80ed1c:	00bffa04 	movi	r2,-24
  80ed20:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ed24:	e03ffe15 	stw	zero,-8(fp)
  80ed28:	00001e06 	br	80eda4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80ed2c:	e0bffe17 	ldw	r2,-8(fp)
  80ed30:	00c02274 	movhi	r3,137
  80ed34:	18e08004 	addi	r3,r3,-32256
  80ed38:	10800324 	muli	r2,r2,12
  80ed3c:	10c5883a 	add	r2,r2,r3
  80ed40:	10800017 	ldw	r2,0(r2)
  80ed44:	1004c03a 	cmpne	r2,r2,zero
  80ed48:	1000131e 	bne	r2,zero,80ed98 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80ed4c:	e0bffe17 	ldw	r2,-8(fp)
  80ed50:	00c02274 	movhi	r3,137
  80ed54:	18e08004 	addi	r3,r3,-32256
  80ed58:	10800324 	muli	r2,r2,12
  80ed5c:	10c7883a 	add	r3,r2,r3
  80ed60:	e0bfff17 	ldw	r2,-4(fp)
  80ed64:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80ed68:	00802274 	movhi	r2,137
  80ed6c:	10a50204 	addi	r2,r2,-27640
  80ed70:	10c00017 	ldw	r3,0(r2)
  80ed74:	e0bffe17 	ldw	r2,-8(fp)
  80ed78:	1880040e 	bge	r3,r2,80ed8c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80ed7c:	00c02274 	movhi	r3,137
  80ed80:	18e50204 	addi	r3,r3,-27640
  80ed84:	e0bffe17 	ldw	r2,-8(fp)
  80ed88:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80ed8c:	e0bffe17 	ldw	r2,-8(fp)
  80ed90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80ed94:	00000606 	br	80edb0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ed98:	e0bffe17 	ldw	r2,-8(fp)
  80ed9c:	10800044 	addi	r2,r2,1
  80eda0:	e0bffe15 	stw	r2,-8(fp)
  80eda4:	e0bffe17 	ldw	r2,-8(fp)
  80eda8:	10800810 	cmplti	r2,r2,32
  80edac:	103fdf1e 	bne	r2,zero,80ed2c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80edb0:	e0bffd17 	ldw	r2,-12(fp)
}
  80edb4:	e037883a 	mov	sp,fp
  80edb8:	df000017 	ldw	fp,0(sp)
  80edbc:	dec00104 	addi	sp,sp,4
  80edc0:	f800283a 	ret

0080edc4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80edc4:	defffb04 	addi	sp,sp,-20
  80edc8:	df000415 	stw	fp,16(sp)
  80edcc:	df000404 	addi	fp,sp,16
  80edd0:	e13ffe15 	stw	r4,-8(fp)
  80edd4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80edd8:	e0bfff17 	ldw	r2,-4(fp)
  80eddc:	10840070 	cmpltui	r2,r2,4097
  80ede0:	1000021e 	bne	r2,zero,80edec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80ede4:	00840004 	movi	r2,4096
  80ede8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80edec:	e0fffe17 	ldw	r3,-8(fp)
  80edf0:	e0bfff17 	ldw	r2,-4(fp)
  80edf4:	1885883a 	add	r2,r3,r2
  80edf8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80edfc:	e0bffe17 	ldw	r2,-8(fp)
  80ee00:	e0bffd15 	stw	r2,-12(fp)
  80ee04:	00000506 	br	80ee1c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80ee08:	e0bffd17 	ldw	r2,-12(fp)
  80ee0c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ee10:	e0bffd17 	ldw	r2,-12(fp)
  80ee14:	10800804 	addi	r2,r2,32
  80ee18:	e0bffd15 	stw	r2,-12(fp)
  80ee1c:	e0fffd17 	ldw	r3,-12(fp)
  80ee20:	e0bffc17 	ldw	r2,-16(fp)
  80ee24:	18bff836 	bltu	r3,r2,80ee08 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80ee28:	e0bffe17 	ldw	r2,-8(fp)
  80ee2c:	108007cc 	andi	r2,r2,31
  80ee30:	1005003a 	cmpeq	r2,r2,zero
  80ee34:	1000021e 	bne	r2,zero,80ee40 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80ee38:	e0bffd17 	ldw	r2,-12(fp)
  80ee3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80ee40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80ee44:	e037883a 	mov	sp,fp
  80ee48:	df000017 	ldw	fp,0(sp)
  80ee4c:	dec00104 	addi	sp,sp,4
  80ee50:	f800283a 	ret

0080ee54 <atexit>:
  80ee54:	200b883a 	mov	r5,r4
  80ee58:	000d883a 	mov	r6,zero
  80ee5c:	0009883a 	mov	r4,zero
  80ee60:	000f883a 	mov	r7,zero
  80ee64:	080ef141 	jmpi	80ef14 <__register_exitproc>

0080ee68 <exit>:
  80ee68:	defffe04 	addi	sp,sp,-8
  80ee6c:	000b883a 	mov	r5,zero
  80ee70:	dc000015 	stw	r16,0(sp)
  80ee74:	dfc00115 	stw	ra,4(sp)
  80ee78:	2021883a 	mov	r16,r4
  80ee7c:	080f04c0 	call	80f04c <__call_exitprocs>
  80ee80:	00802274 	movhi	r2,137
  80ee84:	10a4f904 	addi	r2,r2,-27676
  80ee88:	11000017 	ldw	r4,0(r2)
  80ee8c:	20800f17 	ldw	r2,60(r4)
  80ee90:	10000126 	beq	r2,zero,80ee98 <exit+0x30>
  80ee94:	103ee83a 	callr	r2
  80ee98:	8009883a 	mov	r4,r16
  80ee9c:	080f23c0 	call	80f23c <_exit>

0080eea0 <memcmp>:
  80eea0:	00c000c4 	movi	r3,3
  80eea4:	1980032e 	bgeu	r3,r6,80eeb4 <memcmp+0x14>
  80eea8:	2144b03a 	or	r2,r4,r5
  80eeac:	10c4703a 	and	r2,r2,r3
  80eeb0:	10000f26 	beq	r2,zero,80eef0 <memcmp+0x50>
  80eeb4:	31ffffc4 	addi	r7,r6,-1
  80eeb8:	3000061e 	bne	r6,zero,80eed4 <memcmp+0x34>
  80eebc:	00000a06 	br	80eee8 <memcmp+0x48>
  80eec0:	39ffffc4 	addi	r7,r7,-1
  80eec4:	00bfffc4 	movi	r2,-1
  80eec8:	21000044 	addi	r4,r4,1
  80eecc:	29400044 	addi	r5,r5,1
  80eed0:	38800526 	beq	r7,r2,80eee8 <memcmp+0x48>
  80eed4:	20c00003 	ldbu	r3,0(r4)
  80eed8:	28800003 	ldbu	r2,0(r5)
  80eedc:	18bff826 	beq	r3,r2,80eec0 <memcmp+0x20>
  80eee0:	1885c83a 	sub	r2,r3,r2
  80eee4:	f800283a 	ret
  80eee8:	0005883a 	mov	r2,zero
  80eeec:	f800283a 	ret
  80eef0:	180f883a 	mov	r7,r3
  80eef4:	20c00017 	ldw	r3,0(r4)
  80eef8:	28800017 	ldw	r2,0(r5)
  80eefc:	18bfed1e 	bne	r3,r2,80eeb4 <memcmp+0x14>
  80ef00:	31bfff04 	addi	r6,r6,-4
  80ef04:	21000104 	addi	r4,r4,4
  80ef08:	29400104 	addi	r5,r5,4
  80ef0c:	39bff936 	bltu	r7,r6,80eef4 <memcmp+0x54>
  80ef10:	003fe806 	br	80eeb4 <memcmp+0x14>

0080ef14 <__register_exitproc>:
  80ef14:	defffa04 	addi	sp,sp,-24
  80ef18:	00802274 	movhi	r2,137
  80ef1c:	10a4f904 	addi	r2,r2,-27676
  80ef20:	dc000015 	stw	r16,0(sp)
  80ef24:	14000017 	ldw	r16,0(r2)
  80ef28:	dd000415 	stw	r20,16(sp)
  80ef2c:	2829883a 	mov	r20,r5
  80ef30:	81405217 	ldw	r5,328(r16)
  80ef34:	dcc00315 	stw	r19,12(sp)
  80ef38:	dc800215 	stw	r18,8(sp)
  80ef3c:	dc400115 	stw	r17,4(sp)
  80ef40:	dfc00515 	stw	ra,20(sp)
  80ef44:	2023883a 	mov	r17,r4
  80ef48:	3027883a 	mov	r19,r6
  80ef4c:	3825883a 	mov	r18,r7
  80ef50:	28002526 	beq	r5,zero,80efe8 <__register_exitproc+0xd4>
  80ef54:	29000117 	ldw	r4,4(r5)
  80ef58:	008007c4 	movi	r2,31
  80ef5c:	11002716 	blt	r2,r4,80effc <__register_exitproc+0xe8>
  80ef60:	8800101e 	bne	r17,zero,80efa4 <__register_exitproc+0x90>
  80ef64:	2105883a 	add	r2,r4,r4
  80ef68:	1085883a 	add	r2,r2,r2
  80ef6c:	20c00044 	addi	r3,r4,1
  80ef70:	1145883a 	add	r2,r2,r5
  80ef74:	0009883a 	mov	r4,zero
  80ef78:	15000215 	stw	r20,8(r2)
  80ef7c:	28c00115 	stw	r3,4(r5)
  80ef80:	2005883a 	mov	r2,r4
  80ef84:	dfc00517 	ldw	ra,20(sp)
  80ef88:	dd000417 	ldw	r20,16(sp)
  80ef8c:	dcc00317 	ldw	r19,12(sp)
  80ef90:	dc800217 	ldw	r18,8(sp)
  80ef94:	dc400117 	ldw	r17,4(sp)
  80ef98:	dc000017 	ldw	r16,0(sp)
  80ef9c:	dec00604 	addi	sp,sp,24
  80efa0:	f800283a 	ret
  80efa4:	29802204 	addi	r6,r5,136
  80efa8:	00800044 	movi	r2,1
  80efac:	110e983a 	sll	r7,r2,r4
  80efb0:	30c04017 	ldw	r3,256(r6)
  80efb4:	2105883a 	add	r2,r4,r4
  80efb8:	1085883a 	add	r2,r2,r2
  80efbc:	1185883a 	add	r2,r2,r6
  80efc0:	19c6b03a 	or	r3,r3,r7
  80efc4:	14802015 	stw	r18,128(r2)
  80efc8:	14c00015 	stw	r19,0(r2)
  80efcc:	00800084 	movi	r2,2
  80efd0:	30c04015 	stw	r3,256(r6)
  80efd4:	88bfe31e 	bne	r17,r2,80ef64 <__register_exitproc+0x50>
  80efd8:	30804117 	ldw	r2,260(r6)
  80efdc:	11c4b03a 	or	r2,r2,r7
  80efe0:	30804115 	stw	r2,260(r6)
  80efe4:	003fdf06 	br	80ef64 <__register_exitproc+0x50>
  80efe8:	008022b4 	movhi	r2,138
  80efec:	10a7e604 	addi	r2,r2,-24680
  80eff0:	100b883a 	mov	r5,r2
  80eff4:	80805215 	stw	r2,328(r16)
  80eff8:	003fd606 	br	80ef54 <__register_exitproc+0x40>
  80effc:	00800034 	movhi	r2,0
  80f000:	10800004 	addi	r2,r2,0
  80f004:	1000021e 	bne	r2,zero,80f010 <__register_exitproc+0xfc>
  80f008:	013fffc4 	movi	r4,-1
  80f00c:	003fdc06 	br	80ef80 <__register_exitproc+0x6c>
  80f010:	01006404 	movi	r4,400
  80f014:	103ee83a 	callr	r2
  80f018:	1007883a 	mov	r3,r2
  80f01c:	103ffa26 	beq	r2,zero,80f008 <__register_exitproc+0xf4>
  80f020:	80805217 	ldw	r2,328(r16)
  80f024:	180b883a 	mov	r5,r3
  80f028:	18000115 	stw	zero,4(r3)
  80f02c:	18800015 	stw	r2,0(r3)
  80f030:	80c05215 	stw	r3,328(r16)
  80f034:	18006215 	stw	zero,392(r3)
  80f038:	18006315 	stw	zero,396(r3)
  80f03c:	0009883a 	mov	r4,zero
  80f040:	883fc826 	beq	r17,zero,80ef64 <__register_exitproc+0x50>
  80f044:	003fd706 	br	80efa4 <__register_exitproc+0x90>

0080f048 <register_fini>:
  80f048:	f800283a 	ret

0080f04c <__call_exitprocs>:
  80f04c:	00802274 	movhi	r2,137
  80f050:	10a4f904 	addi	r2,r2,-27676
  80f054:	10800017 	ldw	r2,0(r2)
  80f058:	defff304 	addi	sp,sp,-52
  80f05c:	df000b15 	stw	fp,44(sp)
  80f060:	d8800115 	stw	r2,4(sp)
  80f064:	00800034 	movhi	r2,0
  80f068:	10800004 	addi	r2,r2,0
  80f06c:	1005003a 	cmpeq	r2,r2,zero
  80f070:	d8800215 	stw	r2,8(sp)
  80f074:	d8800117 	ldw	r2,4(sp)
  80f078:	dd400815 	stw	r21,32(sp)
  80f07c:	dd000715 	stw	r20,28(sp)
  80f080:	10805204 	addi	r2,r2,328
  80f084:	dfc00c15 	stw	ra,48(sp)
  80f088:	ddc00a15 	stw	r23,40(sp)
  80f08c:	dd800915 	stw	r22,36(sp)
  80f090:	dcc00615 	stw	r19,24(sp)
  80f094:	dc800515 	stw	r18,20(sp)
  80f098:	dc400415 	stw	r17,16(sp)
  80f09c:	dc000315 	stw	r16,12(sp)
  80f0a0:	282b883a 	mov	r21,r5
  80f0a4:	2039883a 	mov	fp,r4
  80f0a8:	d8800015 	stw	r2,0(sp)
  80f0ac:	2829003a 	cmpeq	r20,r5,zero
  80f0b0:	d8800117 	ldw	r2,4(sp)
  80f0b4:	14405217 	ldw	r17,328(r2)
  80f0b8:	88001026 	beq	r17,zero,80f0fc <__call_exitprocs+0xb0>
  80f0bc:	ddc00017 	ldw	r23,0(sp)
  80f0c0:	88800117 	ldw	r2,4(r17)
  80f0c4:	8c802204 	addi	r18,r17,136
  80f0c8:	143fffc4 	addi	r16,r2,-1
  80f0cc:	80000916 	blt	r16,zero,80f0f4 <__call_exitprocs+0xa8>
  80f0d0:	05bfffc4 	movi	r22,-1
  80f0d4:	a000151e 	bne	r20,zero,80f12c <__call_exitprocs+0xe0>
  80f0d8:	8409883a 	add	r4,r16,r16
  80f0dc:	2105883a 	add	r2,r4,r4
  80f0e0:	1485883a 	add	r2,r2,r18
  80f0e4:	10c02017 	ldw	r3,128(r2)
  80f0e8:	a8c01126 	beq	r21,r3,80f130 <__call_exitprocs+0xe4>
  80f0ec:	843fffc4 	addi	r16,r16,-1
  80f0f0:	85bff81e 	bne	r16,r22,80f0d4 <__call_exitprocs+0x88>
  80f0f4:	d8800217 	ldw	r2,8(sp)
  80f0f8:	10003126 	beq	r2,zero,80f1c0 <__call_exitprocs+0x174>
  80f0fc:	dfc00c17 	ldw	ra,48(sp)
  80f100:	df000b17 	ldw	fp,44(sp)
  80f104:	ddc00a17 	ldw	r23,40(sp)
  80f108:	dd800917 	ldw	r22,36(sp)
  80f10c:	dd400817 	ldw	r21,32(sp)
  80f110:	dd000717 	ldw	r20,28(sp)
  80f114:	dcc00617 	ldw	r19,24(sp)
  80f118:	dc800517 	ldw	r18,20(sp)
  80f11c:	dc400417 	ldw	r17,16(sp)
  80f120:	dc000317 	ldw	r16,12(sp)
  80f124:	dec00d04 	addi	sp,sp,52
  80f128:	f800283a 	ret
  80f12c:	8409883a 	add	r4,r16,r16
  80f130:	88c00117 	ldw	r3,4(r17)
  80f134:	2105883a 	add	r2,r4,r4
  80f138:	1445883a 	add	r2,r2,r17
  80f13c:	18ffffc4 	addi	r3,r3,-1
  80f140:	11800217 	ldw	r6,8(r2)
  80f144:	1c001526 	beq	r3,r16,80f19c <__call_exitprocs+0x150>
  80f148:	10000215 	stw	zero,8(r2)
  80f14c:	303fe726 	beq	r6,zero,80f0ec <__call_exitprocs+0xa0>
  80f150:	00c00044 	movi	r3,1
  80f154:	1c06983a 	sll	r3,r3,r16
  80f158:	90804017 	ldw	r2,256(r18)
  80f15c:	8cc00117 	ldw	r19,4(r17)
  80f160:	1884703a 	and	r2,r3,r2
  80f164:	10001426 	beq	r2,zero,80f1b8 <__call_exitprocs+0x16c>
  80f168:	90804117 	ldw	r2,260(r18)
  80f16c:	1884703a 	and	r2,r3,r2
  80f170:	10000c1e 	bne	r2,zero,80f1a4 <__call_exitprocs+0x158>
  80f174:	2105883a 	add	r2,r4,r4
  80f178:	1485883a 	add	r2,r2,r18
  80f17c:	11400017 	ldw	r5,0(r2)
  80f180:	e009883a 	mov	r4,fp
  80f184:	303ee83a 	callr	r6
  80f188:	88800117 	ldw	r2,4(r17)
  80f18c:	98bfc81e 	bne	r19,r2,80f0b0 <__call_exitprocs+0x64>
  80f190:	b8800017 	ldw	r2,0(r23)
  80f194:	147fd526 	beq	r2,r17,80f0ec <__call_exitprocs+0xa0>
  80f198:	003fc506 	br	80f0b0 <__call_exitprocs+0x64>
  80f19c:	8c000115 	stw	r16,4(r17)
  80f1a0:	003fea06 	br	80f14c <__call_exitprocs+0x100>
  80f1a4:	2105883a 	add	r2,r4,r4
  80f1a8:	1485883a 	add	r2,r2,r18
  80f1ac:	11000017 	ldw	r4,0(r2)
  80f1b0:	303ee83a 	callr	r6
  80f1b4:	003ff406 	br	80f188 <__call_exitprocs+0x13c>
  80f1b8:	303ee83a 	callr	r6
  80f1bc:	003ff206 	br	80f188 <__call_exitprocs+0x13c>
  80f1c0:	88800117 	ldw	r2,4(r17)
  80f1c4:	1000081e 	bne	r2,zero,80f1e8 <__call_exitprocs+0x19c>
  80f1c8:	89000017 	ldw	r4,0(r17)
  80f1cc:	20000726 	beq	r4,zero,80f1ec <__call_exitprocs+0x1a0>
  80f1d0:	b9000015 	stw	r4,0(r23)
  80f1d4:	8809883a 	mov	r4,r17
  80f1d8:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80f1dc:	bc400017 	ldw	r17,0(r23)
  80f1e0:	883fb71e 	bne	r17,zero,80f0c0 <__call_exitprocs+0x74>
  80f1e4:	003fc506 	br	80f0fc <__call_exitprocs+0xb0>
  80f1e8:	89000017 	ldw	r4,0(r17)
  80f1ec:	882f883a 	mov	r23,r17
  80f1f0:	2023883a 	mov	r17,r4
  80f1f4:	883fb21e 	bne	r17,zero,80f0c0 <__call_exitprocs+0x74>
  80f1f8:	003fc006 	br	80f0fc <__call_exitprocs+0xb0>

0080f1fc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80f1fc:	defffd04 	addi	sp,sp,-12
  80f200:	df000215 	stw	fp,8(sp)
  80f204:	df000204 	addi	fp,sp,8
  80f208:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80f20c:	e0bfff17 	ldw	r2,-4(fp)
  80f210:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f214:	e0bffe17 	ldw	r2,-8(fp)
  80f218:	1005003a 	cmpeq	r2,r2,zero
  80f21c:	1000021e 	bne	r2,zero,80f228 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80f220:	002af070 	cmpltui	zero,zero,43969
  80f224:	00000106 	br	80f22c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80f228:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80f22c:	e037883a 	mov	sp,fp
  80f230:	df000017 	ldw	fp,0(sp)
  80f234:	dec00104 	addi	sp,sp,4
  80f238:	f800283a 	ret

0080f23c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f23c:	defffd04 	addi	sp,sp,-12
  80f240:	dfc00215 	stw	ra,8(sp)
  80f244:	df000115 	stw	fp,4(sp)
  80f248:	df000104 	addi	fp,sp,4
  80f24c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80f250:	e13fff17 	ldw	r4,-4(fp)
  80f254:	080f1fc0 	call	80f1fc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f258:	003fff06 	br	80f258 <_exit+0x1c>
  80f25c:	0080f048 	cmpgei	r2,zero,961
