
CUDoom.elf:     file format elf32-littlenios2
CUDoom.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0007ebac memsz 0x0007ebac flags r-x
    LOAD off    0x0007fbcc vaddr 0x0087ebcc paddr 0x00880440 align 2**12
         filesz 0x00001874 memsz 0x00001874 flags rw-
    LOAD off    0x00081cb4 vaddr 0x00881cb4 paddr 0x00881cb4 align 2**12
         filesz 0x00000000 memsz 0x0000f02c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000066f4  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00078324  008068a8  008068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001874  0087ebcc  00880440  0007fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f02c  00881cb4  00881cb4  00081cb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00081440  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000818  00000000  00000000  00081468  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000bbd  00000000  00000000  00081c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d778  00000000  00000000  0008283d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003f7b  00000000  00000000  0008ffb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a5a5  00000000  00000000  00093f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d84  00000000  00000000  0009e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012de  00000000  00000000  0009f25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003598  00000000  00000000  000a053a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000a3ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000290  00000000  00000000  000a3b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a5e1e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a5e21  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000a5e26  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000a5e27  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000a5e32  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  000a5e3d  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  000a5e48  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000022  00000000  00000000  000a5e50  2**0
                  CONTENTS, READONLY
 25 .jdi          000040c8  00000000  00000000  000a5e72  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002ec76  00000000  00000000  000a9f3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
008068a8 l    d  .rodata	00000000 .rodata
0087ebcc l    d  .rwdata	00000000 .rwdata
00881cb4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0087e928 l     O .rodata	00000108 two_over_pi
0087e8a8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0087ea30 l     O .rodata	00000010 init_jk
0087ea40 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
00803214 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00803e44 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0080463c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0087ee0c l     O .rwdata	00001060 jtag_uart_0
0080478c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008049cc l     F .text	00000228 altera_avalon_jtag_uart_irq
00804bf4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008054c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00805564 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00805644 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805a68 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00805ba4 l     F .text	000000dc alt_file_locked
00805e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00880014 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00806690 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00806844 l     F .text	00000040 alt_sim_halt
008046a8 g     F .text	0000006c alt_main
00890a50 g     O .bss	00000100 alt_irq
00802dd4 g     F .text	00000018 fabs
00880440 g       *ABS*	00000000 __flash_rwdata_start
00803adc g     F .text	00000088 __eqdf2
00881cd0 g     O .bss	00003660 dirsine
00800a78 g     F .text	000000f8 DrawTexture
008068a8 g     O .rodata	00078000 sky
00803b64 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00881ccc g     O .bss	00000004 errno
00802dec g     F .text	00000224 floor
00881cb8 g     O .bss	00000004 alt_argv
00888414 g       *ABS*	00000000 _gp
0087fe94 g     O .rwdata	00000180 alt_fd_list
00800eec g     F .text	00000828 __ieee754_rem_pio2
0080608c g     F .text	00000094 alt_find_dev
00806448 g     F .text	000000a0 memcpy
0087ebcc g     O .rwdata	00000240 worldMap
00803c74 g     F .text	000000f8 __floatsidf
00805b2c g     F .text	00000078 alt_io_redirect
008068a8 g       *ABS*	00000000 __DTOR_END__
008009f4 g     F .text	00000028 intToDouble
0080606c g     F .text	00000020 altera_nios2_irq_init
00804e0c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803f80 g     F .text	00000008 __udivsi3
00801714 g     F .text	0000052c __kernel_cos
008062f8 g     F .text	00000090 alt_icache_flush
00880424 g     O .rwdata	00000004 alt_max_fd
008043bc g     F .text	00000138 __unpack_d
00802abc g     F .text	00000318 __kernel_sin
008036a4 g     F .text	00000074 __adddf3
0088043c g     O .rwdata	00000004 _global_impure_ptr
00890ce0 g       *ABS*	00000000 __bss_end
00805970 g     F .text	000000f8 alt_iic_isr_register
00805f60 g     F .text	0000010c alt_tick
00805928 g     F .text	00000048 alt_ic_irq_enabled
00805ec8 g     F .text	00000098 alt_alarm_stop
00881cc0 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0087fe6c g     O .rwdata	00000028 alt_dev_null
00801c40 g     F .text	00000e7c __kernel_rem_pio2
00805520 g     F .text	00000044 alt_dcache_flush_all
00803d6c g     F .text	000000d8 __fixdfsi
00880440 g       *ABS*	00000000 __ram_rwdata_end
00885330 g     O .bss	00003660 sine
0088041c g     O .rwdata	00000008 alt_dev_list
0087ebcc g       *ABS*	00000000 __ram_rodata_end
00803f88 g     F .text	00000008 __umodsi3
00890ce0 g       *ABS*	00000000 end
0080490c g     F .text	000000c0 altera_avalon_jtag_uart_init
008068a4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804028 g     F .text	00000080 __clzsi2
00805030 g     F .text	00000240 altera_avalon_jtag_uart_write
00800c18 g     F .text	00000168 cos
00806694 g     F .text	000001b0 __call_exitprocs
008001b4 g     F .text	0000004c _start
00881cc4 g     O .bss	00000004 _alt_tick_rate
00800d80 g     F .text	0000016c sin
00881cc8 g     O .bss	00000004 _alt_nticks
00804748 g     F .text	00000044 alt_sys_init
0080655c g     F .text	00000134 __register_exitproc
00804ca4 g     F .text	00000074 altera_avalon_jtag_uart_close
00888990 g     O .bss	00003660 cosine
0087ebcc g       *ABS*	00000000 __ram_rwdata_start
008068a8 g       *ABS*	00000000 __ram_rodata_start
008047c4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00806240 g     F .text	000000b8 alt_get_fd
008044f4 g     F .text	000000c8 __fpcmp_parts_d
008063d4 g     F .text	00000074 memcmp
00804874 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00890ce0 g       *ABS*	00000000 __alt_stack_base
008048bc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803718 g     F .text	000003c4 __muldf3
00806120 g     F .text	00000120 alt_find_file
00805590 g     F .text	000000b4 alt_dev_llist_insert
00881cb4 g       *ABS*	00000000 __bss_start
00800200 g     F .text	000007b8 main
00881cbc g     O .bss	00000004 alt_envp
0080481c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00890b50 g     O .bss	00000190 _atexit0
00880428 g     O .rwdata	00000004 alt_errno
00803ec0 g     F .text	00000060 __divsi3
0087ea80 g     O .rodata	00000014 __thenan_df
008068a8 g       *ABS*	00000000 __CTOR_END__
008068a8 g       *ABS*	00000000 __flash_rodata_start
008068a8 g       *ABS*	00000000 __DTOR_LIST__
008031f0 g     F .text	00000024 copysign
00804714 g     F .text	00000034 alt_irq_init
00805e68 g     F .text	00000060 alt_release_fd
0087ea94 g     O .rodata	00000100 __clz_tab
00806388 g     F .text	00000014 atexit
00880438 g     O .rwdata	00000004 _impure_ptr
00881cb4 g     O .bss	00000004 alt_argc
00803010 g     F .text	000001e0 scalbn
00805708 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008009b8 g     F .text	0000003c absVal
00880414 g     O .rwdata	00000008 alt_fs_list
00800a1c g     F .text	0000005c doubleToInt
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080579c g     F .text	00000050 alt_ic_isr_register
00880440 g       *ABS*	00000000 _edata
00890ce0 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00804d18 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0088bff0 g     O .bss	00000a00 stoparray
00805888 g     F .text	000000a0 alt_ic_irq_disable
0080639c g     F .text	00000038 exit
00803f20 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806884 g     F .text	00000020 _exit
00805270 g     F .text	00000154 alt_alarm_start
00803f90 g     F .text	00000098 __muldi3
008064e8 g     F .text	00000074 strlen
00805c80 g     F .text	00000188 open
00803bec g     F .text	00000088 __gedf2
0080576c g     F .text	00000030 alt_icache_flush_all
0088042c g     O .rwdata	00000004 alt_priority_mask
008057ec g     F .text	0000009c alt_ic_irq_enable
00803624 g     F .text	00000080 __subdf3
00800b70 g     F .text	000000a8 DrawAccelerate
00880430 g     O .rwdata	00000008 alt_alarm_list
008056a4 g     F .text	00000064 _do_ctors
0088c9f0 g     O .bss	00000a00 startarray
008053c4 g     F .text	000000fc close
008045bc g     F .text	00000080 alt_load
008040a8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0088d3f0 g     O .bss	00003660 dircosine



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02274 	movhi	r3,137
  800134:	18c29404 	addi	r3,r3,2640
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02274 	movhi	r3,137
  80014c:	18c29404 	addi	r3,r3,2640
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802234 	movhi	gp,136
    ori gp, gp, %lo(_gp)
  8001d0:	d6a10514 	ori	gp,gp,33812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802234 	movhi	r2,136
    ori r2, r2, %lo(__bss_start)
  8001d8:	10872d14 	ori	r2,r2,7348

    movhi r3, %hi(__bss_end)
  8001dc:	00c02274 	movhi	r3,137
    ori r3, r3, %lo(__bss_end)
  8001e0:	18c33814 	ori	r3,r3,3296

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08045bc0 	call	8045bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08046a80 	call	8046a8 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <main>:
int cosine[lookupLength];
//int inv_sine[lookupLength];
//int inv_cosine[lookupLength];

int main()
{
  800200:	deffe604 	addi	sp,sp,-104
  800204:	dfc01915 	stw	ra,100(sp)
  800208:	df001815 	stw	fp,96(sp)
  80020c:	dc001715 	stw	r16,92(sp)
  800210:	df001704 	addi	fp,sp,92

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800214:	00804234 	movhi	r2,264
  800218:	10840004 	addi	r2,r2,4096
  80021c:	10000035 	stwio	zero,0(r2)
	int dir = 0;
  800220:	e03fff15 	stw	zero,-4(fp)
	int posX = doubleToInt(22.0), posY = doubleToInt(11.5);  //x and y start position
  800224:	0009883a 	mov	r4,zero
  800228:	01500db4 	movhi	r5,16438
  80022c:	0800a1c0 	call	800a1c <doubleToInt>
  800230:	e0bffe15 	stw	r2,-8(fp)
  800234:	0009883a 	mov	r4,zero
  800238:	015009f4 	movhi	r5,16423
  80023c:	0800a1c0 	call	800a1c <doubleToInt>
  800240:	e0bffd15 	stw	r2,-12(fp)
 // int posX = 22, posY = 11;  //x and y start position
  int x =0;
  800244:	e03ffc15 	stw	zero,-16(fp)

  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);
  800248:	00804234 	movhi	r2,264
  80024c:	10bfff84 	addi	r2,r2,-2
  800250:	1000002d 	sthio	zero,0(r2)

  for(p = 0; p < 480; p++){
  800254:	e03ffb15 	stw	zero,-20(fp)
  800258:	00002d06 	br	800310 <main+0x110>
	  for(q = 0; q < 512; q++)
  80025c:	e03ffa15 	stw	zero,-24(fp)
  800260:	00002506 	br	8002f8 <main+0xf8>
	  {

		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));
  800264:	e0bffb17 	ldw	r2,-20(fp)
  800268:	1006927a 	slli	r3,r2,9
  80026c:	e0bffa17 	ldw	r2,-24(fp)
  800270:	1885883a 	add	r2,r3,r2
  800274:	1085883a 	add	r2,r2,r2
  800278:	1007883a 	mov	r3,r2
  80027c:	00804034 	movhi	r2,256
  800280:	1889883a 	add	r4,r3,r2
  800284:	e0bffb17 	ldw	r2,-20(fp)
  800288:	1006927a 	slli	r3,r2,9
  80028c:	e0bffa17 	ldw	r2,-24(fp)
  800290:	1885883a 	add	r2,r3,r2
  800294:	1085883a 	add	r2,r2,r2
  800298:	10c00044 	addi	r3,r2,1
  80029c:	00802034 	movhi	r2,128
  8002a0:	109a2a04 	addi	r2,r2,26792
  8002a4:	10c5883a 	add	r2,r2,r3
  8002a8:	10800003 	ldbu	r2,0(r2)
  8002ac:	10803fcc 	andi	r2,r2,255
  8002b0:	100a923a 	slli	r5,r2,8
  8002b4:	e0bffb17 	ldw	r2,-20(fp)
  8002b8:	1006927a 	slli	r3,r2,9
  8002bc:	e0bffa17 	ldw	r2,-24(fp)
  8002c0:	1885883a 	add	r2,r3,r2
  8002c4:	1085883a 	add	r2,r2,r2
  8002c8:	1007883a 	mov	r3,r2
  8002cc:	00802034 	movhi	r2,128
  8002d0:	109a2a04 	addi	r2,r2,26792
  8002d4:	10c5883a 	add	r2,r2,r3
  8002d8:	10800003 	ldbu	r2,0(r2)
  8002dc:	10803fcc 	andi	r2,r2,255
  8002e0:	2887883a 	add	r3,r5,r2
  8002e4:	2005883a 	mov	r2,r4
  8002e8:	10c0002d 	sthio	r3,0(r2)


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
	  for(q = 0; q < 512; q++)
  8002ec:	e0bffa17 	ldw	r2,-24(fp)
  8002f0:	10800044 	addi	r2,r2,1
  8002f4:	e0bffa15 	stw	r2,-24(fp)
  8002f8:	e0bffa17 	ldw	r2,-24(fp)
  8002fc:	10808010 	cmplti	r2,r2,512
  800300:	103fd81e 	bne	r2,zero,800264 <main+0x64>
  int p, q;


  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x0000);

  for(p = 0; p < 480; p++){
  800304:	e0bffb17 	ldw	r2,-20(fp)
  800308:	10800044 	addi	r2,r2,1
  80030c:	e0bffb15 	stw	r2,-20(fp)
  800310:	e0bffb17 	ldw	r2,-20(fp)
  800314:	10807810 	cmplti	r2,r2,480
  800318:	103fd01e 	bne	r2,zero,80025c <main+0x5c>
		  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, p*512+q, (sky[p*1024+q*2+1]<<8) + (sky[p*1024+q*2]));

	  }
  }

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  80031c:	00c04234 	movhi	r3,264
  800320:	18ffff84 	addi	r3,r3,-2
  800324:	008003c4 	movi	r2,15
  800328:	1880002d 	sthio	r2,0(r3)
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  80032c:	e03ffc15 	stw	zero,-16(fp)
  800330:	00009906 	br	800598 <main+0x398>
	{
			//calculate ray position and direction

		sine_temp = sin(x*RAD + HALF_RAD);
  800334:	e13ffc17 	ldw	r4,-16(fp)
  800338:	0803c740 	call	803c74 <__floatsidf>
  80033c:	100b883a 	mov	r5,r2
  800340:	180d883a 	mov	r6,r3
  800344:	2809883a 	mov	r4,r5
  800348:	300b883a 	mov	r5,r6
  80034c:	01b5ed74 	movhi	r6,55221
  800350:	31b85344 	addi	r6,r6,-7859
  800354:	01cfd7b4 	movhi	r7,16222
  800358:	39e53784 	addi	r7,r7,-27426
  80035c:	08037180 	call	803718 <__muldf3>
  800360:	1009883a 	mov	r4,r2
  800364:	180b883a 	mov	r5,r3
  800368:	2005883a 	mov	r2,r4
  80036c:	2807883a 	mov	r3,r5
  800370:	1009883a 	mov	r4,r2
  800374:	180b883a 	mov	r5,r3
  800378:	01b5ed74 	movhi	r6,55221
  80037c:	31b85344 	addi	r6,r6,-7859
  800380:	01cfd3b4 	movhi	r7,16206
  800384:	39e53784 	addi	r7,r7,-27426
  800388:	08036a40 	call	8036a4 <__adddf3>
  80038c:	1009883a 	mov	r4,r2
  800390:	180b883a 	mov	r5,r3
  800394:	2005883a 	mov	r2,r4
  800398:	2807883a 	mov	r3,r5
  80039c:	1009883a 	mov	r4,r2
  8003a0:	180b883a 	mov	r5,r3
  8003a4:	0800d800 	call	800d80 <sin>
  8003a8:	1009883a 	mov	r4,r2
  8003ac:	180b883a 	mov	r5,r3
  8003b0:	e13ff815 	stw	r4,-32(fp)
  8003b4:	e17ff915 	stw	r5,-28(fp)
		cosine_temp = cos(x*RAD + HALF_RAD);
  8003b8:	e13ffc17 	ldw	r4,-16(fp)
  8003bc:	0803c740 	call	803c74 <__floatsidf>
  8003c0:	100b883a 	mov	r5,r2
  8003c4:	180d883a 	mov	r6,r3
  8003c8:	2809883a 	mov	r4,r5
  8003cc:	300b883a 	mov	r5,r6
  8003d0:	01b5ed74 	movhi	r6,55221
  8003d4:	31b85344 	addi	r6,r6,-7859
  8003d8:	01cfd7b4 	movhi	r7,16222
  8003dc:	39e53784 	addi	r7,r7,-27426
  8003e0:	08037180 	call	803718 <__muldf3>
  8003e4:	1009883a 	mov	r4,r2
  8003e8:	180b883a 	mov	r5,r3
  8003ec:	2005883a 	mov	r2,r4
  8003f0:	2807883a 	mov	r3,r5
  8003f4:	1009883a 	mov	r4,r2
  8003f8:	180b883a 	mov	r5,r3
  8003fc:	01b5ed74 	movhi	r6,55221
  800400:	31b85344 	addi	r6,r6,-7859
  800404:	01cfd3b4 	movhi	r7,16206
  800408:	39e53784 	addi	r7,r7,-27426
  80040c:	08036a40 	call	8036a4 <__adddf3>
  800410:	1009883a 	mov	r4,r2
  800414:	180b883a 	mov	r5,r3
  800418:	2005883a 	mov	r2,r4
  80041c:	2807883a 	mov	r3,r5
  800420:	1009883a 	mov	r4,r2
  800424:	180b883a 	mov	r5,r3
  800428:	0800c180 	call	800c18 <cos>
  80042c:	1009883a 	mov	r4,r2
  800430:	180b883a 	mov	r5,r3
  800434:	e13ff615 	stw	r4,-40(fp)
  800438:	e17ff715 	stw	r5,-36(fp)

		dirsine[x] = doubleToInt(sin(x*RAD));
  80043c:	e43ffc17 	ldw	r16,-16(fp)
  800440:	e13ffc17 	ldw	r4,-16(fp)
  800444:	0803c740 	call	803c74 <__floatsidf>
  800448:	100b883a 	mov	r5,r2
  80044c:	180d883a 	mov	r6,r3
  800450:	2809883a 	mov	r4,r5
  800454:	300b883a 	mov	r5,r6
  800458:	01b5ed74 	movhi	r6,55221
  80045c:	31b85344 	addi	r6,r6,-7859
  800460:	01cfd7b4 	movhi	r7,16222
  800464:	39e53784 	addi	r7,r7,-27426
  800468:	08037180 	call	803718 <__muldf3>
  80046c:	1009883a 	mov	r4,r2
  800470:	180b883a 	mov	r5,r3
  800474:	2005883a 	mov	r2,r4
  800478:	2807883a 	mov	r3,r5
  80047c:	1009883a 	mov	r4,r2
  800480:	180b883a 	mov	r5,r3
  800484:	0800d800 	call	800d80 <sin>
  800488:	100b883a 	mov	r5,r2
  80048c:	180d883a 	mov	r6,r3
  800490:	2809883a 	mov	r4,r5
  800494:	300b883a 	mov	r5,r6
  800498:	0800a1c0 	call	800a1c <doubleToInt>
  80049c:	1009883a 	mov	r4,r2
  8004a0:	00c02234 	movhi	r3,136
  8004a4:	18c73404 	addi	r3,r3,7376
  8004a8:	8405883a 	add	r2,r16,r16
  8004ac:	1085883a 	add	r2,r2,r2
  8004b0:	10c5883a 	add	r2,r2,r3
  8004b4:	11000015 	stw	r4,0(r2)
		dircosine[x] = doubleToInt(cos(x*RAD));
  8004b8:	e43ffc17 	ldw	r16,-16(fp)
  8004bc:	e13ffc17 	ldw	r4,-16(fp)
  8004c0:	0803c740 	call	803c74 <__floatsidf>
  8004c4:	100b883a 	mov	r5,r2
  8004c8:	180d883a 	mov	r6,r3
  8004cc:	2809883a 	mov	r4,r5
  8004d0:	300b883a 	mov	r5,r6
  8004d4:	01b5ed74 	movhi	r6,55221
  8004d8:	31b85344 	addi	r6,r6,-7859
  8004dc:	01cfd7b4 	movhi	r7,16222
  8004e0:	39e53784 	addi	r7,r7,-27426
  8004e4:	08037180 	call	803718 <__muldf3>
  8004e8:	1009883a 	mov	r4,r2
  8004ec:	180b883a 	mov	r5,r3
  8004f0:	2005883a 	mov	r2,r4
  8004f4:	2807883a 	mov	r3,r5
  8004f8:	1009883a 	mov	r4,r2
  8004fc:	180b883a 	mov	r5,r3
  800500:	0800c180 	call	800c18 <cos>
  800504:	100b883a 	mov	r5,r2
  800508:	180d883a 	mov	r6,r3
  80050c:	2809883a 	mov	r4,r5
  800510:	300b883a 	mov	r5,r6
  800514:	0800a1c0 	call	800a1c <doubleToInt>
  800518:	1009883a 	mov	r4,r2
  80051c:	00c02274 	movhi	r3,137
  800520:	18f4fc04 	addi	r3,r3,-11280
  800524:	8405883a 	add	r2,r16,r16
  800528:	1085883a 	add	r2,r2,r2
  80052c:	10c5883a 	add	r2,r2,r3
  800530:	11000015 	stw	r4,0(r2)
		sine[x] = doubleToInt(sine_temp);
  800534:	e43ffc17 	ldw	r16,-16(fp)
  800538:	e13ff817 	ldw	r4,-32(fp)
  80053c:	e17ff917 	ldw	r5,-28(fp)
  800540:	0800a1c0 	call	800a1c <doubleToInt>
  800544:	1009883a 	mov	r4,r2
  800548:	00c02234 	movhi	r3,136
  80054c:	18d4cc04 	addi	r3,r3,21296
  800550:	8405883a 	add	r2,r16,r16
  800554:	1085883a 	add	r2,r2,r2
  800558:	10c5883a 	add	r2,r2,r3
  80055c:	11000015 	stw	r4,0(r2)
		cosine[x] = doubleToInt(cosine_temp);
  800560:	e43ffc17 	ldw	r16,-16(fp)
  800564:	e13ff617 	ldw	r4,-40(fp)
  800568:	e17ff717 	ldw	r5,-36(fp)
  80056c:	0800a1c0 	call	800a1c <doubleToInt>
  800570:	1009883a 	mov	r4,r2
  800574:	00c02274 	movhi	r3,137
  800578:	18e26404 	addi	r3,r3,-30320
  80057c:	8405883a 	add	r2,r16,r16
  800580:	1085883a 	add	r2,r2,r2
  800584:	10c5883a 	add	r2,r2,r3
  800588:	11000015 	stw	r4,0(r2)

  IOSKYWR_RAM_DATA(SKYGEN_0_BASE, 262143, 0x000F);
  double sine_temp;
  double cosine_temp;

	for(x = 0; x < lookupLength ; x++)
  80058c:	e0bffc17 	ldw	r2,-16(fp)
  800590:	10800044 	addi	r2,r2,1
  800594:	e0bffc15 	stw	r2,-16(fp)
  800598:	e0bffc17 	ldw	r2,-16(fp)
  80059c:	10836610 	cmplti	r2,r2,3480
  8005a0:	103f641e 	bne	r2,zero,800334 <main+0x134>
  int k;
  int k2;
  //char key[] = { 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d',
//		  'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d', 'd','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d'};

  unsigned char code = 0;
  8005a4:	e03fed05 	stb	zero,-76(fp)
  //char key[] = {'d'};
  k2 = 0;
  8005a8:	e03fee15 	stw	zero,-72(fp)
  //start the main loop
  //for (k2 = 0; k2 < sizeof(key); k2++)

  int hardwareData = 0;
  8005ac:	e03fec15 	stw	zero,-80(fp)
  8005b0:	00000006 	br	8005b4 <main+0x3b4>

  while(1)
  {

	  code = 0;
  8005b4:	e03fed05 	stb	zero,-76(fp)
		//while (!IORD_8DIRECT(DE2_PS2_0_BASE, 0)) ; /* Poll the status */

//		code = IORD_8DIRECT(DE2_PS2_0_BASE, 0);

//		if (code)
			code = IORD_8DIRECT(DE2_PS2_0_BASE, 1);
  8005b8:	00804234 	movhi	r2,264
  8005bc:	10842244 	addi	r2,r2,4233
  8005c0:	10800023 	ldbuio	r2,0(r2)
  8005c4:	e0bfed05 	stb	r2,-76(fp)

	  //hardwareData = IORD_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1);
	  //printf("%d\n", hardwareData >> 4);


     x = 0;
  8005c8:	e03ffc15 	stw	zero,-16(fp)
    for(k = -halfScreenWidth; k < halfScreenWidth; k++)
  8005cc:	00bfb004 	movi	r2,-320
  8005d0:	e0bfef15 	stw	r2,-68(fp)
  8005d4:	00005e06 	br	800750 <main+0x550>
    {
        angle = dir + k;
  8005d8:	e0ffff17 	ldw	r3,-4(fp)
  8005dc:	e0bfef17 	ldw	r2,-68(fp)
  8005e0:	1885883a 	add	r2,r3,r2
  8005e4:	e0bff515 	stw	r2,-44(fp)

        if ( angle < 0)
  8005e8:	e0bff517 	ldw	r2,-44(fp)
  8005ec:	1004403a 	cmpge	r2,r2,zero
  8005f0:	1000031e 	bne	r2,zero,800600 <main+0x400>
                angle += lookupLength;
  8005f4:	e0bff517 	ldw	r2,-44(fp)
  8005f8:	10836604 	addi	r2,r2,3480
  8005fc:	e0bff515 	stw	r2,-44(fp)

        if (angle >= lookupLength)
  800600:	e0bff517 	ldw	r2,-44(fp)
  800604:	10836610 	cmplti	r2,r2,3480
  800608:	1000031e 	bne	r2,zero,800618 <main+0x418>
                angle -= lookupLength;
  80060c:	e0bff517 	ldw	r2,-44(fp)
  800610:	10bc9a04 	addi	r2,r2,-3480
  800614:	e0bff515 	stw	r2,-44(fp)

        fish_angle = k;
  800618:	e0bfef17 	ldw	r2,-68(fp)
  80061c:	e0bff415 	stw	r2,-48(fp)

        if ( fish_angle < 0)
  800620:	e0bff417 	ldw	r2,-48(fp)
  800624:	1004403a 	cmpge	r2,r2,zero
  800628:	1000031e 	bne	r2,zero,800638 <main+0x438>
            fish_angle += lookupLength;
  80062c:	e0bff417 	ldw	r2,-48(fp)
  800630:	10836604 	addi	r2,r2,3480
  800634:	e0bff415 	stw	r2,-48(fp)

        if (fish_angle >= lookupLength)
  800638:	e0bff417 	ldw	r2,-48(fp)
  80063c:	10836610 	cmplti	r2,r2,3480
  800640:	1000031e 	bne	r2,zero,800650 <main+0x450>
             fish_angle -= lookupLength;
  800644:	e0bff417 	ldw	r2,-48(fp)
  800648:	10bc9a04 	addi	r2,r2,-3480
  80064c:	e0bff415 	stw	r2,-48(fp)


      //calculate ray position and direction
      //double cameraX = 2*x/double(w)-1; //x-coordinate in camera space
      rayDirX = cosine[angle]>>extensionFactor;
  800650:	e0bff517 	ldw	r2,-44(fp)
  800654:	00c02274 	movhi	r3,137
  800658:	18e26404 	addi	r3,r3,-30320
  80065c:	1085883a 	add	r2,r2,r2
  800660:	1085883a 	add	r2,r2,r2
  800664:	10c5883a 	add	r2,r2,r3
  800668:	10800017 	ldw	r2,0(r2)
  80066c:	1005d1ba 	srai	r2,r2,6
  800670:	e0bff215 	stw	r2,-56(fp)
      rayDirY = sine[angle]>>extensionFactor;
  800674:	e0bff517 	ldw	r2,-44(fp)
  800678:	00c02234 	movhi	r3,136
  80067c:	18d4cc04 	addi	r3,r3,21296
  800680:	1085883a 	add	r2,r2,r2
  800684:	1085883a 	add	r2,r2,r2
  800688:	10c5883a 	add	r2,r2,r3
  80068c:	10800017 	ldw	r2,0(r2)
  800690:	1005d1ba 	srai	r2,r2,6
  800694:	e0bff115 	stw	r2,-60(fp)
      count_step = cosine[fish_angle]>>extensionFactor;
  800698:	e0bff417 	ldw	r2,-48(fp)
  80069c:	00c02274 	movhi	r3,137
  8006a0:	18e26404 	addi	r3,r3,-30320
  8006a4:	1085883a 	add	r2,r2,r2
  8006a8:	1085883a 	add	r2,r2,r2
  8006ac:	10c5883a 	add	r2,r2,r3
  8006b0:	10800017 	ldw	r2,0(r2)
  8006b4:	1005d1ba 	srai	r2,r2,6
  8006b8:	e0bff015 	stw	r2,-64(fp)

 //     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
    //  printf("%d\n", hardwareData);
     DrawAccelerate(angle, posX, posY, count_step, rayDirX, rayDirY, x);
  8006bc:	e0fffc17 	ldw	r3,-16(fp)
  8006c0:	e0bff217 	ldw	r2,-56(fp)
  8006c4:	d8800015 	stw	r2,0(sp)
  8006c8:	e0bff117 	ldw	r2,-60(fp)
  8006cc:	d8800115 	stw	r2,4(sp)
  8006d0:	d8c00215 	stw	r3,8(sp)
  8006d4:	e13ff517 	ldw	r4,-44(fp)
  8006d8:	e17ffe17 	ldw	r5,-8(fp)
  8006dc:	e1bffd17 	ldw	r6,-12(fp)
  8006e0:	e1fff017 	ldw	r7,-64(fp)
  8006e4:	0800b700 	call	800b70 <DrawAccelerate>
     IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  8006e8:	00804234 	movhi	r2,264
  8006ec:	10840004 	addi	r2,r2,4096
  8006f0:	10000035 	stwio	zero,0(r2)



     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  8006f4:	00804234 	movhi	r2,264
  8006f8:	10840044 	addi	r2,r2,4097
  8006fc:	10800037 	ldwio	r2,0(r2)
  800700:	e0bfec15 	stw	r2,-80(fp)

	 while (!(hardwareData & 1)){
  800704:	00000406 	br	800718 <main+0x518>
		 hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);
  800708:	00804234 	movhi	r2,264
  80070c:	10840044 	addi	r2,r2,4097
  800710:	10800037 	ldwio	r2,0(r2)
  800714:	e0bfec15 	stw	r2,-80(fp)



     hardwareData = IORD_32DIRECT(NIOSINTERFACE_1_0_BASE, 1);

	 while (!(hardwareData & 1)){
  800718:	e0bfec17 	ldw	r2,-80(fp)
  80071c:	1080004c 	andi	r2,r2,1
  800720:	1005003a 	cmpeq	r2,r2,zero
  800724:	103ff81e 	bne	r2,zero,800708 <main+0x508>
	  }


      //IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);

      IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0xFFFFFFFF);
  800728:	00c04234 	movhi	r3,264
  80072c:	18c40004 	addi	r3,r3,4096
  800730:	00bfffc4 	movi	r2,-1
  800734:	18800035 	stwio	r2,0(r3)
      //draw the pixels of the stripe as a vertical line
      //DrawColumn(x, color, drawStart, drawEnd, side);
      //DrawColumn(x, color, lineHeight, side);
      //verLine(x, drawStart, drawEnd, color);

      x++;
  800738:	e0bffc17 	ldw	r2,-16(fp)
  80073c:	10800044 	addi	r2,r2,1
  800740:	e0bffc15 	stw	r2,-16(fp)
	  //hardwareData = IORD_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1);
	  //printf("%d\n", hardwareData >> 4);


     x = 0;
    for(k = -halfScreenWidth; k < halfScreenWidth; k++)
  800744:	e0bfef17 	ldw	r2,-68(fp)
  800748:	10800044 	addi	r2,r2,1
  80074c:	e0bfef15 	stw	r2,-68(fp)
  800750:	e0bfef17 	ldw	r2,-68(fp)
  800754:	10805010 	cmplti	r2,r2,320
  800758:	103f9f1e 	bne	r2,zero,8005d8 <main+0x3d8>
    }



    //move forward if no wall in front of you
    if (code =='u')
  80075c:	e0bfed03 	ldbu	r2,-76(fp)
  800760:	10801d58 	cmpnei	r2,r2,117
  800764:	10003c1e 	bne	r2,zero,800858 <main+0x658>
    {
        move = dircosine[dir]>>4;
  800768:	e0bfff17 	ldw	r2,-4(fp)
  80076c:	00c02274 	movhi	r3,137
  800770:	18f4fc04 	addi	r3,r3,-11280
  800774:	1085883a 	add	r2,r2,r2
  800778:	1085883a 	add	r2,r2,r2
  80077c:	10c5883a 	add	r2,r2,r3
  800780:	10800017 	ldw	r2,0(r2)
  800784:	1005d13a 	srai	r2,r2,4
  800788:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[(posX + move)>>posShift][posY>>posShift] == 0)
  80078c:	e0fffe17 	ldw	r3,-8(fp)
  800790:	e0bff317 	ldw	r2,-52(fp)
  800794:	1885883a 	add	r2,r3,r2
  800798:	1009d5ba 	srai	r4,r2,22
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	100bd5ba 	srai	r5,r2,22
  8007a4:	00c02234 	movhi	r3,136
  8007a8:	18faf304 	addi	r3,r3,-5172
  8007ac:	20800624 	muli	r2,r4,24
  8007b0:	10c5883a 	add	r2,r2,r3
  8007b4:	1145883a 	add	r2,r2,r5
  8007b8:	10800003 	ldbu	r2,0(r2)
  8007bc:	10803fcc 	andi	r2,r2,255
  8007c0:	1080201c 	xori	r2,r2,128
  8007c4:	10bfe004 	addi	r2,r2,-128
  8007c8:	1004c03a 	cmpne	r2,r2,zero
  8007cc:	1000041e 	bne	r2,zero,8007e0 <main+0x5e0>
                posX += move;
  8007d0:	e0bffe17 	ldw	r2,-8(fp)
  8007d4:	e0fff317 	ldw	r3,-52(fp)
  8007d8:	10c5883a 	add	r2,r2,r3
  8007dc:	e0bffe15 	stw	r2,-8(fp)

        move = dirsine[dir]>>4;
  8007e0:	e0bfff17 	ldw	r2,-4(fp)
  8007e4:	00c02234 	movhi	r3,136
  8007e8:	18c73404 	addi	r3,r3,7376
  8007ec:	1085883a 	add	r2,r2,r2
  8007f0:	1085883a 	add	r2,r2,r2
  8007f4:	10c5883a 	add	r2,r2,r3
  8007f8:	10800017 	ldw	r2,0(r2)
  8007fc:	1005d13a 	srai	r2,r2,4
  800800:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[posX>>posShift][(posY+move)>>posShift] == 0)
  800804:	e0bffe17 	ldw	r2,-8(fp)
  800808:	100bd5ba 	srai	r5,r2,22
  80080c:	e0fffd17 	ldw	r3,-12(fp)
  800810:	e0bff317 	ldw	r2,-52(fp)
  800814:	1885883a 	add	r2,r3,r2
  800818:	1009d5ba 	srai	r4,r2,22
  80081c:	00c02234 	movhi	r3,136
  800820:	18faf304 	addi	r3,r3,-5172
  800824:	28800624 	muli	r2,r5,24
  800828:	10c5883a 	add	r2,r2,r3
  80082c:	1105883a 	add	r2,r2,r4
  800830:	10800003 	ldbu	r2,0(r2)
  800834:	10803fcc 	andi	r2,r2,255
  800838:	1080201c 	xori	r2,r2,128
  80083c:	10bfe004 	addi	r2,r2,-128
  800840:	1004c03a 	cmpne	r2,r2,zero
  800844:	1000041e 	bne	r2,zero,800858 <main+0x658>
                posY += move;
  800848:	e0bffd17 	ldw	r2,-12(fp)
  80084c:	e0fff317 	ldw	r3,-52(fp)
  800850:	10c5883a 	add	r2,r2,r3
  800854:	e0bffd15 	stw	r2,-12(fp)
    }
    //move backwards if no wall behind you
    if (code =='r')
  800858:	e0bfed03 	ldbu	r2,-76(fp)
  80085c:	10801c98 	cmpnei	r2,r2,114
  800860:	10003c1e 	bne	r2,zero,800954 <main+0x754>
    {
        move = dircosine[dir]>>4;
  800864:	e0bfff17 	ldw	r2,-4(fp)
  800868:	00c02274 	movhi	r3,137
  80086c:	18f4fc04 	addi	r3,r3,-11280
  800870:	1085883a 	add	r2,r2,r2
  800874:	1085883a 	add	r2,r2,r2
  800878:	10c5883a 	add	r2,r2,r3
  80087c:	10800017 	ldw	r2,0(r2)
  800880:	1005d13a 	srai	r2,r2,4
  800884:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[(posX - move)>>posShift][posY>>posShift] == 0)
  800888:	e0fffe17 	ldw	r3,-8(fp)
  80088c:	e0bff317 	ldw	r2,-52(fp)
  800890:	1885c83a 	sub	r2,r3,r2
  800894:	1009d5ba 	srai	r4,r2,22
  800898:	e0bffd17 	ldw	r2,-12(fp)
  80089c:	100bd5ba 	srai	r5,r2,22
  8008a0:	00c02234 	movhi	r3,136
  8008a4:	18faf304 	addi	r3,r3,-5172
  8008a8:	20800624 	muli	r2,r4,24
  8008ac:	10c5883a 	add	r2,r2,r3
  8008b0:	1145883a 	add	r2,r2,r5
  8008b4:	10800003 	ldbu	r2,0(r2)
  8008b8:	10803fcc 	andi	r2,r2,255
  8008bc:	1080201c 	xori	r2,r2,128
  8008c0:	10bfe004 	addi	r2,r2,-128
  8008c4:	1004c03a 	cmpne	r2,r2,zero
  8008c8:	1000041e 	bne	r2,zero,8008dc <main+0x6dc>
                posX -= move;
  8008cc:	e0bffe17 	ldw	r2,-8(fp)
  8008d0:	e0fff317 	ldw	r3,-52(fp)
  8008d4:	10c5c83a 	sub	r2,r2,r3
  8008d8:	e0bffe15 	stw	r2,-8(fp)

        move = dirsine[dir]>>4;
  8008dc:	e0bfff17 	ldw	r2,-4(fp)
  8008e0:	00c02234 	movhi	r3,136
  8008e4:	18c73404 	addi	r3,r3,7376
  8008e8:	1085883a 	add	r2,r2,r2
  8008ec:	1085883a 	add	r2,r2,r2
  8008f0:	10c5883a 	add	r2,r2,r3
  8008f4:	10800017 	ldw	r2,0(r2)
  8008f8:	1005d13a 	srai	r2,r2,4
  8008fc:	e0bff315 	stw	r2,-52(fp)
        if(worldMap[posX>>posShift][(posY - move)>>posShift] == 0)
  800900:	e0bffe17 	ldw	r2,-8(fp)
  800904:	100bd5ba 	srai	r5,r2,22
  800908:	e0fffd17 	ldw	r3,-12(fp)
  80090c:	e0bff317 	ldw	r2,-52(fp)
  800910:	1885c83a 	sub	r2,r3,r2
  800914:	1009d5ba 	srai	r4,r2,22
  800918:	00c02234 	movhi	r3,136
  80091c:	18faf304 	addi	r3,r3,-5172
  800920:	28800624 	muli	r2,r5,24
  800924:	10c5883a 	add	r2,r2,r3
  800928:	1105883a 	add	r2,r2,r4
  80092c:	10800003 	ldbu	r2,0(r2)
  800930:	10803fcc 	andi	r2,r2,255
  800934:	1080201c 	xori	r2,r2,128
  800938:	10bfe004 	addi	r2,r2,-128
  80093c:	1004c03a 	cmpne	r2,r2,zero
  800940:	1000041e 	bne	r2,zero,800954 <main+0x754>
                posY -= move;
  800944:	e0bffd17 	ldw	r2,-12(fp)
  800948:	e0fff317 	ldw	r3,-52(fp)
  80094c:	10c5c83a 	sub	r2,r2,r3
  800950:	e0bffd15 	stw	r2,-12(fp)
    }
    //rotate to the right
    if (code == 't')
  800954:	e0bfed03 	ldbu	r2,-76(fp)
  800958:	10801d18 	cmpnei	r2,r2,116
  80095c:	1000091e 	bne	r2,zero,800984 <main+0x784>
    {
      //both camera direction and camera plane must be rotated
       dir += 13;
  800960:	e0bfff17 	ldw	r2,-4(fp)
  800964:	10800344 	addi	r2,r2,13
  800968:	e0bfff15 	stw	r2,-4(fp)

       if(dir >= lookupLength)
  80096c:	e0bfff17 	ldw	r2,-4(fp)
  800970:	10836610 	cmplti	r2,r2,3480
  800974:	1000031e 	bne	r2,zero,800984 <main+0x784>
           dir -= lookupLength;
  800978:	e0bfff17 	ldw	r2,-4(fp)
  80097c:	10bc9a04 	addi	r2,r2,-3480
  800980:	e0bfff15 	stw	r2,-4(fp)
    }
    //rotate to the left
    if (code =='k')
  800984:	e0bfed03 	ldbu	r2,-76(fp)
  800988:	10801ad8 	cmpnei	r2,r2,107
  80098c:	103f091e 	bne	r2,zero,8005b4 <main+0x3b4>
    {
      //both camera direction and camera plane must be rotated
        dir -= 13;
  800990:	e0bfff17 	ldw	r2,-4(fp)
  800994:	10bffcc4 	addi	r2,r2,-13
  800998:	e0bfff15 	stw	r2,-4(fp)

        if (dir <0)
  80099c:	e0bfff17 	ldw	r2,-4(fp)
  8009a0:	1004403a 	cmpge	r2,r2,zero
  8009a4:	103f031e 	bne	r2,zero,8005b4 <main+0x3b4>
            dir += lookupLength;
  8009a8:	e0bfff17 	ldw	r2,-4(fp)
  8009ac:	10836604 	addi	r2,r2,3480
  8009b0:	e0bfff15 	stw	r2,-4(fp)
    }


  }
  8009b4:	003eff06 	br	8005b4 <main+0x3b4>

008009b8 <absVal>:

    return 0;
}

int absVal(int v)
{
  8009b8:	defffe04 	addi	sp,sp,-8
  8009bc:	df000115 	stw	fp,4(sp)
  8009c0:	df000104 	addi	fp,sp,4
  8009c4:	e13fff15 	stw	r4,-4(fp)
  return v * ((v>0) - (v<0));
  8009c8:	e0bfff17 	ldw	r2,-4(fp)
  8009cc:	10c00048 	cmpgei	r3,r2,1
  8009d0:	e0bfff17 	ldw	r2,-4(fp)
  8009d4:	1004d7fa 	srli	r2,r2,31
  8009d8:	1887c83a 	sub	r3,r3,r2
  8009dc:	e0bfff17 	ldw	r2,-4(fp)
  8009e0:	1885383a 	mul	r2,r3,r2
}
  8009e4:	e037883a 	mov	sp,fp
  8009e8:	df000017 	ldw	fp,0(sp)
  8009ec:	dec00104 	addi	sp,sp,4
  8009f0:	f800283a 	ret

008009f4 <intToDouble>:

int intToDouble(int a)
{
  8009f4:	defffe04 	addi	sp,sp,-8
  8009f8:	df000115 	stw	fp,4(sp)
  8009fc:	df000104 	addi	fp,sp,4
  800a00:	e13fff15 	stw	r4,-4(fp)

    return a>>posShift;
  800a04:	e0bfff17 	ldw	r2,-4(fp)
  800a08:	1005d5ba 	srai	r2,r2,22

}
  800a0c:	e037883a 	mov	sp,fp
  800a10:	df000017 	ldw	fp,0(sp)
  800a14:	dec00104 	addi	sp,sp,4
  800a18:	f800283a 	ret

00800a1c <doubleToInt>:


int doubleToInt(double a)
{
  800a1c:	defffc04 	addi	sp,sp,-16
  800a20:	dfc00315 	stw	ra,12(sp)
  800a24:	df000215 	stw	fp,8(sp)
  800a28:	df000204 	addi	fp,sp,8
  800a2c:	e13ffe15 	stw	r4,-8(fp)
  800a30:	e17fff15 	stw	r5,-4(fp)
    return (int)(a*(1<<posShift));
  800a34:	e13ffe17 	ldw	r4,-8(fp)
  800a38:	e17fff17 	ldw	r5,-4(fp)
  800a3c:	000d883a 	mov	r6,zero
  800a40:	01d05434 	movhi	r7,16720
  800a44:	08037180 	call	803718 <__muldf3>
  800a48:	1009883a 	mov	r4,r2
  800a4c:	180b883a 	mov	r5,r3
  800a50:	2005883a 	mov	r2,r4
  800a54:	2807883a 	mov	r3,r5
  800a58:	1009883a 	mov	r4,r2
  800a5c:	180b883a 	mov	r5,r3
  800a60:	0803d6c0 	call	803d6c <__fixdfsi>
}
  800a64:	e037883a 	mov	sp,fp
  800a68:	dfc00117 	ldw	ra,4(sp)
  800a6c:	df000017 	ldw	fp,0(sp)
  800a70:	dec00204 	addi	sp,sp,8
  800a74:	f800283a 	ret

00800a78 <DrawTexture>:


void DrawTexture(unsigned int columnIndex, unsigned int texX, unsigned int rowStart, unsigned int rowEnd, unsigned int side, unsigned int texNum, unsigned int invLineHeight , unsigned int line_minus_h)
{
  800a78:	defffb04 	addi	sp,sp,-20
  800a7c:	df000415 	stw	fp,16(sp)
  800a80:	df000404 	addi	fp,sp,16
  800a84:	e13ffc15 	stw	r4,-16(fp)
  800a88:	e17ffd15 	stw	r5,-12(fp)
  800a8c:	e1bffe15 	stw	r6,-8(fp)
  800a90:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex  << 22));
  800a94:	e0bffc17 	ldw	r2,-16(fp)
  800a98:	100495ba 	slli	r2,r2,22
  800a9c:	1007883a 	mov	r3,r2
  800aa0:	00804234 	movhi	r2,264
  800aa4:	10840804 	addi	r2,r2,4128
  800aa8:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, ((texNum & 3) + (texX <<2) + (rowEnd<< 8) + (rowStart<<17)+ ((invLineHeight & 0x3F)<<26)));
  800aac:	e0800217 	ldw	r2,8(fp)
  800ab0:	10c000cc 	andi	r3,r2,3
  800ab4:	e0bffd17 	ldw	r2,-12(fp)
  800ab8:	1085883a 	add	r2,r2,r2
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1887883a 	add	r3,r3,r2
  800ac4:	e0bfff17 	ldw	r2,-4(fp)
  800ac8:	1004923a 	slli	r2,r2,8
  800acc:	1887883a 	add	r3,r3,r2
  800ad0:	e0bffe17 	ldw	r2,-8(fp)
  800ad4:	1004947a 	slli	r2,r2,17
  800ad8:	1887883a 	add	r3,r3,r2
  800adc:	e0800317 	ldw	r2,12(fp)
  800ae0:	10800fcc 	andi	r2,r2,63
  800ae4:	100496ba 	slli	r2,r2,26
  800ae8:	1885883a 	add	r2,r3,r2
  800aec:	1007883a 	mov	r3,r2
  800af0:	00804234 	movhi	r2,264
  800af4:	10840104 	addi	r2,r2,4100
  800af8:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, ((invLineHeight & 0x3FFFF) >> 6) + ((line_minus_h & 0x3FFFF) << 12 ) + (side << 31));
  800afc:	e0c00317 	ldw	r3,12(fp)
  800b00:	00800134 	movhi	r2,4
  800b04:	10bfffc4 	addi	r2,r2,-1
  800b08:	1884703a 	and	r2,r3,r2
  800b0c:	1008d1ba 	srli	r4,r2,6
  800b10:	e0c00417 	ldw	r3,16(fp)
  800b14:	00800134 	movhi	r2,4
  800b18:	10bfffc4 	addi	r2,r2,-1
  800b1c:	1884703a 	and	r2,r3,r2
  800b20:	1004933a 	slli	r2,r2,12
  800b24:	2087883a 	add	r3,r4,r2
  800b28:	e0800117 	ldw	r2,4(fp)
  800b2c:	100497fa 	slli	r2,r2,31
  800b30:	1885883a 	add	r2,r3,r2
  800b34:	1007883a 	mov	r3,r2
  800b38:	00804234 	movhi	r2,264
  800b3c:	10840204 	addi	r2,r2,4104
  800b40:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 1);
  800b44:	00c04234 	movhi	r3,264
  800b48:	18c40004 	addi	r3,r3,4096
  800b4c:	00800044 	movi	r2,1
  800b50:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 0, 0);
  800b54:	00804234 	movhi	r2,264
  800b58:	10840004 	addi	r2,r2,4096
  800b5c:	10000035 	stwio	zero,0(r2)

	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800b60:	e037883a 	mov	sp,fp
  800b64:	df000017 	ldw	fp,0(sp)
  800b68:	dec00104 	addi	sp,sp,4
  800b6c:	f800283a 	ret

00800b70 <DrawAccelerate>:

void DrawAccelerate(int angle, int posX, int posY, int countstep, int rayDirX, int rayDirY, unsigned int columnIndex)
{
  800b70:	defffb04 	addi	sp,sp,-20
  800b74:	df000415 	stw	fp,16(sp)
  800b78:	df000404 	addi	fp,sp,16
  800b7c:	e13ffc15 	stw	r4,-16(fp)
  800b80:	e17ffd15 	stw	r5,-12(fp)
  800b84:	e1bffe15 	stw	r6,-8(fp)
  800b88:	e1ffff15 	stw	r7,-4(fp)

	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 8, (columnIndex << 22));
  800b8c:	e0800317 	ldw	r2,12(fp)
  800b90:	100495ba 	slli	r2,r2,22
  800b94:	1007883a 	mov	r3,r2
  800b98:	00804234 	movhi	r2,264
  800b9c:	10840804 	addi	r2,r2,4128
  800ba0:	10c00035 	stwio	r3,0(r2)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 1, posX);
  800ba4:	00c04234 	movhi	r3,264
  800ba8:	18c40104 	addi	r3,r3,4100
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 2, posY );
  800bb4:	00c04234 	movhi	r3,264
  800bb8:	18c40204 	addi	r3,r3,4104
  800bbc:	e0bffe17 	ldw	r2,-8(fp)
  800bc0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 3, countstep );
  800bc4:	00c04234 	movhi	r3,264
  800bc8:	18c40304 	addi	r3,r3,4108
  800bcc:	e0bfff17 	ldw	r2,-4(fp)
  800bd0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 4, rayDirX);
  800bd4:	00c04234 	movhi	r3,264
  800bd8:	18c40404 	addi	r3,r3,4112
  800bdc:	e0800117 	ldw	r2,4(fp)
  800be0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 5, rayDirY );
  800be4:	00c04234 	movhi	r3,264
  800be8:	18c40504 	addi	r3,r3,4116
  800bec:	e0800217 	ldw	r2,8(fp)
  800bf0:	18800035 	stwio	r2,0(r3)
	IOWR_RAM_DATA(NIOSINTERFACE_1_0_BASE, 6, angle & 0x03FF);
  800bf4:	e0bffc17 	ldw	r2,-16(fp)
  800bf8:	10c0ffcc 	andi	r3,r2,1023
  800bfc:	00804234 	movhi	r2,264
  800c00:	10840604 	addi	r2,r2,4120
  800c04:	10c00035 	stwio	r3,0(r2)



	//startarray[columnIndex] = (color + (endRow<< 8));
	//stoparray[columnIndex] = (side << 10) + (endRow >> (9 - 1)) + (startRow << 1);
}
  800c08:	e037883a 	mov	sp,fp
  800c0c:	df000017 	ldw	fp,0(sp)
  800c10:	dec00104 	addi	sp,sp,4
  800c14:	f800283a 	ret

00800c18 <cos>:
  800c18:	00a00034 	movhi	r2,32768
  800c1c:	10bfffc4 	addi	r2,r2,-1
  800c20:	defffa04 	addi	sp,sp,-24
  800c24:	114c703a 	and	r6,r2,r5
  800c28:	008ffa74 	movhi	r2,16361
  800c2c:	10887ec4 	addi	r2,r2,8699
  800c30:	dfc00515 	stw	ra,20(sp)
  800c34:	2011883a 	mov	r8,r4
  800c38:	1180210e 	bge	r2,r6,800cc0 <cos+0xa8>
  800c3c:	009ffc34 	movhi	r2,32752
  800c40:	10bfffc4 	addi	r2,r2,-1
  800c44:	11800a0e 	bge	r2,r6,800c70 <cos+0x58>
  800c48:	280f883a 	mov	r7,r5
  800c4c:	400d883a 	mov	r6,r8
  800c50:	08036240 	call	803624 <__subdf3>
  800c54:	100d883a 	mov	r6,r2
  800c58:	180f883a 	mov	r7,r3
  800c5c:	3005883a 	mov	r2,r6
  800c60:	3807883a 	mov	r3,r7
  800c64:	dfc00517 	ldw	ra,20(sp)
  800c68:	dec00604 	addi	sp,sp,24
  800c6c:	f800283a 	ret
  800c70:	d9800104 	addi	r6,sp,4
  800c74:	0800eec0 	call	800eec <__ieee754_rem_pio2>
  800c78:	10c000cc 	andi	r3,r2,3
  800c7c:	01000044 	movi	r4,1
  800c80:	19001926 	beq	r3,r4,800ce8 <cos+0xd0>
  800c84:	00800084 	movi	r2,2
  800c88:	18803126 	beq	r3,r2,800d50 <cos+0x138>
  800c8c:	1800231e 	bne	r3,zero,800d1c <cos+0x104>
  800c90:	d8800117 	ldw	r2,4(sp)
  800c94:	da000317 	ldw	r8,12(sp)
  800c98:	d8c00217 	ldw	r3,8(sp)
  800c9c:	da400417 	ldw	r9,16(sp)
  800ca0:	400d883a 	mov	r6,r8
  800ca4:	180b883a 	mov	r5,r3
  800ca8:	480f883a 	mov	r7,r9
  800cac:	1009883a 	mov	r4,r2
  800cb0:	08017140 	call	801714 <__kernel_cos>
  800cb4:	100d883a 	mov	r6,r2
  800cb8:	180f883a 	mov	r7,r3
  800cbc:	003fe706 	br	800c5c <cos+0x44>
  800cc0:	000d883a 	mov	r6,zero
  800cc4:	000f883a 	mov	r7,zero
  800cc8:	08017140 	call	801714 <__kernel_cos>
  800ccc:	100d883a 	mov	r6,r2
  800cd0:	180f883a 	mov	r7,r3
  800cd4:	3005883a 	mov	r2,r6
  800cd8:	3807883a 	mov	r3,r7
  800cdc:	dfc00517 	ldw	ra,20(sp)
  800ce0:	dec00604 	addi	sp,sp,24
  800ce4:	f800283a 	ret
  800ce8:	d8800117 	ldw	r2,4(sp)
  800cec:	da000317 	ldw	r8,12(sp)
  800cf0:	d8c00217 	ldw	r3,8(sp)
  800cf4:	da400417 	ldw	r9,16(sp)
  800cf8:	d9000015 	stw	r4,0(sp)
  800cfc:	400d883a 	mov	r6,r8
  800d00:	480f883a 	mov	r7,r9
  800d04:	180b883a 	mov	r5,r3
  800d08:	1009883a 	mov	r4,r2
  800d0c:	0802abc0 	call	802abc <__kernel_sin>
  800d10:	100d883a 	mov	r6,r2
  800d14:	19e0003c 	xorhi	r7,r3,32768
  800d18:	003fd006 	br	800c5c <cos+0x44>
  800d1c:	d8800117 	ldw	r2,4(sp)
  800d20:	da000317 	ldw	r8,12(sp)
  800d24:	d8c00217 	ldw	r3,8(sp)
  800d28:	da400417 	ldw	r9,16(sp)
  800d2c:	d9000015 	stw	r4,0(sp)
  800d30:	400d883a 	mov	r6,r8
  800d34:	480f883a 	mov	r7,r9
  800d38:	180b883a 	mov	r5,r3
  800d3c:	1009883a 	mov	r4,r2
  800d40:	0802abc0 	call	802abc <__kernel_sin>
  800d44:	100d883a 	mov	r6,r2
  800d48:	180f883a 	mov	r7,r3
  800d4c:	003fc306 	br	800c5c <cos+0x44>
  800d50:	d8800117 	ldw	r2,4(sp)
  800d54:	da000317 	ldw	r8,12(sp)
  800d58:	d8c00217 	ldw	r3,8(sp)
  800d5c:	da400417 	ldw	r9,16(sp)
  800d60:	400d883a 	mov	r6,r8
  800d64:	180b883a 	mov	r5,r3
  800d68:	480f883a 	mov	r7,r9
  800d6c:	1009883a 	mov	r4,r2
  800d70:	08017140 	call	801714 <__kernel_cos>
  800d74:	100d883a 	mov	r6,r2
  800d78:	19e0003c 	xorhi	r7,r3,32768
  800d7c:	003fb706 	br	800c5c <cos+0x44>

00800d80 <sin>:
  800d80:	00a00034 	movhi	r2,32768
  800d84:	10bfffc4 	addi	r2,r2,-1
  800d88:	defffa04 	addi	sp,sp,-24
  800d8c:	114c703a 	and	r6,r2,r5
  800d90:	008ffa74 	movhi	r2,16361
  800d94:	10887ec4 	addi	r2,r2,8699
  800d98:	dfc00515 	stw	ra,20(sp)
  800d9c:	2011883a 	mov	r8,r4
  800da0:	1180220e 	bge	r2,r6,800e2c <sin+0xac>
  800da4:	009ffc34 	movhi	r2,32752
  800da8:	10bfffc4 	addi	r2,r2,-1
  800dac:	11800a0e 	bge	r2,r6,800dd8 <sin+0x58>
  800db0:	280f883a 	mov	r7,r5
  800db4:	400d883a 	mov	r6,r8
  800db8:	08036240 	call	803624 <__subdf3>
  800dbc:	100d883a 	mov	r6,r2
  800dc0:	180f883a 	mov	r7,r3
  800dc4:	3005883a 	mov	r2,r6
  800dc8:	3807883a 	mov	r3,r7
  800dcc:	dfc00517 	ldw	ra,20(sp)
  800dd0:	dec00604 	addi	sp,sp,24
  800dd4:	f800283a 	ret
  800dd8:	d9800104 	addi	r6,sp,4
  800ddc:	0800eec0 	call	800eec <__ieee754_rem_pio2>
  800de0:	10c000cc 	andi	r3,r2,3
  800de4:	01000044 	movi	r4,1
  800de8:	19001b26 	beq	r3,r4,800e58 <sin+0xd8>
  800dec:	00800084 	movi	r2,2
  800df0:	18803126 	beq	r3,r2,800eb8 <sin+0x138>
  800df4:	1800241e 	bne	r3,zero,800e88 <sin+0x108>
  800df8:	d8800117 	ldw	r2,4(sp)
  800dfc:	da000317 	ldw	r8,12(sp)
  800e00:	d8c00217 	ldw	r3,8(sp)
  800e04:	da400417 	ldw	r9,16(sp)
  800e08:	d9000015 	stw	r4,0(sp)
  800e0c:	400d883a 	mov	r6,r8
  800e10:	480f883a 	mov	r7,r9
  800e14:	180b883a 	mov	r5,r3
  800e18:	1009883a 	mov	r4,r2
  800e1c:	0802abc0 	call	802abc <__kernel_sin>
  800e20:	100d883a 	mov	r6,r2
  800e24:	180f883a 	mov	r7,r3
  800e28:	003fe606 	br	800dc4 <sin+0x44>
  800e2c:	000d883a 	mov	r6,zero
  800e30:	000f883a 	mov	r7,zero
  800e34:	d8000015 	stw	zero,0(sp)
  800e38:	0802abc0 	call	802abc <__kernel_sin>
  800e3c:	100d883a 	mov	r6,r2
  800e40:	180f883a 	mov	r7,r3
  800e44:	3005883a 	mov	r2,r6
  800e48:	3807883a 	mov	r3,r7
  800e4c:	dfc00517 	ldw	ra,20(sp)
  800e50:	dec00604 	addi	sp,sp,24
  800e54:	f800283a 	ret
  800e58:	d8800117 	ldw	r2,4(sp)
  800e5c:	da000317 	ldw	r8,12(sp)
  800e60:	d8c00217 	ldw	r3,8(sp)
  800e64:	da400417 	ldw	r9,16(sp)
  800e68:	400d883a 	mov	r6,r8
  800e6c:	180b883a 	mov	r5,r3
  800e70:	480f883a 	mov	r7,r9
  800e74:	1009883a 	mov	r4,r2
  800e78:	08017140 	call	801714 <__kernel_cos>
  800e7c:	100d883a 	mov	r6,r2
  800e80:	180f883a 	mov	r7,r3
  800e84:	003fcf06 	br	800dc4 <sin+0x44>
  800e88:	d8800117 	ldw	r2,4(sp)
  800e8c:	da000317 	ldw	r8,12(sp)
  800e90:	d8c00217 	ldw	r3,8(sp)
  800e94:	da400417 	ldw	r9,16(sp)
  800e98:	400d883a 	mov	r6,r8
  800e9c:	180b883a 	mov	r5,r3
  800ea0:	480f883a 	mov	r7,r9
  800ea4:	1009883a 	mov	r4,r2
  800ea8:	08017140 	call	801714 <__kernel_cos>
  800eac:	100d883a 	mov	r6,r2
  800eb0:	19e0003c 	xorhi	r7,r3,32768
  800eb4:	003fc306 	br	800dc4 <sin+0x44>
  800eb8:	d8800117 	ldw	r2,4(sp)
  800ebc:	da000317 	ldw	r8,12(sp)
  800ec0:	d8c00217 	ldw	r3,8(sp)
  800ec4:	da400417 	ldw	r9,16(sp)
  800ec8:	d9000015 	stw	r4,0(sp)
  800ecc:	400d883a 	mov	r6,r8
  800ed0:	480f883a 	mov	r7,r9
  800ed4:	180b883a 	mov	r5,r3
  800ed8:	1009883a 	mov	r4,r2
  800edc:	0802abc0 	call	802abc <__kernel_sin>
  800ee0:	100d883a 	mov	r6,r2
  800ee4:	19e0003c 	xorhi	r7,r3,32768
  800ee8:	003fb606 	br	800dc4 <sin+0x44>

00800eec <__ieee754_rem_pio2>:
  800eec:	deffe304 	addi	sp,sp,-116
  800ef0:	00a00034 	movhi	r2,32768
  800ef4:	10bfffc4 	addi	r2,r2,-1
  800ef8:	dd801915 	stw	r22,100(sp)
  800efc:	28ac703a 	and	r22,r5,r2
  800f00:	008ffa74 	movhi	r2,16361
  800f04:	10887ec4 	addi	r2,r2,8699
  800f08:	df001b15 	stw	fp,108(sp)
  800f0c:	dfc01c15 	stw	ra,112(sp)
  800f10:	ddc01a15 	stw	r23,104(sp)
  800f14:	dd401815 	stw	r21,96(sp)
  800f18:	dd001715 	stw	r20,92(sp)
  800f1c:	dcc01615 	stw	r19,88(sp)
  800f20:	dc801515 	stw	r18,84(sp)
  800f24:	dc401415 	stw	r17,80(sp)
  800f28:	dc001315 	stw	r16,76(sp)
  800f2c:	2013883a 	mov	r9,r4
  800f30:	d9400a15 	stw	r5,40(sp)
  800f34:	3039883a 	mov	fp,r6
  800f38:	15801216 	blt	r2,r22,800f84 <__ieee754_rem_pio2+0x98>
  800f3c:	e1400115 	stw	r5,4(fp)
  800f40:	30000315 	stw	zero,12(r6)
  800f44:	e1000015 	stw	r4,0(fp)
  800f48:	d8000b15 	stw	zero,44(sp)
  800f4c:	30000215 	stw	zero,8(r6)
  800f50:	d8800b17 	ldw	r2,44(sp)
  800f54:	dfc01c17 	ldw	ra,112(sp)
  800f58:	df001b17 	ldw	fp,108(sp)
  800f5c:	ddc01a17 	ldw	r23,104(sp)
  800f60:	dd801917 	ldw	r22,100(sp)
  800f64:	dd401817 	ldw	r21,96(sp)
  800f68:	dd001717 	ldw	r20,92(sp)
  800f6c:	dcc01617 	ldw	r19,88(sp)
  800f70:	dc801517 	ldw	r18,84(sp)
  800f74:	dc401417 	ldw	r17,80(sp)
  800f78:	dc001317 	ldw	r16,76(sp)
  800f7c:	dec01d04 	addi	sp,sp,116
  800f80:	f800283a 	ret
  800f84:	009000f4 	movhi	r2,16387
  800f88:	10b65ec4 	addi	r2,r2,-9861
  800f8c:	15800f0e 	bge	r2,r22,800fcc <__ieee754_rem_pio2+0xe0>
  800f90:	00904e74 	movhi	r2,16697
  800f94:	10887ec4 	addi	r2,r2,8699
  800f98:	1580330e 	bge	r2,r22,801068 <__ieee754_rem_pio2+0x17c>
  800f9c:	009ffc34 	movhi	r2,32752
  800fa0:	10bfffc4 	addi	r2,r2,-1
  800fa4:	1580fe0e 	bge	r2,r22,8013a0 <__ieee754_rem_pio2+0x4b4>
  800fa8:	280f883a 	mov	r7,r5
  800fac:	480d883a 	mov	r6,r9
  800fb0:	08036240 	call	803624 <__subdf3>
  800fb4:	e0c00115 	stw	r3,4(fp)
  800fb8:	d8000b15 	stw	zero,44(sp)
  800fbc:	e0800015 	stw	r2,0(fp)
  800fc0:	e0800215 	stw	r2,8(fp)
  800fc4:	e0c00315 	stw	r3,12(fp)
  800fc8:	003fe106 	br	800f50 <__ieee754_rem_pio2+0x64>
  800fcc:	d9000a17 	ldw	r4,40(sp)
  800fd0:	0100ce0e 	bge	zero,r4,80130c <__ieee754_rem_pio2+0x420>
  800fd4:	04151034 	movhi	r16,21568
  800fd8:	044ffe74 	movhi	r17,16377
  800fdc:	8c487ec4 	addi	r17,r17,8699
  800fe0:	4809883a 	mov	r4,r9
  800fe4:	800d883a 	mov	r6,r16
  800fe8:	880f883a 	mov	r7,r17
  800fec:	08036240 	call	803624 <__subdf3>
  800ff0:	1025883a 	mov	r18,r2
  800ff4:	1827883a 	mov	r19,r3
  800ff8:	b4413c26 	beq	r22,r17,8014ec <__ieee754_rem_pio2+0x600>
  800ffc:	040698b4 	movhi	r16,6754
  801000:	8418cc44 	addi	r16,r16,25393
  801004:	044f7474 	movhi	r17,15825
  801008:	8c6d1844 	addi	r17,r17,-19359
  80100c:	1009883a 	mov	r4,r2
  801010:	180b883a 	mov	r5,r3
  801014:	800d883a 	mov	r6,r16
  801018:	880f883a 	mov	r7,r17
  80101c:	08036240 	call	803624 <__subdf3>
  801020:	100d883a 	mov	r6,r2
  801024:	9009883a 	mov	r4,r18
  801028:	980b883a 	mov	r5,r19
  80102c:	180f883a 	mov	r7,r3
  801030:	e0800015 	stw	r2,0(fp)
  801034:	e0c00115 	stw	r3,4(fp)
  801038:	08036240 	call	803624 <__subdf3>
  80103c:	1009883a 	mov	r4,r2
  801040:	800d883a 	mov	r6,r16
  801044:	880f883a 	mov	r7,r17
  801048:	180b883a 	mov	r5,r3
  80104c:	08036240 	call	803624 <__subdf3>
  801050:	1009883a 	mov	r4,r2
  801054:	00800044 	movi	r2,1
  801058:	d8800b15 	stw	r2,44(sp)
  80105c:	e0c00315 	stw	r3,12(fp)
  801060:	e1000215 	stw	r4,8(fp)
  801064:	003fba06 	br	800f50 <__ieee754_rem_pio2+0x64>
  801068:	0802dd40 	call	802dd4 <fabs>
  80106c:	021b72b4 	movhi	r8,28106
  801070:	423220c4 	addi	r8,r8,-14205
  801074:	024ff934 	movhi	r9,16356
  801078:	4a57cc04 	addi	r9,r9,24368
  80107c:	480f883a 	mov	r7,r9
  801080:	400d883a 	mov	r6,r8
  801084:	1009883a 	mov	r4,r2
  801088:	180b883a 	mov	r5,r3
  80108c:	1025883a 	mov	r18,r2
  801090:	1827883a 	mov	r19,r3
  801094:	08037180 	call	803718 <__muldf3>
  801098:	0011883a 	mov	r8,zero
  80109c:	024ff834 	movhi	r9,16352
  8010a0:	480f883a 	mov	r7,r9
  8010a4:	400d883a 	mov	r6,r8
  8010a8:	180b883a 	mov	r5,r3
  8010ac:	1009883a 	mov	r4,r2
  8010b0:	08036a40 	call	8036a4 <__adddf3>
  8010b4:	180b883a 	mov	r5,r3
  8010b8:	1009883a 	mov	r4,r2
  8010bc:	0803d6c0 	call	803d6c <__fixdfsi>
  8010c0:	1009883a 	mov	r4,r2
  8010c4:	d8800b15 	stw	r2,44(sp)
  8010c8:	0803c740 	call	803c74 <__floatsidf>
  8010cc:	1823883a 	mov	r17,r3
  8010d0:	1009883a 	mov	r4,r2
  8010d4:	d8800c15 	stw	r2,48(sp)
  8010d8:	00effe74 	movhi	r3,49145
  8010dc:	18c87ec4 	addi	r3,r3,8699
  8010e0:	00951034 	movhi	r2,21568
  8010e4:	880b883a 	mov	r5,r17
  8010e8:	180f883a 	mov	r7,r3
  8010ec:	100d883a 	mov	r6,r2
  8010f0:	dc400d15 	stw	r17,52(sp)
  8010f4:	08037180 	call	803718 <__muldf3>
  8010f8:	180f883a 	mov	r7,r3
  8010fc:	980b883a 	mov	r5,r19
  801100:	9009883a 	mov	r4,r18
  801104:	100d883a 	mov	r6,r2
  801108:	08036a40 	call	8036a4 <__adddf3>
  80110c:	d9000c17 	ldw	r4,48(sp)
  801110:	020698b4 	movhi	r8,6754
  801114:	4218cc44 	addi	r8,r8,25393
  801118:	024f7474 	movhi	r9,15825
  80111c:	4a6d1844 	addi	r9,r9,-19359
  801120:	880b883a 	mov	r5,r17
  801124:	480f883a 	mov	r7,r9
  801128:	400d883a 	mov	r6,r8
  80112c:	1025883a 	mov	r18,r2
  801130:	1827883a 	mov	r19,r3
  801134:	08037180 	call	803718 <__muldf3>
  801138:	d9000b17 	ldw	r4,44(sp)
  80113c:	100f883a 	mov	r7,r2
  801140:	1811883a 	mov	r8,r3
  801144:	008007c4 	movi	r2,31
  801148:	dc800e15 	stw	r18,56(sp)
  80114c:	3821883a 	mov	r16,r7
  801150:	dcc00f15 	stw	r19,60(sp)
  801154:	4023883a 	mov	r17,r8
  801158:	11010a0e 	bge	r2,r4,801584 <__ieee754_rem_pio2+0x698>
  80115c:	d9000e17 	ldw	r4,56(sp)
  801160:	d9400f17 	ldw	r5,60(sp)
  801164:	800d883a 	mov	r6,r16
  801168:	880f883a 	mov	r7,r17
  80116c:	08036240 	call	803624 <__subdf3>
  801170:	1810d53a 	srli	r8,r3,20
  801174:	b02dd53a 	srai	r22,r22,20
  801178:	1009883a 	mov	r4,r2
  80117c:	4201ffcc 	andi	r8,r8,2047
  801180:	180b883a 	mov	r5,r3
  801184:	b211c83a 	sub	r8,r22,r8
  801188:	00800404 	movi	r2,16
  80118c:	dd801015 	stw	r22,64(sp)
  801190:	e1000015 	stw	r4,0(fp)
  801194:	e1400115 	stw	r5,4(fp)
  801198:	1200430e 	bge	r2,r8,8012a8 <__ieee754_rem_pio2+0x3bc>
  80119c:	d9000c17 	ldw	r4,48(sp)
  8011a0:	d9400d17 	ldw	r5,52(sp)
  8011a4:	00869834 	movhi	r2,6752
  8011a8:	00cf7474 	movhi	r3,15825
  8011ac:	18ed1844 	addi	r3,r3,-19359
  8011b0:	180f883a 	mov	r7,r3
  8011b4:	100d883a 	mov	r6,r2
  8011b8:	08037180 	call	803718 <__muldf3>
  8011bc:	d9000e17 	ldw	r4,56(sp)
  8011c0:	d9400f17 	ldw	r5,60(sp)
  8011c4:	100d883a 	mov	r6,r2
  8011c8:	180f883a 	mov	r7,r3
  8011cc:	1025883a 	mov	r18,r2
  8011d0:	1827883a 	mov	r19,r3
  8011d4:	08036240 	call	803624 <__subdf3>
  8011d8:	d9000c17 	ldw	r4,48(sp)
  8011dc:	d9400d17 	ldw	r5,52(sp)
  8011e0:	058b80f4 	movhi	r22,11779
  8011e4:	b59c1cc4 	addi	r22,r22,28787
  8011e8:	05cee8f4 	movhi	r23,15267
  8011ec:	bdc66284 	addi	r23,r23,6538
  8011f0:	b00d883a 	mov	r6,r22
  8011f4:	b80f883a 	mov	r7,r23
  8011f8:	d8801115 	stw	r2,68(sp)
  8011fc:	d8c01215 	stw	r3,72(sp)
  801200:	d8800815 	stw	r2,32(sp)
  801204:	08037180 	call	803718 <__muldf3>
  801208:	d9001217 	ldw	r4,72(sp)
  80120c:	d9400f17 	ldw	r5,60(sp)
  801210:	d9800817 	ldw	r6,32(sp)
  801214:	d9000915 	stw	r4,36(sp)
  801218:	d9c01217 	ldw	r7,72(sp)
  80121c:	d9000e17 	ldw	r4,56(sp)
  801220:	1021883a 	mov	r16,r2
  801224:	1823883a 	mov	r17,r3
  801228:	08036240 	call	803624 <__subdf3>
  80122c:	180b883a 	mov	r5,r3
  801230:	900d883a 	mov	r6,r18
  801234:	980f883a 	mov	r7,r19
  801238:	1009883a 	mov	r4,r2
  80123c:	08036240 	call	803624 <__subdf3>
  801240:	180f883a 	mov	r7,r3
  801244:	880b883a 	mov	r5,r17
  801248:	8009883a 	mov	r4,r16
  80124c:	100d883a 	mov	r6,r2
  801250:	08036240 	call	803624 <__subdf3>
  801254:	d9000817 	ldw	r4,32(sp)
  801258:	d9401217 	ldw	r5,72(sp)
  80125c:	180f883a 	mov	r7,r3
  801260:	100d883a 	mov	r6,r2
  801264:	1021883a 	mov	r16,r2
  801268:	1823883a 	mov	r17,r3
  80126c:	08036240 	call	803624 <__subdf3>
  801270:	1810d53a 	srli	r8,r3,20
  801274:	1009883a 	mov	r4,r2
  801278:	d8801017 	ldw	r2,64(sp)
  80127c:	4201ffcc 	andi	r8,r8,2047
  801280:	180b883a 	mov	r5,r3
  801284:	1211c83a 	sub	r8,r2,r8
  801288:	00800c44 	movi	r2,49
  80128c:	e1000015 	stw	r4,0(fp)
  801290:	e1400115 	stw	r5,4(fp)
  801294:	1200f016 	blt	r2,r8,801658 <__ieee754_rem_pio2+0x76c>
  801298:	d8c00817 	ldw	r3,32(sp)
  80129c:	d9001217 	ldw	r4,72(sp)
  8012a0:	d8c00e15 	stw	r3,56(sp)
  8012a4:	d9000f15 	stw	r4,60(sp)
  8012a8:	e1800017 	ldw	r6,0(fp)
  8012ac:	e1c00117 	ldw	r7,4(fp)
  8012b0:	d9400f17 	ldw	r5,60(sp)
  8012b4:	d9000e17 	ldw	r4,56(sp)
  8012b8:	08036240 	call	803624 <__subdf3>
  8012bc:	180b883a 	mov	r5,r3
  8012c0:	800d883a 	mov	r6,r16
  8012c4:	880f883a 	mov	r7,r17
  8012c8:	1009883a 	mov	r4,r2
  8012cc:	08036240 	call	803624 <__subdf3>
  8012d0:	d9400a17 	ldw	r5,40(sp)
  8012d4:	e0800215 	stw	r2,8(fp)
  8012d8:	e1800204 	addi	r6,fp,8
  8012dc:	30c00115 	stw	r3,4(r6)
  8012e0:	283f1b0e 	bge	r5,zero,800f50 <__ieee754_rem_pio2+0x64>
  8012e4:	e0c00117 	ldw	r3,4(fp)
  8012e8:	d8800b17 	ldw	r2,44(sp)
  8012ec:	18e0003c 	xorhi	r3,r3,32768
  8012f0:	0085c83a 	sub	r2,zero,r2
  8012f4:	e0c00115 	stw	r3,4(fp)
  8012f8:	d8800b15 	stw	r2,44(sp)
  8012fc:	30800117 	ldw	r2,4(r6)
  801300:	10a0003c 	xorhi	r2,r2,32768
  801304:	30800115 	stw	r2,4(r6)
  801308:	003f1106 	br	800f50 <__ieee754_rem_pio2+0x64>
  80130c:	04151034 	movhi	r16,21568
  801310:	044ffe74 	movhi	r17,16377
  801314:	8c487ec4 	addi	r17,r17,8699
  801318:	4809883a 	mov	r4,r9
  80131c:	800d883a 	mov	r6,r16
  801320:	880f883a 	mov	r7,r17
  801324:	08036a40 	call	8036a4 <__adddf3>
  801328:	1025883a 	mov	r18,r2
  80132c:	1827883a 	mov	r19,r3
  801330:	b440a326 	beq	r22,r17,8015c0 <__ieee754_rem_pio2+0x6d4>
  801334:	040698b4 	movhi	r16,6754
  801338:	8418cc44 	addi	r16,r16,25393
  80133c:	044f7474 	movhi	r17,15825
  801340:	8c6d1844 	addi	r17,r17,-19359
  801344:	1009883a 	mov	r4,r2
  801348:	180b883a 	mov	r5,r3
  80134c:	800d883a 	mov	r6,r16
  801350:	880f883a 	mov	r7,r17
  801354:	08036a40 	call	8036a4 <__adddf3>
  801358:	100d883a 	mov	r6,r2
  80135c:	9009883a 	mov	r4,r18
  801360:	980b883a 	mov	r5,r19
  801364:	180f883a 	mov	r7,r3
  801368:	e0800015 	stw	r2,0(fp)
  80136c:	e0c00115 	stw	r3,4(fp)
  801370:	08036240 	call	803624 <__subdf3>
  801374:	1009883a 	mov	r4,r2
  801378:	800d883a 	mov	r6,r16
  80137c:	880f883a 	mov	r7,r17
  801380:	180b883a 	mov	r5,r3
  801384:	08036a40 	call	8036a4 <__adddf3>
  801388:	1009883a 	mov	r4,r2
  80138c:	00bfffc4 	movi	r2,-1
  801390:	d8800b15 	stw	r2,44(sp)
  801394:	e0c00315 	stw	r3,12(fp)
  801398:	e1000215 	stw	r4,8(fp)
  80139c:	003eec06 	br	800f50 <__ieee754_rem_pio2+0x64>
  8013a0:	b005d53a 	srai	r2,r22,20
  8013a4:	4821883a 	mov	r16,r9
  8013a8:	05505c34 	movhi	r21,16752
  8013ac:	15fefa84 	addi	r23,r2,-1046
  8013b0:	b826953a 	slli	r19,r23,20
  8013b4:	0029883a 	mov	r20,zero
  8013b8:	048000c4 	movi	r18,3
  8013bc:	b4e7c83a 	sub	r19,r22,r19
  8013c0:	980b883a 	mov	r5,r19
  8013c4:	0803d6c0 	call	803d6c <__fixdfsi>
  8013c8:	1009883a 	mov	r4,r2
  8013cc:	0803c740 	call	803c74 <__floatsidf>
  8013d0:	980b883a 	mov	r5,r19
  8013d4:	8009883a 	mov	r4,r16
  8013d8:	180f883a 	mov	r7,r3
  8013dc:	100d883a 	mov	r6,r2
  8013e0:	d8800215 	stw	r2,8(sp)
  8013e4:	d8c00315 	stw	r3,12(sp)
  8013e8:	08036240 	call	803624 <__subdf3>
  8013ec:	180b883a 	mov	r5,r3
  8013f0:	a00d883a 	mov	r6,r20
  8013f4:	a80f883a 	mov	r7,r21
  8013f8:	1009883a 	mov	r4,r2
  8013fc:	08037180 	call	803718 <__muldf3>
  801400:	180b883a 	mov	r5,r3
  801404:	1009883a 	mov	r4,r2
  801408:	1823883a 	mov	r17,r3
  80140c:	1021883a 	mov	r16,r2
  801410:	0803d6c0 	call	803d6c <__fixdfsi>
  801414:	1009883a 	mov	r4,r2
  801418:	0803c740 	call	803c74 <__floatsidf>
  80141c:	880b883a 	mov	r5,r17
  801420:	8009883a 	mov	r4,r16
  801424:	180f883a 	mov	r7,r3
  801428:	100d883a 	mov	r6,r2
  80142c:	d8800415 	stw	r2,16(sp)
  801430:	d8c00515 	stw	r3,20(sp)
  801434:	08036240 	call	803624 <__subdf3>
  801438:	180b883a 	mov	r5,r3
  80143c:	000d883a 	mov	r6,zero
  801440:	a80f883a 	mov	r7,r21
  801444:	1009883a 	mov	r4,r2
  801448:	08037180 	call	803718 <__muldf3>
  80144c:	d8c00715 	stw	r3,28(sp)
  801450:	d8800615 	stw	r2,24(sp)
  801454:	00000106 	br	80145c <__ieee754_rem_pio2+0x570>
  801458:	8025883a 	mov	r18,r16
  80145c:	943fffc4 	addi	r16,r18,-1
  801460:	800890fa 	slli	r4,r16,3
  801464:	d9400204 	addi	r5,sp,8
  801468:	000d883a 	mov	r6,zero
  80146c:	2149883a 	add	r4,r4,r5
  801470:	20c00117 	ldw	r3,4(r4)
  801474:	20800017 	ldw	r2,0(r4)
  801478:	000f883a 	mov	r7,zero
  80147c:	180b883a 	mov	r5,r3
  801480:	1009883a 	mov	r4,r2
  801484:	0803adc0 	call	803adc <__eqdf2>
  801488:	103ff326 	beq	r2,zero,801458 <__ieee754_rem_pio2+0x56c>
  80148c:	00800084 	movi	r2,2
  801490:	00c02234 	movhi	r3,136
  801494:	18fa4a04 	addi	r3,r3,-5848
  801498:	b80d883a 	mov	r6,r23
  80149c:	900f883a 	mov	r7,r18
  8014a0:	d9000204 	addi	r4,sp,8
  8014a4:	e00b883a 	mov	r5,fp
  8014a8:	d8800015 	stw	r2,0(sp)
  8014ac:	d8c00115 	stw	r3,4(sp)
  8014b0:	0801c400 	call	801c40 <__kernel_rem_pio2>
  8014b4:	d8800b15 	stw	r2,44(sp)
  8014b8:	d8800a17 	ldw	r2,40(sp)
  8014bc:	103ea40e 	bge	r2,zero,800f50 <__ieee754_rem_pio2+0x64>
  8014c0:	e0800117 	ldw	r2,4(fp)
  8014c4:	d8c00b17 	ldw	r3,44(sp)
  8014c8:	e1000204 	addi	r4,fp,8
  8014cc:	10a0003c 	xorhi	r2,r2,32768
  8014d0:	00c7c83a 	sub	r3,zero,r3
  8014d4:	e0800115 	stw	r2,4(fp)
  8014d8:	d8c00b15 	stw	r3,44(sp)
  8014dc:	20c00117 	ldw	r3,4(r4)
  8014e0:	18e0003c 	xorhi	r3,r3,32768
  8014e4:	20c00115 	stw	r3,4(r4)
  8014e8:	003e9906 	br	800f50 <__ieee754_rem_pio2+0x64>
  8014ec:	00869834 	movhi	r2,6752
  8014f0:	00cf7474 	movhi	r3,15825
  8014f4:	18ed1844 	addi	r3,r3,-19359
  8014f8:	9009883a 	mov	r4,r18
  8014fc:	980b883a 	mov	r5,r19
  801500:	180f883a 	mov	r7,r3
  801504:	100d883a 	mov	r6,r2
  801508:	08036240 	call	803624 <__subdf3>
  80150c:	048b80f4 	movhi	r18,11779
  801510:	949c1cc4 	addi	r18,r18,28787
  801514:	04cee8f4 	movhi	r19,15267
  801518:	9cc66284 	addi	r19,r19,6538
  80151c:	1009883a 	mov	r4,r2
  801520:	180b883a 	mov	r5,r3
  801524:	900d883a 	mov	r6,r18
  801528:	980f883a 	mov	r7,r19
  80152c:	1021883a 	mov	r16,r2
  801530:	1823883a 	mov	r17,r3
  801534:	08036240 	call	803624 <__subdf3>
  801538:	100d883a 	mov	r6,r2
  80153c:	8009883a 	mov	r4,r16
  801540:	880b883a 	mov	r5,r17
  801544:	180f883a 	mov	r7,r3
  801548:	e0800015 	stw	r2,0(fp)
  80154c:	e0c00115 	stw	r3,4(fp)
  801550:	08036240 	call	803624 <__subdf3>
  801554:	180b883a 	mov	r5,r3
  801558:	1009883a 	mov	r4,r2
  80155c:	900d883a 	mov	r6,r18
  801560:	980f883a 	mov	r7,r19
  801564:	08036240 	call	803624 <__subdf3>
  801568:	180b883a 	mov	r5,r3
  80156c:	1009883a 	mov	r4,r2
  801570:	00c00044 	movi	r3,1
  801574:	d8c00b15 	stw	r3,44(sp)
  801578:	e1400315 	stw	r5,12(fp)
  80157c:	e1000215 	stw	r4,8(fp)
  801580:	003e7306 	br	800f50 <__ieee754_rem_pio2+0x64>
  801584:	2105883a 	add	r2,r4,r4
  801588:	1085883a 	add	r2,r2,r2
  80158c:	00c02234 	movhi	r3,136
  801590:	18fa2a04 	addi	r3,r3,-5976
  801594:	10c5883a 	add	r2,r2,r3
  801598:	113fff17 	ldw	r4,-4(r2)
  80159c:	b13eef26 	beq	r22,r4,80115c <__ieee754_rem_pio2+0x270>
  8015a0:	980b883a 	mov	r5,r19
  8015a4:	400f883a 	mov	r7,r8
  8015a8:	9009883a 	mov	r4,r18
  8015ac:	800d883a 	mov	r6,r16
  8015b0:	08036240 	call	803624 <__subdf3>
  8015b4:	e0c00115 	stw	r3,4(fp)
  8015b8:	e0800015 	stw	r2,0(fp)
  8015bc:	003f3a06 	br	8012a8 <__ieee754_rem_pio2+0x3bc>
  8015c0:	00869834 	movhi	r2,6752
  8015c4:	00cf7474 	movhi	r3,15825
  8015c8:	18ed1844 	addi	r3,r3,-19359
  8015cc:	9009883a 	mov	r4,r18
  8015d0:	980b883a 	mov	r5,r19
  8015d4:	180f883a 	mov	r7,r3
  8015d8:	100d883a 	mov	r6,r2
  8015dc:	08036a40 	call	8036a4 <__adddf3>
  8015e0:	048b80f4 	movhi	r18,11779
  8015e4:	949c1cc4 	addi	r18,r18,28787
  8015e8:	04cee8f4 	movhi	r19,15267
  8015ec:	9cc66284 	addi	r19,r19,6538
  8015f0:	1009883a 	mov	r4,r2
  8015f4:	180b883a 	mov	r5,r3
  8015f8:	900d883a 	mov	r6,r18
  8015fc:	980f883a 	mov	r7,r19
  801600:	1021883a 	mov	r16,r2
  801604:	1823883a 	mov	r17,r3
  801608:	08036a40 	call	8036a4 <__adddf3>
  80160c:	100d883a 	mov	r6,r2
  801610:	8009883a 	mov	r4,r16
  801614:	880b883a 	mov	r5,r17
  801618:	180f883a 	mov	r7,r3
  80161c:	e0800015 	stw	r2,0(fp)
  801620:	e0c00115 	stw	r3,4(fp)
  801624:	08036240 	call	803624 <__subdf3>
  801628:	180b883a 	mov	r5,r3
  80162c:	1009883a 	mov	r4,r2
  801630:	900d883a 	mov	r6,r18
  801634:	980f883a 	mov	r7,r19
  801638:	08036a40 	call	8036a4 <__adddf3>
  80163c:	180b883a 	mov	r5,r3
  801640:	1009883a 	mov	r4,r2
  801644:	00ffffc4 	movi	r3,-1
  801648:	d8c00b15 	stw	r3,44(sp)
  80164c:	e1400315 	stw	r5,12(fp)
  801650:	e1000215 	stw	r4,8(fp)
  801654:	003e3e06 	br	800f50 <__ieee754_rem_pio2+0x64>
  801658:	d9000c17 	ldw	r4,48(sp)
  80165c:	d9400d17 	ldw	r5,52(sp)
  801660:	018b8034 	movhi	r6,11776
  801664:	b80f883a 	mov	r7,r23
  801668:	08037180 	call	803718 <__muldf3>
  80166c:	d9000817 	ldw	r4,32(sp)
  801670:	d9401217 	ldw	r5,72(sp)
  801674:	100d883a 	mov	r6,r2
  801678:	180f883a 	mov	r7,r3
  80167c:	1025883a 	mov	r18,r2
  801680:	1827883a 	mov	r19,r3
  801684:	08036240 	call	803624 <__subdf3>
  801688:	d9400d17 	ldw	r5,52(sp)
  80168c:	d9000c17 	ldw	r4,48(sp)
  801690:	02094834 	movhi	r8,9504
  801694:	42127044 	addi	r8,r8,18881
  801698:	024e5f34 	movhi	r9,14716
  80169c:	4a60e684 	addi	r9,r9,-31846
  8016a0:	480f883a 	mov	r7,r9
  8016a4:	400d883a 	mov	r6,r8
  8016a8:	182b883a 	mov	r21,r3
  8016ac:	d8800e15 	stw	r2,56(sp)
  8016b0:	08037180 	call	803718 <__muldf3>
  8016b4:	d9000817 	ldw	r4,32(sp)
  8016b8:	d9401217 	ldw	r5,72(sp)
  8016bc:	d9800e17 	ldw	r6,56(sp)
  8016c0:	a80f883a 	mov	r7,r21
  8016c4:	1021883a 	mov	r16,r2
  8016c8:	1823883a 	mov	r17,r3
  8016cc:	dd400f15 	stw	r21,60(sp)
  8016d0:	08036240 	call	803624 <__subdf3>
  8016d4:	180b883a 	mov	r5,r3
  8016d8:	900d883a 	mov	r6,r18
  8016dc:	980f883a 	mov	r7,r19
  8016e0:	1009883a 	mov	r4,r2
  8016e4:	08036240 	call	803624 <__subdf3>
  8016e8:	180f883a 	mov	r7,r3
  8016ec:	880b883a 	mov	r5,r17
  8016f0:	8009883a 	mov	r4,r16
  8016f4:	100d883a 	mov	r6,r2
  8016f8:	08036240 	call	803624 <__subdf3>
  8016fc:	d9000e17 	ldw	r4,56(sp)
  801700:	1021883a 	mov	r16,r2
  801704:	1823883a 	mov	r17,r3
  801708:	a80b883a 	mov	r5,r21
  80170c:	180f883a 	mov	r7,r3
  801710:	003fa606 	br	8015ac <__ieee754_rem_pio2+0x6c0>

00801714 <__kernel_cos>:
  801714:	defff104 	addi	sp,sp,-60
  801718:	00a00034 	movhi	r2,32768
  80171c:	10bfffc4 	addi	r2,r2,-1
  801720:	dd800c15 	stw	r22,48(sp)
  801724:	116c703a 	and	r22,r2,r5
  801728:	0005883a 	mov	r2,zero
  80172c:	dd000a15 	stw	r20,40(sp)
  801730:	d8800215 	stw	r2,8(sp)
  801734:	2029883a 	mov	r20,r4
  801738:	008f9034 	movhi	r2,15936
  80173c:	10bfffc4 	addi	r2,r2,-1
  801740:	0009883a 	mov	r4,zero
  801744:	dd400b15 	stw	r21,44(sp)
  801748:	dfc00e15 	stw	ra,56(sp)
  80174c:	ddc00d15 	stw	r23,52(sp)
  801750:	dcc00915 	stw	r19,36(sp)
  801754:	dc800815 	stw	r18,32(sp)
  801758:	dc400715 	stw	r17,28(sp)
  80175c:	dc000615 	stw	r16,24(sp)
  801760:	282b883a 	mov	r21,r5
  801764:	d9800415 	stw	r6,16(sp)
  801768:	d9c00515 	stw	r7,20(sp)
  80176c:	d9000315 	stw	r4,12(sp)
  801770:	15809216 	blt	r2,r22,8019bc <__kernel_cos+0x2a8>
  801774:	a009883a 	mov	r4,r20
  801778:	0803d6c0 	call	803d6c <__fixdfsi>
  80177c:	10011c26 	beq	r2,zero,801bf0 <__kernel_cos+0x4dc>
  801780:	a009883a 	mov	r4,r20
  801784:	a80b883a 	mov	r5,r21
  801788:	a00d883a 	mov	r6,r20
  80178c:	a80f883a 	mov	r7,r21
  801790:	08037180 	call	803718 <__muldf3>
  801794:	1021883a 	mov	r16,r2
  801798:	1823883a 	mov	r17,r3
  80179c:	1025883a 	mov	r18,r2
  8017a0:	1827883a 	mov	r19,r3
  8017a4:	00afa234 	movhi	r2,48776
  8017a8:	108e3504 	addi	r2,r2,14548
  8017ac:	00ef6a74 	movhi	r3,48553
  8017b0:	18feba44 	addi	r3,r3,-1303
  8017b4:	8009883a 	mov	r4,r16
  8017b8:	880b883a 	mov	r5,r17
  8017bc:	180f883a 	mov	r7,r3
  8017c0:	100d883a 	mov	r6,r2
  8017c4:	08037180 	call	803718 <__muldf3>
  8017c8:	022f6d74 	movhi	r8,48565
  8017cc:	422c7104 	addi	r8,r8,-20028
  8017d0:	024f88b4 	movhi	r9,15906
  8017d4:	4a7ba784 	addi	r9,r9,-4450
  8017d8:	480f883a 	mov	r7,r9
  8017dc:	400d883a 	mov	r6,r8
  8017e0:	180b883a 	mov	r5,r3
  8017e4:	1009883a 	mov	r4,r2
  8017e8:	08036a40 	call	8036a4 <__adddf3>
  8017ec:	180f883a 	mov	r7,r3
  8017f0:	8009883a 	mov	r4,r16
  8017f4:	880b883a 	mov	r5,r17
  8017f8:	100d883a 	mov	r6,r2
  8017fc:	08037180 	call	803718 <__muldf3>
  801800:	02202734 	movhi	r8,32924
  801804:	4214ab44 	addi	r8,r8,21165
  801808:	024fa4b4 	movhi	r9,16018
  80180c:	4a5f93c4 	addi	r9,r9,32335
  801810:	480f883a 	mov	r7,r9
  801814:	400d883a 	mov	r6,r8
  801818:	180b883a 	mov	r5,r3
  80181c:	1009883a 	mov	r4,r2
  801820:	08036240 	call	803624 <__subdf3>
  801824:	180f883a 	mov	r7,r3
  801828:	8009883a 	mov	r4,r16
  80182c:	880b883a 	mov	r5,r17
  801830:	100d883a 	mov	r6,r2
  801834:	08037180 	call	803718 <__muldf3>
  801838:	020672f4 	movhi	r8,6603
  80183c:	42056404 	addi	r8,r8,5520
  801840:	024fbeb4 	movhi	r9,16122
  801844:	4a406804 	addi	r9,r9,416
  801848:	480f883a 	mov	r7,r9
  80184c:	400d883a 	mov	r6,r8
  801850:	180b883a 	mov	r5,r3
  801854:	1009883a 	mov	r4,r2
  801858:	08036a40 	call	8036a4 <__adddf3>
  80185c:	180f883a 	mov	r7,r3
  801860:	8009883a 	mov	r4,r16
  801864:	880b883a 	mov	r5,r17
  801868:	100d883a 	mov	r6,r2
  80186c:	08037180 	call	803718 <__muldf3>
  801870:	0205b074 	movhi	r8,5825
  801874:	42145dc4 	addi	r8,r8,20855
  801878:	024fd5f4 	movhi	r9,16215
  80187c:	4a705b04 	addi	r9,r9,-16020
  801880:	480f883a 	mov	r7,r9
  801884:	400d883a 	mov	r6,r8
  801888:	180b883a 	mov	r5,r3
  80188c:	1009883a 	mov	r4,r2
  801890:	08036240 	call	803624 <__subdf3>
  801894:	180f883a 	mov	r7,r3
  801898:	8009883a 	mov	r4,r16
  80189c:	880b883a 	mov	r5,r17
  8018a0:	100d883a 	mov	r6,r2
  8018a4:	08037180 	call	803718 <__muldf3>
  8018a8:	02155574 	movhi	r8,21845
  8018ac:	42155304 	addi	r8,r8,21836
  8018b0:	024fe974 	movhi	r9,16293
  8018b4:	4a555544 	addi	r9,r9,21845
  8018b8:	480f883a 	mov	r7,r9
  8018bc:	400d883a 	mov	r6,r8
  8018c0:	180b883a 	mov	r5,r3
  8018c4:	1009883a 	mov	r4,r2
  8018c8:	08036a40 	call	8036a4 <__adddf3>
  8018cc:	180f883a 	mov	r7,r3
  8018d0:	880b883a 	mov	r5,r17
  8018d4:	8009883a 	mov	r4,r16
  8018d8:	100d883a 	mov	r6,r2
  8018dc:	08037180 	call	803718 <__muldf3>
  8018e0:	1021883a 	mov	r16,r2
  8018e4:	1823883a 	mov	r17,r3
  8018e8:	0005883a 	mov	r2,zero
  8018ec:	00cff834 	movhi	r3,16352
  8018f0:	9009883a 	mov	r4,r18
  8018f4:	980b883a 	mov	r5,r19
  8018f8:	180f883a 	mov	r7,r3
  8018fc:	100d883a 	mov	r6,r2
  801900:	08037180 	call	803718 <__muldf3>
  801904:	980b883a 	mov	r5,r19
  801908:	880f883a 	mov	r7,r17
  80190c:	9009883a 	mov	r4,r18
  801910:	800d883a 	mov	r6,r16
  801914:	1025883a 	mov	r18,r2
  801918:	1827883a 	mov	r19,r3
  80191c:	08037180 	call	803718 <__muldf3>
  801920:	d9c00517 	ldw	r7,20(sp)
  801924:	d9800417 	ldw	r6,16(sp)
  801928:	a80b883a 	mov	r5,r21
  80192c:	a009883a 	mov	r4,r20
  801930:	1021883a 	mov	r16,r2
  801934:	1823883a 	mov	r17,r3
  801938:	08037180 	call	803718 <__muldf3>
  80193c:	180f883a 	mov	r7,r3
  801940:	880b883a 	mov	r5,r17
  801944:	8009883a 	mov	r4,r16
  801948:	100d883a 	mov	r6,r2
  80194c:	08036240 	call	803624 <__subdf3>
  801950:	180f883a 	mov	r7,r3
  801954:	980b883a 	mov	r5,r19
  801958:	9009883a 	mov	r4,r18
  80195c:	100d883a 	mov	r6,r2
  801960:	08036240 	call	803624 <__subdf3>
  801964:	0011883a 	mov	r8,zero
  801968:	024ffc34 	movhi	r9,16368
  80196c:	480b883a 	mov	r5,r9
  801970:	180f883a 	mov	r7,r3
  801974:	4009883a 	mov	r4,r8
  801978:	100d883a 	mov	r6,r2
  80197c:	08036240 	call	803624 <__subdf3>
  801980:	100d883a 	mov	r6,r2
  801984:	180f883a 	mov	r7,r3
  801988:	3005883a 	mov	r2,r6
  80198c:	3807883a 	mov	r3,r7
  801990:	dfc00e17 	ldw	ra,56(sp)
  801994:	ddc00d17 	ldw	r23,52(sp)
  801998:	dd800c17 	ldw	r22,48(sp)
  80199c:	dd400b17 	ldw	r21,44(sp)
  8019a0:	dd000a17 	ldw	r20,40(sp)
  8019a4:	dcc00917 	ldw	r19,36(sp)
  8019a8:	dc800817 	ldw	r18,32(sp)
  8019ac:	dc400717 	ldw	r17,28(sp)
  8019b0:	dc000617 	ldw	r16,24(sp)
  8019b4:	dec00f04 	addi	sp,sp,60
  8019b8:	f800283a 	ret
  8019bc:	280f883a 	mov	r7,r5
  8019c0:	a009883a 	mov	r4,r20
  8019c4:	a00d883a 	mov	r6,r20
  8019c8:	08037180 	call	803718 <__muldf3>
  8019cc:	1021883a 	mov	r16,r2
  8019d0:	1823883a 	mov	r17,r3
  8019d4:	1025883a 	mov	r18,r2
  8019d8:	1827883a 	mov	r19,r3
  8019dc:	00afa234 	movhi	r2,48776
  8019e0:	108e3504 	addi	r2,r2,14548
  8019e4:	00ef6a74 	movhi	r3,48553
  8019e8:	18feba44 	addi	r3,r3,-1303
  8019ec:	8009883a 	mov	r4,r16
  8019f0:	880b883a 	mov	r5,r17
  8019f4:	180f883a 	mov	r7,r3
  8019f8:	100d883a 	mov	r6,r2
  8019fc:	08037180 	call	803718 <__muldf3>
  801a00:	022f6d74 	movhi	r8,48565
  801a04:	422c7104 	addi	r8,r8,-20028
  801a08:	024f88b4 	movhi	r9,15906
  801a0c:	4a7ba784 	addi	r9,r9,-4450
  801a10:	480f883a 	mov	r7,r9
  801a14:	400d883a 	mov	r6,r8
  801a18:	180b883a 	mov	r5,r3
  801a1c:	1009883a 	mov	r4,r2
  801a20:	08036a40 	call	8036a4 <__adddf3>
  801a24:	180f883a 	mov	r7,r3
  801a28:	8009883a 	mov	r4,r16
  801a2c:	880b883a 	mov	r5,r17
  801a30:	100d883a 	mov	r6,r2
  801a34:	08037180 	call	803718 <__muldf3>
  801a38:	02202734 	movhi	r8,32924
  801a3c:	4214ab44 	addi	r8,r8,21165
  801a40:	024fa4b4 	movhi	r9,16018
  801a44:	4a5f93c4 	addi	r9,r9,32335
  801a48:	480f883a 	mov	r7,r9
  801a4c:	400d883a 	mov	r6,r8
  801a50:	180b883a 	mov	r5,r3
  801a54:	1009883a 	mov	r4,r2
  801a58:	08036240 	call	803624 <__subdf3>
  801a5c:	180f883a 	mov	r7,r3
  801a60:	8009883a 	mov	r4,r16
  801a64:	880b883a 	mov	r5,r17
  801a68:	100d883a 	mov	r6,r2
  801a6c:	08037180 	call	803718 <__muldf3>
  801a70:	020672f4 	movhi	r8,6603
  801a74:	42056404 	addi	r8,r8,5520
  801a78:	024fbeb4 	movhi	r9,16122
  801a7c:	4a406804 	addi	r9,r9,416
  801a80:	480f883a 	mov	r7,r9
  801a84:	400d883a 	mov	r6,r8
  801a88:	180b883a 	mov	r5,r3
  801a8c:	1009883a 	mov	r4,r2
  801a90:	08036a40 	call	8036a4 <__adddf3>
  801a94:	180f883a 	mov	r7,r3
  801a98:	8009883a 	mov	r4,r16
  801a9c:	880b883a 	mov	r5,r17
  801aa0:	100d883a 	mov	r6,r2
  801aa4:	08037180 	call	803718 <__muldf3>
  801aa8:	0205b074 	movhi	r8,5825
  801aac:	42145dc4 	addi	r8,r8,20855
  801ab0:	024fd5f4 	movhi	r9,16215
  801ab4:	4a705b04 	addi	r9,r9,-16020
  801ab8:	480f883a 	mov	r7,r9
  801abc:	400d883a 	mov	r6,r8
  801ac0:	180b883a 	mov	r5,r3
  801ac4:	1009883a 	mov	r4,r2
  801ac8:	08036240 	call	803624 <__subdf3>
  801acc:	180f883a 	mov	r7,r3
  801ad0:	8009883a 	mov	r4,r16
  801ad4:	880b883a 	mov	r5,r17
  801ad8:	100d883a 	mov	r6,r2
  801adc:	08037180 	call	803718 <__muldf3>
  801ae0:	02155574 	movhi	r8,21845
  801ae4:	42155304 	addi	r8,r8,21836
  801ae8:	024fe974 	movhi	r9,16293
  801aec:	4a555544 	addi	r9,r9,21845
  801af0:	480f883a 	mov	r7,r9
  801af4:	400d883a 	mov	r6,r8
  801af8:	180b883a 	mov	r5,r3
  801afc:	1009883a 	mov	r4,r2
  801b00:	08036a40 	call	8036a4 <__adddf3>
  801b04:	180f883a 	mov	r7,r3
  801b08:	880b883a 	mov	r5,r17
  801b0c:	8009883a 	mov	r4,r16
  801b10:	100d883a 	mov	r6,r2
  801b14:	08037180 	call	803718 <__muldf3>
  801b18:	1021883a 	mov	r16,r2
  801b1c:	008ff4f4 	movhi	r2,16339
  801b20:	108ccc84 	addi	r2,r2,13106
  801b24:	1823883a 	mov	r17,r3
  801b28:	15bf6f0e 	bge	r2,r22,8018e8 <__kernel_cos+0x1d4>
  801b2c:	008ffa74 	movhi	r2,16361
  801b30:	1580320e 	bge	r2,r22,801bfc <__kernel_cos+0x4e8>
  801b34:	0005883a 	mov	r2,zero
  801b38:	010ff9f4 	movhi	r4,16359
  801b3c:	002d883a 	mov	r22,zero
  801b40:	d8800015 	stw	r2,0(sp)
  801b44:	05cff4b4 	movhi	r23,16338
  801b48:	d9000115 	stw	r4,4(sp)
  801b4c:	0005883a 	mov	r2,zero
  801b50:	00cff834 	movhi	r3,16352
  801b54:	9009883a 	mov	r4,r18
  801b58:	980b883a 	mov	r5,r19
  801b5c:	180f883a 	mov	r7,r3
  801b60:	100d883a 	mov	r6,r2
  801b64:	08037180 	call	803718 <__muldf3>
  801b68:	180b883a 	mov	r5,r3
  801b6c:	b80f883a 	mov	r7,r23
  801b70:	1009883a 	mov	r4,r2
  801b74:	b00d883a 	mov	r6,r22
  801b78:	08036240 	call	803624 <__subdf3>
  801b7c:	980b883a 	mov	r5,r19
  801b80:	880f883a 	mov	r7,r17
  801b84:	9009883a 	mov	r4,r18
  801b88:	800d883a 	mov	r6,r16
  801b8c:	1025883a 	mov	r18,r2
  801b90:	1827883a 	mov	r19,r3
  801b94:	08037180 	call	803718 <__muldf3>
  801b98:	d9c00517 	ldw	r7,20(sp)
  801b9c:	d9800417 	ldw	r6,16(sp)
  801ba0:	a80b883a 	mov	r5,r21
  801ba4:	a009883a 	mov	r4,r20
  801ba8:	1021883a 	mov	r16,r2
  801bac:	1823883a 	mov	r17,r3
  801bb0:	08037180 	call	803718 <__muldf3>
  801bb4:	180f883a 	mov	r7,r3
  801bb8:	880b883a 	mov	r5,r17
  801bbc:	8009883a 	mov	r4,r16
  801bc0:	100d883a 	mov	r6,r2
  801bc4:	08036240 	call	803624 <__subdf3>
  801bc8:	180f883a 	mov	r7,r3
  801bcc:	980b883a 	mov	r5,r19
  801bd0:	9009883a 	mov	r4,r18
  801bd4:	100d883a 	mov	r6,r2
  801bd8:	08036240 	call	803624 <__subdf3>
  801bdc:	d9400117 	ldw	r5,4(sp)
  801be0:	d9000017 	ldw	r4,0(sp)
  801be4:	180f883a 	mov	r7,r3
  801be8:	100d883a 	mov	r6,r2
  801bec:	003f6306 	br	80197c <__kernel_cos+0x268>
  801bf0:	000d883a 	mov	r6,zero
  801bf4:	01cffc34 	movhi	r7,16368
  801bf8:	003f6306 	br	801988 <__kernel_cos+0x274>
  801bfc:	00bff834 	movhi	r2,65504
  801c00:	b0ad883a 	add	r22,r22,r2
  801c04:	dd800315 	stw	r22,12(sp)
  801c08:	d9000317 	ldw	r4,12(sp)
  801c0c:	0005883a 	mov	r2,zero
  801c10:	00cffc34 	movhi	r3,16368
  801c14:	002d883a 	mov	r22,zero
  801c18:	200f883a 	mov	r7,r4
  801c1c:	202f883a 	mov	r23,r4
  801c20:	180b883a 	mov	r5,r3
  801c24:	1009883a 	mov	r4,r2
  801c28:	b00d883a 	mov	r6,r22
  801c2c:	d8800215 	stw	r2,8(sp)
  801c30:	08036240 	call	803624 <__subdf3>
  801c34:	d8800015 	stw	r2,0(sp)
  801c38:	d8c00115 	stw	r3,4(sp)
  801c3c:	003fc306 	br	801b4c <__kernel_cos+0x438>

00801c40 <__kernel_rem_pio2>:
  801c40:	deff5304 	addi	sp,sp,-692
  801c44:	d880ad17 	ldw	r2,692(sp)
  801c48:	d9009615 	stw	r4,600(sp)
  801c4c:	d9409715 	stw	r5,604(sp)
  801c50:	1087883a 	add	r3,r2,r2
  801c54:	18c7883a 	add	r3,r3,r3
  801c58:	00802234 	movhi	r2,136
  801c5c:	10ba8c04 	addi	r2,r2,-5584
  801c60:	1887883a 	add	r3,r3,r2
  801c64:	18c00017 	ldw	r3,0(r3)
  801c68:	313fff44 	addi	r4,r6,-3
  801c6c:	01400604 	movi	r5,24
  801c70:	df00ab15 	stw	fp,684(sp)
  801c74:	dc00a315 	stw	r16,652(sp)
  801c78:	d8c09515 	stw	r3,596(sp)
  801c7c:	dfc0ac15 	stw	ra,688(sp)
  801c80:	ddc0aa15 	stw	r23,680(sp)
  801c84:	dd80a915 	stw	r22,676(sp)
  801c88:	dd40a815 	stw	r21,672(sp)
  801c8c:	dd00a715 	stw	r20,668(sp)
  801c90:	dcc0a615 	stw	r19,664(sp)
  801c94:	dc80a515 	stw	r18,660(sp)
  801c98:	dc40a415 	stw	r17,656(sp)
  801c9c:	3021883a 	mov	r16,r6
  801ca0:	d9c09815 	stw	r7,608(sp)
  801ca4:	0803ec00 	call	803ec0 <__divsi3>
  801ca8:	d8c09817 	ldw	r3,608(sp)
  801cac:	d8808c15 	stw	r2,560(sp)
  801cb0:	1f3fffc4 	addi	fp,r3,-1
  801cb4:	10031816 	blt	r2,zero,802918 <__kernel_rem_pio2+0xcd8>
  801cb8:	d9008c17 	ldw	r4,560(sp)
  801cbc:	d9409517 	ldw	r5,596(sp)
  801cc0:	20bffa24 	muli	r2,r4,-24
  801cc4:	2f07883a 	add	r3,r5,fp
  801cc8:	8085883a 	add	r2,r16,r2
  801ccc:	10bffa04 	addi	r2,r2,-24
  801cd0:	d8809315 	stw	r2,588(sp)
  801cd4:	18001516 	blt	r3,zero,801d2c <__kernel_rem_pio2+0xec>
  801cd8:	2721c83a 	sub	r16,r4,fp
  801cdc:	d980ae17 	ldw	r6,696(sp)
  801ce0:	8405883a 	add	r2,r16,r16
  801ce4:	1085883a 	add	r2,r2,r2
  801ce8:	30a3883a 	add	r17,r6,r2
  801cec:	80e7883a 	add	r19,r16,r3
  801cf0:	dc801404 	addi	r18,sp,80
  801cf4:	00000106 	br	801cfc <__kernel_rem_pio2+0xbc>
  801cf8:	84000044 	addi	r16,r16,1
  801cfc:	0009883a 	mov	r4,zero
  801d00:	000b883a 	mov	r5,zero
  801d04:	80000416 	blt	r16,zero,801d18 <__kernel_rem_pio2+0xd8>
  801d08:	89000017 	ldw	r4,0(r17)
  801d0c:	0803c740 	call	803c74 <__floatsidf>
  801d10:	1009883a 	mov	r4,r2
  801d14:	180b883a 	mov	r5,r3
  801d18:	91400115 	stw	r5,4(r18)
  801d1c:	91000015 	stw	r4,0(r18)
  801d20:	8c400104 	addi	r17,r17,4
  801d24:	94800204 	addi	r18,r18,8
  801d28:	84fff31e 	bne	r16,r19,801cf8 <__kernel_rem_pio2+0xb8>
  801d2c:	d9c09517 	ldw	r7,596(sp)
  801d30:	38002416 	blt	r7,zero,801dc4 <__kernel_rem_pio2+0x184>
  801d34:	da809817 	ldw	r10,608(sp)
  801d38:	e029883a 	mov	r20,fp
  801d3c:	dd406404 	addi	r21,sp,400
  801d40:	3aaf883a 	add	r23,r7,r10
  801d44:	e02c403a 	cmpge	r22,fp,zero
  801d48:	b0023e26 	beq	r22,zero,802644 <__kernel_rem_pio2+0xa04>
  801d4c:	dcc09617 	ldw	r19,600(sp)
  801d50:	0021883a 	mov	r16,zero
  801d54:	0025883a 	mov	r18,zero
  801d58:	0023883a 	mov	r17,zero
  801d5c:	a489c83a 	sub	r4,r20,r18
  801d60:	200890fa 	slli	r4,r4,3
  801d64:	99800017 	ldw	r6,0(r19)
  801d68:	99c00117 	ldw	r7,4(r19)
  801d6c:	26c9883a 	add	r4,r4,sp
  801d70:	20c01517 	ldw	r3,84(r4)
  801d74:	20801417 	ldw	r2,80(r4)
  801d78:	94800044 	addi	r18,r18,1
  801d7c:	180b883a 	mov	r5,r3
  801d80:	1009883a 	mov	r4,r2
  801d84:	08037180 	call	803718 <__muldf3>
  801d88:	180f883a 	mov	r7,r3
  801d8c:	880b883a 	mov	r5,r17
  801d90:	8009883a 	mov	r4,r16
  801d94:	100d883a 	mov	r6,r2
  801d98:	08036a40 	call	8036a4 <__adddf3>
  801d9c:	1021883a 	mov	r16,r2
  801da0:	d8809817 	ldw	r2,608(sp)
  801da4:	9cc00204 	addi	r19,r19,8
  801da8:	1823883a 	mov	r17,r3
  801dac:	14bfeb1e 	bne	r2,r18,801d5c <__kernel_rem_pio2+0x11c>
  801db0:	a5000044 	addi	r20,r20,1
  801db4:	ac400115 	stw	r17,4(r21)
  801db8:	ac000015 	stw	r16,0(r21)
  801dbc:	ad400204 	addi	r21,r21,8
  801dc0:	a5ffe11e 	bne	r20,r23,801d48 <__kernel_rem_pio2+0x108>
  801dc4:	d8c09517 	ldw	r3,596(sp)
  801dc8:	d9409317 	ldw	r5,588(sp)
  801dcc:	e038403a 	cmpge	fp,fp,zero
  801dd0:	d8c08d15 	stw	r3,564(sp)
  801dd4:	d9008d17 	ldw	r4,564(sp)
  801dd8:	18c5883a 	add	r2,r3,r3
  801ddc:	10c7883a 	add	r3,r2,r3
  801de0:	1907883a 	add	r3,r3,r4
  801de4:	1085883a 	add	r2,r2,r2
  801de8:	16c5883a 	add	r2,r2,sp
  801dec:	1ec7883a 	add	r3,r3,sp
  801df0:	29400050 	cmplti	r5,r5,1
  801df4:	df00a215 	stw	fp,648(sp)
  801df8:	d8809915 	stw	r2,612(sp)
  801dfc:	d8c0a115 	stw	r3,644(sp)
  801e00:	d940a015 	stw	r5,640(sp)
  801e04:	d9808d17 	ldw	r6,564(sp)
  801e08:	300490fa 	slli	r2,r6,3
  801e0c:	16c5883a 	add	r2,r2,sp
  801e10:	15006417 	ldw	r20,400(r2)
  801e14:	15406517 	ldw	r21,404(r2)
  801e18:	01802e0e 	bge	zero,r6,801ed4 <__kernel_rem_pio2+0x294>
  801e1c:	102d883a 	mov	r22,r2
  801e20:	302f883a 	mov	r23,r6
  801e24:	d839883a 	mov	fp,sp
  801e28:	0005883a 	mov	r2,zero
  801e2c:	00cf9c34 	movhi	r3,15984
  801e30:	180f883a 	mov	r7,r3
  801e34:	100d883a 	mov	r6,r2
  801e38:	a009883a 	mov	r4,r20
  801e3c:	a80b883a 	mov	r5,r21
  801e40:	08037180 	call	803718 <__muldf3>
  801e44:	180b883a 	mov	r5,r3
  801e48:	1009883a 	mov	r4,r2
  801e4c:	0803d6c0 	call	803d6c <__fixdfsi>
  801e50:	1009883a 	mov	r4,r2
  801e54:	0803c740 	call	803c74 <__floatsidf>
  801e58:	1021883a 	mov	r16,r2
  801e5c:	1823883a 	mov	r17,r3
  801e60:	0005883a 	mov	r2,zero
  801e64:	00f05c34 	movhi	r3,49520
  801e68:	180f883a 	mov	r7,r3
  801e6c:	8009883a 	mov	r4,r16
  801e70:	880b883a 	mov	r5,r17
  801e74:	100d883a 	mov	r6,r2
  801e78:	08037180 	call	803718 <__muldf3>
  801e7c:	180b883a 	mov	r5,r3
  801e80:	a80f883a 	mov	r7,r21
  801e84:	a00d883a 	mov	r6,r20
  801e88:	1009883a 	mov	r4,r2
  801e8c:	08036a40 	call	8036a4 <__adddf3>
  801e90:	180b883a 	mov	r5,r3
  801e94:	1009883a 	mov	r4,r2
  801e98:	0803d6c0 	call	803d6c <__fixdfsi>
  801e9c:	e0800015 	stw	r2,0(fp)
  801ea0:	b5bffe04 	addi	r22,r22,-8
  801ea4:	b0806417 	ldw	r2,400(r22)
  801ea8:	b0c06517 	ldw	r3,404(r22)
  801eac:	8009883a 	mov	r4,r16
  801eb0:	880b883a 	mov	r5,r17
  801eb4:	180f883a 	mov	r7,r3
  801eb8:	100d883a 	mov	r6,r2
  801ebc:	08036a40 	call	8036a4 <__adddf3>
  801ec0:	bdffffc4 	addi	r23,r23,-1
  801ec4:	e7000104 	addi	fp,fp,4
  801ec8:	1029883a 	mov	r20,r2
  801ecc:	182b883a 	mov	r21,r3
  801ed0:	b83fd51e 	bne	r23,zero,801e28 <__kernel_rem_pio2+0x1e8>
  801ed4:	d9809317 	ldw	r6,588(sp)
  801ed8:	a80b883a 	mov	r5,r21
  801edc:	a009883a 	mov	r4,r20
  801ee0:	08030100 	call	803010 <scalbn>
  801ee4:	0009883a 	mov	r4,zero
  801ee8:	014ff034 	movhi	r5,16320
  801eec:	280f883a 	mov	r7,r5
  801ef0:	200d883a 	mov	r6,r4
  801ef4:	180b883a 	mov	r5,r3
  801ef8:	1009883a 	mov	r4,r2
  801efc:	1021883a 	mov	r16,r2
  801f00:	1823883a 	mov	r17,r3
  801f04:	08037180 	call	803718 <__muldf3>
  801f08:	180b883a 	mov	r5,r3
  801f0c:	1009883a 	mov	r4,r2
  801f10:	0802dec0 	call	802dec <floor>
  801f14:	0011883a 	mov	r8,zero
  801f18:	02700834 	movhi	r9,49184
  801f1c:	480f883a 	mov	r7,r9
  801f20:	400d883a 	mov	r6,r8
  801f24:	180b883a 	mov	r5,r3
  801f28:	1009883a 	mov	r4,r2
  801f2c:	08037180 	call	803718 <__muldf3>
  801f30:	180f883a 	mov	r7,r3
  801f34:	100d883a 	mov	r6,r2
  801f38:	880b883a 	mov	r5,r17
  801f3c:	8009883a 	mov	r4,r16
  801f40:	08036a40 	call	8036a4 <__adddf3>
  801f44:	180b883a 	mov	r5,r3
  801f48:	1009883a 	mov	r4,r2
  801f4c:	1823883a 	mov	r17,r3
  801f50:	1021883a 	mov	r16,r2
  801f54:	0803d6c0 	call	803d6c <__fixdfsi>
  801f58:	1009883a 	mov	r4,r2
  801f5c:	d8809415 	stw	r2,592(sp)
  801f60:	0803c740 	call	803c74 <__floatsidf>
  801f64:	880b883a 	mov	r5,r17
  801f68:	8009883a 	mov	r4,r16
  801f6c:	180f883a 	mov	r7,r3
  801f70:	100d883a 	mov	r6,r2
  801f74:	08036240 	call	803624 <__subdf3>
  801f78:	d9c0a017 	ldw	r7,640(sp)
  801f7c:	180d883a 	mov	r6,r3
  801f80:	1021883a 	mov	r16,r2
  801f84:	1823883a 	mov	r17,r3
  801f88:	38017d1e 	bne	r7,zero,802580 <__kernel_rem_pio2+0x940>
  801f8c:	da808d17 	ldw	r10,564(sp)
  801f90:	d9009317 	ldw	r4,588(sp)
  801f94:	00c00604 	movi	r3,24
  801f98:	50bfffc4 	addi	r2,r10,-1
  801f9c:	1085883a 	add	r2,r2,r2
  801fa0:	1085883a 	add	r2,r2,r2
  801fa4:	16c5883a 	add	r2,r2,sp
  801fa8:	11400017 	ldw	r5,0(r2)
  801fac:	1907c83a 	sub	r3,r3,r4
  801fb0:	d9c09317 	ldw	r7,588(sp)
  801fb4:	28cdd83a 	sra	r6,r5,r3
  801fb8:	010005c4 	movi	r4,23
  801fbc:	da809417 	ldw	r10,592(sp)
  801fc0:	30c6983a 	sll	r3,r6,r3
  801fc4:	21c9c83a 	sub	r4,r4,r7
  801fc8:	5195883a 	add	r10,r10,r6
  801fcc:	28cbc83a 	sub	r5,r5,r3
  801fd0:	2909d83a 	sra	r4,r5,r4
  801fd4:	da809415 	stw	r10,592(sp)
  801fd8:	11400015 	stw	r5,0(r2)
  801fdc:	d9009215 	stw	r4,584(sp)
  801fe0:	d9409217 	ldw	r5,584(sp)
  801fe4:	0140270e 	bge	zero,r5,802084 <__kernel_rem_pio2+0x444>
  801fe8:	d9809417 	ldw	r6,592(sp)
  801fec:	d9c08d17 	ldw	r7,564(sp)
  801ff0:	31800044 	addi	r6,r6,1
  801ff4:	d9809415 	stw	r6,592(sp)
  801ff8:	01c1a50e 	bge	zero,r7,802690 <__kernel_rem_pio2+0xa50>
  801ffc:	002d883a 	mov	r22,zero
  802000:	000b883a 	mov	r5,zero
  802004:	d809883a 	mov	r4,sp
  802008:	01c04034 	movhi	r7,256
  80200c:	01804034 	movhi	r6,256
  802010:	31bfffc4 	addi	r6,r6,-1
  802014:	00000806 	br	802038 <__kernel_rem_pio2+0x3f8>
  802018:	38c5c83a 	sub	r2,r7,r3
  80201c:	18000226 	beq	r3,zero,802028 <__kernel_rem_pio2+0x3e8>
  802020:	05800044 	movi	r22,1
  802024:	20800015 	stw	r2,0(r4)
  802028:	da808d17 	ldw	r10,564(sp)
  80202c:	29400044 	addi	r5,r5,1
  802030:	21000104 	addi	r4,r4,4
  802034:	51400926 	beq	r10,r5,80205c <__kernel_rem_pio2+0x41c>
  802038:	b004c03a 	cmpne	r2,r22,zero
  80203c:	20c00017 	ldw	r3,0(r4)
  802040:	103ff526 	beq	r2,zero,802018 <__kernel_rem_pio2+0x3d8>
  802044:	da808d17 	ldw	r10,564(sp)
  802048:	30c5c83a 	sub	r2,r6,r3
  80204c:	29400044 	addi	r5,r5,1
  802050:	20800015 	stw	r2,0(r4)
  802054:	21000104 	addi	r4,r4,4
  802058:	517ff71e 	bne	r10,r5,802038 <__kernel_rem_pio2+0x3f8>
  80205c:	d880a017 	ldw	r2,640(sp)
  802060:	1000051e 	bne	r2,zero,802078 <__kernel_rem_pio2+0x438>
  802064:	d8c09317 	ldw	r3,588(sp)
  802068:	00800044 	movi	r2,1
  80206c:	18814e26 	beq	r3,r2,8025a8 <__kernel_rem_pio2+0x968>
  802070:	00800084 	movi	r2,2
  802074:	18815826 	beq	r3,r2,8025d8 <__kernel_rem_pio2+0x998>
  802078:	d9c09217 	ldw	r7,584(sp)
  80207c:	00800084 	movi	r2,2
  802080:	38806926 	beq	r7,r2,802228 <__kernel_rem_pio2+0x5e8>
  802084:	000d883a 	mov	r6,zero
  802088:	000f883a 	mov	r7,zero
  80208c:	8009883a 	mov	r4,r16
  802090:	880b883a 	mov	r5,r17
  802094:	0803adc0 	call	803adc <__eqdf2>
  802098:	1000811e 	bne	r2,zero,8022a0 <__kernel_rem_pio2+0x660>
  80209c:	da808d17 	ldw	r10,564(sp)
  8020a0:	d8809517 	ldw	r2,596(sp)
  8020a4:	51bfffc4 	addi	r6,r10,-1
  8020a8:	30800c16 	blt	r6,r2,8020dc <__kernel_rem_pio2+0x49c>
  8020ac:	3185883a 	add	r2,r6,r6
  8020b0:	1085883a 	add	r2,r2,r2
  8020b4:	16c9883a 	add	r4,r2,sp
  8020b8:	3007883a 	mov	r3,r6
  8020bc:	000b883a 	mov	r5,zero
  8020c0:	20800017 	ldw	r2,0(r4)
  8020c4:	d9c09517 	ldw	r7,596(sp)
  8020c8:	18ffffc4 	addi	r3,r3,-1
  8020cc:	213fff04 	addi	r4,r4,-4
  8020d0:	288ab03a 	or	r5,r5,r2
  8020d4:	19fffa0e 	bge	r3,r7,8020c0 <__kernel_rem_pio2+0x480>
  8020d8:	2800791e 	bne	r5,zero,8022c0 <__kernel_rem_pio2+0x680>
  8020dc:	da809917 	ldw	r10,612(sp)
  8020e0:	50bfff17 	ldw	r2,-4(r10)
  8020e4:	1001511e 	bne	r2,zero,80262c <__kernel_rem_pio2+0x9ec>
  8020e8:	d880a117 	ldw	r2,644(sp)
  8020ec:	01000044 	movi	r4,1
  8020f0:	10ffff04 	addi	r3,r2,-4
  8020f4:	18ffff04 	addi	r3,r3,-4
  8020f8:	18800017 	ldw	r2,0(r3)
  8020fc:	21000044 	addi	r4,r4,1
  802100:	103ffc26 	beq	r2,zero,8020f4 <__kernel_rem_pio2+0x4b4>
  802104:	d8c08d17 	ldw	r3,564(sp)
  802108:	192f883a 	add	r23,r3,r4
  80210c:	1f000044 	addi	fp,r3,1
  802110:	bf00020e 	bge	r23,fp,80211c <__kernel_rem_pio2+0x4dc>
  802114:	ddc08d15 	stw	r23,564(sp)
  802118:	003f3a06 	br	801e04 <__kernel_rem_pio2+0x1c4>
  80211c:	d9408c17 	ldw	r5,560(sp)
  802120:	d9009817 	ldw	r4,608(sp)
  802124:	da80ae17 	ldw	r10,696(sp)
  802128:	1945883a 	add	r2,r3,r5
  80212c:	190f883a 	add	r7,r3,r4
  802130:	1085883a 	add	r2,r2,r2
  802134:	380a90fa 	slli	r5,r7,3
  802138:	e00c90fa 	slli	r6,fp,3
  80213c:	1085883a 	add	r2,r2,r2
  802140:	5085883a 	add	r2,r10,r2
  802144:	d8c01404 	addi	r3,sp,80
  802148:	d9006404 	addi	r4,sp,400
  80214c:	10800104 	addi	r2,r2,4
  802150:	196b883a 	add	r21,r3,r5
  802154:	21a1883a 	add	r16,r4,r6
  802158:	d8809115 	stw	r2,580(sp)
  80215c:	d9c09015 	stw	r7,576(sp)
  802160:	d8809117 	ldw	r2,580(sp)
  802164:	11000017 	ldw	r4,0(r2)
  802168:	0803c740 	call	803c74 <__floatsidf>
  80216c:	a8c00115 	stw	r3,4(r21)
  802170:	d8c0a217 	ldw	r3,648(sp)
  802174:	a8800015 	stw	r2,0(r21)
  802178:	18002826 	beq	r3,zero,80221c <__kernel_rem_pio2+0x5dc>
  80217c:	d9009017 	ldw	r4,576(sp)
  802180:	dd009617 	ldw	r20,600(sp)
  802184:	0023883a 	mov	r17,zero
  802188:	200490fa 	slli	r2,r4,3
  80218c:	002d883a 	mov	r22,zero
  802190:	0025883a 	mov	r18,zero
  802194:	16e7883a 	add	r19,r2,sp
  802198:	98801417 	ldw	r2,80(r19)
  80219c:	98c01517 	ldw	r3,84(r19)
  8021a0:	a1800017 	ldw	r6,0(r20)
  8021a4:	a1c00117 	ldw	r7,4(r20)
  8021a8:	180b883a 	mov	r5,r3
  8021ac:	1009883a 	mov	r4,r2
  8021b0:	08037180 	call	803718 <__muldf3>
  8021b4:	180f883a 	mov	r7,r3
  8021b8:	900b883a 	mov	r5,r18
  8021bc:	8809883a 	mov	r4,r17
  8021c0:	100d883a 	mov	r6,r2
  8021c4:	08036a40 	call	8036a4 <__adddf3>
  8021c8:	d9409817 	ldw	r5,608(sp)
  8021cc:	b5800044 	addi	r22,r22,1
  8021d0:	9cfffe04 	addi	r19,r19,-8
  8021d4:	1023883a 	mov	r17,r2
  8021d8:	1825883a 	mov	r18,r3
  8021dc:	a5000204 	addi	r20,r20,8
  8021e0:	2dbfed1e 	bne	r5,r22,802198 <__kernel_rem_pio2+0x558>
  8021e4:	d9809117 	ldw	r6,580(sp)
  8021e8:	d9c09017 	ldw	r7,576(sp)
  8021ec:	e7000044 	addi	fp,fp,1
  8021f0:	31800104 	addi	r6,r6,4
  8021f4:	39c00044 	addi	r7,r7,1
  8021f8:	84800115 	stw	r18,4(r16)
  8021fc:	84400015 	stw	r17,0(r16)
  802200:	d9809115 	stw	r6,580(sp)
  802204:	ad400204 	addi	r21,r21,8
  802208:	84000204 	addi	r16,r16,8
  80220c:	d9c09015 	stw	r7,576(sp)
  802210:	bf3fd30e 	bge	r23,fp,802160 <__kernel_rem_pio2+0x520>
  802214:	ddc08d15 	stw	r23,564(sp)
  802218:	003efa06 	br	801e04 <__kernel_rem_pio2+0x1c4>
  80221c:	0023883a 	mov	r17,zero
  802220:	0025883a 	mov	r18,zero
  802224:	003fef06 	br	8021e4 <__kernel_rem_pio2+0x5a4>
  802228:	0029883a 	mov	r20,zero
  80222c:	054ffc34 	movhi	r21,16368
  802230:	880f883a 	mov	r7,r17
  802234:	800d883a 	mov	r6,r16
  802238:	a009883a 	mov	r4,r20
  80223c:	a80b883a 	mov	r5,r21
  802240:	08036240 	call	803624 <__subdf3>
  802244:	1025883a 	mov	r18,r2
  802248:	b005003a 	cmpeq	r2,r22,zero
  80224c:	1827883a 	mov	r19,r3
  802250:	9021883a 	mov	r16,r18
  802254:	1823883a 	mov	r17,r3
  802258:	103f8a1e 	bne	r2,zero,802084 <__kernel_rem_pio2+0x444>
  80225c:	d9809317 	ldw	r6,588(sp)
  802260:	0009883a 	mov	r4,zero
  802264:	a80b883a 	mov	r5,r21
  802268:	08030100 	call	803010 <scalbn>
  80226c:	180f883a 	mov	r7,r3
  802270:	9009883a 	mov	r4,r18
  802274:	980b883a 	mov	r5,r19
  802278:	100d883a 	mov	r6,r2
  80227c:	08036240 	call	803624 <__subdf3>
  802280:	1021883a 	mov	r16,r2
  802284:	1823883a 	mov	r17,r3
  802288:	000d883a 	mov	r6,zero
  80228c:	000f883a 	mov	r7,zero
  802290:	8009883a 	mov	r4,r16
  802294:	880b883a 	mov	r5,r17
  802298:	0803adc0 	call	803adc <__eqdf2>
  80229c:	103f7f26 	beq	r2,zero,80209c <__kernel_rem_pio2+0x45c>
  8022a0:	000d883a 	mov	r6,zero
  8022a4:	000f883a 	mov	r7,zero
  8022a8:	8009883a 	mov	r4,r16
  8022ac:	880b883a 	mov	r5,r17
  8022b0:	0803adc0 	call	803adc <__eqdf2>
  8022b4:	10019a1e 	bne	r2,zero,802920 <__kernel_rem_pio2+0xce0>
  8022b8:	da808d17 	ldw	r10,564(sp)
  8022bc:	51bfffc4 	addi	r6,r10,-1
  8022c0:	3185883a 	add	r2,r6,r6
  8022c4:	1085883a 	add	r2,r2,r2
  8022c8:	d9009317 	ldw	r4,588(sp)
  8022cc:	16c5883a 	add	r2,r2,sp
  8022d0:	10c00017 	ldw	r3,0(r2)
  8022d4:	213ffa04 	addi	r4,r4,-24
  8022d8:	d9009315 	stw	r4,588(sp)
  8022dc:	1801d41e 	bne	r3,zero,802a30 <__kernel_rem_pio2+0xdf0>
  8022e0:	d9808d15 	stw	r6,564(sp)
  8022e4:	1007883a 	mov	r3,r2
  8022e8:	d9408d17 	ldw	r5,564(sp)
  8022ec:	d9809317 	ldw	r6,588(sp)
  8022f0:	18ffff04 	addi	r3,r3,-4
  8022f4:	18800017 	ldw	r2,0(r3)
  8022f8:	297fffc4 	addi	r5,r5,-1
  8022fc:	31bffa04 	addi	r6,r6,-24
  802300:	d9408d15 	stw	r5,564(sp)
  802304:	d9809315 	stw	r6,588(sp)
  802308:	103ff726 	beq	r2,zero,8022e8 <__kernel_rem_pio2+0x6a8>
  80230c:	d9809317 	ldw	r6,588(sp)
  802310:	0005883a 	mov	r2,zero
  802314:	00cffc34 	movhi	r3,16368
  802318:	180b883a 	mov	r5,r3
  80231c:	1009883a 	mov	r4,r2
  802320:	08030100 	call	803010 <scalbn>
  802324:	d9808d17 	ldw	r6,564(sp)
  802328:	1021883a 	mov	r16,r2
  80232c:	1823883a 	mov	r17,r3
  802330:	30004616 	blt	r6,zero,80244c <__kernel_rem_pio2+0x80c>
  802334:	300690fa 	slli	r3,r6,3
  802338:	3185883a 	add	r2,r6,r6
  80233c:	1085883a 	add	r2,r2,r2
  802340:	16e9883a 	add	r20,r2,sp
  802344:	1ee5883a 	add	r18,r3,sp
  802348:	3027883a 	mov	r19,r6
  80234c:	057fffc4 	movi	r21,-1
  802350:	a1000017 	ldw	r4,0(r20)
  802354:	9cffffc4 	addi	r19,r19,-1
  802358:	a53fff04 	addi	r20,r20,-4
  80235c:	0803c740 	call	803c74 <__floatsidf>
  802360:	800d883a 	mov	r6,r16
  802364:	880f883a 	mov	r7,r17
  802368:	180b883a 	mov	r5,r3
  80236c:	1009883a 	mov	r4,r2
  802370:	08037180 	call	803718 <__muldf3>
  802374:	0015883a 	mov	r10,zero
  802378:	02cf9c34 	movhi	r11,15984
  80237c:	880b883a 	mov	r5,r17
  802380:	8009883a 	mov	r4,r16
  802384:	90c06515 	stw	r3,404(r18)
  802388:	90806415 	stw	r2,400(r18)
  80238c:	580f883a 	mov	r7,r11
  802390:	500d883a 	mov	r6,r10
  802394:	08037180 	call	803718 <__muldf3>
  802398:	1021883a 	mov	r16,r2
  80239c:	1823883a 	mov	r17,r3
  8023a0:	94bffe04 	addi	r18,r18,-8
  8023a4:	9d7fea1e 	bne	r19,r21,802350 <__kernel_rem_pio2+0x710>
  8023a8:	d9c09517 	ldw	r7,596(sp)
  8023ac:	dd808d17 	ldw	r22,564(sp)
  8023b0:	002b883a 	mov	r21,zero
  8023b4:	382e403a 	cmpge	r23,r7,zero
  8023b8:	b800aa26 	beq	r23,zero,802664 <__kernel_rem_pio2+0xa24>
  8023bc:	a800a916 	blt	r21,zero,802664 <__kernel_rem_pio2+0xa24>
  8023c0:	b00690fa 	slli	r3,r22,3
  8023c4:	d8806404 	addi	r2,sp,400
  8023c8:	0021883a 	mov	r16,zero
  8023cc:	10e9883a 	add	r20,r2,r3
  8023d0:	0027883a 	mov	r19,zero
  8023d4:	0023883a 	mov	r17,zero
  8023d8:	04802234 	movhi	r18,136
  8023dc:	94ba9004 	addi	r18,r18,-5568
  8023e0:	00000106 	br	8023e8 <__kernel_rem_pio2+0x7a8>
  8023e4:	acc01116 	blt	r21,r19,80242c <__kernel_rem_pio2+0x7ec>
  8023e8:	91000017 	ldw	r4,0(r18)
  8023ec:	91400117 	ldw	r5,4(r18)
  8023f0:	a1800017 	ldw	r6,0(r20)
  8023f4:	a1c00117 	ldw	r7,4(r20)
  8023f8:	9cc00044 	addi	r19,r19,1
  8023fc:	94800204 	addi	r18,r18,8
  802400:	08037180 	call	803718 <__muldf3>
  802404:	180f883a 	mov	r7,r3
  802408:	880b883a 	mov	r5,r17
  80240c:	8009883a 	mov	r4,r16
  802410:	100d883a 	mov	r6,r2
  802414:	08036a40 	call	8036a4 <__adddf3>
  802418:	da809517 	ldw	r10,596(sp)
  80241c:	a5000204 	addi	r20,r20,8
  802420:	1021883a 	mov	r16,r2
  802424:	1823883a 	mov	r17,r3
  802428:	54ffee0e 	bge	r10,r19,8023e4 <__kernel_rem_pio2+0x7a4>
  80242c:	a80490fa 	slli	r2,r21,3
  802430:	b5bfffc4 	addi	r22,r22,-1
  802434:	ad400044 	addi	r21,r21,1
  802438:	16c5883a 	add	r2,r2,sp
  80243c:	14403d15 	stw	r17,244(r2)
  802440:	14003c15 	stw	r16,240(r2)
  802444:	00bfffc4 	movi	r2,-1
  802448:	b0bfdb1e 	bne	r22,r2,8023b8 <__kernel_rem_pio2+0x778>
  80244c:	d8c0ad17 	ldw	r3,692(sp)
  802450:	00800084 	movi	r2,2
  802454:	10c09316 	blt	r2,r3,8026a4 <__kernel_rem_pio2+0xa64>
  802458:	00c1120e 	bge	zero,r3,8028a4 <__kernel_rem_pio2+0xc64>
  80245c:	d9808d17 	ldw	r6,564(sp)
  802460:	30018d16 	blt	r6,zero,802a98 <__kernel_rem_pio2+0xe58>
  802464:	d8c08d17 	ldw	r3,564(sp)
  802468:	0011883a 	mov	r8,zero
  80246c:	0013883a 	mov	r9,zero
  802470:	180490fa 	slli	r2,r3,3
  802474:	1823883a 	mov	r17,r3
  802478:	04bfffc4 	movi	r18,-1
  80247c:	16e1883a 	add	r16,r2,sp
  802480:	80803c17 	ldw	r2,240(r16)
  802484:	80c03d17 	ldw	r3,244(r16)
  802488:	480b883a 	mov	r5,r9
  80248c:	4009883a 	mov	r4,r8
  802490:	180f883a 	mov	r7,r3
  802494:	100d883a 	mov	r6,r2
  802498:	08036a40 	call	8036a4 <__adddf3>
  80249c:	8c7fffc4 	addi	r17,r17,-1
  8024a0:	843ffe04 	addi	r16,r16,-8
  8024a4:	1011883a 	mov	r8,r2
  8024a8:	1813883a 	mov	r9,r3
  8024ac:	8cbff41e 	bne	r17,r18,802480 <__kernel_rem_pio2+0x840>
  8024b0:	d9009217 	ldw	r4,584(sp)
  8024b4:	20015b1e 	bne	r4,zero,802a24 <__kernel_rem_pio2+0xde4>
  8024b8:	4009883a 	mov	r4,r8
  8024bc:	480b883a 	mov	r5,r9
  8024c0:	d9809717 	ldw	r6,604(sp)
  8024c4:	d8803c17 	ldw	r2,240(sp)
  8024c8:	480f883a 	mov	r7,r9
  8024cc:	31400115 	stw	r5,4(r6)
  8024d0:	31000015 	stw	r4,0(r6)
  8024d4:	d8c03d17 	ldw	r3,244(sp)
  8024d8:	400d883a 	mov	r6,r8
  8024dc:	1009883a 	mov	r4,r2
  8024e0:	180b883a 	mov	r5,r3
  8024e4:	08036240 	call	803624 <__subdf3>
  8024e8:	d9c08d17 	ldw	r7,564(sp)
  8024ec:	1011883a 	mov	r8,r2
  8024f0:	1813883a 	mov	r9,r3
  8024f4:	01c00d0e 	bge	zero,r7,80252c <__kernel_rem_pio2+0x8ec>
  8024f8:	0023883a 	mov	r17,zero
  8024fc:	dc003e04 	addi	r16,sp,248
  802500:	81800017 	ldw	r6,0(r16)
  802504:	81c00117 	ldw	r7,4(r16)
  802508:	480b883a 	mov	r5,r9
  80250c:	4009883a 	mov	r4,r8
  802510:	08036a40 	call	8036a4 <__adddf3>
  802514:	da808d17 	ldw	r10,564(sp)
  802518:	8c400044 	addi	r17,r17,1
  80251c:	1011883a 	mov	r8,r2
  802520:	1813883a 	mov	r9,r3
  802524:	84000204 	addi	r16,r16,8
  802528:	8abff51e 	bne	r17,r10,802500 <__kernel_rem_pio2+0x8c0>
  80252c:	d8809217 	ldw	r2,584(sp)
  802530:	10000226 	beq	r2,zero,80253c <__kernel_rem_pio2+0x8fc>
  802534:	48e0003c 	xorhi	r3,r9,32768
  802538:	1813883a 	mov	r9,r3
  80253c:	d8c09717 	ldw	r3,604(sp)
  802540:	1a400315 	stw	r9,12(r3)
  802544:	1a000215 	stw	r8,8(r3)
  802548:	d8c09417 	ldw	r3,592(sp)
  80254c:	188001cc 	andi	r2,r3,7
  802550:	dfc0ac17 	ldw	ra,688(sp)
  802554:	df00ab17 	ldw	fp,684(sp)
  802558:	ddc0aa17 	ldw	r23,680(sp)
  80255c:	dd80a917 	ldw	r22,676(sp)
  802560:	dd40a817 	ldw	r21,672(sp)
  802564:	dd00a717 	ldw	r20,668(sp)
  802568:	dcc0a617 	ldw	r19,664(sp)
  80256c:	dc80a517 	ldw	r18,660(sp)
  802570:	dc40a417 	ldw	r17,656(sp)
  802574:	dc00a317 	ldw	r16,652(sp)
  802578:	dec0ad04 	addi	sp,sp,692
  80257c:	f800283a 	ret
  802580:	d8809317 	ldw	r2,588(sp)
  802584:	10001f1e 	bne	r2,zero,802604 <__kernel_rem_pio2+0x9c4>
  802588:	d8c08d17 	ldw	r3,564(sp)
  80258c:	18c5883a 	add	r2,r3,r3
  802590:	1085883a 	add	r2,r2,r2
  802594:	16c5883a 	add	r2,r2,sp
  802598:	10ffff17 	ldw	r3,-4(r2)
  80259c:	1807d5fa 	srai	r3,r3,23
  8025a0:	d8c09215 	stw	r3,584(sp)
  8025a4:	003e8e06 	br	801fe0 <__kernel_rem_pio2+0x3a0>
  8025a8:	d9008d17 	ldw	r4,564(sp)
  8025ac:	d9409317 	ldw	r5,588(sp)
  8025b0:	2145c83a 	sub	r2,r4,r5
  8025b4:	1085883a 	add	r2,r2,r2
  8025b8:	1085883a 	add	r2,r2,r2
  8025bc:	16c5883a 	add	r2,r2,sp
  8025c0:	10c00017 	ldw	r3,0(r2)
  8025c4:	01002034 	movhi	r4,128
  8025c8:	213fffc4 	addi	r4,r4,-1
  8025cc:	1906703a 	and	r3,r3,r4
  8025d0:	10c00015 	stw	r3,0(r2)
  8025d4:	003ea806 	br	802078 <__kernel_rem_pio2+0x438>
  8025d8:	d9808d17 	ldw	r6,564(sp)
  8025dc:	01001034 	movhi	r4,64
  8025e0:	213fffc4 	addi	r4,r4,-1
  8025e4:	30bfffc4 	addi	r2,r6,-1
  8025e8:	1085883a 	add	r2,r2,r2
  8025ec:	1085883a 	add	r2,r2,r2
  8025f0:	16c5883a 	add	r2,r2,sp
  8025f4:	10c00017 	ldw	r3,0(r2)
  8025f8:	1906703a 	and	r3,r3,r4
  8025fc:	10c00015 	stw	r3,0(r2)
  802600:	003e9d06 	br	802078 <__kernel_rem_pio2+0x438>
  802604:	0005883a 	mov	r2,zero
  802608:	00cff834 	movhi	r3,16352
  80260c:	300b883a 	mov	r5,r6
  802610:	180f883a 	mov	r7,r3
  802614:	8009883a 	mov	r4,r16
  802618:	100d883a 	mov	r6,r2
  80261c:	0803bec0 	call	803bec <__gedf2>
  802620:	10001d0e 	bge	r2,zero,802698 <__kernel_rem_pio2+0xa58>
  802624:	d8009215 	stw	zero,584(sp)
  802628:	003e9606 	br	802084 <__kernel_rem_pio2+0x444>
  80262c:	d8c08d17 	ldw	r3,564(sp)
  802630:	01000044 	movi	r4,1
  802634:	192f883a 	add	r23,r3,r4
  802638:	1f000044 	addi	fp,r3,1
  80263c:	bf3eb516 	blt	r23,fp,802114 <__kernel_rem_pio2+0x4d4>
  802640:	003eb606 	br	80211c <__kernel_rem_pio2+0x4dc>
  802644:	0021883a 	mov	r16,zero
  802648:	0023883a 	mov	r17,zero
  80264c:	a5000044 	addi	r20,r20,1
  802650:	ac400115 	stw	r17,4(r21)
  802654:	ac000015 	stw	r16,0(r21)
  802658:	ad400204 	addi	r21,r21,8
  80265c:	a5fdba1e 	bne	r20,r23,801d48 <__kernel_rem_pio2+0x108>
  802660:	003dd806 	br	801dc4 <__kernel_rem_pio2+0x184>
  802664:	a80490fa 	slli	r2,r21,3
  802668:	0021883a 	mov	r16,zero
  80266c:	0023883a 	mov	r17,zero
  802670:	16c5883a 	add	r2,r2,sp
  802674:	14403d15 	stw	r17,244(r2)
  802678:	14003c15 	stw	r16,240(r2)
  80267c:	b5bfffc4 	addi	r22,r22,-1
  802680:	00bfffc4 	movi	r2,-1
  802684:	ad400044 	addi	r21,r21,1
  802688:	b0bf4b1e 	bne	r22,r2,8023b8 <__kernel_rem_pio2+0x778>
  80268c:	003f6f06 	br	80244c <__kernel_rem_pio2+0x80c>
  802690:	002d883a 	mov	r22,zero
  802694:	003e7106 	br	80205c <__kernel_rem_pio2+0x41c>
  802698:	01000084 	movi	r4,2
  80269c:	d9009215 	stw	r4,584(sp)
  8026a0:	003e5106 	br	801fe8 <__kernel_rem_pio2+0x3a8>
  8026a4:	d900ad17 	ldw	r4,692(sp)
  8026a8:	008000c4 	movi	r2,3
  8026ac:	20bfa61e 	bne	r4,r2,802548 <__kernel_rem_pio2+0x908>
  8026b0:	d9c08d17 	ldw	r7,564(sp)
  8026b4:	01c02c0e 	bge	zero,r7,802768 <__kernel_rem_pio2+0xb28>
  8026b8:	3805883a 	mov	r2,r7
  8026bc:	00000106 	br	8026c4 <__kernel_rem_pio2+0xa84>
  8026c0:	d8808e17 	ldw	r2,568(sp)
  8026c4:	113fffc4 	addi	r4,r2,-1
  8026c8:	100690fa 	slli	r3,r2,3
  8026cc:	200490fa 	slli	r2,r4,3
  8026d0:	d9008e15 	stw	r4,568(sp)
  8026d4:	1ef9883a 	add	fp,r3,sp
  8026d8:	16c5883a 	add	r2,r2,sp
  8026dc:	d8809a15 	stw	r2,616(sp)
  8026e0:	11403c04 	addi	r5,r2,240
  8026e4:	e1803c04 	addi	r6,fp,240
  8026e8:	14003c17 	ldw	r16,240(r2)
  8026ec:	e5003c17 	ldw	r20,240(fp)
  8026f0:	d9409b15 	stw	r5,620(sp)
  8026f4:	d9809c15 	stw	r6,624(sp)
  8026f8:	35400117 	ldw	r21,4(r6)
  8026fc:	2c400117 	ldw	r17,4(r5)
  802700:	8009883a 	mov	r4,r16
  802704:	a00d883a 	mov	r6,r20
  802708:	880b883a 	mov	r5,r17
  80270c:	a80f883a 	mov	r7,r21
  802710:	08036a40 	call	8036a4 <__adddf3>
  802714:	100d883a 	mov	r6,r2
  802718:	880b883a 	mov	r5,r17
  80271c:	8009883a 	mov	r4,r16
  802720:	180f883a 	mov	r7,r3
  802724:	1025883a 	mov	r18,r2
  802728:	1827883a 	mov	r19,r3
  80272c:	08036240 	call	803624 <__subdf3>
  802730:	180f883a 	mov	r7,r3
  802734:	a80b883a 	mov	r5,r21
  802738:	a009883a 	mov	r4,r20
  80273c:	100d883a 	mov	r6,r2
  802740:	08036a40 	call	8036a4 <__adddf3>
  802744:	e0803c15 	stw	r2,240(fp)
  802748:	d9c09c17 	ldw	r7,624(sp)
  80274c:	38c00115 	stw	r3,4(r7)
  802750:	da809a17 	ldw	r10,616(sp)
  802754:	54803c15 	stw	r18,240(r10)
  802758:	d8809b17 	ldw	r2,620(sp)
  80275c:	14c00115 	stw	r19,4(r2)
  802760:	d8c08e17 	ldw	r3,568(sp)
  802764:	183fd61e 	bne	r3,zero,8026c0 <__kernel_rem_pio2+0xa80>
  802768:	d9008d17 	ldw	r4,564(sp)
  80276c:	00800044 	movi	r2,1
  802770:	1100cc0e 	bge	r2,r4,802aa4 <__kernel_rem_pio2+0xe64>
  802774:	d8808d17 	ldw	r2,564(sp)
  802778:	117fffc4 	addi	r5,r2,-1
  80277c:	100690fa 	slli	r3,r2,3
  802780:	280490fa 	slli	r2,r5,3
  802784:	d9408f15 	stw	r5,572(sp)
  802788:	1ef9883a 	add	fp,r3,sp
  80278c:	16c5883a 	add	r2,r2,sp
  802790:	d8809d15 	stw	r2,628(sp)
  802794:	11803c04 	addi	r6,r2,240
  802798:	e1c03c04 	addi	r7,fp,240
  80279c:	14003c17 	ldw	r16,240(r2)
  8027a0:	e5003c17 	ldw	r20,240(fp)
  8027a4:	d9809e15 	stw	r6,632(sp)
  8027a8:	d9c09f15 	stw	r7,636(sp)
  8027ac:	34400117 	ldw	r17,4(r6)
  8027b0:	3d400117 	ldw	r21,4(r7)
  8027b4:	8009883a 	mov	r4,r16
  8027b8:	880b883a 	mov	r5,r17
  8027bc:	a00d883a 	mov	r6,r20
  8027c0:	a80f883a 	mov	r7,r21
  8027c4:	08036a40 	call	8036a4 <__adddf3>
  8027c8:	100d883a 	mov	r6,r2
  8027cc:	880b883a 	mov	r5,r17
  8027d0:	8009883a 	mov	r4,r16
  8027d4:	180f883a 	mov	r7,r3
  8027d8:	1025883a 	mov	r18,r2
  8027dc:	1827883a 	mov	r19,r3
  8027e0:	08036240 	call	803624 <__subdf3>
  8027e4:	180f883a 	mov	r7,r3
  8027e8:	a80b883a 	mov	r5,r21
  8027ec:	a009883a 	mov	r4,r20
  8027f0:	100d883a 	mov	r6,r2
  8027f4:	08036a40 	call	8036a4 <__adddf3>
  8027f8:	e0803c15 	stw	r2,240(fp)
  8027fc:	da809f17 	ldw	r10,636(sp)
  802800:	50c00115 	stw	r3,4(r10)
  802804:	d8c09d17 	ldw	r3,628(sp)
  802808:	d8808f17 	ldw	r2,572(sp)
  80280c:	1c803c15 	stw	r18,240(r3)
  802810:	d9009e17 	ldw	r4,632(sp)
  802814:	00c00044 	movi	r3,1
  802818:	24c00115 	stw	r19,4(r4)
  80281c:	d9408f17 	ldw	r5,572(sp)
  802820:	28ffd51e 	bne	r5,r3,802778 <__kernel_rem_pio2+0xb38>
  802824:	dc008d17 	ldw	r16,564(sp)
  802828:	0011883a 	mov	r8,zero
  80282c:	1825883a 	mov	r18,r3
  802830:	800490fa 	slli	r2,r16,3
  802834:	0013883a 	mov	r9,zero
  802838:	16e3883a 	add	r17,r2,sp
  80283c:	88803c17 	ldw	r2,240(r17)
  802840:	88c03d17 	ldw	r3,244(r17)
  802844:	480b883a 	mov	r5,r9
  802848:	4009883a 	mov	r4,r8
  80284c:	180f883a 	mov	r7,r3
  802850:	100d883a 	mov	r6,r2
  802854:	08036a40 	call	8036a4 <__adddf3>
  802858:	843fffc4 	addi	r16,r16,-1
  80285c:	8c7ffe04 	addi	r17,r17,-8
  802860:	1011883a 	mov	r8,r2
  802864:	1813883a 	mov	r9,r3
  802868:	84bff41e 	bne	r16,r18,80283c <__kernel_rem_pio2+0xbfc>
  80286c:	d9809217 	ldw	r6,584(sp)
  802870:	30007a1e 	bne	r6,zero,802a5c <__kernel_rem_pio2+0xe1c>
  802874:	d9c09717 	ldw	r7,604(sp)
  802878:	d8803c17 	ldw	r2,240(sp)
  80287c:	d9003e17 	ldw	r4,248(sp)
  802880:	3a400515 	stw	r9,20(r7)
  802884:	d8c03d17 	ldw	r3,244(sp)
  802888:	d9403f17 	ldw	r5,252(sp)
  80288c:	3a000415 	stw	r8,16(r7)
  802890:	38c00115 	stw	r3,4(r7)
  802894:	39400315 	stw	r5,12(r7)
  802898:	38800015 	stw	r2,0(r7)
  80289c:	39000215 	stw	r4,8(r7)
  8028a0:	003f2906 	br	802548 <__kernel_rem_pio2+0x908>
  8028a4:	183f281e 	bne	r3,zero,802548 <__kernel_rem_pio2+0x908>
  8028a8:	d9408d17 	ldw	r5,564(sp)
  8028ac:	28008016 	blt	r5,zero,802ab0 <__kernel_rem_pio2+0xe70>
  8028b0:	dc008d17 	ldw	r16,564(sp)
  8028b4:	000d883a 	mov	r6,zero
  8028b8:	000f883a 	mov	r7,zero
  8028bc:	800490fa 	slli	r2,r16,3
  8028c0:	04bfffc4 	movi	r18,-1
  8028c4:	16e3883a 	add	r17,r2,sp
  8028c8:	88803c17 	ldw	r2,240(r17)
  8028cc:	88c03d17 	ldw	r3,244(r17)
  8028d0:	380b883a 	mov	r5,r7
  8028d4:	3009883a 	mov	r4,r6
  8028d8:	180f883a 	mov	r7,r3
  8028dc:	100d883a 	mov	r6,r2
  8028e0:	08036a40 	call	8036a4 <__adddf3>
  8028e4:	843fffc4 	addi	r16,r16,-1
  8028e8:	8c7ffe04 	addi	r17,r17,-8
  8028ec:	100d883a 	mov	r6,r2
  8028f0:	180f883a 	mov	r7,r3
  8028f4:	84bff41e 	bne	r16,r18,8028c8 <__kernel_rem_pio2+0xc88>
  8028f8:	da809217 	ldw	r10,584(sp)
  8028fc:	50000226 	beq	r10,zero,802908 <__kernel_rem_pio2+0xcc8>
  802900:	38e0003c 	xorhi	r3,r7,32768
  802904:	180f883a 	mov	r7,r3
  802908:	d8809717 	ldw	r2,604(sp)
  80290c:	11c00115 	stw	r7,4(r2)
  802910:	11800015 	stw	r6,0(r2)
  802914:	003f0c06 	br	802548 <__kernel_rem_pio2+0x908>
  802918:	d8008c15 	stw	zero,560(sp)
  80291c:	003ce606 	br	801cb8 <__kernel_rem_pio2+0x78>
  802920:	d9c09317 	ldw	r7,588(sp)
  802924:	880b883a 	mov	r5,r17
  802928:	8009883a 	mov	r4,r16
  80292c:	01cdc83a 	sub	r6,zero,r7
  802930:	08030100 	call	803010 <scalbn>
  802934:	0011883a 	mov	r8,zero
  802938:	02505c34 	movhi	r9,16752
  80293c:	480f883a 	mov	r7,r9
  802940:	1009883a 	mov	r4,r2
  802944:	180b883a 	mov	r5,r3
  802948:	400d883a 	mov	r6,r8
  80294c:	102d883a 	mov	r22,r2
  802950:	182f883a 	mov	r23,r3
  802954:	0803bec0 	call	803bec <__gedf2>
  802958:	10003716 	blt	r2,zero,802a38 <__kernel_rem_pio2+0xdf8>
  80295c:	0005883a 	mov	r2,zero
  802960:	00cf9c34 	movhi	r3,15984
  802964:	180f883a 	mov	r7,r3
  802968:	100d883a 	mov	r6,r2
  80296c:	b009883a 	mov	r4,r22
  802970:	b80b883a 	mov	r5,r23
  802974:	08037180 	call	803718 <__muldf3>
  802978:	180b883a 	mov	r5,r3
  80297c:	1009883a 	mov	r4,r2
  802980:	0803d6c0 	call	803d6c <__fixdfsi>
  802984:	1009883a 	mov	r4,r2
  802988:	0803c740 	call	803c74 <__floatsidf>
  80298c:	da808d17 	ldw	r10,564(sp)
  802990:	1023883a 	mov	r17,r2
  802994:	1825883a 	mov	r18,r3
  802998:	0005883a 	mov	r2,zero
  80299c:	00f05c34 	movhi	r3,49520
  8029a0:	180f883a 	mov	r7,r3
  8029a4:	8809883a 	mov	r4,r17
  8029a8:	900b883a 	mov	r5,r18
  8029ac:	100d883a 	mov	r6,r2
  8029b0:	52ab883a 	add	r21,r10,r10
  8029b4:	08037180 	call	803718 <__muldf3>
  8029b8:	180f883a 	mov	r7,r3
  8029bc:	b80b883a 	mov	r5,r23
  8029c0:	100d883a 	mov	r6,r2
  8029c4:	b009883a 	mov	r4,r22
  8029c8:	08036a40 	call	8036a4 <__adddf3>
  8029cc:	100d883a 	mov	r6,r2
  8029d0:	d8808d17 	ldw	r2,564(sp)
  8029d4:	180b883a 	mov	r5,r3
  8029d8:	3009883a 	mov	r4,r6
  8029dc:	10800044 	addi	r2,r2,1
  8029e0:	ad6b883a 	add	r21,r21,r21
  8029e4:	d8808d15 	stw	r2,564(sp)
  8029e8:	0803d6c0 	call	803d6c <__fixdfsi>
  8029ec:	d8c08d17 	ldw	r3,564(sp)
  8029f0:	aeeb883a 	add	r21,r21,sp
  8029f4:	8809883a 	mov	r4,r17
  8029f8:	900b883a 	mov	r5,r18
  8029fc:	a8800015 	stw	r2,0(r21)
  802a00:	18e1883a 	add	r16,r3,r3
  802a04:	0803d6c0 	call	803d6c <__fixdfsi>
  802a08:	d9009317 	ldw	r4,588(sp)
  802a0c:	8421883a 	add	r16,r16,r16
  802a10:	86e1883a 	add	r16,r16,sp
  802a14:	21000604 	addi	r4,r4,24
  802a18:	d9009315 	stw	r4,588(sp)
  802a1c:	80800015 	stw	r2,0(r16)
  802a20:	003e3a06 	br	80230c <__kernel_rem_pio2+0x6cc>
  802a24:	4009883a 	mov	r4,r8
  802a28:	4960003c 	xorhi	r5,r9,32768
  802a2c:	003ea406 	br	8024c0 <__kernel_rem_pio2+0x880>
  802a30:	d9808d15 	stw	r6,564(sp)
  802a34:	003e3506 	br	80230c <__kernel_rem_pio2+0x6cc>
  802a38:	d9408d17 	ldw	r5,564(sp)
  802a3c:	b009883a 	mov	r4,r22
  802a40:	2961883a 	add	r16,r5,r5
  802a44:	8421883a 	add	r16,r16,r16
  802a48:	b80b883a 	mov	r5,r23
  802a4c:	86e1883a 	add	r16,r16,sp
  802a50:	0803d6c0 	call	803d6c <__fixdfsi>
  802a54:	80800015 	stw	r2,0(r16)
  802a58:	003e2c06 	br	80230c <__kernel_rem_pio2+0x6cc>
  802a5c:	d8c03d17 	ldw	r3,244(sp)
  802a60:	d9403f17 	ldw	r5,252(sp)
  802a64:	da809717 	ldw	r10,604(sp)
  802a68:	d8803c17 	ldw	r2,240(sp)
  802a6c:	d9003e17 	ldw	r4,248(sp)
  802a70:	49e0003c 	xorhi	r7,r9,32768
  802a74:	51c00515 	stw	r7,20(r10)
  802a78:	19a0003c 	xorhi	r6,r3,32768
  802a7c:	29e0003c 	xorhi	r7,r5,32768
  802a80:	51800115 	stw	r6,4(r10)
  802a84:	51c00315 	stw	r7,12(r10)
  802a88:	50800015 	stw	r2,0(r10)
  802a8c:	51000215 	stw	r4,8(r10)
  802a90:	52000415 	stw	r8,16(r10)
  802a94:	003eac06 	br	802548 <__kernel_rem_pio2+0x908>
  802a98:	0011883a 	mov	r8,zero
  802a9c:	0013883a 	mov	r9,zero
  802aa0:	003e8306 	br	8024b0 <__kernel_rem_pio2+0x870>
  802aa4:	0011883a 	mov	r8,zero
  802aa8:	0013883a 	mov	r9,zero
  802aac:	003f6f06 	br	80286c <__kernel_rem_pio2+0xc2c>
  802ab0:	000d883a 	mov	r6,zero
  802ab4:	000f883a 	mov	r7,zero
  802ab8:	003f8f06 	br	8028f8 <__kernel_rem_pio2+0xcb8>

00802abc <__kernel_sin>:
  802abc:	00a00034 	movhi	r2,32768
  802ac0:	10bfffc4 	addi	r2,r2,-1
  802ac4:	deffef04 	addi	sp,sp,-68
  802ac8:	1144703a 	and	r2,r2,r5
  802acc:	00cf9034 	movhi	r3,15936
  802ad0:	18ffffc4 	addi	r3,r3,-1
  802ad4:	dd400d15 	stw	r21,52(sp)
  802ad8:	dd000c15 	stw	r20,48(sp)
  802adc:	dfc01015 	stw	ra,64(sp)
  802ae0:	ddc00f15 	stw	r23,60(sp)
  802ae4:	dd800e15 	stw	r22,56(sp)
  802ae8:	dcc00b15 	stw	r19,44(sp)
  802aec:	dc800a15 	stw	r18,40(sp)
  802af0:	dc400915 	stw	r17,36(sp)
  802af4:	dc000815 	stw	r16,32(sp)
  802af8:	2029883a 	mov	r20,r4
  802afc:	282b883a 	mov	r21,r5
  802b00:	d9800415 	stw	r6,16(sp)
  802b04:	d9c00515 	stw	r7,20(sp)
  802b08:	18800216 	blt	r3,r2,802b14 <__kernel_sin+0x58>
  802b0c:	0803d6c0 	call	803d6c <__fixdfsi>
  802b10:	10008826 	beq	r2,zero,802d34 <__kernel_sin+0x278>
  802b14:	a009883a 	mov	r4,r20
  802b18:	a80b883a 	mov	r5,r21
  802b1c:	a00d883a 	mov	r6,r20
  802b20:	a80f883a 	mov	r7,r21
  802b24:	08037180 	call	803718 <__muldf3>
  802b28:	102d883a 	mov	r22,r2
  802b2c:	a009883a 	mov	r4,r20
  802b30:	a80b883a 	mov	r5,r21
  802b34:	b00d883a 	mov	r6,r22
  802b38:	180f883a 	mov	r7,r3
  802b3c:	182f883a 	mov	r23,r3
  802b40:	d8800215 	stw	r2,8(sp)
  802b44:	d8c00315 	stw	r3,12(sp)
  802b48:	08037180 	call	803718 <__muldf3>
  802b4c:	d9000217 	ldw	r4,8(sp)
  802b50:	0216b434 	movhi	r8,23248
  802b54:	42355f04 	addi	r8,r8,-10884
  802b58:	024f79b4 	movhi	r9,15846
  802b5c:	4a764e84 	addi	r9,r9,-9926
  802b60:	480f883a 	mov	r7,r9
  802b64:	400d883a 	mov	r6,r8
  802b68:	b80b883a 	mov	r5,r23
  802b6c:	d8800615 	stw	r2,24(sp)
  802b70:	d8c00715 	stw	r3,28(sp)
  802b74:	08037180 	call	803718 <__muldf3>
  802b78:	02228b34 	movhi	r8,35372
  802b7c:	42273ac4 	addi	r8,r8,-25365
  802b80:	024f96f4 	movhi	r9,15963
  802b84:	4a797984 	addi	r9,r9,-6682
  802b88:	480f883a 	mov	r7,r9
  802b8c:	400d883a 	mov	r6,r8
  802b90:	180b883a 	mov	r5,r3
  802b94:	1009883a 	mov	r4,r2
  802b98:	08036240 	call	803624 <__subdf3>
  802b9c:	d9000217 	ldw	r4,8(sp)
  802ba0:	180f883a 	mov	r7,r3
  802ba4:	b80b883a 	mov	r5,r23
  802ba8:	100d883a 	mov	r6,r2
  802bac:	08037180 	call	803718 <__muldf3>
  802bb0:	0215ecb4 	movhi	r8,22450
  802bb4:	423f9f44 	addi	r8,r8,-387
  802bb8:	024fb1f4 	movhi	r9,16071
  802bbc:	4a4778c4 	addi	r9,r9,7651
  802bc0:	480f883a 	mov	r7,r9
  802bc4:	400d883a 	mov	r6,r8
  802bc8:	180b883a 	mov	r5,r3
  802bcc:	1009883a 	mov	r4,r2
  802bd0:	08036a40 	call	8036a4 <__adddf3>
  802bd4:	d9000217 	ldw	r4,8(sp)
  802bd8:	180f883a 	mov	r7,r3
  802bdc:	b80b883a 	mov	r5,r23
  802be0:	100d883a 	mov	r6,r2
  802be4:	08037180 	call	803718 <__muldf3>
  802be8:	02067074 	movhi	r8,6593
  802bec:	42187544 	addi	r8,r8,25045
  802bf0:	024fcab4 	movhi	r9,16170
  802bf4:	4a406804 	addi	r9,r9,416
  802bf8:	480f883a 	mov	r7,r9
  802bfc:	400d883a 	mov	r6,r8
  802c00:	180b883a 	mov	r5,r3
  802c04:	1009883a 	mov	r4,r2
  802c08:	08036240 	call	803624 <__subdf3>
  802c0c:	d9000217 	ldw	r4,8(sp)
  802c10:	180f883a 	mov	r7,r3
  802c14:	b80b883a 	mov	r5,r23
  802c18:	100d883a 	mov	r6,r2
  802c1c:	08037180 	call	803718 <__muldf3>
  802c20:	02044474 	movhi	r8,4369
  802c24:	423e2984 	addi	r8,r8,-1882
  802c28:	024fe074 	movhi	r9,16257
  802c2c:	4a444444 	addi	r9,r9,4369
  802c30:	180b883a 	mov	r5,r3
  802c34:	480f883a 	mov	r7,r9
  802c38:	1009883a 	mov	r4,r2
  802c3c:	400d883a 	mov	r6,r8
  802c40:	08036a40 	call	8036a4 <__adddf3>
  802c44:	1021883a 	mov	r16,r2
  802c48:	d8800617 	ldw	r2,24(sp)
  802c4c:	1823883a 	mov	r17,r3
  802c50:	d8800015 	stw	r2,0(sp)
  802c54:	d8800717 	ldw	r2,28(sp)
  802c58:	d8800115 	stw	r2,4(sp)
  802c5c:	d8801117 	ldw	r2,68(sp)
  802c60:	10004126 	beq	r2,zero,802d68 <__kernel_sin+0x2ac>
  802c64:	d9000417 	ldw	r4,16(sp)
  802c68:	d9400517 	ldw	r5,20(sp)
  802c6c:	0005883a 	mov	r2,zero
  802c70:	00cff834 	movhi	r3,16352
  802c74:	180f883a 	mov	r7,r3
  802c78:	100d883a 	mov	r6,r2
  802c7c:	08037180 	call	803718 <__muldf3>
  802c80:	d9000017 	ldw	r4,0(sp)
  802c84:	d9400717 	ldw	r5,28(sp)
  802c88:	800d883a 	mov	r6,r16
  802c8c:	880f883a 	mov	r7,r17
  802c90:	1021883a 	mov	r16,r2
  802c94:	1823883a 	mov	r17,r3
  802c98:	08037180 	call	803718 <__muldf3>
  802c9c:	180f883a 	mov	r7,r3
  802ca0:	880b883a 	mov	r5,r17
  802ca4:	8009883a 	mov	r4,r16
  802ca8:	100d883a 	mov	r6,r2
  802cac:	08036240 	call	803624 <__subdf3>
  802cb0:	d9000217 	ldw	r4,8(sp)
  802cb4:	b80b883a 	mov	r5,r23
  802cb8:	180f883a 	mov	r7,r3
  802cbc:	100d883a 	mov	r6,r2
  802cc0:	08037180 	call	803718 <__muldf3>
  802cc4:	d9c00517 	ldw	r7,20(sp)
  802cc8:	d9800417 	ldw	r6,16(sp)
  802ccc:	180b883a 	mov	r5,r3
  802cd0:	1009883a 	mov	r4,r2
  802cd4:	08036240 	call	803624 <__subdf3>
  802cd8:	d9000017 	ldw	r4,0(sp)
  802cdc:	d9400717 	ldw	r5,28(sp)
  802ce0:	02155574 	movhi	r8,21845
  802ce4:	42155244 	addi	r8,r8,21833
  802ce8:	024ff174 	movhi	r9,16325
  802cec:	4a555544 	addi	r9,r9,21845
  802cf0:	480f883a 	mov	r7,r9
  802cf4:	400d883a 	mov	r6,r8
  802cf8:	1021883a 	mov	r16,r2
  802cfc:	1823883a 	mov	r17,r3
  802d00:	08037180 	call	803718 <__muldf3>
  802d04:	180f883a 	mov	r7,r3
  802d08:	880b883a 	mov	r5,r17
  802d0c:	8009883a 	mov	r4,r16
  802d10:	100d883a 	mov	r6,r2
  802d14:	08036a40 	call	8036a4 <__adddf3>
  802d18:	180f883a 	mov	r7,r3
  802d1c:	a80b883a 	mov	r5,r21
  802d20:	a009883a 	mov	r4,r20
  802d24:	100d883a 	mov	r6,r2
  802d28:	08036240 	call	803624 <__subdf3>
  802d2c:	1029883a 	mov	r20,r2
  802d30:	182b883a 	mov	r21,r3
  802d34:	a005883a 	mov	r2,r20
  802d38:	a807883a 	mov	r3,r21
  802d3c:	dfc01017 	ldw	ra,64(sp)
  802d40:	ddc00f17 	ldw	r23,60(sp)
  802d44:	dd800e17 	ldw	r22,56(sp)
  802d48:	dd400d17 	ldw	r21,52(sp)
  802d4c:	dd000c17 	ldw	r20,48(sp)
  802d50:	dcc00b17 	ldw	r19,44(sp)
  802d54:	dc800a17 	ldw	r18,40(sp)
  802d58:	dc400917 	ldw	r17,36(sp)
  802d5c:	dc000817 	ldw	r16,32(sp)
  802d60:	dec01104 	addi	sp,sp,68
  802d64:	f800283a 	ret
  802d68:	d9000217 	ldw	r4,8(sp)
  802d6c:	b80b883a 	mov	r5,r23
  802d70:	800d883a 	mov	r6,r16
  802d74:	180f883a 	mov	r7,r3
  802d78:	08037180 	call	803718 <__muldf3>
  802d7c:	02155574 	movhi	r8,21845
  802d80:	42155244 	addi	r8,r8,21833
  802d84:	024ff174 	movhi	r9,16325
  802d88:	4a555544 	addi	r9,r9,21845
  802d8c:	480f883a 	mov	r7,r9
  802d90:	400d883a 	mov	r6,r8
  802d94:	180b883a 	mov	r5,r3
  802d98:	1009883a 	mov	r4,r2
  802d9c:	08036240 	call	803624 <__subdf3>
  802da0:	d9000017 	ldw	r4,0(sp)
  802da4:	d9400717 	ldw	r5,28(sp)
  802da8:	180f883a 	mov	r7,r3
  802dac:	100d883a 	mov	r6,r2
  802db0:	08037180 	call	803718 <__muldf3>
  802db4:	180f883a 	mov	r7,r3
  802db8:	a80b883a 	mov	r5,r21
  802dbc:	a009883a 	mov	r4,r20
  802dc0:	100d883a 	mov	r6,r2
  802dc4:	08036a40 	call	8036a4 <__adddf3>
  802dc8:	1029883a 	mov	r20,r2
  802dcc:	182b883a 	mov	r21,r3
  802dd0:	003fd806 	br	802d34 <__kernel_sin+0x278>

00802dd4 <fabs>:
  802dd4:	01e00034 	movhi	r7,32768
  802dd8:	39ffffc4 	addi	r7,r7,-1
  802ddc:	394e703a 	and	r7,r7,r5
  802de0:	2005883a 	mov	r2,r4
  802de4:	3807883a 	mov	r3,r7
  802de8:	f800283a 	ret

00802dec <floor>:
  802dec:	2805d53a 	srai	r2,r5,20
  802df0:	defff604 	addi	sp,sp,-40
  802df4:	dd800615 	stw	r22,24(sp)
  802df8:	10c1ffcc 	andi	r3,r2,2047
  802dfc:	1dbf0044 	addi	r22,r3,-1023
  802e00:	008004c4 	movi	r2,19
  802e04:	ddc00715 	stw	r23,28(sp)
  802e08:	dc800215 	stw	r18,8(sp)
  802e0c:	dc400115 	stw	r17,4(sp)
  802e10:	dc000015 	stw	r16,0(sp)
  802e14:	dfc00915 	stw	ra,36(sp)
  802e18:	df000815 	stw	fp,32(sp)
  802e1c:	dd400515 	stw	r21,20(sp)
  802e20:	dd000415 	stw	r20,16(sp)
  802e24:	dcc00315 	stw	r19,12(sp)
  802e28:	2021883a 	mov	r16,r4
  802e2c:	2823883a 	mov	r17,r5
  802e30:	282f883a 	mov	r23,r5
  802e34:	2025883a 	mov	r18,r4
  802e38:	15802916 	blt	r2,r22,802ee0 <floor+0xf4>
  802e3c:	b0004816 	blt	r22,zero,802f60 <floor+0x174>
  802e40:	00800434 	movhi	r2,16
  802e44:	10bfffc4 	addi	r2,r2,-1
  802e48:	15b9d83a 	sra	fp,r2,r22
  802e4c:	282f883a 	mov	r23,r5
  802e50:	e144703a 	and	r2,fp,r5
  802e54:	1104b03a 	or	r2,r2,r4
  802e58:	10001326 	beq	r2,zero,802ea8 <floor+0xbc>
  802e5c:	00a20034 	movhi	r2,34816
  802e60:	109d6704 	addi	r2,r2,30108
  802e64:	00df8e34 	movhi	r3,32312
  802e68:	18f90f04 	addi	r3,r3,-7108
  802e6c:	180f883a 	mov	r7,r3
  802e70:	100d883a 	mov	r6,r2
  802e74:	08036a40 	call	8036a4 <__adddf3>
  802e78:	180b883a 	mov	r5,r3
  802e7c:	000d883a 	mov	r6,zero
  802e80:	000f883a 	mov	r7,zero
  802e84:	1009883a 	mov	r4,r2
  802e88:	0803b640 	call	803b64 <__gtdf2>
  802e8c:	0080040e 	bge	zero,r2,802ea0 <floor+0xb4>
  802e90:	88004416 	blt	r17,zero,802fa4 <floor+0x1b8>
  802e94:	0704303a 	nor	r2,zero,fp
  802e98:	b8ae703a 	and	r23,r23,r2
  802e9c:	0025883a 	mov	r18,zero
  802ea0:	9021883a 	mov	r16,r18
  802ea4:	b823883a 	mov	r17,r23
  802ea8:	8005883a 	mov	r2,r16
  802eac:	8807883a 	mov	r3,r17
  802eb0:	dfc00917 	ldw	ra,36(sp)
  802eb4:	df000817 	ldw	fp,32(sp)
  802eb8:	ddc00717 	ldw	r23,28(sp)
  802ebc:	dd800617 	ldw	r22,24(sp)
  802ec0:	dd400517 	ldw	r21,20(sp)
  802ec4:	dd000417 	ldw	r20,16(sp)
  802ec8:	dcc00317 	ldw	r19,12(sp)
  802ecc:	dc800217 	ldw	r18,8(sp)
  802ed0:	dc400117 	ldw	r17,4(sp)
  802ed4:	dc000017 	ldw	r16,0(sp)
  802ed8:	dec00a04 	addi	sp,sp,40
  802edc:	f800283a 	ret
  802ee0:	00800cc4 	movi	r2,51
  802ee4:	15801616 	blt	r2,r22,802f40 <floor+0x154>
  802ee8:	18befb44 	addi	r2,r3,-1043
  802eec:	00ffffc4 	movi	r3,-1
  802ef0:	18b8d83a 	srl	fp,r3,r2
  802ef4:	e104703a 	and	r2,fp,r4
  802ef8:	103feb26 	beq	r2,zero,802ea8 <floor+0xbc>
  802efc:	00a20034 	movhi	r2,34816
  802f00:	109d6704 	addi	r2,r2,30108
  802f04:	00df8e34 	movhi	r3,32312
  802f08:	18f90f04 	addi	r3,r3,-7108
  802f0c:	180f883a 	mov	r7,r3
  802f10:	100d883a 	mov	r6,r2
  802f14:	08036a40 	call	8036a4 <__adddf3>
  802f18:	180b883a 	mov	r5,r3
  802f1c:	000d883a 	mov	r6,zero
  802f20:	000f883a 	mov	r7,zero
  802f24:	1009883a 	mov	r4,r2
  802f28:	0803b640 	call	803b64 <__gtdf2>
  802f2c:	0080210e 	bge	zero,r2,802fb4 <floor+0x1c8>
  802f30:	88002216 	blt	r17,zero,802fbc <floor+0x1d0>
  802f34:	0704303a 	nor	r2,zero,fp
  802f38:	90a4703a 	and	r18,r18,r2
  802f3c:	003fd806 	br	802ea0 <floor+0xb4>
  802f40:	00810004 	movi	r2,1024
  802f44:	b0bfd81e 	bne	r22,r2,802ea8 <floor+0xbc>
  802f48:	800d883a 	mov	r6,r16
  802f4c:	280f883a 	mov	r7,r5
  802f50:	08036a40 	call	8036a4 <__adddf3>
  802f54:	1021883a 	mov	r16,r2
  802f58:	1823883a 	mov	r17,r3
  802f5c:	003fd206 	br	802ea8 <floor+0xbc>
  802f60:	00a20034 	movhi	r2,34816
  802f64:	109d6704 	addi	r2,r2,30108
  802f68:	00df8e34 	movhi	r3,32312
  802f6c:	18f90f04 	addi	r3,r3,-7108
  802f70:	180f883a 	mov	r7,r3
  802f74:	100d883a 	mov	r6,r2
  802f78:	08036a40 	call	8036a4 <__adddf3>
  802f7c:	180b883a 	mov	r5,r3
  802f80:	000d883a 	mov	r6,zero
  802f84:	000f883a 	mov	r7,zero
  802f88:	1009883a 	mov	r4,r2
  802f8c:	0803b640 	call	803b64 <__gtdf2>
  802f90:	00bfc30e 	bge	zero,r2,802ea0 <floor+0xb4>
  802f94:	88001416 	blt	r17,zero,802fe8 <floor+0x1fc>
  802f98:	002f883a 	mov	r23,zero
  802f9c:	0025883a 	mov	r18,zero
  802fa0:	003fbf06 	br	802ea0 <floor+0xb4>
  802fa4:	00800434 	movhi	r2,16
  802fa8:	1585d83a 	sra	r2,r2,r22
  802fac:	88af883a 	add	r23,r17,r2
  802fb0:	003fb806 	br	802e94 <floor+0xa8>
  802fb4:	882f883a 	mov	r23,r17
  802fb8:	003fb906 	br	802ea0 <floor+0xb4>
  802fbc:	00800504 	movi	r2,20
  802fc0:	b0801126 	beq	r22,r2,803008 <floor+0x21c>
  802fc4:	00c00d04 	movi	r3,52
  802fc8:	1d87c83a 	sub	r3,r3,r22
  802fcc:	00800044 	movi	r2,1
  802fd0:	10c4983a 	sll	r2,r2,r3
  802fd4:	8085883a 	add	r2,r16,r2
  802fd8:	1400012e 	bgeu	r2,r16,802fe0 <floor+0x1f4>
  802fdc:	8dc00044 	addi	r23,r17,1
  802fe0:	1025883a 	mov	r18,r2
  802fe4:	003fd306 	br	802f34 <floor+0x148>
  802fe8:	00a00034 	movhi	r2,32768
  802fec:	10bfffc4 	addi	r2,r2,-1
  802ff0:	8884703a 	and	r2,r17,r2
  802ff4:	8084b03a 	or	r2,r16,r2
  802ff8:	103fee26 	beq	r2,zero,802fb4 <floor+0x1c8>
  802ffc:	05effc34 	movhi	r23,49136
  803000:	0025883a 	mov	r18,zero
  803004:	003fa606 	br	802ea0 <floor+0xb4>
  803008:	8dc00044 	addi	r23,r17,1
  80300c:	003fc906 	br	802f34 <floor+0x148>

00803010 <scalbn>:
  803010:	2011883a 	mov	r8,r4
  803014:	291ffc2c 	andhi	r4,r5,32752
  803018:	2009d53a 	srai	r4,r4,20
  80301c:	defffd04 	addi	sp,sp,-12
  803020:	dc000015 	stw	r16,0(sp)
  803024:	dfc00215 	stw	ra,8(sp)
  803028:	dc400115 	stw	r17,4(sp)
  80302c:	2813883a 	mov	r9,r5
  803030:	2815883a 	mov	r10,r5
  803034:	3021883a 	mov	r16,r6
  803038:	2000281e 	bne	r4,zero,8030dc <scalbn+0xcc>
  80303c:	00a00034 	movhi	r2,32768
  803040:	10bfffc4 	addi	r2,r2,-1
  803044:	2884703a 	and	r2,r5,r2
  803048:	4084b03a 	or	r2,r8,r2
  80304c:	10001826 	beq	r2,zero,8030b0 <scalbn+0xa0>
  803050:	0005883a 	mov	r2,zero
  803054:	00d0d434 	movhi	r3,17232
  803058:	4009883a 	mov	r4,r8
  80305c:	100d883a 	mov	r6,r2
  803060:	180f883a 	mov	r7,r3
  803064:	08037180 	call	803718 <__muldf3>
  803068:	100b883a 	mov	r5,r2
  80306c:	1011883a 	mov	r8,r2
  803070:	00bffff4 	movhi	r2,65535
  803074:	108f2c04 	addi	r2,r2,15536
  803078:	180d883a 	mov	r6,r3
  80307c:	1813883a 	mov	r9,r3
  803080:	8080120e 	bge	r16,r2,8030cc <scalbn+0xbc>
  803084:	00b0be74 	movhi	r2,49913
  803088:	10bcd644 	addi	r2,r2,-3239
  80308c:	00c06974 	movhi	r3,421
  803090:	18db87c4 	addi	r3,r3,28191
  803094:	2809883a 	mov	r4,r5
  803098:	180f883a 	mov	r7,r3
  80309c:	300b883a 	mov	r5,r6
  8030a0:	100d883a 	mov	r6,r2
  8030a4:	08037180 	call	803718 <__muldf3>
  8030a8:	1011883a 	mov	r8,r2
  8030ac:	1813883a 	mov	r9,r3
  8030b0:	4005883a 	mov	r2,r8
  8030b4:	4807883a 	mov	r3,r9
  8030b8:	dfc00217 	ldw	ra,8(sp)
  8030bc:	dc400117 	ldw	r17,4(sp)
  8030c0:	dc000017 	ldw	r16,0(sp)
  8030c4:	dec00304 	addi	sp,sp,12
  8030c8:	f800283a 	ret
  8030cc:	189ffc2c 	andhi	r2,r3,32752
  8030d0:	1005d53a 	srai	r2,r2,20
  8030d4:	1815883a 	mov	r10,r3
  8030d8:	113ff284 	addi	r4,r2,-54
  8030dc:	0081ffc4 	movi	r2,2047
  8030e0:	20801126 	beq	r4,r2,803128 <scalbn+0x118>
  8030e4:	2409883a 	add	r4,r4,r16
  8030e8:	0081ff84 	movi	r2,2046
  8030ec:	11001c16 	blt	r2,r4,803160 <scalbn+0x150>
  8030f0:	0100290e 	bge	zero,r4,803198 <scalbn+0x188>
  8030f4:	200a953a 	slli	r5,r4,20
  8030f8:	01200434 	movhi	r4,32784
  8030fc:	213fffc4 	addi	r4,r4,-1
  803100:	5108703a 	and	r4,r10,r4
  803104:	2148b03a 	or	r4,r4,r5
  803108:	2013883a 	mov	r9,r4
  80310c:	4005883a 	mov	r2,r8
  803110:	4807883a 	mov	r3,r9
  803114:	dfc00217 	ldw	ra,8(sp)
  803118:	dc400117 	ldw	r17,4(sp)
  80311c:	dc000017 	ldw	r16,0(sp)
  803120:	dec00304 	addi	sp,sp,12
  803124:	f800283a 	ret
  803128:	480f883a 	mov	r7,r9
  80312c:	4009883a 	mov	r4,r8
  803130:	480b883a 	mov	r5,r9
  803134:	400d883a 	mov	r6,r8
  803138:	08036a40 	call	8036a4 <__adddf3>
  80313c:	1011883a 	mov	r8,r2
  803140:	1813883a 	mov	r9,r3
  803144:	4005883a 	mov	r2,r8
  803148:	4807883a 	mov	r3,r9
  80314c:	dfc00217 	ldw	ra,8(sp)
  803150:	dc400117 	ldw	r17,4(sp)
  803154:	dc000017 	ldw	r16,0(sp)
  803158:	dec00304 	addi	sp,sp,12
  80315c:	f800283a 	ret
  803160:	04220034 	movhi	r16,34816
  803164:	841d6704 	addi	r16,r16,30108
  803168:	045f8e34 	movhi	r17,32312
  80316c:	8c790f04 	addi	r17,r17,-7108
  803170:	480f883a 	mov	r7,r9
  803174:	400d883a 	mov	r6,r8
  803178:	8009883a 	mov	r4,r16
  80317c:	880b883a 	mov	r5,r17
  803180:	08031f00 	call	8031f0 <copysign>
  803184:	180b883a 	mov	r5,r3
  803188:	800d883a 	mov	r6,r16
  80318c:	880f883a 	mov	r7,r17
  803190:	1009883a 	mov	r4,r2
  803194:	003fc306 	br	8030a4 <scalbn+0x94>
  803198:	00bff284 	movi	r2,-54
  80319c:	11000716 	blt	r2,r4,8031bc <scalbn+0x1ac>
  8031a0:	00b0d414 	movui	r2,50000
  8031a4:	143fee16 	blt	r2,r16,803160 <scalbn+0x150>
  8031a8:	0430be74 	movhi	r16,49913
  8031ac:	843cd644 	addi	r16,r16,-3239
  8031b0:	04406974 	movhi	r17,421
  8031b4:	8c5b87c4 	addi	r17,r17,28191
  8031b8:	003fed06 	br	803170 <scalbn+0x160>
  8031bc:	21000d84 	addi	r4,r4,54
  8031c0:	2008953a 	slli	r4,r4,20
  8031c4:	01e00434 	movhi	r7,32784
  8031c8:	39ffffc4 	addi	r7,r7,-1
  8031cc:	51ce703a 	and	r7,r10,r7
  8031d0:	390eb03a 	or	r7,r7,r4
  8031d4:	024f2434 	movhi	r9,15504
  8031d8:	4009883a 	mov	r4,r8
  8031dc:	0011883a 	mov	r8,zero
  8031e0:	380b883a 	mov	r5,r7
  8031e4:	400d883a 	mov	r6,r8
  8031e8:	480f883a 	mov	r7,r9
  8031ec:	003fad06 	br	8030a4 <scalbn+0x94>

008031f0 <copysign>:
  8031f0:	3813883a 	mov	r9,r7
  8031f4:	01e00034 	movhi	r7,32768
  8031f8:	39ffffc4 	addi	r7,r7,-1
  8031fc:	394e703a 	and	r7,r7,r5
  803200:	4aa0002c 	andhi	r10,r9,32768
  803204:	3a8eb03a 	or	r7,r7,r10
  803208:	2005883a 	mov	r2,r4
  80320c:	3807883a 	mov	r3,r7
  803210:	f800283a 	ret

00803214 <_fpadd_parts>:
  803214:	defff804 	addi	sp,sp,-32
  803218:	dcc00315 	stw	r19,12(sp)
  80321c:	2027883a 	mov	r19,r4
  803220:	21000017 	ldw	r4,0(r4)
  803224:	00c00044 	movi	r3,1
  803228:	dd400515 	stw	r21,20(sp)
  80322c:	dd000415 	stw	r20,16(sp)
  803230:	ddc00715 	stw	r23,28(sp)
  803234:	dd800615 	stw	r22,24(sp)
  803238:	dc800215 	stw	r18,8(sp)
  80323c:	dc400115 	stw	r17,4(sp)
  803240:	dc000015 	stw	r16,0(sp)
  803244:	282b883a 	mov	r21,r5
  803248:	3029883a 	mov	r20,r6
  80324c:	1900632e 	bgeu	r3,r4,8033dc <_fpadd_parts+0x1c8>
  803250:	28800017 	ldw	r2,0(r5)
  803254:	1880812e 	bgeu	r3,r2,80345c <_fpadd_parts+0x248>
  803258:	00c00104 	movi	r3,4
  80325c:	20c0dc26 	beq	r4,r3,8035d0 <_fpadd_parts+0x3bc>
  803260:	10c07e26 	beq	r2,r3,80345c <_fpadd_parts+0x248>
  803264:	00c00084 	movi	r3,2
  803268:	10c06726 	beq	r2,r3,803408 <_fpadd_parts+0x1f4>
  80326c:	20c07b26 	beq	r4,r3,80345c <_fpadd_parts+0x248>
  803270:	9dc00217 	ldw	r23,8(r19)
  803274:	28c00217 	ldw	r3,8(r5)
  803278:	9c400317 	ldw	r17,12(r19)
  80327c:	2bc00317 	ldw	r15,12(r5)
  803280:	b8cdc83a 	sub	r6,r23,r3
  803284:	9c800417 	ldw	r18,16(r19)
  803288:	2c000417 	ldw	r16,16(r5)
  80328c:	3009883a 	mov	r4,r6
  803290:	30009716 	blt	r6,zero,8034f0 <_fpadd_parts+0x2dc>
  803294:	00800fc4 	movi	r2,63
  803298:	11806b16 	blt	r2,r6,803448 <_fpadd_parts+0x234>
  80329c:	0100a40e 	bge	zero,r4,803530 <_fpadd_parts+0x31c>
  8032a0:	35bff804 	addi	r22,r6,-32
  8032a4:	b000bc16 	blt	r22,zero,803598 <_fpadd_parts+0x384>
  8032a8:	8596d83a 	srl	r11,r16,r22
  8032ac:	0019883a 	mov	r12,zero
  8032b0:	0013883a 	mov	r9,zero
  8032b4:	01000044 	movi	r4,1
  8032b8:	0015883a 	mov	r10,zero
  8032bc:	b000be16 	blt	r22,zero,8035b8 <_fpadd_parts+0x3a4>
  8032c0:	2590983a 	sll	r8,r4,r22
  8032c4:	000f883a 	mov	r7,zero
  8032c8:	00bfffc4 	movi	r2,-1
  8032cc:	3889883a 	add	r4,r7,r2
  8032d0:	408b883a 	add	r5,r8,r2
  8032d4:	21cd803a 	cmpltu	r6,r4,r7
  8032d8:	314b883a 	add	r5,r6,r5
  8032dc:	7904703a 	and	r2,r15,r4
  8032e0:	8146703a 	and	r3,r16,r5
  8032e4:	10c4b03a 	or	r2,r2,r3
  8032e8:	10000226 	beq	r2,zero,8032f4 <_fpadd_parts+0xe0>
  8032ec:	02400044 	movi	r9,1
  8032f0:	0015883a 	mov	r10,zero
  8032f4:	5a5eb03a 	or	r15,r11,r9
  8032f8:	62a0b03a 	or	r16,r12,r10
  8032fc:	99400117 	ldw	r5,4(r19)
  803300:	a8800117 	ldw	r2,4(r21)
  803304:	28806e26 	beq	r5,r2,8034c0 <_fpadd_parts+0x2ac>
  803308:	28006626 	beq	r5,zero,8034a4 <_fpadd_parts+0x290>
  80330c:	7c45c83a 	sub	r2,r15,r17
  803310:	7889803a 	cmpltu	r4,r15,r2
  803314:	8487c83a 	sub	r3,r16,r18
  803318:	1909c83a 	sub	r4,r3,r4
  80331c:	100d883a 	mov	r6,r2
  803320:	200f883a 	mov	r7,r4
  803324:	38007716 	blt	r7,zero,803504 <_fpadd_parts+0x2f0>
  803328:	a5c00215 	stw	r23,8(r20)
  80332c:	a1c00415 	stw	r7,16(r20)
  803330:	a0000115 	stw	zero,4(r20)
  803334:	a1800315 	stw	r6,12(r20)
  803338:	a2000317 	ldw	r8,12(r20)
  80333c:	a2400417 	ldw	r9,16(r20)
  803340:	00bfffc4 	movi	r2,-1
  803344:	408b883a 	add	r5,r8,r2
  803348:	2a09803a 	cmpltu	r4,r5,r8
  80334c:	488d883a 	add	r6,r9,r2
  803350:	01c40034 	movhi	r7,4096
  803354:	39ffffc4 	addi	r7,r7,-1
  803358:	218d883a 	add	r6,r4,r6
  80335c:	39801736 	bltu	r7,r6,8033bc <_fpadd_parts+0x1a8>
  803360:	31c06526 	beq	r6,r7,8034f8 <_fpadd_parts+0x2e4>
  803364:	a3000217 	ldw	r12,8(r20)
  803368:	4209883a 	add	r4,r8,r8
  80336c:	00bfffc4 	movi	r2,-1
  803370:	220f803a 	cmpltu	r7,r4,r8
  803374:	4a4b883a 	add	r5,r9,r9
  803378:	394f883a 	add	r7,r7,r5
  80337c:	2095883a 	add	r10,r4,r2
  803380:	3897883a 	add	r11,r7,r2
  803384:	510d803a 	cmpltu	r6,r10,r4
  803388:	6099883a 	add	r12,r12,r2
  80338c:	32d7883a 	add	r11,r6,r11
  803390:	00840034 	movhi	r2,4096
  803394:	10bfffc4 	addi	r2,r2,-1
  803398:	2011883a 	mov	r8,r4
  80339c:	3813883a 	mov	r9,r7
  8033a0:	a1000315 	stw	r4,12(r20)
  8033a4:	a1c00415 	stw	r7,16(r20)
  8033a8:	a3000215 	stw	r12,8(r20)
  8033ac:	12c00336 	bltu	r2,r11,8033bc <_fpadd_parts+0x1a8>
  8033b0:	58bfed1e 	bne	r11,r2,803368 <_fpadd_parts+0x154>
  8033b4:	00bfff84 	movi	r2,-2
  8033b8:	12bfeb2e 	bgeu	r2,r10,803368 <_fpadd_parts+0x154>
  8033bc:	a2800417 	ldw	r10,16(r20)
  8033c0:	008000c4 	movi	r2,3
  8033c4:	00c80034 	movhi	r3,8192
  8033c8:	18ffffc4 	addi	r3,r3,-1
  8033cc:	a2400317 	ldw	r9,12(r20)
  8033d0:	a0800015 	stw	r2,0(r20)
  8033d4:	1a802336 	bltu	r3,r10,803464 <_fpadd_parts+0x250>
  8033d8:	a027883a 	mov	r19,r20
  8033dc:	9805883a 	mov	r2,r19
  8033e0:	ddc00717 	ldw	r23,28(sp)
  8033e4:	dd800617 	ldw	r22,24(sp)
  8033e8:	dd400517 	ldw	r21,20(sp)
  8033ec:	dd000417 	ldw	r20,16(sp)
  8033f0:	dcc00317 	ldw	r19,12(sp)
  8033f4:	dc800217 	ldw	r18,8(sp)
  8033f8:	dc400117 	ldw	r17,4(sp)
  8033fc:	dc000017 	ldw	r16,0(sp)
  803400:	dec00804 	addi	sp,sp,32
  803404:	f800283a 	ret
  803408:	20fff41e 	bne	r4,r3,8033dc <_fpadd_parts+0x1c8>
  80340c:	31000015 	stw	r4,0(r6)
  803410:	98800117 	ldw	r2,4(r19)
  803414:	30800115 	stw	r2,4(r6)
  803418:	98c00217 	ldw	r3,8(r19)
  80341c:	30c00215 	stw	r3,8(r6)
  803420:	98800317 	ldw	r2,12(r19)
  803424:	30800315 	stw	r2,12(r6)
  803428:	98c00417 	ldw	r3,16(r19)
  80342c:	30c00415 	stw	r3,16(r6)
  803430:	98800117 	ldw	r2,4(r19)
  803434:	28c00117 	ldw	r3,4(r5)
  803438:	3027883a 	mov	r19,r6
  80343c:	10c4703a 	and	r2,r2,r3
  803440:	30800115 	stw	r2,4(r6)
  803444:	003fe506 	br	8033dc <_fpadd_parts+0x1c8>
  803448:	1dc02616 	blt	r3,r23,8034e4 <_fpadd_parts+0x2d0>
  80344c:	0023883a 	mov	r17,zero
  803450:	182f883a 	mov	r23,r3
  803454:	0025883a 	mov	r18,zero
  803458:	003fa806 	br	8032fc <_fpadd_parts+0xe8>
  80345c:	a827883a 	mov	r19,r21
  803460:	003fde06 	br	8033dc <_fpadd_parts+0x1c8>
  803464:	01800044 	movi	r6,1
  803468:	500497fa 	slli	r2,r10,31
  80346c:	4808d07a 	srli	r4,r9,1
  803470:	518ad83a 	srl	r5,r10,r6
  803474:	a2000217 	ldw	r8,8(r20)
  803478:	1108b03a 	or	r4,r2,r4
  80347c:	0007883a 	mov	r3,zero
  803480:	4984703a 	and	r2,r9,r6
  803484:	208cb03a 	or	r6,r4,r2
  803488:	28ceb03a 	or	r7,r5,r3
  80348c:	42000044 	addi	r8,r8,1
  803490:	a027883a 	mov	r19,r20
  803494:	a1c00415 	stw	r7,16(r20)
  803498:	a2000215 	stw	r8,8(r20)
  80349c:	a1800315 	stw	r6,12(r20)
  8034a0:	003fce06 	br	8033dc <_fpadd_parts+0x1c8>
  8034a4:	8bc5c83a 	sub	r2,r17,r15
  8034a8:	8889803a 	cmpltu	r4,r17,r2
  8034ac:	9407c83a 	sub	r3,r18,r16
  8034b0:	1909c83a 	sub	r4,r3,r4
  8034b4:	100d883a 	mov	r6,r2
  8034b8:	200f883a 	mov	r7,r4
  8034bc:	003f9906 	br	803324 <_fpadd_parts+0x110>
  8034c0:	7c45883a 	add	r2,r15,r17
  8034c4:	13c9803a 	cmpltu	r4,r2,r15
  8034c8:	8487883a 	add	r3,r16,r18
  8034cc:	20c9883a 	add	r4,r4,r3
  8034d0:	a1400115 	stw	r5,4(r20)
  8034d4:	a5c00215 	stw	r23,8(r20)
  8034d8:	a0800315 	stw	r2,12(r20)
  8034dc:	a1000415 	stw	r4,16(r20)
  8034e0:	003fb606 	br	8033bc <_fpadd_parts+0x1a8>
  8034e4:	001f883a 	mov	r15,zero
  8034e8:	0021883a 	mov	r16,zero
  8034ec:	003f8306 	br	8032fc <_fpadd_parts+0xe8>
  8034f0:	018dc83a 	sub	r6,zero,r6
  8034f4:	003f6706 	br	803294 <_fpadd_parts+0x80>
  8034f8:	00bfff84 	movi	r2,-2
  8034fc:	117faf36 	bltu	r2,r5,8033bc <_fpadd_parts+0x1a8>
  803500:	003f9806 	br	803364 <_fpadd_parts+0x150>
  803504:	0005883a 	mov	r2,zero
  803508:	1189c83a 	sub	r4,r2,r6
  80350c:	1105803a 	cmpltu	r2,r2,r4
  803510:	01cbc83a 	sub	r5,zero,r7
  803514:	2885c83a 	sub	r2,r5,r2
  803518:	01800044 	movi	r6,1
  80351c:	a1800115 	stw	r6,4(r20)
  803520:	a5c00215 	stw	r23,8(r20)
  803524:	a1000315 	stw	r4,12(r20)
  803528:	a0800415 	stw	r2,16(r20)
  80352c:	003f8206 	br	803338 <_fpadd_parts+0x124>
  803530:	203f7226 	beq	r4,zero,8032fc <_fpadd_parts+0xe8>
  803534:	35bff804 	addi	r22,r6,-32
  803538:	b9af883a 	add	r23,r23,r6
  80353c:	b0003116 	blt	r22,zero,803604 <_fpadd_parts+0x3f0>
  803540:	959ad83a 	srl	r13,r18,r22
  803544:	001d883a 	mov	r14,zero
  803548:	000f883a 	mov	r7,zero
  80354c:	01000044 	movi	r4,1
  803550:	0011883a 	mov	r8,zero
  803554:	b0002516 	blt	r22,zero,8035ec <_fpadd_parts+0x3d8>
  803558:	2594983a 	sll	r10,r4,r22
  80355c:	0013883a 	mov	r9,zero
  803560:	00bfffc4 	movi	r2,-1
  803564:	4889883a 	add	r4,r9,r2
  803568:	508b883a 	add	r5,r10,r2
  80356c:	224d803a 	cmpltu	r6,r4,r9
  803570:	314b883a 	add	r5,r6,r5
  803574:	8904703a 	and	r2,r17,r4
  803578:	9146703a 	and	r3,r18,r5
  80357c:	10c4b03a 	or	r2,r2,r3
  803580:	10000226 	beq	r2,zero,80358c <_fpadd_parts+0x378>
  803584:	01c00044 	movi	r7,1
  803588:	0011883a 	mov	r8,zero
  80358c:	69e2b03a 	or	r17,r13,r7
  803590:	7224b03a 	or	r18,r14,r8
  803594:	003f5906 	br	8032fc <_fpadd_parts+0xe8>
  803598:	8407883a 	add	r3,r16,r16
  80359c:	008007c4 	movi	r2,31
  8035a0:	1185c83a 	sub	r2,r2,r6
  8035a4:	1886983a 	sll	r3,r3,r2
  8035a8:	7996d83a 	srl	r11,r15,r6
  8035ac:	8198d83a 	srl	r12,r16,r6
  8035b0:	1ad6b03a 	or	r11,r3,r11
  8035b4:	003f3e06 	br	8032b0 <_fpadd_parts+0x9c>
  8035b8:	2006d07a 	srli	r3,r4,1
  8035bc:	008007c4 	movi	r2,31
  8035c0:	1185c83a 	sub	r2,r2,r6
  8035c4:	1890d83a 	srl	r8,r3,r2
  8035c8:	218e983a 	sll	r7,r4,r6
  8035cc:	003f3e06 	br	8032c8 <_fpadd_parts+0xb4>
  8035d0:	113f821e 	bne	r2,r4,8033dc <_fpadd_parts+0x1c8>
  8035d4:	28c00117 	ldw	r3,4(r5)
  8035d8:	98800117 	ldw	r2,4(r19)
  8035dc:	10ff7f26 	beq	r2,r3,8033dc <_fpadd_parts+0x1c8>
  8035e0:	04c02234 	movhi	r19,136
  8035e4:	9cfaa004 	addi	r19,r19,-5504
  8035e8:	003f7c06 	br	8033dc <_fpadd_parts+0x1c8>
  8035ec:	2006d07a 	srli	r3,r4,1
  8035f0:	008007c4 	movi	r2,31
  8035f4:	1185c83a 	sub	r2,r2,r6
  8035f8:	1894d83a 	srl	r10,r3,r2
  8035fc:	2192983a 	sll	r9,r4,r6
  803600:	003fd706 	br	803560 <_fpadd_parts+0x34c>
  803604:	9487883a 	add	r3,r18,r18
  803608:	008007c4 	movi	r2,31
  80360c:	1185c83a 	sub	r2,r2,r6
  803610:	1886983a 	sll	r3,r3,r2
  803614:	899ad83a 	srl	r13,r17,r6
  803618:	919cd83a 	srl	r14,r18,r6
  80361c:	1b5ab03a 	or	r13,r3,r13
  803620:	003fc906 	br	803548 <_fpadd_parts+0x334>

00803624 <__subdf3>:
  803624:	deffea04 	addi	sp,sp,-88
  803628:	dcc01415 	stw	r19,80(sp)
  80362c:	dcc00404 	addi	r19,sp,16
  803630:	2011883a 	mov	r8,r4
  803634:	2813883a 	mov	r9,r5
  803638:	dc401315 	stw	r17,76(sp)
  80363c:	d809883a 	mov	r4,sp
  803640:	980b883a 	mov	r5,r19
  803644:	dc400904 	addi	r17,sp,36
  803648:	dfc01515 	stw	ra,84(sp)
  80364c:	da400115 	stw	r9,4(sp)
  803650:	d9c00315 	stw	r7,12(sp)
  803654:	da000015 	stw	r8,0(sp)
  803658:	d9800215 	stw	r6,8(sp)
  80365c:	08043bc0 	call	8043bc <__unpack_d>
  803660:	d9000204 	addi	r4,sp,8
  803664:	880b883a 	mov	r5,r17
  803668:	08043bc0 	call	8043bc <__unpack_d>
  80366c:	d8800a17 	ldw	r2,40(sp)
  803670:	880b883a 	mov	r5,r17
  803674:	9809883a 	mov	r4,r19
  803678:	d9800e04 	addi	r6,sp,56
  80367c:	1080005c 	xori	r2,r2,1
  803680:	d8800a15 	stw	r2,40(sp)
  803684:	08032140 	call	803214 <_fpadd_parts>
  803688:	1009883a 	mov	r4,r2
  80368c:	08040a80 	call	8040a8 <__pack_d>
  803690:	dfc01517 	ldw	ra,84(sp)
  803694:	dcc01417 	ldw	r19,80(sp)
  803698:	dc401317 	ldw	r17,76(sp)
  80369c:	dec01604 	addi	sp,sp,88
  8036a0:	f800283a 	ret

008036a4 <__adddf3>:
  8036a4:	deffea04 	addi	sp,sp,-88
  8036a8:	dcc01415 	stw	r19,80(sp)
  8036ac:	dcc00404 	addi	r19,sp,16
  8036b0:	2011883a 	mov	r8,r4
  8036b4:	2813883a 	mov	r9,r5
  8036b8:	dc401315 	stw	r17,76(sp)
  8036bc:	d809883a 	mov	r4,sp
  8036c0:	980b883a 	mov	r5,r19
  8036c4:	dc400904 	addi	r17,sp,36
  8036c8:	dfc01515 	stw	ra,84(sp)
  8036cc:	da400115 	stw	r9,4(sp)
  8036d0:	d9c00315 	stw	r7,12(sp)
  8036d4:	da000015 	stw	r8,0(sp)
  8036d8:	d9800215 	stw	r6,8(sp)
  8036dc:	08043bc0 	call	8043bc <__unpack_d>
  8036e0:	d9000204 	addi	r4,sp,8
  8036e4:	880b883a 	mov	r5,r17
  8036e8:	08043bc0 	call	8043bc <__unpack_d>
  8036ec:	d9800e04 	addi	r6,sp,56
  8036f0:	9809883a 	mov	r4,r19
  8036f4:	880b883a 	mov	r5,r17
  8036f8:	08032140 	call	803214 <_fpadd_parts>
  8036fc:	1009883a 	mov	r4,r2
  803700:	08040a80 	call	8040a8 <__pack_d>
  803704:	dfc01517 	ldw	ra,84(sp)
  803708:	dcc01417 	ldw	r19,80(sp)
  80370c:	dc401317 	ldw	r17,76(sp)
  803710:	dec01604 	addi	sp,sp,88
  803714:	f800283a 	ret

00803718 <__muldf3>:
  803718:	deffe004 	addi	sp,sp,-128
  80371c:	dc401815 	stw	r17,96(sp)
  803720:	dc400404 	addi	r17,sp,16
  803724:	2011883a 	mov	r8,r4
  803728:	2813883a 	mov	r9,r5
  80372c:	dc001715 	stw	r16,92(sp)
  803730:	d809883a 	mov	r4,sp
  803734:	880b883a 	mov	r5,r17
  803738:	dc000904 	addi	r16,sp,36
  80373c:	dfc01f15 	stw	ra,124(sp)
  803740:	da400115 	stw	r9,4(sp)
  803744:	d9c00315 	stw	r7,12(sp)
  803748:	da000015 	stw	r8,0(sp)
  80374c:	d9800215 	stw	r6,8(sp)
  803750:	ddc01e15 	stw	r23,120(sp)
  803754:	dd801d15 	stw	r22,116(sp)
  803758:	dd401c15 	stw	r21,112(sp)
  80375c:	dd001b15 	stw	r20,108(sp)
  803760:	dcc01a15 	stw	r19,104(sp)
  803764:	dc801915 	stw	r18,100(sp)
  803768:	08043bc0 	call	8043bc <__unpack_d>
  80376c:	d9000204 	addi	r4,sp,8
  803770:	800b883a 	mov	r5,r16
  803774:	08043bc0 	call	8043bc <__unpack_d>
  803778:	d9000417 	ldw	r4,16(sp)
  80377c:	00800044 	movi	r2,1
  803780:	1100102e 	bgeu	r2,r4,8037c4 <__muldf3+0xac>
  803784:	d8c00917 	ldw	r3,36(sp)
  803788:	10c0062e 	bgeu	r2,r3,8037a4 <__muldf3+0x8c>
  80378c:	00800104 	movi	r2,4
  803790:	20800a26 	beq	r4,r2,8037bc <__muldf3+0xa4>
  803794:	1880cc26 	beq	r3,r2,803ac8 <__muldf3+0x3b0>
  803798:	00800084 	movi	r2,2
  80379c:	20800926 	beq	r4,r2,8037c4 <__muldf3+0xac>
  8037a0:	1880191e 	bne	r3,r2,803808 <__muldf3+0xf0>
  8037a4:	d8c00a17 	ldw	r3,40(sp)
  8037a8:	d8800517 	ldw	r2,20(sp)
  8037ac:	8009883a 	mov	r4,r16
  8037b0:	10c4c03a 	cmpne	r2,r2,r3
  8037b4:	d8800a15 	stw	r2,40(sp)
  8037b8:	00000706 	br	8037d8 <__muldf3+0xc0>
  8037bc:	00800084 	movi	r2,2
  8037c0:	1880c326 	beq	r3,r2,803ad0 <__muldf3+0x3b8>
  8037c4:	d8800517 	ldw	r2,20(sp)
  8037c8:	d8c00a17 	ldw	r3,40(sp)
  8037cc:	8809883a 	mov	r4,r17
  8037d0:	10c4c03a 	cmpne	r2,r2,r3
  8037d4:	d8800515 	stw	r2,20(sp)
  8037d8:	08040a80 	call	8040a8 <__pack_d>
  8037dc:	dfc01f17 	ldw	ra,124(sp)
  8037e0:	ddc01e17 	ldw	r23,120(sp)
  8037e4:	dd801d17 	ldw	r22,116(sp)
  8037e8:	dd401c17 	ldw	r21,112(sp)
  8037ec:	dd001b17 	ldw	r20,108(sp)
  8037f0:	dcc01a17 	ldw	r19,104(sp)
  8037f4:	dc801917 	ldw	r18,100(sp)
  8037f8:	dc401817 	ldw	r17,96(sp)
  8037fc:	dc001717 	ldw	r16,92(sp)
  803800:	dec02004 	addi	sp,sp,128
  803804:	f800283a 	ret
  803808:	dd800717 	ldw	r22,28(sp)
  80380c:	dc800c17 	ldw	r18,48(sp)
  803810:	002b883a 	mov	r21,zero
  803814:	0023883a 	mov	r17,zero
  803818:	a80b883a 	mov	r5,r21
  80381c:	b00d883a 	mov	r6,r22
  803820:	880f883a 	mov	r7,r17
  803824:	ddc00817 	ldw	r23,32(sp)
  803828:	dcc00d17 	ldw	r19,52(sp)
  80382c:	9009883a 	mov	r4,r18
  803830:	0803f900 	call	803f90 <__muldi3>
  803834:	001b883a 	mov	r13,zero
  803838:	680f883a 	mov	r7,r13
  80383c:	b009883a 	mov	r4,r22
  803840:	000b883a 	mov	r5,zero
  803844:	980d883a 	mov	r6,r19
  803848:	b82d883a 	mov	r22,r23
  80384c:	002f883a 	mov	r23,zero
  803850:	db401615 	stw	r13,88(sp)
  803854:	d8801315 	stw	r2,76(sp)
  803858:	d8c01415 	stw	r3,80(sp)
  80385c:	dcc01515 	stw	r19,84(sp)
  803860:	0803f900 	call	803f90 <__muldi3>
  803864:	b00d883a 	mov	r6,r22
  803868:	000b883a 	mov	r5,zero
  80386c:	9009883a 	mov	r4,r18
  803870:	b80f883a 	mov	r7,r23
  803874:	1021883a 	mov	r16,r2
  803878:	1823883a 	mov	r17,r3
  80387c:	0803f900 	call	803f90 <__muldi3>
  803880:	8085883a 	add	r2,r16,r2
  803884:	140d803a 	cmpltu	r6,r2,r16
  803888:	88c7883a 	add	r3,r17,r3
  80388c:	30cd883a 	add	r6,r6,r3
  803890:	1029883a 	mov	r20,r2
  803894:	302b883a 	mov	r21,r6
  803898:	da801317 	ldw	r10,76(sp)
  80389c:	dac01417 	ldw	r11,80(sp)
  8038a0:	db001517 	ldw	r12,84(sp)
  8038a4:	db401617 	ldw	r13,88(sp)
  8038a8:	3440612e 	bgeu	r6,r17,803a30 <__muldf3+0x318>
  8038ac:	0009883a 	mov	r4,zero
  8038b0:	5105883a 	add	r2,r10,r4
  8038b4:	128d803a 	cmpltu	r6,r2,r10
  8038b8:	5d07883a 	add	r3,r11,r20
  8038bc:	30cd883a 	add	r6,r6,r3
  8038c0:	0021883a 	mov	r16,zero
  8038c4:	04400044 	movi	r17,1
  8038c8:	1025883a 	mov	r18,r2
  8038cc:	3027883a 	mov	r19,r6
  8038d0:	32c06236 	bltu	r6,r11,803a5c <__muldf3+0x344>
  8038d4:	59807a26 	beq	r11,r6,803ac0 <__muldf3+0x3a8>
  8038d8:	680b883a 	mov	r5,r13
  8038dc:	b80f883a 	mov	r7,r23
  8038e0:	6009883a 	mov	r4,r12
  8038e4:	b00d883a 	mov	r6,r22
  8038e8:	0803f900 	call	803f90 <__muldi3>
  8038ec:	1009883a 	mov	r4,r2
  8038f0:	000f883a 	mov	r7,zero
  8038f4:	1545883a 	add	r2,r2,r21
  8038f8:	1111803a 	cmpltu	r8,r2,r4
  8038fc:	19c7883a 	add	r3,r3,r7
  803900:	40c7883a 	add	r3,r8,r3
  803904:	88cb883a 	add	r5,r17,r3
  803908:	d8c00617 	ldw	r3,24(sp)
  80390c:	8089883a 	add	r4,r16,r2
  803910:	d8800b17 	ldw	r2,44(sp)
  803914:	18c00104 	addi	r3,r3,4
  803918:	240d803a 	cmpltu	r6,r4,r16
  80391c:	10c7883a 	add	r3,r2,r3
  803920:	2013883a 	mov	r9,r4
  803924:	d8800a17 	ldw	r2,40(sp)
  803928:	d9000517 	ldw	r4,20(sp)
  80392c:	314d883a 	add	r6,r6,r5
  803930:	3015883a 	mov	r10,r6
  803934:	2088c03a 	cmpne	r4,r4,r2
  803938:	00880034 	movhi	r2,8192
  80393c:	10bfffc4 	addi	r2,r2,-1
  803940:	d9000f15 	stw	r4,60(sp)
  803944:	d8c01015 	stw	r3,64(sp)
  803948:	1180162e 	bgeu	r2,r6,8039a4 <__muldf3+0x28c>
  80394c:	1811883a 	mov	r8,r3
  803950:	101f883a 	mov	r15,r2
  803954:	980497fa 	slli	r2,r19,31
  803958:	9016d07a 	srli	r11,r18,1
  80395c:	500697fa 	slli	r3,r10,31
  803960:	480cd07a 	srli	r6,r9,1
  803964:	500ed07a 	srli	r7,r10,1
  803968:	12d6b03a 	or	r11,r2,r11
  80396c:	00800044 	movi	r2,1
  803970:	198cb03a 	or	r6,r3,r6
  803974:	4888703a 	and	r4,r9,r2
  803978:	9818d07a 	srli	r12,r19,1
  80397c:	001b883a 	mov	r13,zero
  803980:	03a00034 	movhi	r14,32768
  803984:	3013883a 	mov	r9,r6
  803988:	3815883a 	mov	r10,r7
  80398c:	4091883a 	add	r8,r8,r2
  803990:	20000226 	beq	r4,zero,80399c <__muldf3+0x284>
  803994:	5b64b03a 	or	r18,r11,r13
  803998:	63a6b03a 	or	r19,r12,r14
  80399c:	7abfed36 	bltu	r15,r10,803954 <__muldf3+0x23c>
  8039a0:	da001015 	stw	r8,64(sp)
  8039a4:	00840034 	movhi	r2,4096
  8039a8:	10bfffc4 	addi	r2,r2,-1
  8039ac:	12801436 	bltu	r2,r10,803a00 <__muldf3+0x2e8>
  8039b0:	da001017 	ldw	r8,64(sp)
  8039b4:	101f883a 	mov	r15,r2
  8039b8:	4a45883a 	add	r2,r9,r9
  8039bc:	124d803a 	cmpltu	r6,r2,r9
  8039c0:	5287883a 	add	r3,r10,r10
  8039c4:	9497883a 	add	r11,r18,r18
  8039c8:	5c8f803a 	cmpltu	r7,r11,r18
  8039cc:	9cd9883a 	add	r12,r19,r19
  8039d0:	01000044 	movi	r4,1
  8039d4:	30cd883a 	add	r6,r6,r3
  8039d8:	3b0f883a 	add	r7,r7,r12
  8039dc:	423fffc4 	addi	r8,r8,-1
  8039e0:	1013883a 	mov	r9,r2
  8039e4:	3015883a 	mov	r10,r6
  8039e8:	111ab03a 	or	r13,r2,r4
  8039ec:	98003016 	blt	r19,zero,803ab0 <__muldf3+0x398>
  8039f0:	5825883a 	mov	r18,r11
  8039f4:	3827883a 	mov	r19,r7
  8039f8:	7abfef2e 	bgeu	r15,r10,8039b8 <__muldf3+0x2a0>
  8039fc:	da001015 	stw	r8,64(sp)
  803a00:	00803fc4 	movi	r2,255
  803a04:	488e703a 	and	r7,r9,r2
  803a08:	00802004 	movi	r2,128
  803a0c:	0007883a 	mov	r3,zero
  803a10:	0011883a 	mov	r8,zero
  803a14:	38801826 	beq	r7,r2,803a78 <__muldf3+0x360>
  803a18:	008000c4 	movi	r2,3
  803a1c:	d9000e04 	addi	r4,sp,56
  803a20:	da801215 	stw	r10,72(sp)
  803a24:	d8800e15 	stw	r2,56(sp)
  803a28:	da401115 	stw	r9,68(sp)
  803a2c:	003f6a06 	br	8037d8 <__muldf3+0xc0>
  803a30:	89802126 	beq	r17,r6,803ab8 <__muldf3+0x3a0>
  803a34:	0009883a 	mov	r4,zero
  803a38:	5105883a 	add	r2,r10,r4
  803a3c:	128d803a 	cmpltu	r6,r2,r10
  803a40:	5d07883a 	add	r3,r11,r20
  803a44:	30cd883a 	add	r6,r6,r3
  803a48:	0021883a 	mov	r16,zero
  803a4c:	0023883a 	mov	r17,zero
  803a50:	1025883a 	mov	r18,r2
  803a54:	3027883a 	mov	r19,r6
  803a58:	32ff9e2e 	bgeu	r6,r11,8038d4 <__muldf3+0x1bc>
  803a5c:	00800044 	movi	r2,1
  803a60:	8089883a 	add	r4,r16,r2
  803a64:	240d803a 	cmpltu	r6,r4,r16
  803a68:	344d883a 	add	r6,r6,r17
  803a6c:	2021883a 	mov	r16,r4
  803a70:	3023883a 	mov	r17,r6
  803a74:	003f9806 	br	8038d8 <__muldf3+0x1c0>
  803a78:	403fe71e 	bne	r8,zero,803a18 <__muldf3+0x300>
  803a7c:	01004004 	movi	r4,256
  803a80:	4904703a 	and	r2,r9,r4
  803a84:	10c4b03a 	or	r2,r2,r3
  803a88:	103fe31e 	bne	r2,zero,803a18 <__muldf3+0x300>
  803a8c:	94c4b03a 	or	r2,r18,r19
  803a90:	103fe126 	beq	r2,zero,803a18 <__muldf3+0x300>
  803a94:	49c5883a 	add	r2,r9,r7
  803a98:	1251803a 	cmpltu	r8,r2,r9
  803a9c:	4291883a 	add	r8,r8,r10
  803aa0:	013fc004 	movi	r4,-256
  803aa4:	1112703a 	and	r9,r2,r4
  803aa8:	4015883a 	mov	r10,r8
  803aac:	003fda06 	br	803a18 <__muldf3+0x300>
  803ab0:	6813883a 	mov	r9,r13
  803ab4:	003fce06 	br	8039f0 <__muldf3+0x2d8>
  803ab8:	143f7c36 	bltu	r2,r16,8038ac <__muldf3+0x194>
  803abc:	003fdd06 	br	803a34 <__muldf3+0x31c>
  803ac0:	12bf852e 	bgeu	r2,r10,8038d8 <__muldf3+0x1c0>
  803ac4:	003fe506 	br	803a5c <__muldf3+0x344>
  803ac8:	00800084 	movi	r2,2
  803acc:	20bf351e 	bne	r4,r2,8037a4 <__muldf3+0x8c>
  803ad0:	01002234 	movhi	r4,136
  803ad4:	213aa004 	addi	r4,r4,-5504
  803ad8:	003f3f06 	br	8037d8 <__muldf3+0xc0>

00803adc <__eqdf2>:
  803adc:	deffef04 	addi	sp,sp,-68
  803ae0:	dc400f15 	stw	r17,60(sp)
  803ae4:	dc400404 	addi	r17,sp,16
  803ae8:	2005883a 	mov	r2,r4
  803aec:	2807883a 	mov	r3,r5
  803af0:	dc000e15 	stw	r16,56(sp)
  803af4:	d809883a 	mov	r4,sp
  803af8:	880b883a 	mov	r5,r17
  803afc:	dc000904 	addi	r16,sp,36
  803b00:	d8c00115 	stw	r3,4(sp)
  803b04:	d8800015 	stw	r2,0(sp)
  803b08:	d9800215 	stw	r6,8(sp)
  803b0c:	dfc01015 	stw	ra,64(sp)
  803b10:	d9c00315 	stw	r7,12(sp)
  803b14:	08043bc0 	call	8043bc <__unpack_d>
  803b18:	d9000204 	addi	r4,sp,8
  803b1c:	800b883a 	mov	r5,r16
  803b20:	08043bc0 	call	8043bc <__unpack_d>
  803b24:	d8800417 	ldw	r2,16(sp)
  803b28:	00c00044 	movi	r3,1
  803b2c:	180d883a 	mov	r6,r3
  803b30:	1880062e 	bgeu	r3,r2,803b4c <__eqdf2+0x70>
  803b34:	d8800917 	ldw	r2,36(sp)
  803b38:	8809883a 	mov	r4,r17
  803b3c:	800b883a 	mov	r5,r16
  803b40:	1880022e 	bgeu	r3,r2,803b4c <__eqdf2+0x70>
  803b44:	08044f40 	call	8044f4 <__fpcmp_parts_d>
  803b48:	100d883a 	mov	r6,r2
  803b4c:	3005883a 	mov	r2,r6
  803b50:	dfc01017 	ldw	ra,64(sp)
  803b54:	dc400f17 	ldw	r17,60(sp)
  803b58:	dc000e17 	ldw	r16,56(sp)
  803b5c:	dec01104 	addi	sp,sp,68
  803b60:	f800283a 	ret

00803b64 <__gtdf2>:
  803b64:	deffef04 	addi	sp,sp,-68
  803b68:	dc400f15 	stw	r17,60(sp)
  803b6c:	dc400404 	addi	r17,sp,16
  803b70:	2005883a 	mov	r2,r4
  803b74:	2807883a 	mov	r3,r5
  803b78:	dc000e15 	stw	r16,56(sp)
  803b7c:	d809883a 	mov	r4,sp
  803b80:	880b883a 	mov	r5,r17
  803b84:	dc000904 	addi	r16,sp,36
  803b88:	d8c00115 	stw	r3,4(sp)
  803b8c:	d8800015 	stw	r2,0(sp)
  803b90:	d9800215 	stw	r6,8(sp)
  803b94:	dfc01015 	stw	ra,64(sp)
  803b98:	d9c00315 	stw	r7,12(sp)
  803b9c:	08043bc0 	call	8043bc <__unpack_d>
  803ba0:	d9000204 	addi	r4,sp,8
  803ba4:	800b883a 	mov	r5,r16
  803ba8:	08043bc0 	call	8043bc <__unpack_d>
  803bac:	d8800417 	ldw	r2,16(sp)
  803bb0:	00c00044 	movi	r3,1
  803bb4:	01bfffc4 	movi	r6,-1
  803bb8:	1880062e 	bgeu	r3,r2,803bd4 <__gtdf2+0x70>
  803bbc:	d8800917 	ldw	r2,36(sp)
  803bc0:	8809883a 	mov	r4,r17
  803bc4:	800b883a 	mov	r5,r16
  803bc8:	1880022e 	bgeu	r3,r2,803bd4 <__gtdf2+0x70>
  803bcc:	08044f40 	call	8044f4 <__fpcmp_parts_d>
  803bd0:	100d883a 	mov	r6,r2
  803bd4:	3005883a 	mov	r2,r6
  803bd8:	dfc01017 	ldw	ra,64(sp)
  803bdc:	dc400f17 	ldw	r17,60(sp)
  803be0:	dc000e17 	ldw	r16,56(sp)
  803be4:	dec01104 	addi	sp,sp,68
  803be8:	f800283a 	ret

00803bec <__gedf2>:
  803bec:	deffef04 	addi	sp,sp,-68
  803bf0:	dc400f15 	stw	r17,60(sp)
  803bf4:	dc400404 	addi	r17,sp,16
  803bf8:	2005883a 	mov	r2,r4
  803bfc:	2807883a 	mov	r3,r5
  803c00:	dc000e15 	stw	r16,56(sp)
  803c04:	d809883a 	mov	r4,sp
  803c08:	880b883a 	mov	r5,r17
  803c0c:	dc000904 	addi	r16,sp,36
  803c10:	d8c00115 	stw	r3,4(sp)
  803c14:	d8800015 	stw	r2,0(sp)
  803c18:	d9800215 	stw	r6,8(sp)
  803c1c:	dfc01015 	stw	ra,64(sp)
  803c20:	d9c00315 	stw	r7,12(sp)
  803c24:	08043bc0 	call	8043bc <__unpack_d>
  803c28:	d9000204 	addi	r4,sp,8
  803c2c:	800b883a 	mov	r5,r16
  803c30:	08043bc0 	call	8043bc <__unpack_d>
  803c34:	d8800417 	ldw	r2,16(sp)
  803c38:	00c00044 	movi	r3,1
  803c3c:	01bfffc4 	movi	r6,-1
  803c40:	1880062e 	bgeu	r3,r2,803c5c <__gedf2+0x70>
  803c44:	d8800917 	ldw	r2,36(sp)
  803c48:	8809883a 	mov	r4,r17
  803c4c:	800b883a 	mov	r5,r16
  803c50:	1880022e 	bgeu	r3,r2,803c5c <__gedf2+0x70>
  803c54:	08044f40 	call	8044f4 <__fpcmp_parts_d>
  803c58:	100d883a 	mov	r6,r2
  803c5c:	3005883a 	mov	r2,r6
  803c60:	dfc01017 	ldw	ra,64(sp)
  803c64:	dc400f17 	ldw	r17,60(sp)
  803c68:	dc000e17 	ldw	r16,56(sp)
  803c6c:	dec01104 	addi	sp,sp,68
  803c70:	f800283a 	ret

00803c74 <__floatsidf>:
  803c74:	2006d7fa 	srli	r3,r4,31
  803c78:	defff604 	addi	sp,sp,-40
  803c7c:	008000c4 	movi	r2,3
  803c80:	dfc00915 	stw	ra,36(sp)
  803c84:	dcc00815 	stw	r19,32(sp)
  803c88:	dc800715 	stw	r18,28(sp)
  803c8c:	dc400615 	stw	r17,24(sp)
  803c90:	dc000515 	stw	r16,20(sp)
  803c94:	d8800015 	stw	r2,0(sp)
  803c98:	d8c00115 	stw	r3,4(sp)
  803c9c:	20000f1e 	bne	r4,zero,803cdc <__floatsidf+0x68>
  803ca0:	00800084 	movi	r2,2
  803ca4:	d8800015 	stw	r2,0(sp)
  803ca8:	d809883a 	mov	r4,sp
  803cac:	08040a80 	call	8040a8 <__pack_d>
  803cb0:	1009883a 	mov	r4,r2
  803cb4:	180b883a 	mov	r5,r3
  803cb8:	2005883a 	mov	r2,r4
  803cbc:	2807883a 	mov	r3,r5
  803cc0:	dfc00917 	ldw	ra,36(sp)
  803cc4:	dcc00817 	ldw	r19,32(sp)
  803cc8:	dc800717 	ldw	r18,28(sp)
  803ccc:	dc400617 	ldw	r17,24(sp)
  803cd0:	dc000517 	ldw	r16,20(sp)
  803cd4:	dec00a04 	addi	sp,sp,40
  803cd8:	f800283a 	ret
  803cdc:	00800f04 	movi	r2,60
  803ce0:	1807003a 	cmpeq	r3,r3,zero
  803ce4:	d8800215 	stw	r2,8(sp)
  803ce8:	18001126 	beq	r3,zero,803d30 <__floatsidf+0xbc>
  803cec:	0027883a 	mov	r19,zero
  803cf0:	2025883a 	mov	r18,r4
  803cf4:	d9000315 	stw	r4,12(sp)
  803cf8:	dcc00415 	stw	r19,16(sp)
  803cfc:	08040280 	call	804028 <__clzsi2>
  803d00:	11000744 	addi	r4,r2,29
  803d04:	013fe80e 	bge	zero,r4,803ca8 <__floatsidf+0x34>
  803d08:	10bfff44 	addi	r2,r2,-3
  803d0c:	10000c16 	blt	r2,zero,803d40 <__floatsidf+0xcc>
  803d10:	90a2983a 	sll	r17,r18,r2
  803d14:	0021883a 	mov	r16,zero
  803d18:	d8800217 	ldw	r2,8(sp)
  803d1c:	dc400415 	stw	r17,16(sp)
  803d20:	dc000315 	stw	r16,12(sp)
  803d24:	1105c83a 	sub	r2,r2,r4
  803d28:	d8800215 	stw	r2,8(sp)
  803d2c:	003fde06 	br	803ca8 <__floatsidf+0x34>
  803d30:	00a00034 	movhi	r2,32768
  803d34:	20800a26 	beq	r4,r2,803d60 <__floatsidf+0xec>
  803d38:	0109c83a 	sub	r4,zero,r4
  803d3c:	003feb06 	br	803cec <__floatsidf+0x78>
  803d40:	9006d07a 	srli	r3,r18,1
  803d44:	008007c4 	movi	r2,31
  803d48:	1105c83a 	sub	r2,r2,r4
  803d4c:	1886d83a 	srl	r3,r3,r2
  803d50:	9922983a 	sll	r17,r19,r4
  803d54:	9120983a 	sll	r16,r18,r4
  803d58:	1c62b03a 	or	r17,r3,r17
  803d5c:	003fee06 	br	803d18 <__floatsidf+0xa4>
  803d60:	0009883a 	mov	r4,zero
  803d64:	01707834 	movhi	r5,49632
  803d68:	003fd306 	br	803cb8 <__floatsidf+0x44>

00803d6c <__fixdfsi>:
  803d6c:	defff804 	addi	sp,sp,-32
  803d70:	2005883a 	mov	r2,r4
  803d74:	2807883a 	mov	r3,r5
  803d78:	d809883a 	mov	r4,sp
  803d7c:	d9400204 	addi	r5,sp,8
  803d80:	d8c00115 	stw	r3,4(sp)
  803d84:	d8800015 	stw	r2,0(sp)
  803d88:	dfc00715 	stw	ra,28(sp)
  803d8c:	08043bc0 	call	8043bc <__unpack_d>
  803d90:	d8c00217 	ldw	r3,8(sp)
  803d94:	00800084 	movi	r2,2
  803d98:	1880051e 	bne	r3,r2,803db0 <__fixdfsi+0x44>
  803d9c:	0007883a 	mov	r3,zero
  803da0:	1805883a 	mov	r2,r3
  803da4:	dfc00717 	ldw	ra,28(sp)
  803da8:	dec00804 	addi	sp,sp,32
  803dac:	f800283a 	ret
  803db0:	00800044 	movi	r2,1
  803db4:	10fff92e 	bgeu	r2,r3,803d9c <__fixdfsi+0x30>
  803db8:	00800104 	movi	r2,4
  803dbc:	18800426 	beq	r3,r2,803dd0 <__fixdfsi+0x64>
  803dc0:	d8c00417 	ldw	r3,16(sp)
  803dc4:	183ff516 	blt	r3,zero,803d9c <__fixdfsi+0x30>
  803dc8:	00800784 	movi	r2,30
  803dcc:	10c0080e 	bge	r2,r3,803df0 <__fixdfsi+0x84>
  803dd0:	d8800317 	ldw	r2,12(sp)
  803dd4:	1000121e 	bne	r2,zero,803e20 <__fixdfsi+0xb4>
  803dd8:	00e00034 	movhi	r3,32768
  803ddc:	18ffffc4 	addi	r3,r3,-1
  803de0:	1805883a 	mov	r2,r3
  803de4:	dfc00717 	ldw	ra,28(sp)
  803de8:	dec00804 	addi	sp,sp,32
  803dec:	f800283a 	ret
  803df0:	00800f04 	movi	r2,60
  803df4:	10d1c83a 	sub	r8,r2,r3
  803df8:	40bff804 	addi	r2,r8,-32
  803dfc:	d9800517 	ldw	r6,20(sp)
  803e00:	d9c00617 	ldw	r7,24(sp)
  803e04:	10000816 	blt	r2,zero,803e28 <__fixdfsi+0xbc>
  803e08:	3888d83a 	srl	r4,r7,r2
  803e0c:	d8800317 	ldw	r2,12(sp)
  803e10:	2007883a 	mov	r3,r4
  803e14:	103fe226 	beq	r2,zero,803da0 <__fixdfsi+0x34>
  803e18:	0107c83a 	sub	r3,zero,r4
  803e1c:	003fe006 	br	803da0 <__fixdfsi+0x34>
  803e20:	00e00034 	movhi	r3,32768
  803e24:	003fde06 	br	803da0 <__fixdfsi+0x34>
  803e28:	39c7883a 	add	r3,r7,r7
  803e2c:	008007c4 	movi	r2,31
  803e30:	1205c83a 	sub	r2,r2,r8
  803e34:	1886983a 	sll	r3,r3,r2
  803e38:	3208d83a 	srl	r4,r6,r8
  803e3c:	1908b03a 	or	r4,r3,r4
  803e40:	003ff206 	br	803e0c <__fixdfsi+0xa0>

00803e44 <udivmodsi4>:
  803e44:	29001b2e 	bgeu	r5,r4,803eb4 <udivmodsi4+0x70>
  803e48:	28001a16 	blt	r5,zero,803eb4 <udivmodsi4+0x70>
  803e4c:	00800044 	movi	r2,1
  803e50:	0007883a 	mov	r3,zero
  803e54:	01c007c4 	movi	r7,31
  803e58:	00000306 	br	803e68 <udivmodsi4+0x24>
  803e5c:	19c01326 	beq	r3,r7,803eac <udivmodsi4+0x68>
  803e60:	18c00044 	addi	r3,r3,1
  803e64:	28000416 	blt	r5,zero,803e78 <udivmodsi4+0x34>
  803e68:	294b883a 	add	r5,r5,r5
  803e6c:	1085883a 	add	r2,r2,r2
  803e70:	293ffa36 	bltu	r5,r4,803e5c <udivmodsi4+0x18>
  803e74:	10000d26 	beq	r2,zero,803eac <udivmodsi4+0x68>
  803e78:	0007883a 	mov	r3,zero
  803e7c:	21400236 	bltu	r4,r5,803e88 <udivmodsi4+0x44>
  803e80:	2149c83a 	sub	r4,r4,r5
  803e84:	1886b03a 	or	r3,r3,r2
  803e88:	1004d07a 	srli	r2,r2,1
  803e8c:	280ad07a 	srli	r5,r5,1
  803e90:	103ffa1e 	bne	r2,zero,803e7c <udivmodsi4+0x38>
  803e94:	30000226 	beq	r6,zero,803ea0 <udivmodsi4+0x5c>
  803e98:	2005883a 	mov	r2,r4
  803e9c:	f800283a 	ret
  803ea0:	1809883a 	mov	r4,r3
  803ea4:	2005883a 	mov	r2,r4
  803ea8:	f800283a 	ret
  803eac:	0007883a 	mov	r3,zero
  803eb0:	003ff806 	br	803e94 <udivmodsi4+0x50>
  803eb4:	00800044 	movi	r2,1
  803eb8:	0007883a 	mov	r3,zero
  803ebc:	003fef06 	br	803e7c <udivmodsi4+0x38>

00803ec0 <__divsi3>:
  803ec0:	defffe04 	addi	sp,sp,-8
  803ec4:	dc000015 	stw	r16,0(sp)
  803ec8:	dfc00115 	stw	ra,4(sp)
  803ecc:	0021883a 	mov	r16,zero
  803ed0:	20000c16 	blt	r4,zero,803f04 <__divsi3+0x44>
  803ed4:	000d883a 	mov	r6,zero
  803ed8:	28000e16 	blt	r5,zero,803f14 <__divsi3+0x54>
  803edc:	0803e440 	call	803e44 <udivmodsi4>
  803ee0:	1007883a 	mov	r3,r2
  803ee4:	8005003a 	cmpeq	r2,r16,zero
  803ee8:	1000011e 	bne	r2,zero,803ef0 <__divsi3+0x30>
  803eec:	00c7c83a 	sub	r3,zero,r3
  803ef0:	1805883a 	mov	r2,r3
  803ef4:	dfc00117 	ldw	ra,4(sp)
  803ef8:	dc000017 	ldw	r16,0(sp)
  803efc:	dec00204 	addi	sp,sp,8
  803f00:	f800283a 	ret
  803f04:	0109c83a 	sub	r4,zero,r4
  803f08:	04000044 	movi	r16,1
  803f0c:	000d883a 	mov	r6,zero
  803f10:	283ff20e 	bge	r5,zero,803edc <__divsi3+0x1c>
  803f14:	014bc83a 	sub	r5,zero,r5
  803f18:	8021003a 	cmpeq	r16,r16,zero
  803f1c:	003fef06 	br	803edc <__divsi3+0x1c>

00803f20 <__modsi3>:
  803f20:	deffff04 	addi	sp,sp,-4
  803f24:	dfc00015 	stw	ra,0(sp)
  803f28:	01800044 	movi	r6,1
  803f2c:	2807883a 	mov	r3,r5
  803f30:	20000416 	blt	r4,zero,803f44 <__modsi3+0x24>
  803f34:	28000c16 	blt	r5,zero,803f68 <__modsi3+0x48>
  803f38:	dfc00017 	ldw	ra,0(sp)
  803f3c:	dec00104 	addi	sp,sp,4
  803f40:	0803e441 	jmpi	803e44 <udivmodsi4>
  803f44:	0109c83a 	sub	r4,zero,r4
  803f48:	28000b16 	blt	r5,zero,803f78 <__modsi3+0x58>
  803f4c:	180b883a 	mov	r5,r3
  803f50:	01800044 	movi	r6,1
  803f54:	0803e440 	call	803e44 <udivmodsi4>
  803f58:	0085c83a 	sub	r2,zero,r2
  803f5c:	dfc00017 	ldw	ra,0(sp)
  803f60:	dec00104 	addi	sp,sp,4
  803f64:	f800283a 	ret
  803f68:	014bc83a 	sub	r5,zero,r5
  803f6c:	dfc00017 	ldw	ra,0(sp)
  803f70:	dec00104 	addi	sp,sp,4
  803f74:	0803e441 	jmpi	803e44 <udivmodsi4>
  803f78:	0147c83a 	sub	r3,zero,r5
  803f7c:	003ff306 	br	803f4c <__modsi3+0x2c>

00803f80 <__udivsi3>:
  803f80:	000d883a 	mov	r6,zero
  803f84:	0803e441 	jmpi	803e44 <udivmodsi4>

00803f88 <__umodsi3>:
  803f88:	01800044 	movi	r6,1
  803f8c:	0803e441 	jmpi	803e44 <udivmodsi4>

00803f90 <__muldi3>:
  803f90:	2011883a 	mov	r8,r4
  803f94:	427fffcc 	andi	r9,r8,65535
  803f98:	4018d43a 	srli	r12,r8,16
  803f9c:	32bfffcc 	andi	r10,r6,65535
  803fa0:	3016d43a 	srli	r11,r6,16
  803fa4:	4a85383a 	mul	r2,r9,r10
  803fa8:	6295383a 	mul	r10,r12,r10
  803fac:	4ad3383a 	mul	r9,r9,r11
  803fb0:	113fffcc 	andi	r4,r2,65535
  803fb4:	1004d43a 	srli	r2,r2,16
  803fb8:	4a93883a 	add	r9,r9,r10
  803fbc:	3807883a 	mov	r3,r7
  803fc0:	1245883a 	add	r2,r2,r9
  803fc4:	280f883a 	mov	r7,r5
  803fc8:	180b883a 	mov	r5,r3
  803fcc:	1006943a 	slli	r3,r2,16
  803fd0:	defffd04 	addi	sp,sp,-12
  803fd4:	dc800215 	stw	r18,8(sp)
  803fd8:	1907883a 	add	r3,r3,r4
  803fdc:	dc400115 	stw	r17,4(sp)
  803fe0:	dc000015 	stw	r16,0(sp)
  803fe4:	4165383a 	mul	r18,r8,r5
  803fe8:	31e3383a 	mul	r17,r6,r7
  803fec:	1012d43a 	srli	r9,r2,16
  803ff0:	62d9383a 	mul	r12,r12,r11
  803ff4:	181f883a 	mov	r15,r3
  803ff8:	1280022e 	bgeu	r2,r10,804004 <__muldi3+0x74>
  803ffc:	00800074 	movhi	r2,1
  804000:	6099883a 	add	r12,r12,r2
  804004:	624d883a 	add	r6,r12,r9
  804008:	9187883a 	add	r3,r18,r6
  80400c:	88c7883a 	add	r3,r17,r3
  804010:	7805883a 	mov	r2,r15
  804014:	dc800217 	ldw	r18,8(sp)
  804018:	dc400117 	ldw	r17,4(sp)
  80401c:	dc000017 	ldw	r16,0(sp)
  804020:	dec00304 	addi	sp,sp,12
  804024:	f800283a 	ret

00804028 <__clzsi2>:
  804028:	00bfffd4 	movui	r2,65535
  80402c:	11000e36 	bltu	r2,r4,804068 <__clzsi2+0x40>
  804030:	00803fc4 	movi	r2,255
  804034:	01400204 	movi	r5,8
  804038:	0007883a 	mov	r3,zero
  80403c:	11001036 	bltu	r2,r4,804080 <__clzsi2+0x58>
  804040:	000b883a 	mov	r5,zero
  804044:	20c6d83a 	srl	r3,r4,r3
  804048:	00802234 	movhi	r2,136
  80404c:	10baa504 	addi	r2,r2,-5484
  804050:	1887883a 	add	r3,r3,r2
  804054:	18800003 	ldbu	r2,0(r3)
  804058:	00c00804 	movi	r3,32
  80405c:	2885883a 	add	r2,r5,r2
  804060:	1885c83a 	sub	r2,r3,r2
  804064:	f800283a 	ret
  804068:	01400404 	movi	r5,16
  80406c:	00804034 	movhi	r2,256
  804070:	10bfffc4 	addi	r2,r2,-1
  804074:	2807883a 	mov	r3,r5
  804078:	113ff22e 	bgeu	r2,r4,804044 <__clzsi2+0x1c>
  80407c:	01400604 	movi	r5,24
  804080:	2807883a 	mov	r3,r5
  804084:	20c6d83a 	srl	r3,r4,r3
  804088:	00802234 	movhi	r2,136
  80408c:	10baa504 	addi	r2,r2,-5484
  804090:	1887883a 	add	r3,r3,r2
  804094:	18800003 	ldbu	r2,0(r3)
  804098:	00c00804 	movi	r3,32
  80409c:	2885883a 	add	r2,r5,r2
  8040a0:	1885c83a 	sub	r2,r3,r2
  8040a4:	f800283a 	ret

008040a8 <__pack_d>:
  8040a8:	20c00017 	ldw	r3,0(r4)
  8040ac:	defffd04 	addi	sp,sp,-12
  8040b0:	dc000015 	stw	r16,0(sp)
  8040b4:	dc800215 	stw	r18,8(sp)
  8040b8:	dc400115 	stw	r17,4(sp)
  8040bc:	00800044 	movi	r2,1
  8040c0:	22000317 	ldw	r8,12(r4)
  8040c4:	001f883a 	mov	r15,zero
  8040c8:	22400417 	ldw	r9,16(r4)
  8040cc:	24000117 	ldw	r16,4(r4)
  8040d0:	10c0552e 	bgeu	r2,r3,804228 <__pack_d+0x180>
  8040d4:	00800104 	movi	r2,4
  8040d8:	18804f26 	beq	r3,r2,804218 <__pack_d+0x170>
  8040dc:	00800084 	movi	r2,2
  8040e0:	18800226 	beq	r3,r2,8040ec <__pack_d+0x44>
  8040e4:	4244b03a 	or	r2,r8,r9
  8040e8:	10001a1e 	bne	r2,zero,804154 <__pack_d+0xac>
  8040ec:	000d883a 	mov	r6,zero
  8040f0:	000f883a 	mov	r7,zero
  8040f4:	0011883a 	mov	r8,zero
  8040f8:	00800434 	movhi	r2,16
  8040fc:	10bfffc4 	addi	r2,r2,-1
  804100:	301d883a 	mov	r14,r6
  804104:	3884703a 	and	r2,r7,r2
  804108:	400a953a 	slli	r5,r8,20
  80410c:	79bffc2c 	andhi	r6,r15,65520
  804110:	308cb03a 	or	r6,r6,r2
  804114:	00e00434 	movhi	r3,32784
  804118:	18ffffc4 	addi	r3,r3,-1
  80411c:	800497fa 	slli	r2,r16,31
  804120:	30c6703a 	and	r3,r6,r3
  804124:	1946b03a 	or	r3,r3,r5
  804128:	01600034 	movhi	r5,32768
  80412c:	297fffc4 	addi	r5,r5,-1
  804130:	194a703a 	and	r5,r3,r5
  804134:	288ab03a 	or	r5,r5,r2
  804138:	2807883a 	mov	r3,r5
  80413c:	7005883a 	mov	r2,r14
  804140:	dc800217 	ldw	r18,8(sp)
  804144:	dc400117 	ldw	r17,4(sp)
  804148:	dc000017 	ldw	r16,0(sp)
  80414c:	dec00304 	addi	sp,sp,12
  804150:	f800283a 	ret
  804154:	21000217 	ldw	r4,8(r4)
  804158:	00bf0084 	movi	r2,-1022
  80415c:	20803f16 	blt	r4,r2,80425c <__pack_d+0x1b4>
  804160:	0080ffc4 	movi	r2,1023
  804164:	11002c16 	blt	r2,r4,804218 <__pack_d+0x170>
  804168:	00803fc4 	movi	r2,255
  80416c:	408c703a 	and	r6,r8,r2
  804170:	00802004 	movi	r2,128
  804174:	0007883a 	mov	r3,zero
  804178:	000f883a 	mov	r7,zero
  80417c:	2280ffc4 	addi	r10,r4,1023
  804180:	30801e26 	beq	r6,r2,8041fc <__pack_d+0x154>
  804184:	00801fc4 	movi	r2,127
  804188:	4089883a 	add	r4,r8,r2
  80418c:	220d803a 	cmpltu	r6,r4,r8
  804190:	324d883a 	add	r6,r6,r9
  804194:	2011883a 	mov	r8,r4
  804198:	3013883a 	mov	r9,r6
  80419c:	00880034 	movhi	r2,8192
  8041a0:	10bfffc4 	addi	r2,r2,-1
  8041a4:	12400d36 	bltu	r2,r9,8041dc <__pack_d+0x134>
  8041a8:	4804963a 	slli	r2,r9,24
  8041ac:	400cd23a 	srli	r6,r8,8
  8041b0:	480ed23a 	srli	r7,r9,8
  8041b4:	013fffc4 	movi	r4,-1
  8041b8:	118cb03a 	or	r6,r2,r6
  8041bc:	01400434 	movhi	r5,16
  8041c0:	297fffc4 	addi	r5,r5,-1
  8041c4:	3104703a 	and	r2,r6,r4
  8041c8:	3946703a 	and	r3,r7,r5
  8041cc:	5201ffcc 	andi	r8,r10,2047
  8041d0:	100d883a 	mov	r6,r2
  8041d4:	180f883a 	mov	r7,r3
  8041d8:	003fc706 	br	8040f8 <__pack_d+0x50>
  8041dc:	480897fa 	slli	r4,r9,31
  8041e0:	4004d07a 	srli	r2,r8,1
  8041e4:	4806d07a 	srli	r3,r9,1
  8041e8:	52800044 	addi	r10,r10,1
  8041ec:	2084b03a 	or	r2,r4,r2
  8041f0:	1011883a 	mov	r8,r2
  8041f4:	1813883a 	mov	r9,r3
  8041f8:	003feb06 	br	8041a8 <__pack_d+0x100>
  8041fc:	383fe11e 	bne	r7,zero,804184 <__pack_d+0xdc>
  804200:	01004004 	movi	r4,256
  804204:	4104703a 	and	r2,r8,r4
  804208:	10c4b03a 	or	r2,r2,r3
  80420c:	103fe326 	beq	r2,zero,80419c <__pack_d+0xf4>
  804210:	3005883a 	mov	r2,r6
  804214:	003fdc06 	br	804188 <__pack_d+0xe0>
  804218:	000d883a 	mov	r6,zero
  80421c:	000f883a 	mov	r7,zero
  804220:	0201ffc4 	movi	r8,2047
  804224:	003fb406 	br	8040f8 <__pack_d+0x50>
  804228:	0005883a 	mov	r2,zero
  80422c:	00c00234 	movhi	r3,8
  804230:	408cb03a 	or	r6,r8,r2
  804234:	48ceb03a 	or	r7,r9,r3
  804238:	013fffc4 	movi	r4,-1
  80423c:	01400434 	movhi	r5,16
  804240:	297fffc4 	addi	r5,r5,-1
  804244:	3104703a 	and	r2,r6,r4
  804248:	3946703a 	and	r3,r7,r5
  80424c:	100d883a 	mov	r6,r2
  804250:	180f883a 	mov	r7,r3
  804254:	0201ffc4 	movi	r8,2047
  804258:	003fa706 	br	8040f8 <__pack_d+0x50>
  80425c:	1109c83a 	sub	r4,r2,r4
  804260:	00800e04 	movi	r2,56
  804264:	11004316 	blt	r2,r4,804374 <__pack_d+0x2cc>
  804268:	21fff804 	addi	r7,r4,-32
  80426c:	38004516 	blt	r7,zero,804384 <__pack_d+0x2dc>
  804270:	49d8d83a 	srl	r12,r9,r7
  804274:	001b883a 	mov	r13,zero
  804278:	0023883a 	mov	r17,zero
  80427c:	01400044 	movi	r5,1
  804280:	0025883a 	mov	r18,zero
  804284:	38004716 	blt	r7,zero,8043a4 <__pack_d+0x2fc>
  804288:	29d6983a 	sll	r11,r5,r7
  80428c:	0015883a 	mov	r10,zero
  804290:	00bfffc4 	movi	r2,-1
  804294:	5089883a 	add	r4,r10,r2
  804298:	588b883a 	add	r5,r11,r2
  80429c:	228d803a 	cmpltu	r6,r4,r10
  8042a0:	314b883a 	add	r5,r6,r5
  8042a4:	4104703a 	and	r2,r8,r4
  8042a8:	4946703a 	and	r3,r9,r5
  8042ac:	10c4b03a 	or	r2,r2,r3
  8042b0:	10000226 	beq	r2,zero,8042bc <__pack_d+0x214>
  8042b4:	04400044 	movi	r17,1
  8042b8:	0025883a 	mov	r18,zero
  8042bc:	00803fc4 	movi	r2,255
  8042c0:	644eb03a 	or	r7,r12,r17
  8042c4:	3892703a 	and	r9,r7,r2
  8042c8:	00802004 	movi	r2,128
  8042cc:	6c90b03a 	or	r8,r13,r18
  8042d0:	0015883a 	mov	r10,zero
  8042d4:	48801626 	beq	r9,r2,804330 <__pack_d+0x288>
  8042d8:	01001fc4 	movi	r4,127
  8042dc:	3905883a 	add	r2,r7,r4
  8042e0:	11cd803a 	cmpltu	r6,r2,r7
  8042e4:	320d883a 	add	r6,r6,r8
  8042e8:	100f883a 	mov	r7,r2
  8042ec:	00840034 	movhi	r2,4096
  8042f0:	10bfffc4 	addi	r2,r2,-1
  8042f4:	3011883a 	mov	r8,r6
  8042f8:	0007883a 	mov	r3,zero
  8042fc:	11801b36 	bltu	r2,r6,80436c <__pack_d+0x2c4>
  804300:	4004963a 	slli	r2,r8,24
  804304:	3808d23a 	srli	r4,r7,8
  804308:	400ad23a 	srli	r5,r8,8
  80430c:	1813883a 	mov	r9,r3
  804310:	1108b03a 	or	r4,r2,r4
  804314:	00bfffc4 	movi	r2,-1
  804318:	00c00434 	movhi	r3,16
  80431c:	18ffffc4 	addi	r3,r3,-1
  804320:	208c703a 	and	r6,r4,r2
  804324:	28ce703a 	and	r7,r5,r3
  804328:	4a01ffcc 	andi	r8,r9,2047
  80432c:	003f7206 	br	8040f8 <__pack_d+0x50>
  804330:	503fe91e 	bne	r10,zero,8042d8 <__pack_d+0x230>
  804334:	01004004 	movi	r4,256
  804338:	3904703a 	and	r2,r7,r4
  80433c:	0007883a 	mov	r3,zero
  804340:	10c4b03a 	or	r2,r2,r3
  804344:	10000626 	beq	r2,zero,804360 <__pack_d+0x2b8>
  804348:	3a45883a 	add	r2,r7,r9
  80434c:	11cd803a 	cmpltu	r6,r2,r7
  804350:	320d883a 	add	r6,r6,r8
  804354:	100f883a 	mov	r7,r2
  804358:	3011883a 	mov	r8,r6
  80435c:	0007883a 	mov	r3,zero
  804360:	00840034 	movhi	r2,4096
  804364:	10bfffc4 	addi	r2,r2,-1
  804368:	123fe52e 	bgeu	r2,r8,804300 <__pack_d+0x258>
  80436c:	00c00044 	movi	r3,1
  804370:	003fe306 	br	804300 <__pack_d+0x258>
  804374:	0009883a 	mov	r4,zero
  804378:	0013883a 	mov	r9,zero
  80437c:	000b883a 	mov	r5,zero
  804380:	003fe406 	br	804314 <__pack_d+0x26c>
  804384:	4a47883a 	add	r3,r9,r9
  804388:	008007c4 	movi	r2,31
  80438c:	1105c83a 	sub	r2,r2,r4
  804390:	1886983a 	sll	r3,r3,r2
  804394:	4118d83a 	srl	r12,r8,r4
  804398:	491ad83a 	srl	r13,r9,r4
  80439c:	1b18b03a 	or	r12,r3,r12
  8043a0:	003fb506 	br	804278 <__pack_d+0x1d0>
  8043a4:	2806d07a 	srli	r3,r5,1
  8043a8:	008007c4 	movi	r2,31
  8043ac:	1105c83a 	sub	r2,r2,r4
  8043b0:	1896d83a 	srl	r11,r3,r2
  8043b4:	2914983a 	sll	r10,r5,r4
  8043b8:	003fb506 	br	804290 <__pack_d+0x1e8>

008043bc <__unpack_d>:
  8043bc:	20c00117 	ldw	r3,4(r4)
  8043c0:	22400017 	ldw	r9,0(r4)
  8043c4:	00800434 	movhi	r2,16
  8043c8:	10bfffc4 	addi	r2,r2,-1
  8043cc:	1808d53a 	srli	r4,r3,20
  8043d0:	180cd7fa 	srli	r6,r3,31
  8043d4:	1894703a 	and	r10,r3,r2
  8043d8:	2201ffcc 	andi	r8,r4,2047
  8043dc:	281b883a 	mov	r13,r5
  8043e0:	4817883a 	mov	r11,r9
  8043e4:	29800115 	stw	r6,4(r5)
  8043e8:	5019883a 	mov	r12,r10
  8043ec:	40001e1e 	bne	r8,zero,804468 <__unpack_d+0xac>
  8043f0:	4a84b03a 	or	r2,r9,r10
  8043f4:	10001926 	beq	r2,zero,80445c <__unpack_d+0xa0>
  8043f8:	4804d63a 	srli	r2,r9,24
  8043fc:	500c923a 	slli	r6,r10,8
  804400:	013f0084 	movi	r4,-1022
  804404:	00c40034 	movhi	r3,4096
  804408:	18ffffc4 	addi	r3,r3,-1
  80440c:	118cb03a 	or	r6,r2,r6
  804410:	008000c4 	movi	r2,3
  804414:	480a923a 	slli	r5,r9,8
  804418:	68800015 	stw	r2,0(r13)
  80441c:	69000215 	stw	r4,8(r13)
  804420:	19800b36 	bltu	r3,r6,804450 <__unpack_d+0x94>
  804424:	200f883a 	mov	r7,r4
  804428:	1811883a 	mov	r8,r3
  80442c:	2945883a 	add	r2,r5,r5
  804430:	1149803a 	cmpltu	r4,r2,r5
  804434:	3187883a 	add	r3,r6,r6
  804438:	20c9883a 	add	r4,r4,r3
  80443c:	100b883a 	mov	r5,r2
  804440:	200d883a 	mov	r6,r4
  804444:	39ffffc4 	addi	r7,r7,-1
  804448:	413ff82e 	bgeu	r8,r4,80442c <__unpack_d+0x70>
  80444c:	69c00215 	stw	r7,8(r13)
  804450:	69800415 	stw	r6,16(r13)
  804454:	69400315 	stw	r5,12(r13)
  804458:	f800283a 	ret
  80445c:	00800084 	movi	r2,2
  804460:	28800015 	stw	r2,0(r5)
  804464:	f800283a 	ret
  804468:	0081ffc4 	movi	r2,2047
  80446c:	40800f26 	beq	r8,r2,8044ac <__unpack_d+0xf0>
  804470:	480cd63a 	srli	r6,r9,24
  804474:	5006923a 	slli	r3,r10,8
  804478:	4804923a 	slli	r2,r9,8
  80447c:	0009883a 	mov	r4,zero
  804480:	30c6b03a 	or	r3,r6,r3
  804484:	01440034 	movhi	r5,4096
  804488:	110cb03a 	or	r6,r2,r4
  80448c:	423f0044 	addi	r8,r8,-1023
  804490:	194eb03a 	or	r7,r3,r5
  804494:	008000c4 	movi	r2,3
  804498:	69c00415 	stw	r7,16(r13)
  80449c:	6a000215 	stw	r8,8(r13)
  8044a0:	68800015 	stw	r2,0(r13)
  8044a4:	69800315 	stw	r6,12(r13)
  8044a8:	f800283a 	ret
  8044ac:	4a84b03a 	or	r2,r9,r10
  8044b0:	1000031e 	bne	r2,zero,8044c0 <__unpack_d+0x104>
  8044b4:	00800104 	movi	r2,4
  8044b8:	28800015 	stw	r2,0(r5)
  8044bc:	f800283a 	ret
  8044c0:	0009883a 	mov	r4,zero
  8044c4:	01400234 	movhi	r5,8
  8044c8:	4904703a 	and	r2,r9,r4
  8044cc:	5146703a 	and	r3,r10,r5
  8044d0:	10c4b03a 	or	r2,r2,r3
  8044d4:	10000526 	beq	r2,zero,8044ec <__unpack_d+0x130>
  8044d8:	00800044 	movi	r2,1
  8044dc:	68800015 	stw	r2,0(r13)
  8044e0:	6b000415 	stw	r12,16(r13)
  8044e4:	6ac00315 	stw	r11,12(r13)
  8044e8:	f800283a 	ret
  8044ec:	68000015 	stw	zero,0(r13)
  8044f0:	003ffb06 	br	8044e0 <__unpack_d+0x124>

008044f4 <__fpcmp_parts_d>:
  8044f4:	21800017 	ldw	r6,0(r4)
  8044f8:	00c00044 	movi	r3,1
  8044fc:	19800a2e 	bgeu	r3,r6,804528 <__fpcmp_parts_d+0x34>
  804500:	28800017 	ldw	r2,0(r5)
  804504:	1880082e 	bgeu	r3,r2,804528 <__fpcmp_parts_d+0x34>
  804508:	00c00104 	movi	r3,4
  80450c:	30c02626 	beq	r6,r3,8045a8 <__fpcmp_parts_d+0xb4>
  804510:	10c02226 	beq	r2,r3,80459c <__fpcmp_parts_d+0xa8>
  804514:	00c00084 	movi	r3,2
  804518:	30c00526 	beq	r6,r3,804530 <__fpcmp_parts_d+0x3c>
  80451c:	10c0071e 	bne	r2,r3,80453c <__fpcmp_parts_d+0x48>
  804520:	20800117 	ldw	r2,4(r4)
  804524:	1000091e 	bne	r2,zero,80454c <__fpcmp_parts_d+0x58>
  804528:	00800044 	movi	r2,1
  80452c:	f800283a 	ret
  804530:	10c01a1e 	bne	r2,r3,80459c <__fpcmp_parts_d+0xa8>
  804534:	0005883a 	mov	r2,zero
  804538:	f800283a 	ret
  80453c:	22000117 	ldw	r8,4(r4)
  804540:	28800117 	ldw	r2,4(r5)
  804544:	40800326 	beq	r8,r2,804554 <__fpcmp_parts_d+0x60>
  804548:	403ff726 	beq	r8,zero,804528 <__fpcmp_parts_d+0x34>
  80454c:	00bfffc4 	movi	r2,-1
  804550:	f800283a 	ret
  804554:	20c00217 	ldw	r3,8(r4)
  804558:	28800217 	ldw	r2,8(r5)
  80455c:	10fffa16 	blt	r2,r3,804548 <__fpcmp_parts_d+0x54>
  804560:	18800916 	blt	r3,r2,804588 <__fpcmp_parts_d+0x94>
  804564:	21c00417 	ldw	r7,16(r4)
  804568:	28c00417 	ldw	r3,16(r5)
  80456c:	21800317 	ldw	r6,12(r4)
  804570:	28800317 	ldw	r2,12(r5)
  804574:	19fff436 	bltu	r3,r7,804548 <__fpcmp_parts_d+0x54>
  804578:	38c00526 	beq	r7,r3,804590 <__fpcmp_parts_d+0x9c>
  80457c:	38c00236 	bltu	r7,r3,804588 <__fpcmp_parts_d+0x94>
  804580:	19ffec1e 	bne	r3,r7,804534 <__fpcmp_parts_d+0x40>
  804584:	30bfeb2e 	bgeu	r6,r2,804534 <__fpcmp_parts_d+0x40>
  804588:	403fe71e 	bne	r8,zero,804528 <__fpcmp_parts_d+0x34>
  80458c:	003fef06 	br	80454c <__fpcmp_parts_d+0x58>
  804590:	11bffa2e 	bgeu	r2,r6,80457c <__fpcmp_parts_d+0x88>
  804594:	403fe426 	beq	r8,zero,804528 <__fpcmp_parts_d+0x34>
  804598:	003fec06 	br	80454c <__fpcmp_parts_d+0x58>
  80459c:	28800117 	ldw	r2,4(r5)
  8045a0:	103fe11e 	bne	r2,zero,804528 <__fpcmp_parts_d+0x34>
  8045a4:	003fe906 	br	80454c <__fpcmp_parts_d+0x58>
  8045a8:	11bfdd1e 	bne	r2,r6,804520 <__fpcmp_parts_d+0x2c>
  8045ac:	28c00117 	ldw	r3,4(r5)
  8045b0:	20800117 	ldw	r2,4(r4)
  8045b4:	1885c83a 	sub	r2,r3,r2
  8045b8:	f800283a 	ret

008045bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8045bc:	defffe04 	addi	sp,sp,-8
  8045c0:	dfc00115 	stw	ra,4(sp)
  8045c4:	df000015 	stw	fp,0(sp)
  8045c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8045cc:	01002234 	movhi	r4,136
  8045d0:	21011004 	addi	r4,r4,1088
  8045d4:	01402234 	movhi	r5,136
  8045d8:	297af304 	addi	r5,r5,-5172
  8045dc:	01802234 	movhi	r6,136
  8045e0:	31811004 	addi	r6,r6,1088
  8045e4:	080463c0 	call	80463c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8045e8:	01002034 	movhi	r4,128
  8045ec:	21000804 	addi	r4,r4,32
  8045f0:	01402034 	movhi	r5,128
  8045f4:	29400804 	addi	r5,r5,32
  8045f8:	01802034 	movhi	r6,128
  8045fc:	31806d04 	addi	r6,r6,436
  804600:	080463c0 	call	80463c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  804604:	01002034 	movhi	r4,128
  804608:	211a2a04 	addi	r4,r4,26792
  80460c:	01402034 	movhi	r5,128
  804610:	295a2a04 	addi	r5,r5,26792
  804614:	01802234 	movhi	r6,136
  804618:	31baf304 	addi	r6,r6,-5172
  80461c:	080463c0 	call	80463c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804620:	08055200 	call	805520 <alt_dcache_flush_all>
  alt_icache_flush_all();
  804624:	080576c0 	call	80576c <alt_icache_flush_all>
}
  804628:	e037883a 	mov	sp,fp
  80462c:	dfc00117 	ldw	ra,4(sp)
  804630:	df000017 	ldw	fp,0(sp)
  804634:	dec00204 	addi	sp,sp,8
  804638:	f800283a 	ret

0080463c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80463c:	defffc04 	addi	sp,sp,-16
  804640:	df000315 	stw	fp,12(sp)
  804644:	df000304 	addi	fp,sp,12
  804648:	e13ffd15 	stw	r4,-12(fp)
  80464c:	e17ffe15 	stw	r5,-8(fp)
  804650:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  804654:	e0fffe17 	ldw	r3,-8(fp)
  804658:	e0bffd17 	ldw	r2,-12(fp)
  80465c:	18800e26 	beq	r3,r2,804698 <alt_load_section+0x5c>
  {
    while( to != end )
  804660:	00000a06 	br	80468c <alt_load_section+0x50>
    {
      *to++ = *from++;
  804664:	e0bffd17 	ldw	r2,-12(fp)
  804668:	10c00017 	ldw	r3,0(r2)
  80466c:	e0bffe17 	ldw	r2,-8(fp)
  804670:	10c00015 	stw	r3,0(r2)
  804674:	e0bffe17 	ldw	r2,-8(fp)
  804678:	10800104 	addi	r2,r2,4
  80467c:	e0bffe15 	stw	r2,-8(fp)
  804680:	e0bffd17 	ldw	r2,-12(fp)
  804684:	10800104 	addi	r2,r2,4
  804688:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80468c:	e0fffe17 	ldw	r3,-8(fp)
  804690:	e0bfff17 	ldw	r2,-4(fp)
  804694:	18bff31e 	bne	r3,r2,804664 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  804698:	e037883a 	mov	sp,fp
  80469c:	df000017 	ldw	fp,0(sp)
  8046a0:	dec00104 	addi	sp,sp,4
  8046a4:	f800283a 	ret

008046a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8046a8:	defffd04 	addi	sp,sp,-12
  8046ac:	dfc00215 	stw	ra,8(sp)
  8046b0:	df000115 	stw	fp,4(sp)
  8046b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8046b8:	0009883a 	mov	r4,zero
  8046bc:	08047140 	call	804714 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8046c0:	08047480 	call	804748 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8046c4:	01002234 	movhi	r4,136
  8046c8:	213ae504 	addi	r4,r4,-5228
  8046cc:	01402234 	movhi	r5,136
  8046d0:	297ae504 	addi	r5,r5,-5228
  8046d4:	01802234 	movhi	r6,136
  8046d8:	31bae504 	addi	r6,r6,-5228
  8046dc:	0805b2c0 	call	805b2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8046e0:	08056a40 	call	8056a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8046e4:	01002034 	movhi	r4,128
  8046e8:	2115c204 	addi	r4,r4,22280
  8046ec:	08063880 	call	806388 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8046f0:	d1262817 	ldw	r4,-26464(gp)
  8046f4:	d1662917 	ldw	r5,-26460(gp)
  8046f8:	d1a62a17 	ldw	r6,-26456(gp)
  8046fc:	08002000 	call	800200 <main>
  804700:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  804704:	01000044 	movi	r4,1
  804708:	08053c40 	call	8053c4 <close>
  exit (result);
  80470c:	e13fff17 	ldw	r4,-4(fp)
  804710:	080639c0 	call	80639c <exit>

00804714 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804714:	defffd04 	addi	sp,sp,-12
  804718:	dfc00215 	stw	ra,8(sp)
  80471c:	df000115 	stw	fp,4(sp)
  804720:	df000104 	addi	fp,sp,4
  804724:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  804728:	080606c0 	call	80606c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80472c:	00800044 	movi	r2,1
  804730:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804734:	e037883a 	mov	sp,fp
  804738:	dfc00117 	ldw	ra,4(sp)
  80473c:	df000017 	ldw	fp,0(sp)
  804740:	dec00204 	addi	sp,sp,8
  804744:	f800283a 	ret

00804748 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  804748:	defffe04 	addi	sp,sp,-8
  80474c:	dfc00115 	stw	ra,4(sp)
  804750:	df000015 	stw	fp,0(sp)
  804754:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  804758:	01002234 	movhi	r4,136
  80475c:	213b8d04 	addi	r4,r4,-4556
  804760:	000b883a 	mov	r5,zero
  804764:	000d883a 	mov	r6,zero
  804768:	080490c0 	call	80490c <altera_avalon_jtag_uart_init>
  80476c:	01002234 	movhi	r4,136
  804770:	213b8304 	addi	r4,r4,-4596
  804774:	080478c0 	call	80478c <alt_dev_reg>
}
  804778:	e037883a 	mov	sp,fp
  80477c:	dfc00117 	ldw	ra,4(sp)
  804780:	df000017 	ldw	fp,0(sp)
  804784:	dec00204 	addi	sp,sp,8
  804788:	f800283a 	ret

0080478c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80478c:	defffd04 	addi	sp,sp,-12
  804790:	dfc00215 	stw	ra,8(sp)
  804794:	df000115 	stw	fp,4(sp)
  804798:	df000104 	addi	fp,sp,4
  80479c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8047a0:	e13fff17 	ldw	r4,-4(fp)
  8047a4:	01402234 	movhi	r5,136
  8047a8:	29410704 	addi	r5,r5,1052
  8047ac:	08055900 	call	805590 <alt_dev_llist_insert>
}
  8047b0:	e037883a 	mov	sp,fp
  8047b4:	dfc00117 	ldw	ra,4(sp)
  8047b8:	df000017 	ldw	fp,0(sp)
  8047bc:	dec00204 	addi	sp,sp,8
  8047c0:	f800283a 	ret

008047c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8047c4:	defffa04 	addi	sp,sp,-24
  8047c8:	dfc00515 	stw	ra,20(sp)
  8047cc:	df000415 	stw	fp,16(sp)
  8047d0:	df000404 	addi	fp,sp,16
  8047d4:	e13ffd15 	stw	r4,-12(fp)
  8047d8:	e17ffe15 	stw	r5,-8(fp)
  8047dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8047e0:	e0bffd17 	ldw	r2,-12(fp)
  8047e4:	10800017 	ldw	r2,0(r2)
  8047e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	11000a04 	addi	r4,r2,40
  8047f4:	e0bffd17 	ldw	r2,-12(fp)
  8047f8:	11c00217 	ldw	r7,8(r2)
  8047fc:	e17ffe17 	ldw	r5,-8(fp)
  804800:	e1bfff17 	ldw	r6,-4(fp)
  804804:	0804e0c0 	call	804e0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  804808:	e037883a 	mov	sp,fp
  80480c:	dfc00117 	ldw	ra,4(sp)
  804810:	df000017 	ldw	fp,0(sp)
  804814:	dec00204 	addi	sp,sp,8
  804818:	f800283a 	ret

0080481c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80481c:	defffa04 	addi	sp,sp,-24
  804820:	dfc00515 	stw	ra,20(sp)
  804824:	df000415 	stw	fp,16(sp)
  804828:	df000404 	addi	fp,sp,16
  80482c:	e13ffd15 	stw	r4,-12(fp)
  804830:	e17ffe15 	stw	r5,-8(fp)
  804834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804838:	e0bffd17 	ldw	r2,-12(fp)
  80483c:	10800017 	ldw	r2,0(r2)
  804840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804844:	e0bffc17 	ldw	r2,-16(fp)
  804848:	11000a04 	addi	r4,r2,40
  80484c:	e0bffd17 	ldw	r2,-12(fp)
  804850:	11c00217 	ldw	r7,8(r2)
  804854:	e17ffe17 	ldw	r5,-8(fp)
  804858:	e1bfff17 	ldw	r6,-4(fp)
  80485c:	08050300 	call	805030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804860:	e037883a 	mov	sp,fp
  804864:	dfc00117 	ldw	ra,4(sp)
  804868:	df000017 	ldw	fp,0(sp)
  80486c:	dec00204 	addi	sp,sp,8
  804870:	f800283a 	ret

00804874 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804874:	defffc04 	addi	sp,sp,-16
  804878:	dfc00315 	stw	ra,12(sp)
  80487c:	df000215 	stw	fp,8(sp)
  804880:	df000204 	addi	fp,sp,8
  804884:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804888:	e0bfff17 	ldw	r2,-4(fp)
  80488c:	10800017 	ldw	r2,0(r2)
  804890:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  804894:	e0bffe17 	ldw	r2,-8(fp)
  804898:	11000a04 	addi	r4,r2,40
  80489c:	e0bfff17 	ldw	r2,-4(fp)
  8048a0:	11400217 	ldw	r5,8(r2)
  8048a4:	0804ca40 	call	804ca4 <altera_avalon_jtag_uart_close>
}
  8048a8:	e037883a 	mov	sp,fp
  8048ac:	dfc00117 	ldw	ra,4(sp)
  8048b0:	df000017 	ldw	fp,0(sp)
  8048b4:	dec00204 	addi	sp,sp,8
  8048b8:	f800283a 	ret

008048bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8048bc:	defffa04 	addi	sp,sp,-24
  8048c0:	dfc00515 	stw	ra,20(sp)
  8048c4:	df000415 	stw	fp,16(sp)
  8048c8:	df000404 	addi	fp,sp,16
  8048cc:	e13ffd15 	stw	r4,-12(fp)
  8048d0:	e17ffe15 	stw	r5,-8(fp)
  8048d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8048d8:	e0bffd17 	ldw	r2,-12(fp)
  8048dc:	10800017 	ldw	r2,0(r2)
  8048e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8048e4:	e0bffc17 	ldw	r2,-16(fp)
  8048e8:	11000a04 	addi	r4,r2,40
  8048ec:	e17ffe17 	ldw	r5,-8(fp)
  8048f0:	e1bfff17 	ldw	r6,-4(fp)
  8048f4:	0804d180 	call	804d18 <altera_avalon_jtag_uart_ioctl>
}
  8048f8:	e037883a 	mov	sp,fp
  8048fc:	dfc00117 	ldw	ra,4(sp)
  804900:	df000017 	ldw	fp,0(sp)
  804904:	dec00204 	addi	sp,sp,8
  804908:	f800283a 	ret

0080490c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80490c:	defffa04 	addi	sp,sp,-24
  804910:	dfc00515 	stw	ra,20(sp)
  804914:	df000415 	stw	fp,16(sp)
  804918:	df000404 	addi	fp,sp,16
  80491c:	e13ffd15 	stw	r4,-12(fp)
  804920:	e17ffe15 	stw	r5,-8(fp)
  804924:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804928:	e0fffd17 	ldw	r3,-12(fp)
  80492c:	00800044 	movi	r2,1
  804930:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  804934:	e0bffd17 	ldw	r2,-12(fp)
  804938:	10800017 	ldw	r2,0(r2)
  80493c:	11000104 	addi	r4,r2,4
  804940:	e0bffd17 	ldw	r2,-12(fp)
  804944:	10800817 	ldw	r2,32(r2)
  804948:	1007883a 	mov	r3,r2
  80494c:	2005883a 	mov	r2,r4
  804950:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804954:	e13ffe17 	ldw	r4,-8(fp)
  804958:	e17fff17 	ldw	r5,-4(fp)
  80495c:	d8000015 	stw	zero,0(sp)
  804960:	01802034 	movhi	r6,128
  804964:	31927304 	addi	r6,r6,18892
  804968:	e1fffd17 	ldw	r7,-12(fp)
  80496c:	080579c0 	call	80579c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804970:	e0bffd17 	ldw	r2,-12(fp)
  804974:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804978:	e0bffd17 	ldw	r2,-12(fp)
  80497c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804980:	00802234 	movhi	r2,136
  804984:	10873104 	addi	r2,r2,7364
  804988:	10800017 	ldw	r2,0(r2)
  80498c:	100b883a 	mov	r5,r2
  804990:	01802034 	movhi	r6,128
  804994:	3192fd04 	addi	r6,r6,19444
  804998:	e1fffd17 	ldw	r7,-12(fp)
  80499c:	08052700 	call	805270 <alt_alarm_start>
  8049a0:	1004403a 	cmpge	r2,r2,zero
  8049a4:	1000041e 	bne	r2,zero,8049b8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8049a8:	e0fffd17 	ldw	r3,-12(fp)
  8049ac:	00a00034 	movhi	r2,32768
  8049b0:	10bfffc4 	addi	r2,r2,-1
  8049b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8049b8:	e037883a 	mov	sp,fp
  8049bc:	dfc00117 	ldw	ra,4(sp)
  8049c0:	df000017 	ldw	fp,0(sp)
  8049c4:	dec00204 	addi	sp,sp,8
  8049c8:	f800283a 	ret

008049cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8049cc:	defff804 	addi	sp,sp,-32
  8049d0:	df000715 	stw	fp,28(sp)
  8049d4:	df000704 	addi	fp,sp,28
  8049d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8049dc:	e0bfff17 	ldw	r2,-4(fp)
  8049e0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  8049e4:	e0bffe17 	ldw	r2,-8(fp)
  8049e8:	10800017 	ldw	r2,0(r2)
  8049ec:	e0bffd15 	stw	r2,-12(fp)
  8049f0:	00000006 	br	8049f4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8049f4:	e0bffd17 	ldw	r2,-12(fp)
  8049f8:	10800104 	addi	r2,r2,4
  8049fc:	10800037 	ldwio	r2,0(r2)
  804a00:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  804a04:	e0bffc17 	ldw	r2,-16(fp)
  804a08:	1080c00c 	andi	r2,r2,768
  804a0c:	1005003a 	cmpeq	r2,r2,zero
  804a10:	1000741e 	bne	r2,zero,804be4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  804a14:	e0bffc17 	ldw	r2,-16(fp)
  804a18:	1080400c 	andi	r2,r2,256
  804a1c:	1005003a 	cmpeq	r2,r2,zero
  804a20:	1000351e 	bne	r2,zero,804af8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804a24:	00800074 	movhi	r2,1
  804a28:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804a2c:	e0bffe17 	ldw	r2,-8(fp)
  804a30:	10800a17 	ldw	r2,40(r2)
  804a34:	10800044 	addi	r2,r2,1
  804a38:	1081ffcc 	andi	r2,r2,2047
  804a3c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  804a40:	e0bffe17 	ldw	r2,-8(fp)
  804a44:	10c00b17 	ldw	r3,44(r2)
  804a48:	e0bffa17 	ldw	r2,-24(fp)
  804a4c:	18801626 	beq	r3,r2,804aa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804a50:	e0bffd17 	ldw	r2,-12(fp)
  804a54:	10800037 	ldwio	r2,0(r2)
  804a58:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804a5c:	e0bffb17 	ldw	r2,-20(fp)
  804a60:	10a0000c 	andi	r2,r2,32768
  804a64:	1005003a 	cmpeq	r2,r2,zero
  804a68:	10000f1e 	bne	r2,zero,804aa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804a6c:	e0bffe17 	ldw	r2,-8(fp)
  804a70:	10c00a17 	ldw	r3,40(r2)
  804a74:	e0bffb17 	ldw	r2,-20(fp)
  804a78:	1009883a 	mov	r4,r2
  804a7c:	e0bffe17 	ldw	r2,-8(fp)
  804a80:	1885883a 	add	r2,r3,r2
  804a84:	10800e04 	addi	r2,r2,56
  804a88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804a8c:	e0bffe17 	ldw	r2,-8(fp)
  804a90:	10800a17 	ldw	r2,40(r2)
  804a94:	10800044 	addi	r2,r2,1
  804a98:	10c1ffcc 	andi	r3,r2,2047
  804a9c:	e0bffe17 	ldw	r2,-8(fp)
  804aa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804aa4:	003fe106 	br	804a2c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  804aa8:	e0bffb17 	ldw	r2,-20(fp)
  804aac:	10bfffec 	andhi	r2,r2,65535
  804ab0:	1005003a 	cmpeq	r2,r2,zero
  804ab4:	1000101e 	bne	r2,zero,804af8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804ab8:	e0bffe17 	ldw	r2,-8(fp)
  804abc:	10c00817 	ldw	r3,32(r2)
  804ac0:	00bfff84 	movi	r2,-2
  804ac4:	1886703a 	and	r3,r3,r2
  804ac8:	e0bffe17 	ldw	r2,-8(fp)
  804acc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  804ad0:	e0bffd17 	ldw	r2,-12(fp)
  804ad4:	11000104 	addi	r4,r2,4
  804ad8:	e0bffe17 	ldw	r2,-8(fp)
  804adc:	10800817 	ldw	r2,32(r2)
  804ae0:	1007883a 	mov	r3,r2
  804ae4:	2005883a 	mov	r2,r4
  804ae8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804aec:	e0bffd17 	ldw	r2,-12(fp)
  804af0:	10800104 	addi	r2,r2,4
  804af4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  804af8:	e0bffc17 	ldw	r2,-16(fp)
  804afc:	1080800c 	andi	r2,r2,512
  804b00:	1005003a 	cmpeq	r2,r2,zero
  804b04:	103fbb1e 	bne	r2,zero,8049f4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10bfffec 	andhi	r2,r2,65535
  804b10:	1004d43a 	srli	r2,r2,16
  804b14:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804b18:	00001506 	br	804b70 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804b1c:	e13ffd17 	ldw	r4,-12(fp)
  804b20:	e0bffe17 	ldw	r2,-8(fp)
  804b24:	10c00d17 	ldw	r3,52(r2)
  804b28:	e0bffe17 	ldw	r2,-8(fp)
  804b2c:	1885883a 	add	r2,r3,r2
  804b30:	10820e04 	addi	r2,r2,2104
  804b34:	10800003 	ldbu	r2,0(r2)
  804b38:	10c03fcc 	andi	r3,r2,255
  804b3c:	18c0201c 	xori	r3,r3,128
  804b40:	18ffe004 	addi	r3,r3,-128
  804b44:	2005883a 	mov	r2,r4
  804b48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804b4c:	e0bffe17 	ldw	r2,-8(fp)
  804b50:	10800d17 	ldw	r2,52(r2)
  804b54:	10800044 	addi	r2,r2,1
  804b58:	10c1ffcc 	andi	r3,r2,2047
  804b5c:	e0bffe17 	ldw	r2,-8(fp)
  804b60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804b64:	e0bff917 	ldw	r2,-28(fp)
  804b68:	10bfffc4 	addi	r2,r2,-1
  804b6c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804b70:	e0bff917 	ldw	r2,-28(fp)
  804b74:	1005003a 	cmpeq	r2,r2,zero
  804b78:	1000051e 	bne	r2,zero,804b90 <altera_avalon_jtag_uart_irq+0x1c4>
  804b7c:	e0bffe17 	ldw	r2,-8(fp)
  804b80:	10c00d17 	ldw	r3,52(r2)
  804b84:	e0bffe17 	ldw	r2,-8(fp)
  804b88:	10800c17 	ldw	r2,48(r2)
  804b8c:	18bfe31e 	bne	r3,r2,804b1c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804b90:	e0bff917 	ldw	r2,-28(fp)
  804b94:	1005003a 	cmpeq	r2,r2,zero
  804b98:	103f961e 	bne	r2,zero,8049f4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804b9c:	e0bffe17 	ldw	r2,-8(fp)
  804ba0:	10c00817 	ldw	r3,32(r2)
  804ba4:	00bfff44 	movi	r2,-3
  804ba8:	1886703a 	and	r3,r3,r2
  804bac:	e0bffe17 	ldw	r2,-8(fp)
  804bb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804bb4:	e0bffe17 	ldw	r2,-8(fp)
  804bb8:	10800017 	ldw	r2,0(r2)
  804bbc:	11000104 	addi	r4,r2,4
  804bc0:	e0bffe17 	ldw	r2,-8(fp)
  804bc4:	10800817 	ldw	r2,32(r2)
  804bc8:	1007883a 	mov	r3,r2
  804bcc:	2005883a 	mov	r2,r4
  804bd0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804bd4:	e0bffd17 	ldw	r2,-12(fp)
  804bd8:	10800104 	addi	r2,r2,4
  804bdc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804be0:	003f8406 	br	8049f4 <altera_avalon_jtag_uart_irq+0x28>
}
  804be4:	e037883a 	mov	sp,fp
  804be8:	df000017 	ldw	fp,0(sp)
  804bec:	dec00104 	addi	sp,sp,4
  804bf0:	f800283a 	ret

00804bf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  804bf4:	defffc04 	addi	sp,sp,-16
  804bf8:	df000315 	stw	fp,12(sp)
  804bfc:	df000304 	addi	fp,sp,12
  804c00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  804c04:	e0bfff17 	ldw	r2,-4(fp)
  804c08:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  804c0c:	e0bffe17 	ldw	r2,-8(fp)
  804c10:	10800017 	ldw	r2,0(r2)
  804c14:	10800104 	addi	r2,r2,4
  804c18:	10800037 	ldwio	r2,0(r2)
  804c1c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804c20:	e0bffd17 	ldw	r2,-12(fp)
  804c24:	1081000c 	andi	r2,r2,1024
  804c28:	1005003a 	cmpeq	r2,r2,zero
  804c2c:	10000c1e 	bne	r2,zero,804c60 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804c30:	e0bffe17 	ldw	r2,-8(fp)
  804c34:	10800017 	ldw	r2,0(r2)
  804c38:	11000104 	addi	r4,r2,4
  804c3c:	e0bffe17 	ldw	r2,-8(fp)
  804c40:	10800817 	ldw	r2,32(r2)
  804c44:	10810014 	ori	r2,r2,1024
  804c48:	1007883a 	mov	r3,r2
  804c4c:	2005883a 	mov	r2,r4
  804c50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  804c54:	e0bffe17 	ldw	r2,-8(fp)
  804c58:	10000915 	stw	zero,36(r2)
  804c5c:	00000a06 	br	804c88 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804c60:	e0bffe17 	ldw	r2,-8(fp)
  804c64:	10c00917 	ldw	r3,36(r2)
  804c68:	00a00034 	movhi	r2,32768
  804c6c:	10bfff04 	addi	r2,r2,-4
  804c70:	10c00536 	bltu	r2,r3,804c88 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  804c74:	e0bffe17 	ldw	r2,-8(fp)
  804c78:	10800917 	ldw	r2,36(r2)
  804c7c:	10c00044 	addi	r3,r2,1
  804c80:	e0bffe17 	ldw	r2,-8(fp)
  804c84:	10c00915 	stw	r3,36(r2)
  804c88:	00802234 	movhi	r2,136
  804c8c:	10873104 	addi	r2,r2,7364
  804c90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804c94:	e037883a 	mov	sp,fp
  804c98:	df000017 	ldw	fp,0(sp)
  804c9c:	dec00104 	addi	sp,sp,4
  804ca0:	f800283a 	ret

00804ca4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804ca4:	defffc04 	addi	sp,sp,-16
  804ca8:	df000315 	stw	fp,12(sp)
  804cac:	df000304 	addi	fp,sp,12
  804cb0:	e13ffd15 	stw	r4,-12(fp)
  804cb4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804cb8:	00000706 	br	804cd8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  804cbc:	e0bffe17 	ldw	r2,-8(fp)
  804cc0:	1090000c 	andi	r2,r2,16384
  804cc4:	1005003a 	cmpeq	r2,r2,zero
  804cc8:	1000031e 	bne	r2,zero,804cd8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  804ccc:	00bffd44 	movi	r2,-11
  804cd0:	e0bfff15 	stw	r2,-4(fp)
  804cd4:	00000b06 	br	804d04 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804cd8:	e0bffd17 	ldw	r2,-12(fp)
  804cdc:	10c00d17 	ldw	r3,52(r2)
  804ce0:	e0bffd17 	ldw	r2,-12(fp)
  804ce4:	10800c17 	ldw	r2,48(r2)
  804ce8:	18800526 	beq	r3,r2,804d00 <altera_avalon_jtag_uart_close+0x5c>
  804cec:	e0bffd17 	ldw	r2,-12(fp)
  804cf0:	10c00917 	ldw	r3,36(r2)
  804cf4:	e0bffd17 	ldw	r2,-12(fp)
  804cf8:	10800117 	ldw	r2,4(r2)
  804cfc:	18bfef36 	bltu	r3,r2,804cbc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804d00:	e03fff15 	stw	zero,-4(fp)
  804d04:	e0bfff17 	ldw	r2,-4(fp)
}
  804d08:	e037883a 	mov	sp,fp
  804d0c:	df000017 	ldw	fp,0(sp)
  804d10:	dec00104 	addi	sp,sp,4
  804d14:	f800283a 	ret

00804d18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804d18:	defff804 	addi	sp,sp,-32
  804d1c:	df000715 	stw	fp,28(sp)
  804d20:	df000704 	addi	fp,sp,28
  804d24:	e13ffb15 	stw	r4,-20(fp)
  804d28:	e17ffc15 	stw	r5,-16(fp)
  804d2c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  804d30:	00bff9c4 	movi	r2,-25
  804d34:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  804d38:	e0bffc17 	ldw	r2,-16(fp)
  804d3c:	e0bfff15 	stw	r2,-4(fp)
  804d40:	e0ffff17 	ldw	r3,-4(fp)
  804d44:	189a8060 	cmpeqi	r2,r3,27137
  804d48:	1000041e 	bne	r2,zero,804d5c <altera_avalon_jtag_uart_ioctl+0x44>
  804d4c:	e0ffff17 	ldw	r3,-4(fp)
  804d50:	189a80a0 	cmpeqi	r2,r3,27138
  804d54:	10001b1e 	bne	r2,zero,804dc4 <altera_avalon_jtag_uart_ioctl+0xac>
  804d58:	00002706 	br	804df8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804d5c:	e0bffb17 	ldw	r2,-20(fp)
  804d60:	10c00117 	ldw	r3,4(r2)
  804d64:	00a00034 	movhi	r2,32768
  804d68:	10bfffc4 	addi	r2,r2,-1
  804d6c:	18802226 	beq	r3,r2,804df8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  804d70:	e0bffd17 	ldw	r2,-12(fp)
  804d74:	10800017 	ldw	r2,0(r2)
  804d78:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804d7c:	e0bff917 	ldw	r2,-28(fp)
  804d80:	10800090 	cmplti	r2,r2,2
  804d84:	1000071e 	bne	r2,zero,804da4 <altera_avalon_jtag_uart_ioctl+0x8c>
  804d88:	e0fff917 	ldw	r3,-28(fp)
  804d8c:	00a00034 	movhi	r2,32768
  804d90:	10bfffc4 	addi	r2,r2,-1
  804d94:	18800326 	beq	r3,r2,804da4 <altera_avalon_jtag_uart_ioctl+0x8c>
  804d98:	e0bff917 	ldw	r2,-28(fp)
  804d9c:	e0bffe15 	stw	r2,-8(fp)
  804da0:	00000306 	br	804db0 <altera_avalon_jtag_uart_ioctl+0x98>
  804da4:	00e00034 	movhi	r3,32768
  804da8:	18ffff84 	addi	r3,r3,-2
  804dac:	e0fffe15 	stw	r3,-8(fp)
  804db0:	e0bffb17 	ldw	r2,-20(fp)
  804db4:	e0fffe17 	ldw	r3,-8(fp)
  804db8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  804dbc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  804dc0:	00000d06 	br	804df8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804dc4:	e0bffb17 	ldw	r2,-20(fp)
  804dc8:	10c00117 	ldw	r3,4(r2)
  804dcc:	00a00034 	movhi	r2,32768
  804dd0:	10bfffc4 	addi	r2,r2,-1
  804dd4:	18800826 	beq	r3,r2,804df8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  804dd8:	e13ffd17 	ldw	r4,-12(fp)
  804ddc:	e0bffb17 	ldw	r2,-20(fp)
  804de0:	10c00917 	ldw	r3,36(r2)
  804de4:	e0bffb17 	ldw	r2,-20(fp)
  804de8:	10800117 	ldw	r2,4(r2)
  804dec:	1885803a 	cmpltu	r2,r3,r2
  804df0:	20800015 	stw	r2,0(r4)
      rc = 0;
  804df4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  804df8:	e0bffa17 	ldw	r2,-24(fp)
}
  804dfc:	e037883a 	mov	sp,fp
  804e00:	df000017 	ldw	fp,0(sp)
  804e04:	dec00104 	addi	sp,sp,4
  804e08:	f800283a 	ret

00804e0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804e0c:	defff204 	addi	sp,sp,-56
  804e10:	dfc00d15 	stw	ra,52(sp)
  804e14:	df000c15 	stw	fp,48(sp)
  804e18:	df000c04 	addi	fp,sp,48
  804e1c:	e13ffb15 	stw	r4,-20(fp)
  804e20:	e17ffc15 	stw	r5,-16(fp)
  804e24:	e1bffd15 	stw	r6,-12(fp)
  804e28:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  804e2c:	e0bffc17 	ldw	r2,-16(fp)
  804e30:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804e34:	00004806 	br	804f58 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804e38:	e0bffb17 	ldw	r2,-20(fp)
  804e3c:	10800a17 	ldw	r2,40(r2)
  804e40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804e44:	e0bffb17 	ldw	r2,-20(fp)
  804e48:	10800b17 	ldw	r2,44(r2)
  804e4c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  804e50:	e0fff717 	ldw	r3,-36(fp)
  804e54:	e0bff617 	ldw	r2,-40(fp)
  804e58:	18800536 	bltu	r3,r2,804e70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804e5c:	e0bff717 	ldw	r2,-36(fp)
  804e60:	e0fff617 	ldw	r3,-40(fp)
  804e64:	10c5c83a 	sub	r2,r2,r3
  804e68:	e0bff815 	stw	r2,-32(fp)
  804e6c:	00000406 	br	804e80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804e70:	00820004 	movi	r2,2048
  804e74:	e0fff617 	ldw	r3,-40(fp)
  804e78:	10c5c83a 	sub	r2,r2,r3
  804e7c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  804e80:	e0bff817 	ldw	r2,-32(fp)
  804e84:	1005003a 	cmpeq	r2,r2,zero
  804e88:	10001f1e 	bne	r2,zero,804f08 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  804e8c:	e0fffd17 	ldw	r3,-12(fp)
  804e90:	e0bff817 	ldw	r2,-32(fp)
  804e94:	1880022e 	bgeu	r3,r2,804ea0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  804e98:	e0bffd17 	ldw	r2,-12(fp)
  804e9c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804ea0:	e0bffb17 	ldw	r2,-20(fp)
  804ea4:	10c00e04 	addi	r3,r2,56
  804ea8:	e0bff617 	ldw	r2,-40(fp)
  804eac:	1887883a 	add	r3,r3,r2
  804eb0:	e0bffa17 	ldw	r2,-24(fp)
  804eb4:	1009883a 	mov	r4,r2
  804eb8:	180b883a 	mov	r5,r3
  804ebc:	e1bff817 	ldw	r6,-32(fp)
  804ec0:	08064480 	call	806448 <memcpy>
      ptr   += n;
  804ec4:	e0fff817 	ldw	r3,-32(fp)
  804ec8:	e0bffa17 	ldw	r2,-24(fp)
  804ecc:	10c5883a 	add	r2,r2,r3
  804ed0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  804ed4:	e0fffd17 	ldw	r3,-12(fp)
  804ed8:	e0bff817 	ldw	r2,-32(fp)
  804edc:	1885c83a 	sub	r2,r3,r2
  804ee0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804ee4:	e0fff617 	ldw	r3,-40(fp)
  804ee8:	e0bff817 	ldw	r2,-32(fp)
  804eec:	1885883a 	add	r2,r3,r2
  804ef0:	10c1ffcc 	andi	r3,r2,2047
  804ef4:	e0bffb17 	ldw	r2,-20(fp)
  804ef8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  804efc:	e0bffd17 	ldw	r2,-12(fp)
  804f00:	10800048 	cmpgei	r2,r2,1
  804f04:	103fcc1e 	bne	r2,zero,804e38 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  804f08:	e0fffa17 	ldw	r3,-24(fp)
  804f0c:	e0bffc17 	ldw	r2,-16(fp)
  804f10:	1880141e 	bne	r3,r2,804f64 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804f14:	e0bffe17 	ldw	r2,-8(fp)
  804f18:	1090000c 	andi	r2,r2,16384
  804f1c:	1004c03a 	cmpne	r2,r2,zero
  804f20:	1000101e 	bne	r2,zero,804f64 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804f24:	e0bffb17 	ldw	r2,-20(fp)
  804f28:	10c00a17 	ldw	r3,40(r2)
  804f2c:	e0bff717 	ldw	r2,-36(fp)
  804f30:	1880051e 	bne	r3,r2,804f48 <altera_avalon_jtag_uart_read+0x13c>
  804f34:	e0bffb17 	ldw	r2,-20(fp)
  804f38:	10c00917 	ldw	r3,36(r2)
  804f3c:	e0bffb17 	ldw	r2,-20(fp)
  804f40:	10800117 	ldw	r2,4(r2)
  804f44:	18bff736 	bltu	r3,r2,804f24 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804f48:	e0bffb17 	ldw	r2,-20(fp)
  804f4c:	10c00a17 	ldw	r3,40(r2)
  804f50:	e0bff717 	ldw	r2,-36(fp)
  804f54:	18800326 	beq	r3,r2,804f64 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804f58:	e0bffd17 	ldw	r2,-12(fp)
  804f5c:	10800048 	cmpgei	r2,r2,1
  804f60:	103fb51e 	bne	r2,zero,804e38 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804f64:	e0fffa17 	ldw	r3,-24(fp)
  804f68:	e0bffc17 	ldw	r2,-16(fp)
  804f6c:	18801926 	beq	r3,r2,804fd4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f70:	0005303a 	rdctl	r2,status
  804f74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f78:	e0fff517 	ldw	r3,-44(fp)
  804f7c:	00bfff84 	movi	r2,-2
  804f80:	1884703a 	and	r2,r3,r2
  804f84:	1001703a 	wrctl	status,r2
  
  return context;
  804f88:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804f8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804f90:	e0bffb17 	ldw	r2,-20(fp)
  804f94:	10800817 	ldw	r2,32(r2)
  804f98:	10c00054 	ori	r3,r2,1
  804f9c:	e0bffb17 	ldw	r2,-20(fp)
  804fa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804fa4:	e0bffb17 	ldw	r2,-20(fp)
  804fa8:	10800017 	ldw	r2,0(r2)
  804fac:	11000104 	addi	r4,r2,4
  804fb0:	e0bffb17 	ldw	r2,-20(fp)
  804fb4:	10800817 	ldw	r2,32(r2)
  804fb8:	1007883a 	mov	r3,r2
  804fbc:	2005883a 	mov	r2,r4
  804fc0:	10c00035 	stwio	r3,0(r2)
  804fc4:	e0bff917 	ldw	r2,-28(fp)
  804fc8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804fcc:	e0bff417 	ldw	r2,-48(fp)
  804fd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  804fd4:	e0fffa17 	ldw	r3,-24(fp)
  804fd8:	e0bffc17 	ldw	r2,-16(fp)
  804fdc:	18800526 	beq	r3,r2,804ff4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  804fe0:	e0fffa17 	ldw	r3,-24(fp)
  804fe4:	e0bffc17 	ldw	r2,-16(fp)
  804fe8:	1887c83a 	sub	r3,r3,r2
  804fec:	e0ffff15 	stw	r3,-4(fp)
  804ff0:	00000906 	br	805018 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  804ff4:	e0bffe17 	ldw	r2,-8(fp)
  804ff8:	1090000c 	andi	r2,r2,16384
  804ffc:	1005003a 	cmpeq	r2,r2,zero
  805000:	1000031e 	bne	r2,zero,805010 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  805004:	00bffd44 	movi	r2,-11
  805008:	e0bfff15 	stw	r2,-4(fp)
  80500c:	00000206 	br	805018 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  805010:	00bffec4 	movi	r2,-5
  805014:	e0bfff15 	stw	r2,-4(fp)
  805018:	e0bfff17 	ldw	r2,-4(fp)
}
  80501c:	e037883a 	mov	sp,fp
  805020:	dfc00117 	ldw	ra,4(sp)
  805024:	df000017 	ldw	fp,0(sp)
  805028:	dec00204 	addi	sp,sp,8
  80502c:	f800283a 	ret

00805030 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805030:	defff204 	addi	sp,sp,-56
  805034:	dfc00d15 	stw	ra,52(sp)
  805038:	df000c15 	stw	fp,48(sp)
  80503c:	df000c04 	addi	fp,sp,48
  805040:	e13ffb15 	stw	r4,-20(fp)
  805044:	e17ffc15 	stw	r5,-16(fp)
  805048:	e1bffd15 	stw	r6,-12(fp)
  80504c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805050:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805054:	e0bffc17 	ldw	r2,-16(fp)
  805058:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80505c:	00003a06 	br	805148 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805060:	e0bffb17 	ldw	r2,-20(fp)
  805064:	10800c17 	ldw	r2,48(r2)
  805068:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80506c:	e0bffb17 	ldw	r2,-20(fp)
  805070:	10800d17 	ldw	r2,52(r2)
  805074:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  805078:	e0fffa17 	ldw	r3,-24(fp)
  80507c:	e0bff917 	ldw	r2,-28(fp)
  805080:	1880062e 	bgeu	r3,r2,80509c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  805084:	e0fff917 	ldw	r3,-28(fp)
  805088:	e0bffa17 	ldw	r2,-24(fp)
  80508c:	1885c83a 	sub	r2,r3,r2
  805090:	10bfffc4 	addi	r2,r2,-1
  805094:	e0bff815 	stw	r2,-32(fp)
  805098:	00000c06 	br	8050cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80509c:	e0bff917 	ldw	r2,-28(fp)
  8050a0:	1005003a 	cmpeq	r2,r2,zero
  8050a4:	1000051e 	bne	r2,zero,8050bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8050a8:	00820004 	movi	r2,2048
  8050ac:	e0fffa17 	ldw	r3,-24(fp)
  8050b0:	10c5c83a 	sub	r2,r2,r3
  8050b4:	e0bff815 	stw	r2,-32(fp)
  8050b8:	00000406 	br	8050cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8050bc:	0081ffc4 	movi	r2,2047
  8050c0:	e0fffa17 	ldw	r3,-24(fp)
  8050c4:	10c5c83a 	sub	r2,r2,r3
  8050c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8050cc:	e0bff817 	ldw	r2,-32(fp)
  8050d0:	1005003a 	cmpeq	r2,r2,zero
  8050d4:	10001f1e 	bne	r2,zero,805154 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8050d8:	e0fffd17 	ldw	r3,-12(fp)
  8050dc:	e0bff817 	ldw	r2,-32(fp)
  8050e0:	1880022e 	bgeu	r3,r2,8050ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8050e4:	e0bffd17 	ldw	r2,-12(fp)
  8050e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8050ec:	e0bffb17 	ldw	r2,-20(fp)
  8050f0:	10c20e04 	addi	r3,r2,2104
  8050f4:	e0bffa17 	ldw	r2,-24(fp)
  8050f8:	1885883a 	add	r2,r3,r2
  8050fc:	e0fffc17 	ldw	r3,-16(fp)
  805100:	1009883a 	mov	r4,r2
  805104:	180b883a 	mov	r5,r3
  805108:	e1bff817 	ldw	r6,-32(fp)
  80510c:	08064480 	call	806448 <memcpy>
      ptr   += n;
  805110:	e0fff817 	ldw	r3,-32(fp)
  805114:	e0bffc17 	ldw	r2,-16(fp)
  805118:	10c5883a 	add	r2,r2,r3
  80511c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  805120:	e0fffd17 	ldw	r3,-12(fp)
  805124:	e0bff817 	ldw	r2,-32(fp)
  805128:	1885c83a 	sub	r2,r3,r2
  80512c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805130:	e0fffa17 	ldw	r3,-24(fp)
  805134:	e0bff817 	ldw	r2,-32(fp)
  805138:	1885883a 	add	r2,r3,r2
  80513c:	10c1ffcc 	andi	r3,r2,2047
  805140:	e0bffb17 	ldw	r2,-20(fp)
  805144:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805148:	e0bffd17 	ldw	r2,-12(fp)
  80514c:	10800048 	cmpgei	r2,r2,1
  805150:	103fc31e 	bne	r2,zero,805060 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805154:	0005303a 	rdctl	r2,status
  805158:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80515c:	e0fff517 	ldw	r3,-44(fp)
  805160:	00bfff84 	movi	r2,-2
  805164:	1884703a 	and	r2,r3,r2
  805168:	1001703a 	wrctl	status,r2
  
  return context;
  80516c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805170:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805174:	e0bffb17 	ldw	r2,-20(fp)
  805178:	10800817 	ldw	r2,32(r2)
  80517c:	10c00094 	ori	r3,r2,2
  805180:	e0bffb17 	ldw	r2,-20(fp)
  805184:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805188:	e0bffb17 	ldw	r2,-20(fp)
  80518c:	10800017 	ldw	r2,0(r2)
  805190:	11000104 	addi	r4,r2,4
  805194:	e0bffb17 	ldw	r2,-20(fp)
  805198:	10800817 	ldw	r2,32(r2)
  80519c:	1007883a 	mov	r3,r2
  8051a0:	2005883a 	mov	r2,r4
  8051a4:	10c00035 	stwio	r3,0(r2)
  8051a8:	e0bff717 	ldw	r2,-36(fp)
  8051ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8051b0:	e0bff417 	ldw	r2,-48(fp)
  8051b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8051b8:	e0bffd17 	ldw	r2,-12(fp)
  8051bc:	10800050 	cmplti	r2,r2,1
  8051c0:	1000111e 	bne	r2,zero,805208 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8051c4:	e0bffe17 	ldw	r2,-8(fp)
  8051c8:	1090000c 	andi	r2,r2,16384
  8051cc:	1004c03a 	cmpne	r2,r2,zero
  8051d0:	1000101e 	bne	r2,zero,805214 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8051d4:	e0bffb17 	ldw	r2,-20(fp)
  8051d8:	10c00d17 	ldw	r3,52(r2)
  8051dc:	e0bff917 	ldw	r2,-28(fp)
  8051e0:	1880051e 	bne	r3,r2,8051f8 <altera_avalon_jtag_uart_write+0x1c8>
  8051e4:	e0bffb17 	ldw	r2,-20(fp)
  8051e8:	10c00917 	ldw	r3,36(r2)
  8051ec:	e0bffb17 	ldw	r2,-20(fp)
  8051f0:	10800117 	ldw	r2,4(r2)
  8051f4:	18bff736 	bltu	r3,r2,8051d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8051f8:	e0bffb17 	ldw	r2,-20(fp)
  8051fc:	10c00d17 	ldw	r3,52(r2)
  805200:	e0bff917 	ldw	r2,-28(fp)
  805204:	18800326 	beq	r3,r2,805214 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  805208:	e0bffd17 	ldw	r2,-12(fp)
  80520c:	10800048 	cmpgei	r2,r2,1
  805210:	103fcd1e 	bne	r2,zero,805148 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  805214:	e0fffc17 	ldw	r3,-16(fp)
  805218:	e0bff617 	ldw	r2,-40(fp)
  80521c:	18800526 	beq	r3,r2,805234 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  805220:	e0fffc17 	ldw	r3,-16(fp)
  805224:	e0bff617 	ldw	r2,-40(fp)
  805228:	1887c83a 	sub	r3,r3,r2
  80522c:	e0ffff15 	stw	r3,-4(fp)
  805230:	00000906 	br	805258 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  805234:	e0bffe17 	ldw	r2,-8(fp)
  805238:	1090000c 	andi	r2,r2,16384
  80523c:	1005003a 	cmpeq	r2,r2,zero
  805240:	1000031e 	bne	r2,zero,805250 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  805244:	00bffd44 	movi	r2,-11
  805248:	e0bfff15 	stw	r2,-4(fp)
  80524c:	00000206 	br	805258 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  805250:	00bffec4 	movi	r2,-5
  805254:	e0bfff15 	stw	r2,-4(fp)
  805258:	e0bfff17 	ldw	r2,-4(fp)
}
  80525c:	e037883a 	mov	sp,fp
  805260:	dfc00117 	ldw	ra,4(sp)
  805264:	df000017 	ldw	fp,0(sp)
  805268:	dec00204 	addi	sp,sp,8
  80526c:	f800283a 	ret

00805270 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805270:	defff404 	addi	sp,sp,-48
  805274:	df000b15 	stw	fp,44(sp)
  805278:	df000b04 	addi	fp,sp,44
  80527c:	e13ffb15 	stw	r4,-20(fp)
  805280:	e17ffc15 	stw	r5,-16(fp)
  805284:	e1bffd15 	stw	r6,-12(fp)
  805288:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80528c:	e03ff915 	stw	zero,-28(fp)
  805290:	00802234 	movhi	r2,136
  805294:	10873104 	addi	r2,r2,7364
  805298:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80529c:	1005003a 	cmpeq	r2,r2,zero
  8052a0:	1000411e 	bne	r2,zero,8053a8 <alt_alarm_start+0x138>
  {
    if (alarm)
  8052a4:	e0bffb17 	ldw	r2,-20(fp)
  8052a8:	1005003a 	cmpeq	r2,r2,zero
  8052ac:	10003b1e 	bne	r2,zero,80539c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8052b0:	e0fffb17 	ldw	r3,-20(fp)
  8052b4:	e0bffd17 	ldw	r2,-12(fp)
  8052b8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8052bc:	e0fffb17 	ldw	r3,-20(fp)
  8052c0:	e0bffe17 	ldw	r2,-8(fp)
  8052c4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8052c8:	0005303a 	rdctl	r2,status
  8052cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8052d0:	e0fff817 	ldw	r3,-32(fp)
  8052d4:	00bfff84 	movi	r2,-2
  8052d8:	1884703a 	and	r2,r3,r2
  8052dc:	1001703a 	wrctl	status,r2
  
  return context;
  8052e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8052e4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8052e8:	00802234 	movhi	r2,136
  8052ec:	10873204 	addi	r2,r2,7368
  8052f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8052f4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8052f8:	e0fffc17 	ldw	r3,-16(fp)
  8052fc:	e0bff917 	ldw	r2,-28(fp)
  805300:	1885883a 	add	r2,r3,r2
  805304:	10c00044 	addi	r3,r2,1
  805308:	e0bffb17 	ldw	r2,-20(fp)
  80530c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  805310:	e0bffb17 	ldw	r2,-20(fp)
  805314:	10c00217 	ldw	r3,8(r2)
  805318:	e0bff917 	ldw	r2,-28(fp)
  80531c:	1880042e 	bgeu	r3,r2,805330 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  805320:	e0fffb17 	ldw	r3,-20(fp)
  805324:	00800044 	movi	r2,1
  805328:	18800405 	stb	r2,16(r3)
  80532c:	00000206 	br	805338 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  805330:	e0bffb17 	ldw	r2,-20(fp)
  805334:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  805338:	e0fffb17 	ldw	r3,-20(fp)
  80533c:	00802234 	movhi	r2,136
  805340:	10810c04 	addi	r2,r2,1072
  805344:	e0bff615 	stw	r2,-40(fp)
  805348:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80534c:	e0fff717 	ldw	r3,-36(fp)
  805350:	e0bff617 	ldw	r2,-40(fp)
  805354:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  805358:	e0bff617 	ldw	r2,-40(fp)
  80535c:	10c00017 	ldw	r3,0(r2)
  805360:	e0bff717 	ldw	r2,-36(fp)
  805364:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805368:	e0bff617 	ldw	r2,-40(fp)
  80536c:	10c00017 	ldw	r3,0(r2)
  805370:	e0bff717 	ldw	r2,-36(fp)
  805374:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  805378:	e0fff617 	ldw	r3,-40(fp)
  80537c:	e0bff717 	ldw	r2,-36(fp)
  805380:	18800015 	stw	r2,0(r3)
  805384:	e0bffa17 	ldw	r2,-24(fp)
  805388:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80538c:	e0bff517 	ldw	r2,-44(fp)
  805390:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805394:	e03fff15 	stw	zero,-4(fp)
  805398:	00000506 	br	8053b0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80539c:	00bffa84 	movi	r2,-22
  8053a0:	e0bfff15 	stw	r2,-4(fp)
  8053a4:	00000206 	br	8053b0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8053a8:	00bfde84 	movi	r2,-134
  8053ac:	e0bfff15 	stw	r2,-4(fp)
  8053b0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8053b4:	e037883a 	mov	sp,fp
  8053b8:	df000017 	ldw	fp,0(sp)
  8053bc:	dec00104 	addi	sp,sp,4
  8053c0:	f800283a 	ret

008053c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8053c4:	defff804 	addi	sp,sp,-32
  8053c8:	dfc00715 	stw	ra,28(sp)
  8053cc:	df000615 	stw	fp,24(sp)
  8053d0:	df000604 	addi	fp,sp,24
  8053d4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8053d8:	e0bffc17 	ldw	r2,-16(fp)
  8053dc:	1004803a 	cmplt	r2,r2,zero
  8053e0:	1000081e 	bne	r2,zero,805404 <close+0x40>
  8053e4:	e0bffc17 	ldw	r2,-16(fp)
  8053e8:	10800324 	muli	r2,r2,12
  8053ec:	1007883a 	mov	r3,r2
  8053f0:	00802234 	movhi	r2,136
  8053f4:	10bfa504 	addi	r2,r2,-364
  8053f8:	1887883a 	add	r3,r3,r2
  8053fc:	e0ffff15 	stw	r3,-4(fp)
  805400:	00000106 	br	805408 <close+0x44>
  805404:	e03fff15 	stw	zero,-4(fp)
  805408:	e0bfff17 	ldw	r2,-4(fp)
  80540c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  805410:	e0bffb17 	ldw	r2,-20(fp)
  805414:	1005003a 	cmpeq	r2,r2,zero
  805418:	10001d1e 	bne	r2,zero,805490 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80541c:	e0bffb17 	ldw	r2,-20(fp)
  805420:	10800017 	ldw	r2,0(r2)
  805424:	10800417 	ldw	r2,16(r2)
  805428:	1005003a 	cmpeq	r2,r2,zero
  80542c:	1000071e 	bne	r2,zero,80544c <close+0x88>
  805430:	e0bffb17 	ldw	r2,-20(fp)
  805434:	10800017 	ldw	r2,0(r2)
  805438:	10800417 	ldw	r2,16(r2)
  80543c:	e13ffb17 	ldw	r4,-20(fp)
  805440:	103ee83a 	callr	r2
  805444:	e0bffe15 	stw	r2,-8(fp)
  805448:	00000106 	br	805450 <close+0x8c>
  80544c:	e03ffe15 	stw	zero,-8(fp)
  805450:	e0bffe17 	ldw	r2,-8(fp)
  805454:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  805458:	e13ffc17 	ldw	r4,-16(fp)
  80545c:	0805e680 	call	805e68 <alt_release_fd>
    if (rval < 0)
  805460:	e0bffa17 	ldw	r2,-24(fp)
  805464:	1004403a 	cmpge	r2,r2,zero
  805468:	1000071e 	bne	r2,zero,805488 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80546c:	08054c00 	call	8054c0 <alt_get_errno>
  805470:	e0fffa17 	ldw	r3,-24(fp)
  805474:	00c7c83a 	sub	r3,zero,r3
  805478:	10c00015 	stw	r3,0(r2)
      return -1;
  80547c:	00bfffc4 	movi	r2,-1
  805480:	e0bffd15 	stw	r2,-12(fp)
  805484:	00000806 	br	8054a8 <close+0xe4>
    }
    return 0;
  805488:	e03ffd15 	stw	zero,-12(fp)
  80548c:	00000606 	br	8054a8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  805490:	08054c00 	call	8054c0 <alt_get_errno>
  805494:	1007883a 	mov	r3,r2
  805498:	00801444 	movi	r2,81
  80549c:	18800015 	stw	r2,0(r3)
    return -1;
  8054a0:	00bfffc4 	movi	r2,-1
  8054a4:	e0bffd15 	stw	r2,-12(fp)
  8054a8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8054ac:	e037883a 	mov	sp,fp
  8054b0:	dfc00117 	ldw	ra,4(sp)
  8054b4:	df000017 	ldw	fp,0(sp)
  8054b8:	dec00204 	addi	sp,sp,8
  8054bc:	f800283a 	ret

008054c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8054c0:	defffd04 	addi	sp,sp,-12
  8054c4:	dfc00215 	stw	ra,8(sp)
  8054c8:	df000115 	stw	fp,4(sp)
  8054cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8054d0:	00802234 	movhi	r2,136
  8054d4:	10810a04 	addi	r2,r2,1064
  8054d8:	10800017 	ldw	r2,0(r2)
  8054dc:	1005003a 	cmpeq	r2,r2,zero
  8054e0:	1000061e 	bne	r2,zero,8054fc <alt_get_errno+0x3c>
  8054e4:	00802234 	movhi	r2,136
  8054e8:	10810a04 	addi	r2,r2,1064
  8054ec:	10800017 	ldw	r2,0(r2)
  8054f0:	103ee83a 	callr	r2
  8054f4:	e0bfff15 	stw	r2,-4(fp)
  8054f8:	00000306 	br	805508 <alt_get_errno+0x48>
  8054fc:	00802234 	movhi	r2,136
  805500:	10873304 	addi	r2,r2,7372
  805504:	e0bfff15 	stw	r2,-4(fp)
  805508:	e0bfff17 	ldw	r2,-4(fp)
}
  80550c:	e037883a 	mov	sp,fp
  805510:	dfc00117 	ldw	ra,4(sp)
  805514:	df000017 	ldw	fp,0(sp)
  805518:	dec00204 	addi	sp,sp,8
  80551c:	f800283a 	ret

00805520 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805520:	defffe04 	addi	sp,sp,-8
  805524:	df000115 	stw	fp,4(sp)
  805528:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80552c:	e03fff15 	stw	zero,-4(fp)
  805530:	00000506 	br	805548 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  805534:	e0bfff17 	ldw	r2,-4(fp)
  805538:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10800804 	addi	r2,r2,32
  805544:	e0bfff15 	stw	r2,-4(fp)
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	10820030 	cmpltui	r2,r2,2048
  805550:	103ff81e 	bne	r2,zero,805534 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  805554:	e037883a 	mov	sp,fp
  805558:	df000017 	ldw	fp,0(sp)
  80555c:	dec00104 	addi	sp,sp,4
  805560:	f800283a 	ret

00805564 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  805564:	defffc04 	addi	sp,sp,-16
  805568:	df000315 	stw	fp,12(sp)
  80556c:	df000304 	addi	fp,sp,12
  805570:	e13ffd15 	stw	r4,-12(fp)
  805574:	e17ffe15 	stw	r5,-8(fp)
  805578:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80557c:	e0bfff17 	ldw	r2,-4(fp)
}
  805580:	e037883a 	mov	sp,fp
  805584:	df000017 	ldw	fp,0(sp)
  805588:	dec00104 	addi	sp,sp,4
  80558c:	f800283a 	ret

00805590 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805590:	defff904 	addi	sp,sp,-28
  805594:	dfc00615 	stw	ra,24(sp)
  805598:	df000515 	stw	fp,20(sp)
  80559c:	df000504 	addi	fp,sp,20
  8055a0:	e13ffd15 	stw	r4,-12(fp)
  8055a4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8055a8:	e0bffd17 	ldw	r2,-12(fp)
  8055ac:	1005003a 	cmpeq	r2,r2,zero
  8055b0:	1000041e 	bne	r2,zero,8055c4 <alt_dev_llist_insert+0x34>
  8055b4:	e0bffd17 	ldw	r2,-12(fp)
  8055b8:	10800217 	ldw	r2,8(r2)
  8055bc:	1004c03a 	cmpne	r2,r2,zero
  8055c0:	1000071e 	bne	r2,zero,8055e0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8055c4:	08056440 	call	805644 <alt_get_errno>
  8055c8:	1007883a 	mov	r3,r2
  8055cc:	00800584 	movi	r2,22
  8055d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8055d4:	00bffa84 	movi	r2,-22
  8055d8:	e0bfff15 	stw	r2,-4(fp)
  8055dc:	00001306 	br	80562c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8055e0:	e0fffd17 	ldw	r3,-12(fp)
  8055e4:	e0bffe17 	ldw	r2,-8(fp)
  8055e8:	e0bffb15 	stw	r2,-20(fp)
  8055ec:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8055f0:	e0fffc17 	ldw	r3,-16(fp)
  8055f4:	e0bffb17 	ldw	r2,-20(fp)
  8055f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8055fc:	e0bffb17 	ldw	r2,-20(fp)
  805600:	10c00017 	ldw	r3,0(r2)
  805604:	e0bffc17 	ldw	r2,-16(fp)
  805608:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80560c:	e0bffb17 	ldw	r2,-20(fp)
  805610:	10c00017 	ldw	r3,0(r2)
  805614:	e0bffc17 	ldw	r2,-16(fp)
  805618:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80561c:	e0fffb17 	ldw	r3,-20(fp)
  805620:	e0bffc17 	ldw	r2,-16(fp)
  805624:	18800015 	stw	r2,0(r3)

  return 0;  
  805628:	e03fff15 	stw	zero,-4(fp)
  80562c:	e0bfff17 	ldw	r2,-4(fp)
}
  805630:	e037883a 	mov	sp,fp
  805634:	dfc00117 	ldw	ra,4(sp)
  805638:	df000017 	ldw	fp,0(sp)
  80563c:	dec00204 	addi	sp,sp,8
  805640:	f800283a 	ret

00805644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805644:	defffd04 	addi	sp,sp,-12
  805648:	dfc00215 	stw	ra,8(sp)
  80564c:	df000115 	stw	fp,4(sp)
  805650:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805654:	00802234 	movhi	r2,136
  805658:	10810a04 	addi	r2,r2,1064
  80565c:	10800017 	ldw	r2,0(r2)
  805660:	1005003a 	cmpeq	r2,r2,zero
  805664:	1000061e 	bne	r2,zero,805680 <alt_get_errno+0x3c>
  805668:	00802234 	movhi	r2,136
  80566c:	10810a04 	addi	r2,r2,1064
  805670:	10800017 	ldw	r2,0(r2)
  805674:	103ee83a 	callr	r2
  805678:	e0bfff15 	stw	r2,-4(fp)
  80567c:	00000306 	br	80568c <alt_get_errno+0x48>
  805680:	00802234 	movhi	r2,136
  805684:	10873304 	addi	r2,r2,7372
  805688:	e0bfff15 	stw	r2,-4(fp)
  80568c:	e0bfff17 	ldw	r2,-4(fp)
}
  805690:	e037883a 	mov	sp,fp
  805694:	dfc00117 	ldw	ra,4(sp)
  805698:	df000017 	ldw	fp,0(sp)
  80569c:	dec00204 	addi	sp,sp,8
  8056a0:	f800283a 	ret

008056a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8056a4:	defffd04 	addi	sp,sp,-12
  8056a8:	dfc00215 	stw	ra,8(sp)
  8056ac:	df000115 	stw	fp,4(sp)
  8056b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8056b4:	00bfff04 	movi	r2,-4
  8056b8:	00c02034 	movhi	r3,128
  8056bc:	18da2a04 	addi	r3,r3,26792
  8056c0:	1885883a 	add	r2,r3,r2
  8056c4:	e0bfff15 	stw	r2,-4(fp)
  8056c8:	00000606 	br	8056e4 <_do_ctors+0x40>
        (*ctor) (); 
  8056cc:	e0bfff17 	ldw	r2,-4(fp)
  8056d0:	10800017 	ldw	r2,0(r2)
  8056d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	10bfff04 	addi	r2,r2,-4
  8056e0:	e0bfff15 	stw	r2,-4(fp)
  8056e4:	e0ffff17 	ldw	r3,-4(fp)
  8056e8:	00802034 	movhi	r2,128
  8056ec:	109a2904 	addi	r2,r2,26788
  8056f0:	18bff62e 	bgeu	r3,r2,8056cc <_do_ctors+0x28>
        (*ctor) (); 
}
  8056f4:	e037883a 	mov	sp,fp
  8056f8:	dfc00117 	ldw	ra,4(sp)
  8056fc:	df000017 	ldw	fp,0(sp)
  805700:	dec00204 	addi	sp,sp,8
  805704:	f800283a 	ret

00805708 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  805708:	defffd04 	addi	sp,sp,-12
  80570c:	dfc00215 	stw	ra,8(sp)
  805710:	df000115 	stw	fp,4(sp)
  805714:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805718:	00bfff04 	movi	r2,-4
  80571c:	00c02034 	movhi	r3,128
  805720:	18da2a04 	addi	r3,r3,26792
  805724:	1885883a 	add	r2,r3,r2
  805728:	e0bfff15 	stw	r2,-4(fp)
  80572c:	00000606 	br	805748 <_do_dtors+0x40>
        (*dtor) (); 
  805730:	e0bfff17 	ldw	r2,-4(fp)
  805734:	10800017 	ldw	r2,0(r2)
  805738:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80573c:	e0bfff17 	ldw	r2,-4(fp)
  805740:	10bfff04 	addi	r2,r2,-4
  805744:	e0bfff15 	stw	r2,-4(fp)
  805748:	e0ffff17 	ldw	r3,-4(fp)
  80574c:	00802034 	movhi	r2,128
  805750:	109a2a04 	addi	r2,r2,26792
  805754:	18bff62e 	bgeu	r3,r2,805730 <_do_dtors+0x28>
        (*dtor) (); 
}
  805758:	e037883a 	mov	sp,fp
  80575c:	dfc00117 	ldw	ra,4(sp)
  805760:	df000017 	ldw	fp,0(sp)
  805764:	dec00204 	addi	sp,sp,8
  805768:	f800283a 	ret

0080576c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80576c:	defffe04 	addi	sp,sp,-8
  805770:	dfc00115 	stw	ra,4(sp)
  805774:	df000015 	stw	fp,0(sp)
  805778:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80577c:	0009883a 	mov	r4,zero
  805780:	01440004 	movi	r5,4096
  805784:	08062f80 	call	8062f8 <alt_icache_flush>
#endif
}
  805788:	e037883a 	mov	sp,fp
  80578c:	dfc00117 	ldw	ra,4(sp)
  805790:	df000017 	ldw	fp,0(sp)
  805794:	dec00204 	addi	sp,sp,8
  805798:	f800283a 	ret

0080579c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80579c:	defff904 	addi	sp,sp,-28
  8057a0:	dfc00615 	stw	ra,24(sp)
  8057a4:	df000515 	stw	fp,20(sp)
  8057a8:	df000504 	addi	fp,sp,20
  8057ac:	e13ffc15 	stw	r4,-16(fp)
  8057b0:	e17ffd15 	stw	r5,-12(fp)
  8057b4:	e1bffe15 	stw	r6,-8(fp)
  8057b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8057bc:	e0800217 	ldw	r2,8(fp)
  8057c0:	d8800015 	stw	r2,0(sp)
  8057c4:	e13ffc17 	ldw	r4,-16(fp)
  8057c8:	e17ffd17 	ldw	r5,-12(fp)
  8057cc:	e1bffe17 	ldw	r6,-8(fp)
  8057d0:	e1ffff17 	ldw	r7,-4(fp)
  8057d4:	08059700 	call	805970 <alt_iic_isr_register>
}  
  8057d8:	e037883a 	mov	sp,fp
  8057dc:	dfc00117 	ldw	ra,4(sp)
  8057e0:	df000017 	ldw	fp,0(sp)
  8057e4:	dec00204 	addi	sp,sp,8
  8057e8:	f800283a 	ret

008057ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8057ec:	defff904 	addi	sp,sp,-28
  8057f0:	df000615 	stw	fp,24(sp)
  8057f4:	df000604 	addi	fp,sp,24
  8057f8:	e13ffe15 	stw	r4,-8(fp)
  8057fc:	e17fff15 	stw	r5,-4(fp)
  805800:	e0bfff17 	ldw	r2,-4(fp)
  805804:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805808:	0005303a 	rdctl	r2,status
  80580c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805810:	e0fffb17 	ldw	r3,-20(fp)
  805814:	00bfff84 	movi	r2,-2
  805818:	1884703a 	and	r2,r3,r2
  80581c:	1001703a 	wrctl	status,r2
  
  return context;
  805820:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805824:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  805828:	e0fffc17 	ldw	r3,-16(fp)
  80582c:	00800044 	movi	r2,1
  805830:	10c4983a 	sll	r2,r2,r3
  805834:	1007883a 	mov	r3,r2
  805838:	00802234 	movhi	r2,136
  80583c:	10873004 	addi	r2,r2,7360
  805840:	10800017 	ldw	r2,0(r2)
  805844:	1886b03a 	or	r3,r3,r2
  805848:	00802234 	movhi	r2,136
  80584c:	10873004 	addi	r2,r2,7360
  805850:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805854:	00802234 	movhi	r2,136
  805858:	10873004 	addi	r2,r2,7360
  80585c:	10800017 	ldw	r2,0(r2)
  805860:	100170fa 	wrctl	ienable,r2
  805864:	e0bffd17 	ldw	r2,-12(fp)
  805868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80586c:	e0bffa17 	ldw	r2,-24(fp)
  805870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805874:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  805878:	e037883a 	mov	sp,fp
  80587c:	df000017 	ldw	fp,0(sp)
  805880:	dec00104 	addi	sp,sp,4
  805884:	f800283a 	ret

00805888 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  805888:	defff904 	addi	sp,sp,-28
  80588c:	df000615 	stw	fp,24(sp)
  805890:	df000604 	addi	fp,sp,24
  805894:	e13ffe15 	stw	r4,-8(fp)
  805898:	e17fff15 	stw	r5,-4(fp)
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8058a4:	0005303a 	rdctl	r2,status
  8058a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8058ac:	e0fffb17 	ldw	r3,-20(fp)
  8058b0:	00bfff84 	movi	r2,-2
  8058b4:	1884703a 	and	r2,r3,r2
  8058b8:	1001703a 	wrctl	status,r2
  
  return context;
  8058bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8058c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8058c4:	e0fffc17 	ldw	r3,-16(fp)
  8058c8:	00800044 	movi	r2,1
  8058cc:	10c4983a 	sll	r2,r2,r3
  8058d0:	0084303a 	nor	r2,zero,r2
  8058d4:	1007883a 	mov	r3,r2
  8058d8:	00802234 	movhi	r2,136
  8058dc:	10873004 	addi	r2,r2,7360
  8058e0:	10800017 	ldw	r2,0(r2)
  8058e4:	1886703a 	and	r3,r3,r2
  8058e8:	00802234 	movhi	r2,136
  8058ec:	10873004 	addi	r2,r2,7360
  8058f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8058f4:	00802234 	movhi	r2,136
  8058f8:	10873004 	addi	r2,r2,7360
  8058fc:	10800017 	ldw	r2,0(r2)
  805900:	100170fa 	wrctl	ienable,r2
  805904:	e0bffd17 	ldw	r2,-12(fp)
  805908:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80590c:	e0bffa17 	ldw	r2,-24(fp)
  805910:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805914:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  805918:	e037883a 	mov	sp,fp
  80591c:	df000017 	ldw	fp,0(sp)
  805920:	dec00104 	addi	sp,sp,4
  805924:	f800283a 	ret

00805928 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805928:	defffc04 	addi	sp,sp,-16
  80592c:	df000315 	stw	fp,12(sp)
  805930:	df000304 	addi	fp,sp,12
  805934:	e13ffe15 	stw	r4,-8(fp)
  805938:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80593c:	000530fa 	rdctl	r2,ienable
  805940:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805944:	e0ffff17 	ldw	r3,-4(fp)
  805948:	00800044 	movi	r2,1
  80594c:	10c4983a 	sll	r2,r2,r3
  805950:	1007883a 	mov	r3,r2
  805954:	e0bffd17 	ldw	r2,-12(fp)
  805958:	1884703a 	and	r2,r3,r2
  80595c:	1004c03a 	cmpne	r2,r2,zero
}
  805960:	e037883a 	mov	sp,fp
  805964:	df000017 	ldw	fp,0(sp)
  805968:	dec00104 	addi	sp,sp,4
  80596c:	f800283a 	ret

00805970 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805970:	defff404 	addi	sp,sp,-48
  805974:	dfc00b15 	stw	ra,44(sp)
  805978:	df000a15 	stw	fp,40(sp)
  80597c:	df000a04 	addi	fp,sp,40
  805980:	e13ffb15 	stw	r4,-20(fp)
  805984:	e17ffc15 	stw	r5,-16(fp)
  805988:	e1bffd15 	stw	r6,-12(fp)
  80598c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  805990:	00bffa84 	movi	r2,-22
  805994:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8059a0:	e0bff917 	ldw	r2,-28(fp)
  8059a4:	10800808 	cmpgei	r2,r2,32
  8059a8:	1000291e 	bne	r2,zero,805a50 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8059ac:	0005303a 	rdctl	r2,status
  8059b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8059b4:	e0fff717 	ldw	r3,-36(fp)
  8059b8:	00bfff84 	movi	r2,-2
  8059bc:	1884703a 	and	r2,r3,r2
  8059c0:	1001703a 	wrctl	status,r2
  
  return context;
  8059c4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8059c8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8059cc:	e0bff917 	ldw	r2,-28(fp)
  8059d0:	00c02274 	movhi	r3,137
  8059d4:	18c29404 	addi	r3,r3,2640
  8059d8:	100490fa 	slli	r2,r2,3
  8059dc:	10c7883a 	add	r3,r2,r3
  8059e0:	e0bffd17 	ldw	r2,-12(fp)
  8059e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8059e8:	e0bff917 	ldw	r2,-28(fp)
  8059ec:	00c02274 	movhi	r3,137
  8059f0:	18c29404 	addi	r3,r3,2640
  8059f4:	100490fa 	slli	r2,r2,3
  8059f8:	10c5883a 	add	r2,r2,r3
  8059fc:	10c00104 	addi	r3,r2,4
  805a00:	e0bffe17 	ldw	r2,-8(fp)
  805a04:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805a08:	e0bffd17 	ldw	r2,-12(fp)
  805a0c:	1005003a 	cmpeq	r2,r2,zero
  805a10:	1000051e 	bne	r2,zero,805a28 <alt_iic_isr_register+0xb8>
  805a14:	e17ff917 	ldw	r5,-28(fp)
  805a18:	e13ffb17 	ldw	r4,-20(fp)
  805a1c:	08057ec0 	call	8057ec <alt_ic_irq_enable>
  805a20:	e0bfff15 	stw	r2,-4(fp)
  805a24:	00000406 	br	805a38 <alt_iic_isr_register+0xc8>
  805a28:	e17ff917 	ldw	r5,-28(fp)
  805a2c:	e13ffb17 	ldw	r4,-20(fp)
  805a30:	08058880 	call	805888 <alt_ic_irq_disable>
  805a34:	e0bfff15 	stw	r2,-4(fp)
  805a38:	e0bfff17 	ldw	r2,-4(fp)
  805a3c:	e0bffa15 	stw	r2,-24(fp)
  805a40:	e0bff817 	ldw	r2,-32(fp)
  805a44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805a48:	e0bff617 	ldw	r2,-40(fp)
  805a4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  805a50:	e0bffa17 	ldw	r2,-24(fp)
}
  805a54:	e037883a 	mov	sp,fp
  805a58:	dfc00117 	ldw	ra,4(sp)
  805a5c:	df000017 	ldw	fp,0(sp)
  805a60:	dec00204 	addi	sp,sp,8
  805a64:	f800283a 	ret

00805a68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805a68:	defff904 	addi	sp,sp,-28
  805a6c:	dfc00615 	stw	ra,24(sp)
  805a70:	df000515 	stw	fp,20(sp)
  805a74:	df000504 	addi	fp,sp,20
  805a78:	e13ffc15 	stw	r4,-16(fp)
  805a7c:	e17ffd15 	stw	r5,-12(fp)
  805a80:	e1bffe15 	stw	r6,-8(fp)
  805a84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  805a88:	e13ffd17 	ldw	r4,-12(fp)
  805a8c:	e17ffe17 	ldw	r5,-8(fp)
  805a90:	e1bfff17 	ldw	r6,-4(fp)
  805a94:	0805c800 	call	805c80 <open>
  805a98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  805a9c:	e0bffb17 	ldw	r2,-20(fp)
  805aa0:	1004803a 	cmplt	r2,r2,zero
  805aa4:	10001c1e 	bne	r2,zero,805b18 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  805aa8:	e0bffb17 	ldw	r2,-20(fp)
  805aac:	00c02234 	movhi	r3,136
  805ab0:	18ffa504 	addi	r3,r3,-364
  805ab4:	10800324 	muli	r2,r2,12
  805ab8:	10c5883a 	add	r2,r2,r3
  805abc:	10c00017 	ldw	r3,0(r2)
  805ac0:	e0bffc17 	ldw	r2,-16(fp)
  805ac4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805ac8:	e0bffb17 	ldw	r2,-20(fp)
  805acc:	00c02234 	movhi	r3,136
  805ad0:	18ffa504 	addi	r3,r3,-364
  805ad4:	10800324 	muli	r2,r2,12
  805ad8:	10c5883a 	add	r2,r2,r3
  805adc:	10800104 	addi	r2,r2,4
  805ae0:	10c00017 	ldw	r3,0(r2)
  805ae4:	e0bffc17 	ldw	r2,-16(fp)
  805ae8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805aec:	e0bffb17 	ldw	r2,-20(fp)
  805af0:	00c02234 	movhi	r3,136
  805af4:	18ffa504 	addi	r3,r3,-364
  805af8:	10800324 	muli	r2,r2,12
  805afc:	10c5883a 	add	r2,r2,r3
  805b00:	10800204 	addi	r2,r2,8
  805b04:	10c00017 	ldw	r3,0(r2)
  805b08:	e0bffc17 	ldw	r2,-16(fp)
  805b0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805b10:	e13ffb17 	ldw	r4,-20(fp)
  805b14:	0805e680 	call	805e68 <alt_release_fd>
  }
} 
  805b18:	e037883a 	mov	sp,fp
  805b1c:	dfc00117 	ldw	ra,4(sp)
  805b20:	df000017 	ldw	fp,0(sp)
  805b24:	dec00204 	addi	sp,sp,8
  805b28:	f800283a 	ret

00805b2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805b2c:	defffb04 	addi	sp,sp,-20
  805b30:	dfc00415 	stw	ra,16(sp)
  805b34:	df000315 	stw	fp,12(sp)
  805b38:	df000304 	addi	fp,sp,12
  805b3c:	e13ffd15 	stw	r4,-12(fp)
  805b40:	e17ffe15 	stw	r5,-8(fp)
  805b44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805b48:	01002234 	movhi	r4,136
  805b4c:	213fa804 	addi	r4,r4,-352
  805b50:	e17ffd17 	ldw	r5,-12(fp)
  805b54:	01800044 	movi	r6,1
  805b58:	01c07fc4 	movi	r7,511
  805b5c:	0805a680 	call	805a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805b60:	01002234 	movhi	r4,136
  805b64:	213fa504 	addi	r4,r4,-364
  805b68:	e17ffe17 	ldw	r5,-8(fp)
  805b6c:	000d883a 	mov	r6,zero
  805b70:	01c07fc4 	movi	r7,511
  805b74:	0805a680 	call	805a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805b78:	01002234 	movhi	r4,136
  805b7c:	213fab04 	addi	r4,r4,-340
  805b80:	e17fff17 	ldw	r5,-4(fp)
  805b84:	01800044 	movi	r6,1
  805b88:	01c07fc4 	movi	r7,511
  805b8c:	0805a680 	call	805a68 <alt_open_fd>
}  
  805b90:	e037883a 	mov	sp,fp
  805b94:	dfc00117 	ldw	ra,4(sp)
  805b98:	df000017 	ldw	fp,0(sp)
  805b9c:	dec00204 	addi	sp,sp,8
  805ba0:	f800283a 	ret

00805ba4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805ba4:	defffc04 	addi	sp,sp,-16
  805ba8:	df000315 	stw	fp,12(sp)
  805bac:	df000304 	addi	fp,sp,12
  805bb0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805bb4:	e0bffe17 	ldw	r2,-8(fp)
  805bb8:	10800217 	ldw	r2,8(r2)
  805bbc:	10d00034 	orhi	r3,r2,16384
  805bc0:	e0bffe17 	ldw	r2,-8(fp)
  805bc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805bc8:	e03ffd15 	stw	zero,-12(fp)
  805bcc:	00002006 	br	805c50 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805bd0:	e0bffd17 	ldw	r2,-12(fp)
  805bd4:	00c02234 	movhi	r3,136
  805bd8:	18ffa504 	addi	r3,r3,-364
  805bdc:	10800324 	muli	r2,r2,12
  805be0:	10c5883a 	add	r2,r2,r3
  805be4:	10c00017 	ldw	r3,0(r2)
  805be8:	e0bffe17 	ldw	r2,-8(fp)
  805bec:	10800017 	ldw	r2,0(r2)
  805bf0:	1880141e 	bne	r3,r2,805c44 <alt_file_locked+0xa0>
  805bf4:	e0bffd17 	ldw	r2,-12(fp)
  805bf8:	00c02234 	movhi	r3,136
  805bfc:	18ffa504 	addi	r3,r3,-364
  805c00:	10800324 	muli	r2,r2,12
  805c04:	10c5883a 	add	r2,r2,r3
  805c08:	10800204 	addi	r2,r2,8
  805c0c:	10800017 	ldw	r2,0(r2)
  805c10:	1004403a 	cmpge	r2,r2,zero
  805c14:	10000b1e 	bne	r2,zero,805c44 <alt_file_locked+0xa0>
  805c18:	e0bffd17 	ldw	r2,-12(fp)
  805c1c:	10800324 	muli	r2,r2,12
  805c20:	1007883a 	mov	r3,r2
  805c24:	00802234 	movhi	r2,136
  805c28:	10bfa504 	addi	r2,r2,-364
  805c2c:	1887883a 	add	r3,r3,r2
  805c30:	e0bffe17 	ldw	r2,-8(fp)
  805c34:	18800326 	beq	r3,r2,805c44 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805c38:	00bffcc4 	movi	r2,-13
  805c3c:	e0bfff15 	stw	r2,-4(fp)
  805c40:	00000a06 	br	805c6c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805c44:	e0bffd17 	ldw	r2,-12(fp)
  805c48:	10800044 	addi	r2,r2,1
  805c4c:	e0bffd15 	stw	r2,-12(fp)
  805c50:	00802234 	movhi	r2,136
  805c54:	10810904 	addi	r2,r2,1060
  805c58:	10800017 	ldw	r2,0(r2)
  805c5c:	1007883a 	mov	r3,r2
  805c60:	e0bffd17 	ldw	r2,-12(fp)
  805c64:	18bfda2e 	bgeu	r3,r2,805bd0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805c68:	e03fff15 	stw	zero,-4(fp)
  805c6c:	e0bfff17 	ldw	r2,-4(fp)
}
  805c70:	e037883a 	mov	sp,fp
  805c74:	df000017 	ldw	fp,0(sp)
  805c78:	dec00104 	addi	sp,sp,4
  805c7c:	f800283a 	ret

00805c80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805c80:	defff404 	addi	sp,sp,-48
  805c84:	dfc00b15 	stw	ra,44(sp)
  805c88:	df000a15 	stw	fp,40(sp)
  805c8c:	df000a04 	addi	fp,sp,40
  805c90:	e13ffb15 	stw	r4,-20(fp)
  805c94:	e17ffc15 	stw	r5,-16(fp)
  805c98:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805c9c:	00bfffc4 	movi	r2,-1
  805ca0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  805ca4:	00bffb44 	movi	r2,-19
  805ca8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  805cac:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805cb0:	e13ffb17 	ldw	r4,-20(fp)
  805cb4:	01402234 	movhi	r5,136
  805cb8:	29410704 	addi	r5,r5,1052
  805cbc:	080608c0 	call	80608c <alt_find_dev>
  805cc0:	e0bffa15 	stw	r2,-24(fp)
  805cc4:	e0bffa17 	ldw	r2,-24(fp)
  805cc8:	1004c03a 	cmpne	r2,r2,zero
  805ccc:	1000051e 	bne	r2,zero,805ce4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805cd0:	e13ffb17 	ldw	r4,-20(fp)
  805cd4:	08061200 	call	806120 <alt_find_file>
  805cd8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  805cdc:	00800044 	movi	r2,1
  805ce0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805ce4:	e0bffa17 	ldw	r2,-24(fp)
  805ce8:	1005003a 	cmpeq	r2,r2,zero
  805cec:	1000301e 	bne	r2,zero,805db0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805cf0:	e13ffa17 	ldw	r4,-24(fp)
  805cf4:	08062400 	call	806240 <alt_get_fd>
  805cf8:	e0bff815 	stw	r2,-32(fp)
  805cfc:	e0bff817 	ldw	r2,-32(fp)
  805d00:	1004403a 	cmpge	r2,r2,zero
  805d04:	1000031e 	bne	r2,zero,805d14 <open+0x94>
    {
      status = index;
  805d08:	e0bff817 	ldw	r2,-32(fp)
  805d0c:	e0bff715 	stw	r2,-36(fp)
  805d10:	00002906 	br	805db8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  805d14:	e0bff817 	ldw	r2,-32(fp)
  805d18:	10800324 	muli	r2,r2,12
  805d1c:	1007883a 	mov	r3,r2
  805d20:	00802234 	movhi	r2,136
  805d24:	10bfa504 	addi	r2,r2,-364
  805d28:	1885883a 	add	r2,r3,r2
  805d2c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805d30:	e0fffc17 	ldw	r3,-16(fp)
  805d34:	00900034 	movhi	r2,16384
  805d38:	10bfffc4 	addi	r2,r2,-1
  805d3c:	1886703a 	and	r3,r3,r2
  805d40:	e0bff917 	ldw	r2,-28(fp)
  805d44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805d48:	e0bff617 	ldw	r2,-40(fp)
  805d4c:	1004c03a 	cmpne	r2,r2,zero
  805d50:	1000061e 	bne	r2,zero,805d6c <open+0xec>
  805d54:	e13ff917 	ldw	r4,-28(fp)
  805d58:	0805ba40 	call	805ba4 <alt_file_locked>
  805d5c:	e0bff715 	stw	r2,-36(fp)
  805d60:	e0bff717 	ldw	r2,-36(fp)
  805d64:	1004803a 	cmplt	r2,r2,zero
  805d68:	1000131e 	bne	r2,zero,805db8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805d6c:	e0bffa17 	ldw	r2,-24(fp)
  805d70:	10800317 	ldw	r2,12(r2)
  805d74:	1005003a 	cmpeq	r2,r2,zero
  805d78:	1000091e 	bne	r2,zero,805da0 <open+0x120>
  805d7c:	e0bffa17 	ldw	r2,-24(fp)
  805d80:	10800317 	ldw	r2,12(r2)
  805d84:	e13ff917 	ldw	r4,-28(fp)
  805d88:	e17ffb17 	ldw	r5,-20(fp)
  805d8c:	e1bffc17 	ldw	r6,-16(fp)
  805d90:	e1fffd17 	ldw	r7,-12(fp)
  805d94:	103ee83a 	callr	r2
  805d98:	e0bfff15 	stw	r2,-4(fp)
  805d9c:	00000106 	br	805da4 <open+0x124>
  805da0:	e03fff15 	stw	zero,-4(fp)
  805da4:	e0bfff17 	ldw	r2,-4(fp)
  805da8:	e0bff715 	stw	r2,-36(fp)
  805dac:	00000206 	br	805db8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805db0:	00bffb44 	movi	r2,-19
  805db4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805db8:	e0bff717 	ldw	r2,-36(fp)
  805dbc:	1004403a 	cmpge	r2,r2,zero
  805dc0:	1000091e 	bne	r2,zero,805de8 <open+0x168>
  {
    alt_release_fd (index);  
  805dc4:	e13ff817 	ldw	r4,-32(fp)
  805dc8:	0805e680 	call	805e68 <alt_release_fd>
    ALT_ERRNO = -status;
  805dcc:	0805e080 	call	805e08 <alt_get_errno>
  805dd0:	e0fff717 	ldw	r3,-36(fp)
  805dd4:	00c7c83a 	sub	r3,zero,r3
  805dd8:	10c00015 	stw	r3,0(r2)
    return -1;
  805ddc:	00bfffc4 	movi	r2,-1
  805de0:	e0bffe15 	stw	r2,-8(fp)
  805de4:	00000206 	br	805df0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  805de8:	e0bff817 	ldw	r2,-32(fp)
  805dec:	e0bffe15 	stw	r2,-8(fp)
  805df0:	e0bffe17 	ldw	r2,-8(fp)
}
  805df4:	e037883a 	mov	sp,fp
  805df8:	dfc00117 	ldw	ra,4(sp)
  805dfc:	df000017 	ldw	fp,0(sp)
  805e00:	dec00204 	addi	sp,sp,8
  805e04:	f800283a 	ret

00805e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805e08:	defffd04 	addi	sp,sp,-12
  805e0c:	dfc00215 	stw	ra,8(sp)
  805e10:	df000115 	stw	fp,4(sp)
  805e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805e18:	00802234 	movhi	r2,136
  805e1c:	10810a04 	addi	r2,r2,1064
  805e20:	10800017 	ldw	r2,0(r2)
  805e24:	1005003a 	cmpeq	r2,r2,zero
  805e28:	1000061e 	bne	r2,zero,805e44 <alt_get_errno+0x3c>
  805e2c:	00802234 	movhi	r2,136
  805e30:	10810a04 	addi	r2,r2,1064
  805e34:	10800017 	ldw	r2,0(r2)
  805e38:	103ee83a 	callr	r2
  805e3c:	e0bfff15 	stw	r2,-4(fp)
  805e40:	00000306 	br	805e50 <alt_get_errno+0x48>
  805e44:	00802234 	movhi	r2,136
  805e48:	10873304 	addi	r2,r2,7372
  805e4c:	e0bfff15 	stw	r2,-4(fp)
  805e50:	e0bfff17 	ldw	r2,-4(fp)
}
  805e54:	e037883a 	mov	sp,fp
  805e58:	dfc00117 	ldw	ra,4(sp)
  805e5c:	df000017 	ldw	fp,0(sp)
  805e60:	dec00204 	addi	sp,sp,8
  805e64:	f800283a 	ret

00805e68 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  805e68:	defffe04 	addi	sp,sp,-8
  805e6c:	df000115 	stw	fp,4(sp)
  805e70:	df000104 	addi	fp,sp,4
  805e74:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  805e78:	e0bfff17 	ldw	r2,-4(fp)
  805e7c:	108000d0 	cmplti	r2,r2,3
  805e80:	10000d1e 	bne	r2,zero,805eb8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  805e84:	e0bfff17 	ldw	r2,-4(fp)
  805e88:	00c02234 	movhi	r3,136
  805e8c:	18ffa504 	addi	r3,r3,-364
  805e90:	10800324 	muli	r2,r2,12
  805e94:	10c5883a 	add	r2,r2,r3
  805e98:	10800204 	addi	r2,r2,8
  805e9c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  805ea0:	e0bfff17 	ldw	r2,-4(fp)
  805ea4:	00c02234 	movhi	r3,136
  805ea8:	18ffa504 	addi	r3,r3,-364
  805eac:	10800324 	muli	r2,r2,12
  805eb0:	10c5883a 	add	r2,r2,r3
  805eb4:	10000015 	stw	zero,0(r2)
  }
}
  805eb8:	e037883a 	mov	sp,fp
  805ebc:	df000017 	ldw	fp,0(sp)
  805ec0:	dec00104 	addi	sp,sp,4
  805ec4:	f800283a 	ret

00805ec8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  805ec8:	defffa04 	addi	sp,sp,-24
  805ecc:	df000515 	stw	fp,20(sp)
  805ed0:	df000504 	addi	fp,sp,20
  805ed4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ed8:	0005303a 	rdctl	r2,status
  805edc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ee0:	e0fffd17 	ldw	r3,-12(fp)
  805ee4:	00bfff84 	movi	r2,-2
  805ee8:	1884703a 	and	r2,r3,r2
  805eec:	1001703a 	wrctl	status,r2
  
  return context;
  805ef0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805ef4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  805ef8:	e0bfff17 	ldw	r2,-4(fp)
  805efc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805f00:	e0bffc17 	ldw	r2,-16(fp)
  805f04:	10c00017 	ldw	r3,0(r2)
  805f08:	e0bffc17 	ldw	r2,-16(fp)
  805f0c:	10800117 	ldw	r2,4(r2)
  805f10:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  805f14:	e0bffc17 	ldw	r2,-16(fp)
  805f18:	10c00117 	ldw	r3,4(r2)
  805f1c:	e0bffc17 	ldw	r2,-16(fp)
  805f20:	10800017 	ldw	r2,0(r2)
  805f24:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805f28:	e0fffc17 	ldw	r3,-16(fp)
  805f2c:	e0bffc17 	ldw	r2,-16(fp)
  805f30:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  805f34:	e0fffc17 	ldw	r3,-16(fp)
  805f38:	e0bffc17 	ldw	r2,-16(fp)
  805f3c:	18800015 	stw	r2,0(r3)
  805f40:	e0bffe17 	ldw	r2,-8(fp)
  805f44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f48:	e0bffb17 	ldw	r2,-20(fp)
  805f4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805f50:	e037883a 	mov	sp,fp
  805f54:	df000017 	ldw	fp,0(sp)
  805f58:	dec00104 	addi	sp,sp,4
  805f5c:	f800283a 	ret

00805f60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805f60:	defffb04 	addi	sp,sp,-20
  805f64:	dfc00415 	stw	ra,16(sp)
  805f68:	df000315 	stw	fp,12(sp)
  805f6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805f70:	d0a00717 	ldw	r2,-32740(gp)
  805f74:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805f78:	d0a62d17 	ldw	r2,-26444(gp)
  805f7c:	10800044 	addi	r2,r2,1
  805f80:	d0a62d15 	stw	r2,-26444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805f84:	00003106 	br	80604c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  805f88:	e0bffe17 	ldw	r2,-8(fp)
  805f8c:	10800017 	ldw	r2,0(r2)
  805f90:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805f94:	e0bffe17 	ldw	r2,-8(fp)
  805f98:	10800403 	ldbu	r2,16(r2)
  805f9c:	10803fcc 	andi	r2,r2,255
  805fa0:	1005003a 	cmpeq	r2,r2,zero
  805fa4:	1000051e 	bne	r2,zero,805fbc <alt_tick+0x5c>
  805fa8:	d0a62d17 	ldw	r2,-26444(gp)
  805fac:	1004c03a 	cmpne	r2,r2,zero
  805fb0:	1000021e 	bne	r2,zero,805fbc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  805fb4:	e0bffe17 	ldw	r2,-8(fp)
  805fb8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805fbc:	e0bffe17 	ldw	r2,-8(fp)
  805fc0:	10c00217 	ldw	r3,8(r2)
  805fc4:	d0a62d17 	ldw	r2,-26444(gp)
  805fc8:	10c01e36 	bltu	r2,r3,806044 <alt_tick+0xe4>
  805fcc:	e0bffe17 	ldw	r2,-8(fp)
  805fd0:	10800403 	ldbu	r2,16(r2)
  805fd4:	10803fcc 	andi	r2,r2,255
  805fd8:	1004c03a 	cmpne	r2,r2,zero
  805fdc:	1000191e 	bne	r2,zero,806044 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  805fe0:	e0bffe17 	ldw	r2,-8(fp)
  805fe4:	10c00317 	ldw	r3,12(r2)
  805fe8:	e0bffe17 	ldw	r2,-8(fp)
  805fec:	11000517 	ldw	r4,20(r2)
  805ff0:	183ee83a 	callr	r3
  805ff4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805ff8:	e0bffd17 	ldw	r2,-12(fp)
  805ffc:	1004c03a 	cmpne	r2,r2,zero
  806000:	1000031e 	bne	r2,zero,806010 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  806004:	e13ffe17 	ldw	r4,-8(fp)
  806008:	0805ec80 	call	805ec8 <alt_alarm_stop>
  80600c:	00000d06 	br	806044 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  806010:	e0bffe17 	ldw	r2,-8(fp)
  806014:	10c00217 	ldw	r3,8(r2)
  806018:	e0bffd17 	ldw	r2,-12(fp)
  80601c:	1887883a 	add	r3,r3,r2
  806020:	e0bffe17 	ldw	r2,-8(fp)
  806024:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  806028:	e0bffe17 	ldw	r2,-8(fp)
  80602c:	10c00217 	ldw	r3,8(r2)
  806030:	d0a62d17 	ldw	r2,-26444(gp)
  806034:	1880032e 	bgeu	r3,r2,806044 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  806038:	e0fffe17 	ldw	r3,-8(fp)
  80603c:	00800044 	movi	r2,1
  806040:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  806044:	e0bfff17 	ldw	r2,-4(fp)
  806048:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80604c:	d0e00704 	addi	r3,gp,-32740
  806050:	e0bffe17 	ldw	r2,-8(fp)
  806054:	10ffcc1e 	bne	r2,r3,805f88 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  806058:	e037883a 	mov	sp,fp
  80605c:	dfc00117 	ldw	ra,4(sp)
  806060:	df000017 	ldw	fp,0(sp)
  806064:	dec00204 	addi	sp,sp,8
  806068:	f800283a 	ret

0080606c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  80606c:	deffff04 	addi	sp,sp,-4
  806070:	df000015 	stw	fp,0(sp)
  806074:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  806078:	000170fa 	wrctl	ienable,zero
}
  80607c:	e037883a 	mov	sp,fp
  806080:	df000017 	ldw	fp,0(sp)
  806084:	dec00104 	addi	sp,sp,4
  806088:	f800283a 	ret

0080608c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80608c:	defff904 	addi	sp,sp,-28
  806090:	dfc00615 	stw	ra,24(sp)
  806094:	df000515 	stw	fp,20(sp)
  806098:	df000504 	addi	fp,sp,20
  80609c:	e13ffd15 	stw	r4,-12(fp)
  8060a0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8060a4:	e0bffe17 	ldw	r2,-8(fp)
  8060a8:	10800017 	ldw	r2,0(r2)
  8060ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8060b0:	e13ffd17 	ldw	r4,-12(fp)
  8060b4:	08064e80 	call	8064e8 <strlen>
  8060b8:	10800044 	addi	r2,r2,1
  8060bc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8060c0:	00000d06 	br	8060f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8060c4:	e0bffc17 	ldw	r2,-16(fp)
  8060c8:	11000217 	ldw	r4,8(r2)
  8060cc:	e1bffb17 	ldw	r6,-20(fp)
  8060d0:	e17ffd17 	ldw	r5,-12(fp)
  8060d4:	08063d40 	call	8063d4 <memcmp>
  8060d8:	1004c03a 	cmpne	r2,r2,zero
  8060dc:	1000031e 	bne	r2,zero,8060ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8060e0:	e0bffc17 	ldw	r2,-16(fp)
  8060e4:	e0bfff15 	stw	r2,-4(fp)
  8060e8:	00000706 	br	806108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8060ec:	e0bffc17 	ldw	r2,-16(fp)
  8060f0:	10800017 	ldw	r2,0(r2)
  8060f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8060f8:	e0fffe17 	ldw	r3,-8(fp)
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10fff01e 	bne	r2,r3,8060c4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  806104:	e03fff15 	stw	zero,-4(fp)
  806108:	e0bfff17 	ldw	r2,-4(fp)
}
  80610c:	e037883a 	mov	sp,fp
  806110:	dfc00117 	ldw	ra,4(sp)
  806114:	df000017 	ldw	fp,0(sp)
  806118:	dec00204 	addi	sp,sp,8
  80611c:	f800283a 	ret

00806120 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  806120:	defffa04 	addi	sp,sp,-24
  806124:	dfc00515 	stw	ra,20(sp)
  806128:	df000415 	stw	fp,16(sp)
  80612c:	df000404 	addi	fp,sp,16
  806130:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806134:	00802234 	movhi	r2,136
  806138:	10810504 	addi	r2,r2,1044
  80613c:	10800017 	ldw	r2,0(r2)
  806140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806144:	00003306 	br	806214 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  806148:	e0bffd17 	ldw	r2,-12(fp)
  80614c:	11000217 	ldw	r4,8(r2)
  806150:	08064e80 	call	8064e8 <strlen>
  806154:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  806158:	e0bffd17 	ldw	r2,-12(fp)
  80615c:	10c00217 	ldw	r3,8(r2)
  806160:	e0bffc17 	ldw	r2,-16(fp)
  806164:	1885883a 	add	r2,r3,r2
  806168:	10bfffc4 	addi	r2,r2,-1
  80616c:	10800003 	ldbu	r2,0(r2)
  806170:	10803fcc 	andi	r2,r2,255
  806174:	1080201c 	xori	r2,r2,128
  806178:	10bfe004 	addi	r2,r2,-128
  80617c:	10800bd8 	cmpnei	r2,r2,47
  806180:	1000031e 	bne	r2,zero,806190 <alt_find_file+0x70>
    {
      len -= 1;
  806184:	e0bffc17 	ldw	r2,-16(fp)
  806188:	10bfffc4 	addi	r2,r2,-1
  80618c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806190:	e0bffc17 	ldw	r2,-16(fp)
  806194:	1007883a 	mov	r3,r2
  806198:	e0bffe17 	ldw	r2,-8(fp)
  80619c:	1885883a 	add	r2,r3,r2
  8061a0:	10800003 	ldbu	r2,0(r2)
  8061a4:	10803fcc 	andi	r2,r2,255
  8061a8:	1080201c 	xori	r2,r2,128
  8061ac:	10bfe004 	addi	r2,r2,-128
  8061b0:	10800be0 	cmpeqi	r2,r2,47
  8061b4:	10000a1e 	bne	r2,zero,8061e0 <alt_find_file+0xc0>
  8061b8:	e0bffc17 	ldw	r2,-16(fp)
  8061bc:	1007883a 	mov	r3,r2
  8061c0:	e0bffe17 	ldw	r2,-8(fp)
  8061c4:	1885883a 	add	r2,r3,r2
  8061c8:	10800003 	ldbu	r2,0(r2)
  8061cc:	10803fcc 	andi	r2,r2,255
  8061d0:	1080201c 	xori	r2,r2,128
  8061d4:	10bfe004 	addi	r2,r2,-128
  8061d8:	1004c03a 	cmpne	r2,r2,zero
  8061dc:	10000a1e 	bne	r2,zero,806208 <alt_find_file+0xe8>
  8061e0:	e0bffd17 	ldw	r2,-12(fp)
  8061e4:	11000217 	ldw	r4,8(r2)
  8061e8:	e1bffc17 	ldw	r6,-16(fp)
  8061ec:	e17ffe17 	ldw	r5,-8(fp)
  8061f0:	08063d40 	call	8063d4 <memcmp>
  8061f4:	1004c03a 	cmpne	r2,r2,zero
  8061f8:	1000031e 	bne	r2,zero,806208 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8061fc:	e0bffd17 	ldw	r2,-12(fp)
  806200:	e0bfff15 	stw	r2,-4(fp)
  806204:	00000806 	br	806228 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  806208:	e0bffd17 	ldw	r2,-12(fp)
  80620c:	10800017 	ldw	r2,0(r2)
  806210:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806214:	00c02234 	movhi	r3,136
  806218:	18c10504 	addi	r3,r3,1044
  80621c:	e0bffd17 	ldw	r2,-12(fp)
  806220:	10ffc91e 	bne	r2,r3,806148 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806224:	e03fff15 	stw	zero,-4(fp)
  806228:	e0bfff17 	ldw	r2,-4(fp)
}
  80622c:	e037883a 	mov	sp,fp
  806230:	dfc00117 	ldw	ra,4(sp)
  806234:	df000017 	ldw	fp,0(sp)
  806238:	dec00204 	addi	sp,sp,8
  80623c:	f800283a 	ret

00806240 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  806240:	defffc04 	addi	sp,sp,-16
  806244:	df000315 	stw	fp,12(sp)
  806248:	df000304 	addi	fp,sp,12
  80624c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806250:	00bffa04 	movi	r2,-24
  806254:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806258:	e03ffe15 	stw	zero,-8(fp)
  80625c:	00001e06 	br	8062d8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  806260:	e0bffe17 	ldw	r2,-8(fp)
  806264:	00c02234 	movhi	r3,136
  806268:	18ffa504 	addi	r3,r3,-364
  80626c:	10800324 	muli	r2,r2,12
  806270:	10c5883a 	add	r2,r2,r3
  806274:	10800017 	ldw	r2,0(r2)
  806278:	1004c03a 	cmpne	r2,r2,zero
  80627c:	1000131e 	bne	r2,zero,8062cc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  806280:	e0bffe17 	ldw	r2,-8(fp)
  806284:	00c02234 	movhi	r3,136
  806288:	18ffa504 	addi	r3,r3,-364
  80628c:	10800324 	muli	r2,r2,12
  806290:	10c7883a 	add	r3,r2,r3
  806294:	e0bfff17 	ldw	r2,-4(fp)
  806298:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80629c:	00802234 	movhi	r2,136
  8062a0:	10810904 	addi	r2,r2,1060
  8062a4:	10c00017 	ldw	r3,0(r2)
  8062a8:	e0bffe17 	ldw	r2,-8(fp)
  8062ac:	1880040e 	bge	r3,r2,8062c0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8062b0:	00c02234 	movhi	r3,136
  8062b4:	18c10904 	addi	r3,r3,1060
  8062b8:	e0bffe17 	ldw	r2,-8(fp)
  8062bc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8062c0:	e0bffe17 	ldw	r2,-8(fp)
  8062c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8062c8:	00000606 	br	8062e4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8062cc:	e0bffe17 	ldw	r2,-8(fp)
  8062d0:	10800044 	addi	r2,r2,1
  8062d4:	e0bffe15 	stw	r2,-8(fp)
  8062d8:	e0bffe17 	ldw	r2,-8(fp)
  8062dc:	10800810 	cmplti	r2,r2,32
  8062e0:	103fdf1e 	bne	r2,zero,806260 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8062e4:	e0bffd17 	ldw	r2,-12(fp)
}
  8062e8:	e037883a 	mov	sp,fp
  8062ec:	df000017 	ldw	fp,0(sp)
  8062f0:	dec00104 	addi	sp,sp,4
  8062f4:	f800283a 	ret

008062f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8062f8:	defffb04 	addi	sp,sp,-20
  8062fc:	df000415 	stw	fp,16(sp)
  806300:	df000404 	addi	fp,sp,16
  806304:	e13ffe15 	stw	r4,-8(fp)
  806308:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80630c:	e0bfff17 	ldw	r2,-4(fp)
  806310:	10840070 	cmpltui	r2,r2,4097
  806314:	1000021e 	bne	r2,zero,806320 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  806318:	00840004 	movi	r2,4096
  80631c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  806320:	e0fffe17 	ldw	r3,-8(fp)
  806324:	e0bfff17 	ldw	r2,-4(fp)
  806328:	1885883a 	add	r2,r3,r2
  80632c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806330:	e0bffe17 	ldw	r2,-8(fp)
  806334:	e0bffd15 	stw	r2,-12(fp)
  806338:	00000506 	br	806350 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80633c:	e0bffd17 	ldw	r2,-12(fp)
  806340:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806344:	e0bffd17 	ldw	r2,-12(fp)
  806348:	10800804 	addi	r2,r2,32
  80634c:	e0bffd15 	stw	r2,-12(fp)
  806350:	e0fffd17 	ldw	r3,-12(fp)
  806354:	e0bffc17 	ldw	r2,-16(fp)
  806358:	18bff836 	bltu	r3,r2,80633c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80635c:	e0bffe17 	ldw	r2,-8(fp)
  806360:	108007cc 	andi	r2,r2,31
  806364:	1005003a 	cmpeq	r2,r2,zero
  806368:	1000021e 	bne	r2,zero,806374 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80636c:	e0bffd17 	ldw	r2,-12(fp)
  806370:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  806374:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  806378:	e037883a 	mov	sp,fp
  80637c:	df000017 	ldw	fp,0(sp)
  806380:	dec00104 	addi	sp,sp,4
  806384:	f800283a 	ret

00806388 <atexit>:
  806388:	200b883a 	mov	r5,r4
  80638c:	000d883a 	mov	r6,zero
  806390:	0009883a 	mov	r4,zero
  806394:	000f883a 	mov	r7,zero
  806398:	080655c1 	jmpi	80655c <__register_exitproc>

0080639c <exit>:
  80639c:	defffe04 	addi	sp,sp,-8
  8063a0:	000b883a 	mov	r5,zero
  8063a4:	dc000015 	stw	r16,0(sp)
  8063a8:	dfc00115 	stw	ra,4(sp)
  8063ac:	2021883a 	mov	r16,r4
  8063b0:	08066940 	call	806694 <__call_exitprocs>
  8063b4:	00802234 	movhi	r2,136
  8063b8:	10810f04 	addi	r2,r2,1084
  8063bc:	11000017 	ldw	r4,0(r2)
  8063c0:	20800f17 	ldw	r2,60(r4)
  8063c4:	10000126 	beq	r2,zero,8063cc <exit+0x30>
  8063c8:	103ee83a 	callr	r2
  8063cc:	8009883a 	mov	r4,r16
  8063d0:	08068840 	call	806884 <_exit>

008063d4 <memcmp>:
  8063d4:	00c000c4 	movi	r3,3
  8063d8:	1980032e 	bgeu	r3,r6,8063e8 <memcmp+0x14>
  8063dc:	2144b03a 	or	r2,r4,r5
  8063e0:	10c4703a 	and	r2,r2,r3
  8063e4:	10000f26 	beq	r2,zero,806424 <memcmp+0x50>
  8063e8:	31ffffc4 	addi	r7,r6,-1
  8063ec:	3000061e 	bne	r6,zero,806408 <memcmp+0x34>
  8063f0:	00000a06 	br	80641c <memcmp+0x48>
  8063f4:	39ffffc4 	addi	r7,r7,-1
  8063f8:	00bfffc4 	movi	r2,-1
  8063fc:	21000044 	addi	r4,r4,1
  806400:	29400044 	addi	r5,r5,1
  806404:	38800526 	beq	r7,r2,80641c <memcmp+0x48>
  806408:	20c00003 	ldbu	r3,0(r4)
  80640c:	28800003 	ldbu	r2,0(r5)
  806410:	18bff826 	beq	r3,r2,8063f4 <memcmp+0x20>
  806414:	1885c83a 	sub	r2,r3,r2
  806418:	f800283a 	ret
  80641c:	0005883a 	mov	r2,zero
  806420:	f800283a 	ret
  806424:	180f883a 	mov	r7,r3
  806428:	20c00017 	ldw	r3,0(r4)
  80642c:	28800017 	ldw	r2,0(r5)
  806430:	18bfed1e 	bne	r3,r2,8063e8 <memcmp+0x14>
  806434:	31bfff04 	addi	r6,r6,-4
  806438:	21000104 	addi	r4,r4,4
  80643c:	29400104 	addi	r5,r5,4
  806440:	39bff936 	bltu	r7,r6,806428 <memcmp+0x54>
  806444:	003fe806 	br	8063e8 <memcmp+0x14>

00806448 <memcpy>:
  806448:	01c003c4 	movi	r7,15
  80644c:	2007883a 	mov	r3,r4
  806450:	3980032e 	bgeu	r7,r6,806460 <memcpy+0x18>
  806454:	2904b03a 	or	r2,r5,r4
  806458:	108000cc 	andi	r2,r2,3
  80645c:	10000926 	beq	r2,zero,806484 <memcpy+0x3c>
  806460:	30000626 	beq	r6,zero,80647c <memcpy+0x34>
  806464:	30cd883a 	add	r6,r6,r3
  806468:	28800003 	ldbu	r2,0(r5)
  80646c:	29400044 	addi	r5,r5,1
  806470:	18800005 	stb	r2,0(r3)
  806474:	18c00044 	addi	r3,r3,1
  806478:	30fffb1e 	bne	r6,r3,806468 <memcpy+0x20>
  80647c:	2005883a 	mov	r2,r4
  806480:	f800283a 	ret
  806484:	3811883a 	mov	r8,r7
  806488:	200f883a 	mov	r7,r4
  80648c:	28c00017 	ldw	r3,0(r5)
  806490:	31bffc04 	addi	r6,r6,-16
  806494:	38c00015 	stw	r3,0(r7)
  806498:	28800117 	ldw	r2,4(r5)
  80649c:	38800115 	stw	r2,4(r7)
  8064a0:	28c00217 	ldw	r3,8(r5)
  8064a4:	38c00215 	stw	r3,8(r7)
  8064a8:	28800317 	ldw	r2,12(r5)
  8064ac:	29400404 	addi	r5,r5,16
  8064b0:	38800315 	stw	r2,12(r7)
  8064b4:	39c00404 	addi	r7,r7,16
  8064b8:	41bff436 	bltu	r8,r6,80648c <memcpy+0x44>
  8064bc:	008000c4 	movi	r2,3
  8064c0:	1180072e 	bgeu	r2,r6,8064e0 <memcpy+0x98>
  8064c4:	1007883a 	mov	r3,r2
  8064c8:	28800017 	ldw	r2,0(r5)
  8064cc:	31bfff04 	addi	r6,r6,-4
  8064d0:	29400104 	addi	r5,r5,4
  8064d4:	38800015 	stw	r2,0(r7)
  8064d8:	39c00104 	addi	r7,r7,4
  8064dc:	19bffa36 	bltu	r3,r6,8064c8 <memcpy+0x80>
  8064e0:	3807883a 	mov	r3,r7
  8064e4:	003fde06 	br	806460 <memcpy+0x18>

008064e8 <strlen>:
  8064e8:	208000cc 	andi	r2,r4,3
  8064ec:	2011883a 	mov	r8,r4
  8064f0:	1000161e 	bne	r2,zero,80654c <strlen+0x64>
  8064f4:	20c00017 	ldw	r3,0(r4)
  8064f8:	017fbff4 	movhi	r5,65279
  8064fc:	297fbfc4 	addi	r5,r5,-257
  806500:	01e02074 	movhi	r7,32897
  806504:	39e02004 	addi	r7,r7,-32640
  806508:	1945883a 	add	r2,r3,r5
  80650c:	11c4703a 	and	r2,r2,r7
  806510:	00c6303a 	nor	r3,zero,r3
  806514:	1886703a 	and	r3,r3,r2
  806518:	18000c1e 	bne	r3,zero,80654c <strlen+0x64>
  80651c:	280d883a 	mov	r6,r5
  806520:	380b883a 	mov	r5,r7
  806524:	21000104 	addi	r4,r4,4
  806528:	20800017 	ldw	r2,0(r4)
  80652c:	1187883a 	add	r3,r2,r6
  806530:	1946703a 	and	r3,r3,r5
  806534:	0084303a 	nor	r2,zero,r2
  806538:	10c4703a 	and	r2,r2,r3
  80653c:	103ff926 	beq	r2,zero,806524 <strlen+0x3c>
  806540:	20800007 	ldb	r2,0(r4)
  806544:	10000326 	beq	r2,zero,806554 <strlen+0x6c>
  806548:	21000044 	addi	r4,r4,1
  80654c:	20800007 	ldb	r2,0(r4)
  806550:	103ffd1e 	bne	r2,zero,806548 <strlen+0x60>
  806554:	2205c83a 	sub	r2,r4,r8
  806558:	f800283a 	ret

0080655c <__register_exitproc>:
  80655c:	defffa04 	addi	sp,sp,-24
  806560:	00802234 	movhi	r2,136
  806564:	10810f04 	addi	r2,r2,1084
  806568:	dc000015 	stw	r16,0(sp)
  80656c:	14000017 	ldw	r16,0(r2)
  806570:	dd000415 	stw	r20,16(sp)
  806574:	2829883a 	mov	r20,r5
  806578:	81405217 	ldw	r5,328(r16)
  80657c:	dcc00315 	stw	r19,12(sp)
  806580:	dc800215 	stw	r18,8(sp)
  806584:	dc400115 	stw	r17,4(sp)
  806588:	dfc00515 	stw	ra,20(sp)
  80658c:	2023883a 	mov	r17,r4
  806590:	3027883a 	mov	r19,r6
  806594:	3825883a 	mov	r18,r7
  806598:	28002526 	beq	r5,zero,806630 <__register_exitproc+0xd4>
  80659c:	29000117 	ldw	r4,4(r5)
  8065a0:	008007c4 	movi	r2,31
  8065a4:	11002716 	blt	r2,r4,806644 <__register_exitproc+0xe8>
  8065a8:	8800101e 	bne	r17,zero,8065ec <__register_exitproc+0x90>
  8065ac:	2105883a 	add	r2,r4,r4
  8065b0:	1085883a 	add	r2,r2,r2
  8065b4:	20c00044 	addi	r3,r4,1
  8065b8:	1145883a 	add	r2,r2,r5
  8065bc:	0009883a 	mov	r4,zero
  8065c0:	15000215 	stw	r20,8(r2)
  8065c4:	28c00115 	stw	r3,4(r5)
  8065c8:	2005883a 	mov	r2,r4
  8065cc:	dfc00517 	ldw	ra,20(sp)
  8065d0:	dd000417 	ldw	r20,16(sp)
  8065d4:	dcc00317 	ldw	r19,12(sp)
  8065d8:	dc800217 	ldw	r18,8(sp)
  8065dc:	dc400117 	ldw	r17,4(sp)
  8065e0:	dc000017 	ldw	r16,0(sp)
  8065e4:	dec00604 	addi	sp,sp,24
  8065e8:	f800283a 	ret
  8065ec:	29802204 	addi	r6,r5,136
  8065f0:	00800044 	movi	r2,1
  8065f4:	110e983a 	sll	r7,r2,r4
  8065f8:	30c04017 	ldw	r3,256(r6)
  8065fc:	2105883a 	add	r2,r4,r4
  806600:	1085883a 	add	r2,r2,r2
  806604:	1185883a 	add	r2,r2,r6
  806608:	19c6b03a 	or	r3,r3,r7
  80660c:	14802015 	stw	r18,128(r2)
  806610:	14c00015 	stw	r19,0(r2)
  806614:	00800084 	movi	r2,2
  806618:	30c04015 	stw	r3,256(r6)
  80661c:	88bfe31e 	bne	r17,r2,8065ac <__register_exitproc+0x50>
  806620:	30804117 	ldw	r2,260(r6)
  806624:	11c4b03a 	or	r2,r2,r7
  806628:	30804115 	stw	r2,260(r6)
  80662c:	003fdf06 	br	8065ac <__register_exitproc+0x50>
  806630:	00802274 	movhi	r2,137
  806634:	1082d404 	addi	r2,r2,2896
  806638:	100b883a 	mov	r5,r2
  80663c:	80805215 	stw	r2,328(r16)
  806640:	003fd606 	br	80659c <__register_exitproc+0x40>
  806644:	00800034 	movhi	r2,0
  806648:	10800004 	addi	r2,r2,0
  80664c:	1000021e 	bne	r2,zero,806658 <__register_exitproc+0xfc>
  806650:	013fffc4 	movi	r4,-1
  806654:	003fdc06 	br	8065c8 <__register_exitproc+0x6c>
  806658:	01006404 	movi	r4,400
  80665c:	103ee83a 	callr	r2
  806660:	1007883a 	mov	r3,r2
  806664:	103ffa26 	beq	r2,zero,806650 <__register_exitproc+0xf4>
  806668:	80805217 	ldw	r2,328(r16)
  80666c:	180b883a 	mov	r5,r3
  806670:	18000115 	stw	zero,4(r3)
  806674:	18800015 	stw	r2,0(r3)
  806678:	80c05215 	stw	r3,328(r16)
  80667c:	18006215 	stw	zero,392(r3)
  806680:	18006315 	stw	zero,396(r3)
  806684:	0009883a 	mov	r4,zero
  806688:	883fc826 	beq	r17,zero,8065ac <__register_exitproc+0x50>
  80668c:	003fd706 	br	8065ec <__register_exitproc+0x90>

00806690 <register_fini>:
  806690:	f800283a 	ret

00806694 <__call_exitprocs>:
  806694:	00802234 	movhi	r2,136
  806698:	10810f04 	addi	r2,r2,1084
  80669c:	10800017 	ldw	r2,0(r2)
  8066a0:	defff304 	addi	sp,sp,-52
  8066a4:	df000b15 	stw	fp,44(sp)
  8066a8:	d8800115 	stw	r2,4(sp)
  8066ac:	00800034 	movhi	r2,0
  8066b0:	10800004 	addi	r2,r2,0
  8066b4:	1005003a 	cmpeq	r2,r2,zero
  8066b8:	d8800215 	stw	r2,8(sp)
  8066bc:	d8800117 	ldw	r2,4(sp)
  8066c0:	dd400815 	stw	r21,32(sp)
  8066c4:	dd000715 	stw	r20,28(sp)
  8066c8:	10805204 	addi	r2,r2,328
  8066cc:	dfc00c15 	stw	ra,48(sp)
  8066d0:	ddc00a15 	stw	r23,40(sp)
  8066d4:	dd800915 	stw	r22,36(sp)
  8066d8:	dcc00615 	stw	r19,24(sp)
  8066dc:	dc800515 	stw	r18,20(sp)
  8066e0:	dc400415 	stw	r17,16(sp)
  8066e4:	dc000315 	stw	r16,12(sp)
  8066e8:	282b883a 	mov	r21,r5
  8066ec:	2039883a 	mov	fp,r4
  8066f0:	d8800015 	stw	r2,0(sp)
  8066f4:	2829003a 	cmpeq	r20,r5,zero
  8066f8:	d8800117 	ldw	r2,4(sp)
  8066fc:	14405217 	ldw	r17,328(r2)
  806700:	88001026 	beq	r17,zero,806744 <__call_exitprocs+0xb0>
  806704:	ddc00017 	ldw	r23,0(sp)
  806708:	88800117 	ldw	r2,4(r17)
  80670c:	8c802204 	addi	r18,r17,136
  806710:	143fffc4 	addi	r16,r2,-1
  806714:	80000916 	blt	r16,zero,80673c <__call_exitprocs+0xa8>
  806718:	05bfffc4 	movi	r22,-1
  80671c:	a000151e 	bne	r20,zero,806774 <__call_exitprocs+0xe0>
  806720:	8409883a 	add	r4,r16,r16
  806724:	2105883a 	add	r2,r4,r4
  806728:	1485883a 	add	r2,r2,r18
  80672c:	10c02017 	ldw	r3,128(r2)
  806730:	a8c01126 	beq	r21,r3,806778 <__call_exitprocs+0xe4>
  806734:	843fffc4 	addi	r16,r16,-1
  806738:	85bff81e 	bne	r16,r22,80671c <__call_exitprocs+0x88>
  80673c:	d8800217 	ldw	r2,8(sp)
  806740:	10003126 	beq	r2,zero,806808 <__call_exitprocs+0x174>
  806744:	dfc00c17 	ldw	ra,48(sp)
  806748:	df000b17 	ldw	fp,44(sp)
  80674c:	ddc00a17 	ldw	r23,40(sp)
  806750:	dd800917 	ldw	r22,36(sp)
  806754:	dd400817 	ldw	r21,32(sp)
  806758:	dd000717 	ldw	r20,28(sp)
  80675c:	dcc00617 	ldw	r19,24(sp)
  806760:	dc800517 	ldw	r18,20(sp)
  806764:	dc400417 	ldw	r17,16(sp)
  806768:	dc000317 	ldw	r16,12(sp)
  80676c:	dec00d04 	addi	sp,sp,52
  806770:	f800283a 	ret
  806774:	8409883a 	add	r4,r16,r16
  806778:	88c00117 	ldw	r3,4(r17)
  80677c:	2105883a 	add	r2,r4,r4
  806780:	1445883a 	add	r2,r2,r17
  806784:	18ffffc4 	addi	r3,r3,-1
  806788:	11800217 	ldw	r6,8(r2)
  80678c:	1c001526 	beq	r3,r16,8067e4 <__call_exitprocs+0x150>
  806790:	10000215 	stw	zero,8(r2)
  806794:	303fe726 	beq	r6,zero,806734 <__call_exitprocs+0xa0>
  806798:	00c00044 	movi	r3,1
  80679c:	1c06983a 	sll	r3,r3,r16
  8067a0:	90804017 	ldw	r2,256(r18)
  8067a4:	8cc00117 	ldw	r19,4(r17)
  8067a8:	1884703a 	and	r2,r3,r2
  8067ac:	10001426 	beq	r2,zero,806800 <__call_exitprocs+0x16c>
  8067b0:	90804117 	ldw	r2,260(r18)
  8067b4:	1884703a 	and	r2,r3,r2
  8067b8:	10000c1e 	bne	r2,zero,8067ec <__call_exitprocs+0x158>
  8067bc:	2105883a 	add	r2,r4,r4
  8067c0:	1485883a 	add	r2,r2,r18
  8067c4:	11400017 	ldw	r5,0(r2)
  8067c8:	e009883a 	mov	r4,fp
  8067cc:	303ee83a 	callr	r6
  8067d0:	88800117 	ldw	r2,4(r17)
  8067d4:	98bfc81e 	bne	r19,r2,8066f8 <__call_exitprocs+0x64>
  8067d8:	b8800017 	ldw	r2,0(r23)
  8067dc:	147fd526 	beq	r2,r17,806734 <__call_exitprocs+0xa0>
  8067e0:	003fc506 	br	8066f8 <__call_exitprocs+0x64>
  8067e4:	8c000115 	stw	r16,4(r17)
  8067e8:	003fea06 	br	806794 <__call_exitprocs+0x100>
  8067ec:	2105883a 	add	r2,r4,r4
  8067f0:	1485883a 	add	r2,r2,r18
  8067f4:	11000017 	ldw	r4,0(r2)
  8067f8:	303ee83a 	callr	r6
  8067fc:	003ff406 	br	8067d0 <__call_exitprocs+0x13c>
  806800:	303ee83a 	callr	r6
  806804:	003ff206 	br	8067d0 <__call_exitprocs+0x13c>
  806808:	88800117 	ldw	r2,4(r17)
  80680c:	1000081e 	bne	r2,zero,806830 <__call_exitprocs+0x19c>
  806810:	89000017 	ldw	r4,0(r17)
  806814:	20000726 	beq	r4,zero,806834 <__call_exitprocs+0x1a0>
  806818:	b9000015 	stw	r4,0(r23)
  80681c:	8809883a 	mov	r4,r17
  806820:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  806824:	bc400017 	ldw	r17,0(r23)
  806828:	883fb71e 	bne	r17,zero,806708 <__call_exitprocs+0x74>
  80682c:	003fc506 	br	806744 <__call_exitprocs+0xb0>
  806830:	89000017 	ldw	r4,0(r17)
  806834:	882f883a 	mov	r23,r17
  806838:	2023883a 	mov	r17,r4
  80683c:	883fb21e 	bne	r17,zero,806708 <__call_exitprocs+0x74>
  806840:	003fc006 	br	806744 <__call_exitprocs+0xb0>

00806844 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  806844:	defffd04 	addi	sp,sp,-12
  806848:	df000215 	stw	fp,8(sp)
  80684c:	df000204 	addi	fp,sp,8
  806850:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  806854:	e0bfff17 	ldw	r2,-4(fp)
  806858:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80685c:	e0bffe17 	ldw	r2,-8(fp)
  806860:	1005003a 	cmpeq	r2,r2,zero
  806864:	1000021e 	bne	r2,zero,806870 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  806868:	002af070 	cmpltui	zero,zero,43969
  80686c:	00000106 	br	806874 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  806870:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  806874:	e037883a 	mov	sp,fp
  806878:	df000017 	ldw	fp,0(sp)
  80687c:	dec00104 	addi	sp,sp,4
  806880:	f800283a 	ret

00806884 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806884:	defffd04 	addi	sp,sp,-12
  806888:	dfc00215 	stw	ra,8(sp)
  80688c:	df000115 	stw	fp,4(sp)
  806890:	df000104 	addi	fp,sp,4
  806894:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  806898:	e13fff17 	ldw	r4,-4(fp)
  80689c:	08068440 	call	806844 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8068a0:	003fff06 	br	8068a0 <_exit+0x1c>
  8068a4:	00806690 	cmplti	r2,zero,410
